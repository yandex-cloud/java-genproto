// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yandex/cloud/mdb/mysql/v1/config/mysql8_0.proto

package yandex.cloud.api.mdb.mysql.v1.config;

public final class Mysql80 {
  private Mysql80() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface MysqlConfig8_0OrBuilder extends
      // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Size of the InnoDB buffer pool used for caching table and index data.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
     * @return Whether the innodbBufferPoolSize field is set.
     */
    boolean hasInnodbBufferPoolSize();
    /**
     * <pre>
     * Size of the InnoDB buffer pool used for caching table and index data.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
     * @return The innodbBufferPoolSize.
     */
    com.google.protobuf.Int64Value getInnodbBufferPoolSize();
    /**
     * <pre>
     * Size of the InnoDB buffer pool used for caching table and index data.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getInnodbBufferPoolSizeOrBuilder();

    /**
     * <pre>
     * The maximum permitted number of simultaneous client connections.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-16384"];</code>
     * @return Whether the maxConnections field is set.
     */
    boolean hasMaxConnections();
    /**
     * <pre>
     * The maximum permitted number of simultaneous client connections.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-16384"];</code>
     * @return The maxConnections.
     */
    com.google.protobuf.Int64Value getMaxConnections();
    /**
     * <pre>
     * The maximum permitted number of simultaneous client connections.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-16384"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxConnectionsOrBuilder();

    /**
     * <pre>
     * Time that it takes to process a query before it is considered slow.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time) for details.
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
     * @return Whether the longQueryTime field is set.
     */
    boolean hasLongQueryTime();
    /**
     * <pre>
     * Time that it takes to process a query before it is considered slow.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time) for details.
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
     * @return The longQueryTime.
     */
    com.google.protobuf.DoubleValue getLongQueryTime();
    /**
     * <pre>
     * Time that it takes to process a query before it is considered slow.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time) for details.
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
     */
    com.google.protobuf.DoubleValueOrBuilder getLongQueryTimeOrBuilder();

    /**
     * <pre>
     * Enable writing of general query log of MySQL.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue general_log = 4;</code>
     * @return Whether the generalLog field is set.
     */
    boolean hasGeneralLog();
    /**
     * <pre>
     * Enable writing of general query log of MySQL.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue general_log = 4;</code>
     * @return The generalLog.
     */
    com.google.protobuf.BoolValue getGeneralLog();
    /**
     * <pre>
     * Enable writing of general query log of MySQL.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue general_log = 4;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getGeneralLogOrBuilder();

    /**
     * <pre>
     * Enable writing of audit log of MySQL.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue audit_log = 5;</code>
     * @return Whether the auditLog field is set.
     */
    boolean hasAuditLog();
    /**
     * <pre>
     * Enable writing of audit log of MySQL.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue audit_log = 5;</code>
     * @return The auditLog.
     */
    com.google.protobuf.BoolValue getAuditLog();
    /**
     * <pre>
     * Enable writing of audit log of MySQL.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue audit_log = 5;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getAuditLogOrBuilder();

    /**
     * <pre>
     * Server SQL mode of MySQL.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting) for details.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
     * @return A list containing the sqlMode.
     */
    java.util.List<yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode> getSqlModeList();
    /**
     * <pre>
     * Server SQL mode of MySQL.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting) for details.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
     * @return The count of sqlMode.
     */
    int getSqlModeCount();
    /**
     * <pre>
     * Server SQL mode of MySQL.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting) for details.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
     * @param index The index of the element to return.
     * @return The sqlMode at the given index.
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode getSqlMode(int index);
    /**
     * <pre>
     * Server SQL mode of MySQL.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting) for details.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
     * @return A list containing the enum numeric values on the wire for sqlMode.
     */
    java.util.List<java.lang.Integer>
    getSqlModeValueList();
    /**
     * <pre>
     * Server SQL mode of MySQL.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting) for details.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of sqlMode at the given index.
     */
    int getSqlModeValue(int index);

    /**
     * <pre>
     * The maximum size in bytes of one packet.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-1073741824"];</code>
     * @return Whether the maxAllowedPacket field is set.
     */
    boolean hasMaxAllowedPacket();
    /**
     * <pre>
     * The maximum size in bytes of one packet.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-1073741824"];</code>
     * @return The maxAllowedPacket.
     */
    com.google.protobuf.Int64Value getMaxAllowedPacket();
    /**
     * <pre>
     * The maximum size in bytes of one packet.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-1073741824"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxAllowedPacketOrBuilder();

    /**
     * <pre>
     * Authentication plugin used in the managed MySQL cluster.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_default_authentication_plugin) for details.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuthPlugin default_authentication_plugin = 8;</code>
     * @return The enum numeric value on the wire for defaultAuthenticationPlugin.
     */
    int getDefaultAuthenticationPluginValue();
    /**
     * <pre>
     * Authentication plugin used in the managed MySQL cluster.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_default_authentication_plugin) for details.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuthPlugin default_authentication_plugin = 8;</code>
     * @return The defaultAuthenticationPlugin.
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuthPlugin getDefaultAuthenticationPlugin();

    /**
     * <pre>
     * Transaction log flush behaviour.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
     * @return Whether the innodbFlushLogAtTrxCommit field is set.
     */
    boolean hasInnodbFlushLogAtTrxCommit();
    /**
     * <pre>
     * Transaction log flush behaviour.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
     * @return The innodbFlushLogAtTrxCommit.
     */
    com.google.protobuf.Int64Value getInnodbFlushLogAtTrxCommit();
    /**
     * <pre>
     * Transaction log flush behaviour.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getInnodbFlushLogAtTrxCommitOrBuilder();

    /**
     * <pre>
     * Max time in seconds for a transaction to wait for a row lock.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
     * @return Whether the innodbLockWaitTimeout field is set.
     */
    boolean hasInnodbLockWaitTimeout();
    /**
     * <pre>
     * Max time in seconds for a transaction to wait for a row lock.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
     * @return The innodbLockWaitTimeout.
     */
    com.google.protobuf.Int64Value getInnodbLockWaitTimeout();
    /**
     * <pre>
     * Max time in seconds for a transaction to wait for a row lock.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getInnodbLockWaitTimeoutOrBuilder();

    /**
     * <pre>
     * Default transaction isolation level.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_transaction_isolation) for details.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.TransactionIsolation transaction_isolation = 11;</code>
     * @return The enum numeric value on the wire for transactionIsolation.
     */
    int getTransactionIsolationValue();
    /**
     * <pre>
     * Default transaction isolation level.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_transaction_isolation) for details.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.TransactionIsolation transaction_isolation = 11;</code>
     * @return The transactionIsolation.
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.TransactionIsolation getTransactionIsolation();

    /**
     * <pre>
     * Print information about deadlocks in error log.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
     * @return Whether the innodbPrintAllDeadlocks field is set.
     */
    boolean hasInnodbPrintAllDeadlocks();
    /**
     * <pre>
     * Print information about deadlocks in error log.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
     * @return The innodbPrintAllDeadlocks.
     */
    com.google.protobuf.BoolValue getInnodbPrintAllDeadlocks();
    /**
     * <pre>
     * Print information about deadlocks in error log.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getInnodbPrintAllDeadlocksOrBuilder();

    /**
     * <pre>
     * The number of seconds to wait for more data from a connection before aborting the read.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_read_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
     * @return Whether the netReadTimeout field is set.
     */
    boolean hasNetReadTimeout();
    /**
     * <pre>
     * The number of seconds to wait for more data from a connection before aborting the read.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_read_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
     * @return The netReadTimeout.
     */
    com.google.protobuf.Int64Value getNetReadTimeout();
    /**
     * <pre>
     * The number of seconds to wait for more data from a connection before aborting the read.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_read_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getNetReadTimeoutOrBuilder();

    /**
     * <pre>
     * The number of seconds to wait for a block to be written to a connection before aborting the write.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_write_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
     * @return Whether the netWriteTimeout field is set.
     */
    boolean hasNetWriteTimeout();
    /**
     * <pre>
     * The number of seconds to wait for a block to be written to a connection before aborting the write.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_write_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
     * @return The netWriteTimeout.
     */
    com.google.protobuf.Int64Value getNetWriteTimeout();
    /**
     * <pre>
     * The number of seconds to wait for a block to be written to a connection before aborting the write.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_write_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getNetWriteTimeoutOrBuilder();

    /**
     * <pre>
     * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_group_concat_max_len) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
     * @return Whether the groupConcatMaxLen field is set.
     */
    boolean hasGroupConcatMaxLen();
    /**
     * <pre>
     * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_group_concat_max_len) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
     * @return The groupConcatMaxLen.
     */
    com.google.protobuf.Int64Value getGroupConcatMaxLen();
    /**
     * <pre>
     * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_group_concat_max_len) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getGroupConcatMaxLenOrBuilder();

    /**
     * <pre>
     * The maximum size of internal in-memory temporary tables.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmp_table_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-536870912"];</code>
     * @return Whether the tmpTableSize field is set.
     */
    boolean hasTmpTableSize();
    /**
     * <pre>
     * The maximum size of internal in-memory temporary tables.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmp_table_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-536870912"];</code>
     * @return The tmpTableSize.
     */
    com.google.protobuf.Int64Value getTmpTableSize();
    /**
     * <pre>
     * The maximum size of internal in-memory temporary tables.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmp_table_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-536870912"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getTmpTableSizeOrBuilder();

    /**
     * <pre>
     * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_heap_table_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "16384-536870912"];</code>
     * @return Whether the maxHeapTableSize field is set.
     */
    boolean hasMaxHeapTableSize();
    /**
     * <pre>
     * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_heap_table_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "16384-536870912"];</code>
     * @return The maxHeapTableSize.
     */
    com.google.protobuf.Int64Value getMaxHeapTableSize();
    /**
     * <pre>
     * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_heap_table_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "16384-536870912"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxHeapTableSizeOrBuilder();

    /**
     * <pre>
     * The servers default time zone.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-options.html#option_mysqld_default-time-zone) for details.
     * </pre>
     *
     * <code>string default_time_zone = 18;</code>
     * @return The defaultTimeZone.
     */
    java.lang.String getDefaultTimeZone();
    /**
     * <pre>
     * The servers default time zone.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-options.html#option_mysqld_default-time-zone) for details.
     * </pre>
     *
     * <code>string default_time_zone = 18;</code>
     * @return The bytes for defaultTimeZone.
     */
    com.google.protobuf.ByteString
        getDefaultTimeZoneBytes();

    /**
     * <pre>
     * The servers default character set.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_character_set_server) for details.
     * </pre>
     *
     * <code>string character_set_server = 19;</code>
     * @return The characterSetServer.
     */
    java.lang.String getCharacterSetServer();
    /**
     * <pre>
     * The servers default character set.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_character_set_server) for details.
     * </pre>
     *
     * <code>string character_set_server = 19;</code>
     * @return The bytes for characterSetServer.
     */
    com.google.protobuf.ByteString
        getCharacterSetServerBytes();

    /**
     * <pre>
     * The server default collation.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_collation_server) for details.
     * </pre>
     *
     * <code>string collation_server = 20;</code>
     * @return The collationServer.
     */
    java.lang.String getCollationServer();
    /**
     * <pre>
     * The server default collation.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_collation_server) for details.
     * </pre>
     *
     * <code>string collation_server = 20;</code>
     * @return The bytes for collationServer.
     */
    com.google.protobuf.ByteString
        getCollationServerBytes();

    /**
     * <pre>
     * Enables InnoDB adaptive hash index.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_adaptive_hash_index) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_adaptive_hash_index = 21;</code>
     * @return Whether the innodbAdaptiveHashIndex field is set.
     */
    boolean hasInnodbAdaptiveHashIndex();
    /**
     * <pre>
     * Enables InnoDB adaptive hash index.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_adaptive_hash_index) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_adaptive_hash_index = 21;</code>
     * @return The innodbAdaptiveHashIndex.
     */
    com.google.protobuf.BoolValue getInnodbAdaptiveHashIndex();
    /**
     * <pre>
     * Enables InnoDB adaptive hash index.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_adaptive_hash_index) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_adaptive_hash_index = 21;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getInnodbAdaptiveHashIndexOrBuilder();

    /**
     * <pre>
     * Enables the NUMA interleave memory policy for allocation of the InnoDB buffer pool.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_numa_interleave) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_numa_interleave = 22;</code>
     * @return Whether the innodbNumaInterleave field is set.
     */
    boolean hasInnodbNumaInterleave();
    /**
     * <pre>
     * Enables the NUMA interleave memory policy for allocation of the InnoDB buffer pool.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_numa_interleave) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_numa_interleave = 22;</code>
     * @return The innodbNumaInterleave.
     */
    com.google.protobuf.BoolValue getInnodbNumaInterleave();
    /**
     * <pre>
     * Enables the NUMA interleave memory policy for allocation of the InnoDB buffer pool.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_numa_interleave) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_numa_interleave = 22;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getInnodbNumaInterleaveOrBuilder();

    /**
     * <pre>
     * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_buffer_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_log_buffer_size = 23 [(.yandex.cloud.value) = "1048576-268435456"];</code>
     * @return Whether the innodbLogBufferSize field is set.
     */
    boolean hasInnodbLogBufferSize();
    /**
     * <pre>
     * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_buffer_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_log_buffer_size = 23 [(.yandex.cloud.value) = "1048576-268435456"];</code>
     * @return The innodbLogBufferSize.
     */
    com.google.protobuf.Int64Value getInnodbLogBufferSize();
    /**
     * <pre>
     * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_buffer_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_log_buffer_size = 23 [(.yandex.cloud.value) = "1048576-268435456"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getInnodbLogBufferSizeOrBuilder();

    /**
     * <pre>
     * The size in bytes of the single InnoDB Redo log file.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_file_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_log_file_size = 24 [(.yandex.cloud.value) = "268435456-4294967296"];</code>
     * @return Whether the innodbLogFileSize field is set.
     */
    boolean hasInnodbLogFileSize();
    /**
     * <pre>
     * The size in bytes of the single InnoDB Redo log file.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_file_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_log_file_size = 24 [(.yandex.cloud.value) = "268435456-4294967296"];</code>
     * @return The innodbLogFileSize.
     */
    com.google.protobuf.Int64Value getInnodbLogFileSize();
    /**
     * <pre>
     * The size in bytes of the single InnoDB Redo log file.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_file_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_log_file_size = 24 [(.yandex.cloud.value) = "268435456-4294967296"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getInnodbLogFileSizeOrBuilder();

    /**
     * <pre>
     * Limits IO available for InnoDB background tasks.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_io_capacity = 25 [(.yandex.cloud.value) = "100-100000"];</code>
     * @return Whether the innodbIoCapacity field is set.
     */
    boolean hasInnodbIoCapacity();
    /**
     * <pre>
     * Limits IO available for InnoDB background tasks.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_io_capacity = 25 [(.yandex.cloud.value) = "100-100000"];</code>
     * @return The innodbIoCapacity.
     */
    com.google.protobuf.Int64Value getInnodbIoCapacity();
    /**
     * <pre>
     * Limits IO available for InnoDB background tasks.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_io_capacity = 25 [(.yandex.cloud.value) = "100-100000"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getInnodbIoCapacityOrBuilder();

    /**
     * <pre>
     * Limits IO available for InnoDB background tasks.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity_max) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_io_capacity_max = 26 [(.yandex.cloud.value) = "100-100000"];</code>
     * @return Whether the innodbIoCapacityMax field is set.
     */
    boolean hasInnodbIoCapacityMax();
    /**
     * <pre>
     * Limits IO available for InnoDB background tasks.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity_max) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_io_capacity_max = 26 [(.yandex.cloud.value) = "100-100000"];</code>
     * @return The innodbIoCapacityMax.
     */
    com.google.protobuf.Int64Value getInnodbIoCapacityMax();
    /**
     * <pre>
     * Limits IO available for InnoDB background tasks.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity_max) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_io_capacity_max = 26 [(.yandex.cloud.value) = "100-100000"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getInnodbIoCapacityMaxOrBuilder();

    /**
     * <pre>
     * The number of I/O threads for read operations in InnoDB.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_read_io_threads) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_read_io_threads = 27 [(.yandex.cloud.value) = "1-16"];</code>
     * @return Whether the innodbReadIoThreads field is set.
     */
    boolean hasInnodbReadIoThreads();
    /**
     * <pre>
     * The number of I/O threads for read operations in InnoDB.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_read_io_threads) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_read_io_threads = 27 [(.yandex.cloud.value) = "1-16"];</code>
     * @return The innodbReadIoThreads.
     */
    com.google.protobuf.Int64Value getInnodbReadIoThreads();
    /**
     * <pre>
     * The number of I/O threads for read operations in InnoDB.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_read_io_threads) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_read_io_threads = 27 [(.yandex.cloud.value) = "1-16"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getInnodbReadIoThreadsOrBuilder();

    /**
     * <pre>
     * The number of I/O threads for write operations in InnoDB.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_write_io_threads) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_write_io_threads = 28 [(.yandex.cloud.value) = "1-16"];</code>
     * @return Whether the innodbWriteIoThreads field is set.
     */
    boolean hasInnodbWriteIoThreads();
    /**
     * <pre>
     * The number of I/O threads for write operations in InnoDB.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_write_io_threads) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_write_io_threads = 28 [(.yandex.cloud.value) = "1-16"];</code>
     * @return The innodbWriteIoThreads.
     */
    com.google.protobuf.Int64Value getInnodbWriteIoThreads();
    /**
     * <pre>
     * The number of I/O threads for write operations in InnoDB.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_write_io_threads) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_write_io_threads = 28 [(.yandex.cloud.value) = "1-16"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getInnodbWriteIoThreadsOrBuilder();

    /**
     * <pre>
     * The number of background threads devoted to the InnoDB purge operation.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_purge_threads) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_purge_threads = 29 [(.yandex.cloud.value) = "1-16"];</code>
     * @return Whether the innodbPurgeThreads field is set.
     */
    boolean hasInnodbPurgeThreads();
    /**
     * <pre>
     * The number of background threads devoted to the InnoDB purge operation.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_purge_threads) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_purge_threads = 29 [(.yandex.cloud.value) = "1-16"];</code>
     * @return The innodbPurgeThreads.
     */
    com.google.protobuf.Int64Value getInnodbPurgeThreads();
    /**
     * <pre>
     * The number of background threads devoted to the InnoDB purge operation.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_purge_threads) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_purge_threads = 29 [(.yandex.cloud.value) = "1-16"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getInnodbPurgeThreadsOrBuilder();

    /**
     * <pre>
     * Defines the maximum number of threads permitted inside of InnoDB.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_thread_concurrency) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_thread_concurrency = 30 [(.yandex.cloud.value) = "0-1000"];</code>
     * @return Whether the innodbThreadConcurrency field is set.
     */
    boolean hasInnodbThreadConcurrency();
    /**
     * <pre>
     * Defines the maximum number of threads permitted inside of InnoDB.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_thread_concurrency) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_thread_concurrency = 30 [(.yandex.cloud.value) = "0-1000"];</code>
     * @return The innodbThreadConcurrency.
     */
    com.google.protobuf.Int64Value getInnodbThreadConcurrency();
    /**
     * <pre>
     * Defines the maximum number of threads permitted inside of InnoDB.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_thread_concurrency) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_thread_concurrency = 30 [(.yandex.cloud.value) = "0-1000"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getInnodbThreadConcurrencyOrBuilder();

    /**
     * <pre>
     * Limits the max size of InnoDB temp tablespace.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_temp_data_file_path) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_temp_data_file_max_size = 31 [(.yandex.cloud.value) = "0-107374182400"];</code>
     * @return Whether the innodbTempDataFileMaxSize field is set.
     */
    boolean hasInnodbTempDataFileMaxSize();
    /**
     * <pre>
     * Limits the max size of InnoDB temp tablespace.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_temp_data_file_path) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_temp_data_file_max_size = 31 [(.yandex.cloud.value) = "0-107374182400"];</code>
     * @return The innodbTempDataFileMaxSize.
     */
    com.google.protobuf.Int64Value getInnodbTempDataFileMaxSize();
    /**
     * <pre>
     * Limits the max size of InnoDB temp tablespace.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_temp_data_file_path) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_temp_data_file_max_size = 31 [(.yandex.cloud.value) = "0-107374182400"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getInnodbTempDataFileMaxSizeOrBuilder();

    /**
     * <pre>
     * How many threads the server should cache for reuse.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_cache_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value thread_cache_size = 32 [(.yandex.cloud.value) = "10-10000"];</code>
     * @return Whether the threadCacheSize field is set.
     */
    boolean hasThreadCacheSize();
    /**
     * <pre>
     * How many threads the server should cache for reuse.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_cache_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value thread_cache_size = 32 [(.yandex.cloud.value) = "10-10000"];</code>
     * @return The threadCacheSize.
     */
    com.google.protobuf.Int64Value getThreadCacheSize();
    /**
     * <pre>
     * How many threads the server should cache for reuse.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_cache_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value thread_cache_size = 32 [(.yandex.cloud.value) = "10-10000"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getThreadCacheSizeOrBuilder();

    /**
     * <pre>
     * The stack size for each thread. The default is large enough for normal operation.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_stack) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value thread_stack = 33 [(.yandex.cloud.value) = "131072-16777216"];</code>
     * @return Whether the threadStack field is set.
     */
    boolean hasThreadStack();
    /**
     * <pre>
     * The stack size for each thread. The default is large enough for normal operation.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_stack) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value thread_stack = 33 [(.yandex.cloud.value) = "131072-16777216"];</code>
     * @return The threadStack.
     */
    com.google.protobuf.Int64Value getThreadStack();
    /**
     * <pre>
     * The stack size for each thread. The default is large enough for normal operation.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_stack) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value thread_stack = 33 [(.yandex.cloud.value) = "131072-16777216"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getThreadStackOrBuilder();

    /**
     * <pre>
     * The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_join_buffer_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value join_buffer_size = 34 [(.yandex.cloud.value) = "1024-16777216"];</code>
     * @return Whether the joinBufferSize field is set.
     */
    boolean hasJoinBufferSize();
    /**
     * <pre>
     * The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_join_buffer_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value join_buffer_size = 34 [(.yandex.cloud.value) = "1024-16777216"];</code>
     * @return The joinBufferSize.
     */
    com.google.protobuf.Int64Value getJoinBufferSize();
    /**
     * <pre>
     * The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_join_buffer_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value join_buffer_size = 34 [(.yandex.cloud.value) = "1024-16777216"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getJoinBufferSizeOrBuilder();

    /**
     * <pre>
     * Each session that must perform a sort allocates a buffer of this size.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sort_buffer_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value sort_buffer_size = 35 [(.yandex.cloud.value) = "1024-16777216"];</code>
     * @return Whether the sortBufferSize field is set.
     */
    boolean hasSortBufferSize();
    /**
     * <pre>
     * Each session that must perform a sort allocates a buffer of this size.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sort_buffer_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value sort_buffer_size = 35 [(.yandex.cloud.value) = "1024-16777216"];</code>
     * @return The sortBufferSize.
     */
    com.google.protobuf.Int64Value getSortBufferSize();
    /**
     * <pre>
     * Each session that must perform a sort allocates a buffer of this size.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sort_buffer_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value sort_buffer_size = 35 [(.yandex.cloud.value) = "1024-16777216"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getSortBufferSizeOrBuilder();

    /**
     * <pre>
     * The number of table definitions that can be stored in the definition cache.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_definition_cache) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value table_definition_cache = 36 [(.yandex.cloud.value) = "400-524288"];</code>
     * @return Whether the tableDefinitionCache field is set.
     */
    boolean hasTableDefinitionCache();
    /**
     * <pre>
     * The number of table definitions that can be stored in the definition cache.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_definition_cache) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value table_definition_cache = 36 [(.yandex.cloud.value) = "400-524288"];</code>
     * @return The tableDefinitionCache.
     */
    com.google.protobuf.Int64Value getTableDefinitionCache();
    /**
     * <pre>
     * The number of table definitions that can be stored in the definition cache.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_definition_cache) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value table_definition_cache = 36 [(.yandex.cloud.value) = "400-524288"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getTableDefinitionCacheOrBuilder();

    /**
     * <pre>
     * The number of open tables for all threads.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value table_open_cache = 37 [(.yandex.cloud.value) = "400-524288"];</code>
     * @return Whether the tableOpenCache field is set.
     */
    boolean hasTableOpenCache();
    /**
     * <pre>
     * The number of open tables for all threads.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value table_open_cache = 37 [(.yandex.cloud.value) = "400-524288"];</code>
     * @return The tableOpenCache.
     */
    com.google.protobuf.Int64Value getTableOpenCache();
    /**
     * <pre>
     * The number of open tables for all threads.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value table_open_cache = 37 [(.yandex.cloud.value) = "400-524288"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getTableOpenCacheOrBuilder();

    /**
     * <pre>
     * The number of open tables cache instances.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache_instances) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value table_open_cache_instances = 38 [(.yandex.cloud.value) = "1-32"];</code>
     * @return Whether the tableOpenCacheInstances field is set.
     */
    boolean hasTableOpenCacheInstances();
    /**
     * <pre>
     * The number of open tables cache instances.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache_instances) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value table_open_cache_instances = 38 [(.yandex.cloud.value) = "1-32"];</code>
     * @return The tableOpenCacheInstances.
     */
    com.google.protobuf.Int64Value getTableOpenCacheInstances();
    /**
     * <pre>
     * The number of open tables cache instances.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache_instances) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value table_open_cache_instances = 38 [(.yandex.cloud.value) = "1-32"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getTableOpenCacheInstancesOrBuilder();

    /**
     * <pre>
     * Determines whether the server enables certain nonstandard behaviors for default values and NULL-value handling in TIMESTAMP columns.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue explicit_defaults_for_timestamp = 39;</code>
     * @return Whether the explicitDefaultsForTimestamp field is set.
     */
    boolean hasExplicitDefaultsForTimestamp();
    /**
     * <pre>
     * Determines whether the server enables certain nonstandard behaviors for default values and NULL-value handling in TIMESTAMP columns.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue explicit_defaults_for_timestamp = 39;</code>
     * @return The explicitDefaultsForTimestamp.
     */
    com.google.protobuf.BoolValue getExplicitDefaultsForTimestamp();
    /**
     * <pre>
     * Determines whether the server enables certain nonstandard behaviors for default values and NULL-value handling in TIMESTAMP columns.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue explicit_defaults_for_timestamp = 39;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getExplicitDefaultsForTimestampOrBuilder();

    /**
     * <pre>
     * Can be used to control the operation of AUTO_INCREMENT columns.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_increment) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value auto_increment_increment = 40 [(.yandex.cloud.value) = "1-65535"];</code>
     * @return Whether the autoIncrementIncrement field is set.
     */
    boolean hasAutoIncrementIncrement();
    /**
     * <pre>
     * Can be used to control the operation of AUTO_INCREMENT columns.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_increment) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value auto_increment_increment = 40 [(.yandex.cloud.value) = "1-65535"];</code>
     * @return The autoIncrementIncrement.
     */
    com.google.protobuf.Int64Value getAutoIncrementIncrement();
    /**
     * <pre>
     * Can be used to control the operation of AUTO_INCREMENT columns.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_increment) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value auto_increment_increment = 40 [(.yandex.cloud.value) = "1-65535"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getAutoIncrementIncrementOrBuilder();

    /**
     * <pre>
     * Can be used to control the operation of AUTO_INCREMENT columns.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_offset) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value auto_increment_offset = 41 [(.yandex.cloud.value) = "1-65535"];</code>
     * @return Whether the autoIncrementOffset field is set.
     */
    boolean hasAutoIncrementOffset();
    /**
     * <pre>
     * Can be used to control the operation of AUTO_INCREMENT columns.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_offset) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value auto_increment_offset = 41 [(.yandex.cloud.value) = "1-65535"];</code>
     * @return The autoIncrementOffset.
     */
    com.google.protobuf.Int64Value getAutoIncrementOffset();
    /**
     * <pre>
     * Can be used to control the operation of AUTO_INCREMENT columns.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_offset) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value auto_increment_offset = 41 [(.yandex.cloud.value) = "1-65535"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getAutoIncrementOffsetOrBuilder();

    /**
     * <pre>
     * Controls how often the MySQL server synchronizes the binary log to disk.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_sync_binlog) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value sync_binlog = 42 [(.yandex.cloud.value) = "0-4096"];</code>
     * @return Whether the syncBinlog field is set.
     */
    boolean hasSyncBinlog();
    /**
     * <pre>
     * Controls how often the MySQL server synchronizes the binary log to disk.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_sync_binlog) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value sync_binlog = 42 [(.yandex.cloud.value) = "0-4096"];</code>
     * @return The syncBinlog.
     */
    com.google.protobuf.Int64Value getSyncBinlog();
    /**
     * <pre>
     * Controls how often the MySQL server synchronizes the binary log to disk.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_sync_binlog) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value sync_binlog = 42 [(.yandex.cloud.value) = "0-4096"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getSyncBinlogOrBuilder();

    /**
     * <pre>
     * The size of the cache to hold changes to the binary log during a transaction.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_cache_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value binlog_cache_size = 43 [(.yandex.cloud.value) = "4096-67108864"];</code>
     * @return Whether the binlogCacheSize field is set.
     */
    boolean hasBinlogCacheSize();
    /**
     * <pre>
     * The size of the cache to hold changes to the binary log during a transaction.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_cache_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value binlog_cache_size = 43 [(.yandex.cloud.value) = "4096-67108864"];</code>
     * @return The binlogCacheSize.
     */
    com.google.protobuf.Int64Value getBinlogCacheSize();
    /**
     * <pre>
     * The size of the cache to hold changes to the binary log during a transaction.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_cache_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value binlog_cache_size = 43 [(.yandex.cloud.value) = "4096-67108864"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getBinlogCacheSizeOrBuilder();

    /**
     * <pre>
     * Controls how many microseconds the binary log commit waits before synchronizing the binary log file to disk.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_group_commit_sync_delay) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value binlog_group_commit_sync_delay = 44 [(.yandex.cloud.value) = "0-50000"];</code>
     * @return Whether the binlogGroupCommitSyncDelay field is set.
     */
    boolean hasBinlogGroupCommitSyncDelay();
    /**
     * <pre>
     * Controls how many microseconds the binary log commit waits before synchronizing the binary log file to disk.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_group_commit_sync_delay) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value binlog_group_commit_sync_delay = 44 [(.yandex.cloud.value) = "0-50000"];</code>
     * @return The binlogGroupCommitSyncDelay.
     */
    com.google.protobuf.Int64Value getBinlogGroupCommitSyncDelay();
    /**
     * <pre>
     * Controls how many microseconds the binary log commit waits before synchronizing the binary log file to disk.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_group_commit_sync_delay) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value binlog_group_commit_sync_delay = 44 [(.yandex.cloud.value) = "0-50000"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getBinlogGroupCommitSyncDelayOrBuilder();

    /**
     * <pre>
     * For MySQL row-based replication, this variable determines how row images are written to the binary log.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_image) for details.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.BinlogRowImage binlog_row_image = 45;</code>
     * @return The enum numeric value on the wire for binlogRowImage.
     */
    int getBinlogRowImageValue();
    /**
     * <pre>
     * For MySQL row-based replication, this variable determines how row images are written to the binary log.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_image) for details.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.BinlogRowImage binlog_row_image = 45;</code>
     * @return The binlogRowImage.
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.BinlogRowImage getBinlogRowImage();

    /**
     * <pre>
     * When enabled, it causes the server to write informational log events such as row query log events into its binary log.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_rows_query_log_events) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue binlog_rows_query_log_events = 46;</code>
     * @return Whether the binlogRowsQueryLogEvents field is set.
     */
    boolean hasBinlogRowsQueryLogEvents();
    /**
     * <pre>
     * When enabled, it causes the server to write informational log events such as row query log events into its binary log.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_rows_query_log_events) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue binlog_rows_query_log_events = 46;</code>
     * @return The binlogRowsQueryLogEvents.
     */
    com.google.protobuf.BoolValue getBinlogRowsQueryLogEvents();
    /**
     * <pre>
     * When enabled, it causes the server to write informational log events such as row query log events into its binary log.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_rows_query_log_events) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue binlog_rows_query_log_events = 46;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getBinlogRowsQueryLogEventsOrBuilder();

    /**
     * <pre>
     * The number of replica acknowledgments the source must receive per transaction before proceeding.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_rpl_semi_sync_master_wait_for_slave_count) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value rpl_semi_sync_master_wait_for_slave_count = 47 [(.yandex.cloud.value) = "1-2"];</code>
     * @return Whether the rplSemiSyncMasterWaitForSlaveCount field is set.
     */
    boolean hasRplSemiSyncMasterWaitForSlaveCount();
    /**
     * <pre>
     * The number of replica acknowledgments the source must receive per transaction before proceeding.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_rpl_semi_sync_master_wait_for_slave_count) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value rpl_semi_sync_master_wait_for_slave_count = 47 [(.yandex.cloud.value) = "1-2"];</code>
     * @return The rplSemiSyncMasterWaitForSlaveCount.
     */
    com.google.protobuf.Int64Value getRplSemiSyncMasterWaitForSlaveCount();
    /**
     * <pre>
     * The number of replica acknowledgments the source must receive per transaction before proceeding.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_rpl_semi_sync_master_wait_for_slave_count) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value rpl_semi_sync_master_wait_for_slave_count = 47 [(.yandex.cloud.value) = "1-2"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getRplSemiSyncMasterWaitForSlaveCountOrBuilder();

    /**
     * <pre>
     * When using a multi-threaded replica, this variable specifies the policy used to decide which transactions are allowed to execute in parallel on the replica.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_slave_parallel_type) for details.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SlaveParallelType slave_parallel_type = 48;</code>
     * @return The enum numeric value on the wire for slaveParallelType.
     */
    int getSlaveParallelTypeValue();
    /**
     * <pre>
     * When using a multi-threaded replica, this variable specifies the policy used to decide which transactions are allowed to execute in parallel on the replica.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_slave_parallel_type) for details.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SlaveParallelType slave_parallel_type = 48;</code>
     * @return The slaveParallelType.
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SlaveParallelType getSlaveParallelType();

    /**
     * <pre>
     * Sets the number of applier threads for executing replication transactions in parallel.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_slave_parallel_workers) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value slave_parallel_workers = 49 [(.yandex.cloud.value) = "0-64"];</code>
     * @return Whether the slaveParallelWorkers field is set.
     */
    boolean hasSlaveParallelWorkers();
    /**
     * <pre>
     * Sets the number of applier threads for executing replication transactions in parallel.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_slave_parallel_workers) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value slave_parallel_workers = 49 [(.yandex.cloud.value) = "0-64"];</code>
     * @return The slaveParallelWorkers.
     */
    com.google.protobuf.Int64Value getSlaveParallelWorkers();
    /**
     * <pre>
     * Sets the number of applier threads for executing replication transactions in parallel.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_slave_parallel_workers) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value slave_parallel_workers = 49 [(.yandex.cloud.value) = "0-64"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getSlaveParallelWorkersOrBuilder();

    /**
     * <pre>
     * The time limit for regular expression matching operations performed by REGEXP_LIKE and similar functions.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_regexp_time_limit) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value regexp_time_limit = 50 [(.yandex.cloud.value) = "0-1048576"];</code>
     * @return Whether the regexpTimeLimit field is set.
     */
    boolean hasRegexpTimeLimit();
    /**
     * <pre>
     * The time limit for regular expression matching operations performed by REGEXP_LIKE and similar functions.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_regexp_time_limit) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value regexp_time_limit = 50 [(.yandex.cloud.value) = "0-1048576"];</code>
     * @return The regexpTimeLimit.
     */
    com.google.protobuf.Int64Value getRegexpTimeLimit();
    /**
     * <pre>
     * The time limit for regular expression matching operations performed by REGEXP_LIKE and similar functions.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_regexp_time_limit) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value regexp_time_limit = 50 [(.yandex.cloud.value) = "0-1048576"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getRegexpTimeLimitOrBuilder();

    /**
     * <pre>
     * The size of the binary log to hold.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mdb_preserve_binlog_bytes = 51 [(.yandex.cloud.value) = "1073741824-1099511627776"];</code>
     * @return Whether the mdbPreserveBinlogBytes field is set.
     */
    boolean hasMdbPreserveBinlogBytes();
    /**
     * <pre>
     * The size of the binary log to hold.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mdb_preserve_binlog_bytes = 51 [(.yandex.cloud.value) = "1073741824-1099511627776"];</code>
     * @return The mdbPreserveBinlogBytes.
     */
    com.google.protobuf.Int64Value getMdbPreserveBinlogBytes();
    /**
     * <pre>
     * The size of the binary log to hold.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mdb_preserve_binlog_bytes = 51 [(.yandex.cloud.value) = "1073741824-1099511627776"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMdbPreserveBinlogBytesOrBuilder();

    /**
     * <pre>
     * The number of seconds the server waits for activity on an interactive connection before closing it.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_interactive_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value interactive_timeout = 52 [(.yandex.cloud.value) = "600-86400"];</code>
     * @return Whether the interactiveTimeout field is set.
     */
    boolean hasInteractiveTimeout();
    /**
     * <pre>
     * The number of seconds the server waits for activity on an interactive connection before closing it.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_interactive_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value interactive_timeout = 52 [(.yandex.cloud.value) = "600-86400"];</code>
     * @return The interactiveTimeout.
     */
    com.google.protobuf.Int64Value getInteractiveTimeout();
    /**
     * <pre>
     * The number of seconds the server waits for activity on an interactive connection before closing it.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_interactive_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value interactive_timeout = 52 [(.yandex.cloud.value) = "600-86400"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getInteractiveTimeoutOrBuilder();

    /**
     * <pre>
     * The number of seconds the server waits for activity on a noninteractive connection before closing it.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_wait_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value wait_timeout = 53 [(.yandex.cloud.value) = "600-86400"];</code>
     * @return Whether the waitTimeout field is set.
     */
    boolean hasWaitTimeout();
    /**
     * <pre>
     * The number of seconds the server waits for activity on a noninteractive connection before closing it.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_wait_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value wait_timeout = 53 [(.yandex.cloud.value) = "600-86400"];</code>
     * @return The waitTimeout.
     */
    com.google.protobuf.Int64Value getWaitTimeout();
    /**
     * <pre>
     * The number of seconds the server waits for activity on a noninteractive connection before closing it.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_wait_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value wait_timeout = 53 [(.yandex.cloud.value) = "600-86400"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getWaitTimeoutOrBuilder();

    /**
     * <pre>
     * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = ON' to prevent users from reading stale data.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mdb_offline_mode_enable_lag = 54 [(.yandex.cloud.value) = "600-432000"];</code>
     * @return Whether the mdbOfflineModeEnableLag field is set.
     */
    boolean hasMdbOfflineModeEnableLag();
    /**
     * <pre>
     * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = ON' to prevent users from reading stale data.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mdb_offline_mode_enable_lag = 54 [(.yandex.cloud.value) = "600-432000"];</code>
     * @return The mdbOfflineModeEnableLag.
     */
    com.google.protobuf.Int64Value getMdbOfflineModeEnableLag();
    /**
     * <pre>
     * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = ON' to prevent users from reading stale data.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mdb_offline_mode_enable_lag = 54 [(.yandex.cloud.value) = "600-432000"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMdbOfflineModeEnableLagOrBuilder();

    /**
     * <pre>
     * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = OFF'.
     * Should be less than mdb_offline_mode_enable_lag.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mdb_offline_mode_disable_lag = 55 [(.yandex.cloud.value) = "60-86400"];</code>
     * @return Whether the mdbOfflineModeDisableLag field is set.
     */
    boolean hasMdbOfflineModeDisableLag();
    /**
     * <pre>
     * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = OFF'.
     * Should be less than mdb_offline_mode_enable_lag.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mdb_offline_mode_disable_lag = 55 [(.yandex.cloud.value) = "60-86400"];</code>
     * @return The mdbOfflineModeDisableLag.
     */
    com.google.protobuf.Int64Value getMdbOfflineModeDisableLag();
    /**
     * <pre>
     * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = OFF'.
     * Should be less than mdb_offline_mode_enable_lag.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mdb_offline_mode_disable_lag = 55 [(.yandex.cloud.value) = "60-86400"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMdbOfflineModeDisableLagOrBuilder();

    /**
     * <pre>
     * The limit on memory consumption for the range optimizer.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_range_optimizer_max_mem_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value range_optimizer_max_mem_size = 56 [(.yandex.cloud.value) = "1048576-268435456"];</code>
     * @return Whether the rangeOptimizerMaxMemSize field is set.
     */
    boolean hasRangeOptimizerMaxMemSize();
    /**
     * <pre>
     * The limit on memory consumption for the range optimizer.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_range_optimizer_max_mem_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value range_optimizer_max_mem_size = 56 [(.yandex.cloud.value) = "1048576-268435456"];</code>
     * @return The rangeOptimizerMaxMemSize.
     */
    com.google.protobuf.Int64Value getRangeOptimizerMaxMemSize();
    /**
     * <pre>
     * The limit on memory consumption for the range optimizer.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_range_optimizer_max_mem_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value range_optimizer_max_mem_size = 56 [(.yandex.cloud.value) = "1048576-268435456"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getRangeOptimizerMaxMemSizeOrBuilder();

    /**
     * <pre>
     * Manages slow query log.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_slow_query_log) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue slow_query_log = 57;</code>
     * @return Whether the slowQueryLog field is set.
     */
    boolean hasSlowQueryLog();
    /**
     * <pre>
     * Manages slow query log.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_slow_query_log) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue slow_query_log = 57;</code>
     * @return The slowQueryLog.
     */
    com.google.protobuf.BoolValue getSlowQueryLog();
    /**
     * <pre>
     * Manages slow query log.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_slow_query_log) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue slow_query_log = 57;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getSlowQueryLogOrBuilder();

    /**
     * <pre>
     * Query execution time, after which query to be logged unconditionally, that is, `log_slow_rate_limit` will not apply to it.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#slow_query_log_always_write_time) for details.
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue slow_query_log_always_write_time = 58;</code>
     * @return Whether the slowQueryLogAlwaysWriteTime field is set.
     */
    boolean hasSlowQueryLogAlwaysWriteTime();
    /**
     * <pre>
     * Query execution time, after which query to be logged unconditionally, that is, `log_slow_rate_limit` will not apply to it.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#slow_query_log_always_write_time) for details.
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue slow_query_log_always_write_time = 58;</code>
     * @return The slowQueryLogAlwaysWriteTime.
     */
    com.google.protobuf.DoubleValue getSlowQueryLogAlwaysWriteTime();
    /**
     * <pre>
     * Query execution time, after which query to be logged unconditionally, that is, `log_slow_rate_limit` will not apply to it.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#slow_query_log_always_write_time) for details.
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue slow_query_log_always_write_time = 58;</code>
     */
    com.google.protobuf.DoubleValueOrBuilder getSlowQueryLogAlwaysWriteTimeOrBuilder();

    /**
     * <pre>
     * Specifies slow log granularity for `log_slow_rate_limit` QUERY or SESSION value.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_rate_type) for details.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowRateType log_slow_rate_type = 59;</code>
     * @return The enum numeric value on the wire for logSlowRateType.
     */
    int getLogSlowRateTypeValue();
    /**
     * <pre>
     * Specifies slow log granularity for `log_slow_rate_limit` QUERY or SESSION value.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_rate_type) for details.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowRateType log_slow_rate_type = 59;</code>
     * @return The logSlowRateType.
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowRateType getLogSlowRateType();

    /**
     * <pre>
     * Specifies what fraction of session/query should be logged. Logging is enabled for every nth session/query.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_rate_limit) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value log_slow_rate_limit = 60 [(.yandex.cloud.value) = "1-1000"];</code>
     * @return Whether the logSlowRateLimit field is set.
     */
    boolean hasLogSlowRateLimit();
    /**
     * <pre>
     * Specifies what fraction of session/query should be logged. Logging is enabled for every nth session/query.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_rate_limit) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value log_slow_rate_limit = 60 [(.yandex.cloud.value) = "1-1000"];</code>
     * @return The logSlowRateLimit.
     */
    com.google.protobuf.Int64Value getLogSlowRateLimit();
    /**
     * <pre>
     * Specifies what fraction of session/query should be logged. Logging is enabled for every nth session/query.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_rate_limit) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value log_slow_rate_limit = 60 [(.yandex.cloud.value) = "1-1000"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getLogSlowRateLimitOrBuilder();

    /**
     * <pre>
     * When TRUE, statements executed by stored procedures are logged to the slow log.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_sp_statements) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue log_slow_sp_statements = 61;</code>
     * @return Whether the logSlowSpStatements field is set.
     */
    boolean hasLogSlowSpStatements();
    /**
     * <pre>
     * When TRUE, statements executed by stored procedures are logged to the slow log.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_sp_statements) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue log_slow_sp_statements = 61;</code>
     * @return The logSlowSpStatements.
     */
    com.google.protobuf.BoolValue getLogSlowSpStatements();
    /**
     * <pre>
     * When TRUE, statements executed by stored procedures are logged to the slow log.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_sp_statements) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue log_slow_sp_statements = 61;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getLogSlowSpStatementsOrBuilder();

    /**
     * <pre>
     * Filters the slow log by the query's execution plan.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_filter) for details.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowFilterType log_slow_filter = 62;</code>
     * @return A list containing the logSlowFilter.
     */
    java.util.List<yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowFilterType> getLogSlowFilterList();
    /**
     * <pre>
     * Filters the slow log by the query's execution plan.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_filter) for details.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowFilterType log_slow_filter = 62;</code>
     * @return The count of logSlowFilter.
     */
    int getLogSlowFilterCount();
    /**
     * <pre>
     * Filters the slow log by the query's execution plan.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_filter) for details.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowFilterType log_slow_filter = 62;</code>
     * @param index The index of the element to return.
     * @return The logSlowFilter at the given index.
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowFilterType getLogSlowFilter(int index);
    /**
     * <pre>
     * Filters the slow log by the query's execution plan.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_filter) for details.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowFilterType log_slow_filter = 62;</code>
     * @return A list containing the enum numeric values on the wire for logSlowFilter.
     */
    java.util.List<java.lang.Integer>
    getLogSlowFilterValueList();
    /**
     * <pre>
     * Filters the slow log by the query's execution plan.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_filter) for details.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowFilterType log_slow_filter = 62;</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of logSlowFilter at the given index.
     */
    int getLogSlowFilterValue(int index);

    /**
     * <pre>
     * Replication lag threshold (seconds) which allows replica to be promoted to master while executing "switchover from".
     * Should be less than mdb_offline_mode_disable_lag.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mdb_priority_choice_max_lag = 63 [(.yandex.cloud.value) = "0-86400"];</code>
     * @return Whether the mdbPriorityChoiceMaxLag field is set.
     */
    boolean hasMdbPriorityChoiceMaxLag();
    /**
     * <pre>
     * Replication lag threshold (seconds) which allows replica to be promoted to master while executing "switchover from".
     * Should be less than mdb_offline_mode_disable_lag.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mdb_priority_choice_max_lag = 63 [(.yandex.cloud.value) = "0-86400"];</code>
     * @return The mdbPriorityChoiceMaxLag.
     */
    com.google.protobuf.Int64Value getMdbPriorityChoiceMaxLag();
    /**
     * <pre>
     * Replication lag threshold (seconds) which allows replica to be promoted to master while executing "switchover from".
     * Should be less than mdb_offline_mode_disable_lag.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mdb_priority_choice_max_lag = 63 [(.yandex.cloud.value) = "0-86400"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMdbPriorityChoiceMaxLagOrBuilder();

    /**
     * <pre>
     * Specifies the page size for InnoDB tablespaces.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_page_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_page_size = 64 [(.yandex.cloud.value) = "4096-65536"];</code>
     * @return Whether the innodbPageSize field is set.
     */
    boolean hasInnodbPageSize();
    /**
     * <pre>
     * Specifies the page size for InnoDB tablespaces.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_page_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_page_size = 64 [(.yandex.cloud.value) = "4096-65536"];</code>
     * @return The innodbPageSize.
     */
    com.google.protobuf.Int64Value getInnodbPageSize();
    /**
     * <pre>
     * Specifies the page size for InnoDB tablespaces.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_page_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_page_size = 64 [(.yandex.cloud.value) = "4096-65536"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getInnodbPageSizeOrBuilder();

    /**
     * <pre>
     * The limit in bytes on the size of the temporary log files used during online DDL operations
     * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_online_alter_log_max_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_online_alter_log_max_size = 65 [(.yandex.cloud.value) = "65536-107374182400"];</code>
     * @return Whether the innodbOnlineAlterLogMaxSize field is set.
     */
    boolean hasInnodbOnlineAlterLogMaxSize();
    /**
     * <pre>
     * The limit in bytes on the size of the temporary log files used during online DDL operations
     * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_online_alter_log_max_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_online_alter_log_max_size = 65 [(.yandex.cloud.value) = "65536-107374182400"];</code>
     * @return The innodbOnlineAlterLogMaxSize.
     */
    com.google.protobuf.Int64Value getInnodbOnlineAlterLogMaxSize();
    /**
     * <pre>
     * The limit in bytes on the size of the temporary log files used during online DDL operations
     * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_online_alter_log_max_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_online_alter_log_max_size = 65 [(.yandex.cloud.value) = "65536-107374182400"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getInnodbOnlineAlterLogMaxSizeOrBuilder();

    /**
     * <pre>
     * Minimum length of words that are stored in an InnoDB FULLTEXT index
     * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_min_token_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_ft_min_token_size = 66 [(.yandex.cloud.value) = "0-16"];</code>
     * @return Whether the innodbFtMinTokenSize field is set.
     */
    boolean hasInnodbFtMinTokenSize();
    /**
     * <pre>
     * Minimum length of words that are stored in an InnoDB FULLTEXT index
     * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_min_token_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_ft_min_token_size = 66 [(.yandex.cloud.value) = "0-16"];</code>
     * @return The innodbFtMinTokenSize.
     */
    com.google.protobuf.Int64Value getInnodbFtMinTokenSize();
    /**
     * <pre>
     * Minimum length of words that are stored in an InnoDB FULLTEXT index
     * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_min_token_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_ft_min_token_size = 66 [(.yandex.cloud.value) = "0-16"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getInnodbFtMinTokenSizeOrBuilder();

    /**
     * <pre>
     * Maximum length of words that are stored in an InnoDB FULLTEXT index
     * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_max_token_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_ft_max_token_size = 67 [(.yandex.cloud.value) = "10-84"];</code>
     * @return Whether the innodbFtMaxTokenSize field is set.
     */
    boolean hasInnodbFtMaxTokenSize();
    /**
     * <pre>
     * Maximum length of words that are stored in an InnoDB FULLTEXT index
     * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_max_token_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_ft_max_token_size = 67 [(.yandex.cloud.value) = "10-84"];</code>
     * @return The innodbFtMaxTokenSize.
     */
    com.google.protobuf.Int64Value getInnodbFtMaxTokenSize();
    /**
     * <pre>
     * Maximum length of words that are stored in an InnoDB FULLTEXT index
     * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_max_token_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_ft_max_token_size = 67 [(.yandex.cloud.value) = "10-84"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getInnodbFtMaxTokenSizeOrBuilder();

    /**
     * <pre>
     * Table names storage and comparison strategy
     * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lower_case_table_names) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value lower_case_table_names = 68 [(.yandex.cloud.value) = "0-1"];</code>
     * @return Whether the lowerCaseTableNames field is set.
     */
    boolean hasLowerCaseTableNames();
    /**
     * <pre>
     * Table names storage and comparison strategy
     * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lower_case_table_names) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value lower_case_table_names = 68 [(.yandex.cloud.value) = "0-1"];</code>
     * @return The lowerCaseTableNames.
     */
    com.google.protobuf.Int64Value getLowerCaseTableNames();
    /**
     * <pre>
     * Table names storage and comparison strategy
     * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lower_case_table_names) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value lower_case_table_names = 68 [(.yandex.cloud.value) = "0-1"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getLowerCaseTableNamesOrBuilder();

    /**
     * <pre>
     * The number of times that any given stored procedure may be called recursively.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_sp_recursion_depth).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_sp_recursion_depth = 69 [(.yandex.cloud.value) = "0-255"];</code>
     * @return Whether the maxSpRecursionDepth field is set.
     */
    boolean hasMaxSpRecursionDepth();
    /**
     * <pre>
     * The number of times that any given stored procedure may be called recursively.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_sp_recursion_depth).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_sp_recursion_depth = 69 [(.yandex.cloud.value) = "0-255"];</code>
     * @return The maxSpRecursionDepth.
     */
    com.google.protobuf.Int64Value getMaxSpRecursionDepth();
    /**
     * <pre>
     * The number of times that any given stored procedure may be called recursively.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_sp_recursion_depth).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_sp_recursion_depth = 69 [(.yandex.cloud.value) = "0-255"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxSpRecursionDepthOrBuilder();

    /**
     * <pre>
     * The level of zlib compression to use for InnoDB compressed tables and indexes.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_compression_level).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_compression_level = 70 [(.yandex.cloud.value) = "0-9"];</code>
     * @return Whether the innodbCompressionLevel field is set.
     */
    boolean hasInnodbCompressionLevel();
    /**
     * <pre>
     * The level of zlib compression to use for InnoDB compressed tables and indexes.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_compression_level).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_compression_level = 70 [(.yandex.cloud.value) = "0-9"];</code>
     * @return The innodbCompressionLevel.
     */
    com.google.protobuf.Int64Value getInnodbCompressionLevel();
    /**
     * <pre>
     * The level of zlib compression to use for InnoDB compressed tables and indexes.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_compression_level).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_compression_level = 70 [(.yandex.cloud.value) = "0-9"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getInnodbCompressionLevelOrBuilder();

    /**
     * <pre>
     * Specifies how the source mysqld generates the dependency information that it writes in the binary log to help replicas determine which transactions can be executed in parallel.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_transaction_dependency_tracking).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.BinlogTransactionDependencyTracking binlog_transaction_dependency_tracking = 71;</code>
     * @return The enum numeric value on the wire for binlogTransactionDependencyTracking.
     */
    int getBinlogTransactionDependencyTrackingValue();
    /**
     * <pre>
     * Specifies how the source mysqld generates the dependency information that it writes in the binary log to help replicas determine which transactions can be executed in parallel.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_transaction_dependency_tracking).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.BinlogTransactionDependencyTracking binlog_transaction_dependency_tracking = 71;</code>
     * @return The binlogTransactionDependencyTracking.
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.BinlogTransactionDependencyTracking getBinlogTransactionDependencyTracking();

    /**
     * <pre>
     * Config specific will be all changes to a table take effect immediately or you must use COMMIT to accept a transaction or ROLLBACK to cancel it.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_autocommit).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue autocommit = 72;</code>
     * @return Whether the autocommit field is set.
     */
    boolean hasAutocommit();
    /**
     * <pre>
     * Config specific will be all changes to a table take effect immediately or you must use COMMIT to accept a transaction or ROLLBACK to cancel it.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_autocommit).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue autocommit = 72;</code>
     * @return The autocommit.
     */
    com.google.protobuf.BoolValue getAutocommit();
    /**
     * <pre>
     * Config specific will be all changes to a table take effect immediately or you must use COMMIT to accept a transaction or ROLLBACK to cancel it.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_autocommit).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue autocommit = 72;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getAutocommitOrBuilder();

    /**
     * <pre>
     * Enables or disables periodic output for the standard InnoDB Monitor.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_status_output).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_status_output = 73;</code>
     * @return Whether the innodbStatusOutput field is set.
     */
    boolean hasInnodbStatusOutput();
    /**
     * <pre>
     * Enables or disables periodic output for the standard InnoDB Monitor.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_status_output).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_status_output = 73;</code>
     * @return The innodbStatusOutput.
     */
    com.google.protobuf.BoolValue getInnodbStatusOutput();
    /**
     * <pre>
     * Enables or disables periodic output for the standard InnoDB Monitor.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_status_output).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_status_output = 73;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getInnodbStatusOutputOrBuilder();

    /**
     * <pre>
     * When innodb_strict_mode is enabled, InnoDB returns errors rather than warnings when checking for invalid or incompatible table options.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_strict_mode).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_strict_mode = 74;</code>
     * @return Whether the innodbStrictMode field is set.
     */
    boolean hasInnodbStrictMode();
    /**
     * <pre>
     * When innodb_strict_mode is enabled, InnoDB returns errors rather than warnings when checking for invalid or incompatible table options.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_strict_mode).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_strict_mode = 74;</code>
     * @return The innodbStrictMode.
     */
    com.google.protobuf.BoolValue getInnodbStrictMode();
    /**
     * <pre>
     * When innodb_strict_mode is enabled, InnoDB returns errors rather than warnings when checking for invalid or incompatible table options.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_strict_mode).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_strict_mode = 74;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getInnodbStrictModeOrBuilder();

    /**
     * <pre>
     * Makes InnoDB to write information about all lock wait timeout errors into the log file.
     * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/innodb_show_status.html?highlight=innodb_print_lock_wait_timeout_info).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_print_lock_wait_timeout_info = 75;</code>
     * @return Whether the innodbPrintLockWaitTimeoutInfo field is set.
     */
    boolean hasInnodbPrintLockWaitTimeoutInfo();
    /**
     * <pre>
     * Makes InnoDB to write information about all lock wait timeout errors into the log file.
     * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/innodb_show_status.html?highlight=innodb_print_lock_wait_timeout_info).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_print_lock_wait_timeout_info = 75;</code>
     * @return The innodbPrintLockWaitTimeoutInfo.
     */
    com.google.protobuf.BoolValue getInnodbPrintLockWaitTimeoutInfo();
    /**
     * <pre>
     * Makes InnoDB to write information about all lock wait timeout errors into the log file.
     * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/innodb_show_status.html?highlight=innodb_print_lock_wait_timeout_info).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_print_lock_wait_timeout_info = 75;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getInnodbPrintLockWaitTimeoutInfoOrBuilder();

    /**
     * <pre>
     * System variable specifies the verbosity for handling events intended for the error log
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_log_error_verbosity).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value log_error_verbosity = 76 [(.yandex.cloud.value) = "1-3"];</code>
     * @return Whether the logErrorVerbosity field is set.
     */
    boolean hasLogErrorVerbosity();
    /**
     * <pre>
     * System variable specifies the verbosity for handling events intended for the error log
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_log_error_verbosity).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value log_error_verbosity = 76 [(.yandex.cloud.value) = "1-3"];</code>
     * @return The logErrorVerbosity.
     */
    com.google.protobuf.Int64Value getLogErrorVerbosity();
    /**
     * <pre>
     * System variable specifies the verbosity for handling events intended for the error log
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_log_error_verbosity).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value log_error_verbosity = 76 [(.yandex.cloud.value) = "1-3"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getLogErrorVerbosityOrBuilder();

    /**
     * <pre>
     * The maximum number of bytes of memory reserved per session for computation of normalized statement digests.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_digest_length).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_digest_length = 77 [(.yandex.cloud.value) = "0-1048576"];</code>
     * @return Whether the maxDigestLength field is set.
     */
    boolean hasMaxDigestLength();
    /**
     * <pre>
     * The maximum number of bytes of memory reserved per session for computation of normalized statement digests.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_digest_length).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_digest_length = 77 [(.yandex.cloud.value) = "0-1048576"];</code>
     * @return The maxDigestLength.
     */
    com.google.protobuf.Int64Value getMaxDigestLength();
    /**
     * <pre>
     * The maximum number of bytes of memory reserved per session for computation of normalized statement digests.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_digest_length).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_digest_length = 77 [(.yandex.cloud.value) = "0-1048576"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxDigestLengthOrBuilder();

    /**
     * <pre>
     * This variable specifies the timeout in seconds for attempts to acquire metadata locks
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lock_wait_timeout).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value lock_wait_timeout = 78 [(.yandex.cloud.value) = "1-31536000"];</code>
     * @return Whether the lockWaitTimeout field is set.
     */
    boolean hasLockWaitTimeout();
    /**
     * <pre>
     * This variable specifies the timeout in seconds for attempts to acquire metadata locks
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lock_wait_timeout).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value lock_wait_timeout = 78 [(.yandex.cloud.value) = "1-31536000"];</code>
     * @return The lockWaitTimeout.
     */
    com.google.protobuf.Int64Value getLockWaitTimeout();
    /**
     * <pre>
     * This variable specifies the timeout in seconds for attempts to acquire metadata locks
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lock_wait_timeout).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value lock_wait_timeout = 78 [(.yandex.cloud.value) = "1-31536000"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getLockWaitTimeoutOrBuilder();

    /**
     * <pre>
     * This variable limits the total number of prepared statements in the server.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_prepared_stmt_count).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_prepared_stmt_count = 79 [(.yandex.cloud.value) = "0-4194304"];</code>
     * @return Whether the maxPreparedStmtCount field is set.
     */
    boolean hasMaxPreparedStmtCount();
    /**
     * <pre>
     * This variable limits the total number of prepared statements in the server.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_prepared_stmt_count).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_prepared_stmt_count = 79 [(.yandex.cloud.value) = "0-4194304"];</code>
     * @return The maxPreparedStmtCount.
     */
    com.google.protobuf.Int64Value getMaxPreparedStmtCount();
    /**
     * <pre>
     * This variable limits the total number of prepared statements in the server.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_prepared_stmt_count).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_prepared_stmt_count = 79 [(.yandex.cloud.value) = "0-4194304"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxPreparedStmtCountOrBuilder();

    /**
     * <pre>
     * The system variable enables control over optimizer behavior.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_optimizer_switch)
     * https://dev.mysql.com/doc/refman/8.0/en/switchable-optimizations.html
     * </pre>
     *
     * <code>string optimizer_switch = 80;</code>
     * @return The optimizerSwitch.
     */
    java.lang.String getOptimizerSwitch();
    /**
     * <pre>
     * The system variable enables control over optimizer behavior.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_optimizer_switch)
     * https://dev.mysql.com/doc/refman/8.0/en/switchable-optimizations.html
     * </pre>
     *
     * <code>string optimizer_switch = 80;</code>
     * @return The bytes for optimizerSwitch.
     */
    com.google.protobuf.ByteString
        getOptimizerSwitchBytes();

    /**
     * <pre>
     * The maximum depth of search performed by the query optimizer
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value optimizer_search_depth = 81 [(.yandex.cloud.value) = "0-62"];</code>
     * @return Whether the optimizerSearchDepth field is set.
     */
    boolean hasOptimizerSearchDepth();
    /**
     * <pre>
     * The maximum depth of search performed by the query optimizer
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value optimizer_search_depth = 81 [(.yandex.cloud.value) = "0-62"];</code>
     * @return The optimizerSearchDepth.
     */
    com.google.protobuf.Int64Value getOptimizerSearchDepth();
    /**
     * <pre>
     * The maximum depth of search performed by the query optimizer
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value optimizer_search_depth = 81 [(.yandex.cloud.value) = "0-62"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getOptimizerSearchDepthOrBuilder();

    /**
     * <pre>
     * Enables or disables collection of statistics
     * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/user_stats.html#userstat).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue userstat = 82;</code>
     * @return Whether the userstat field is set.
     */
    boolean hasUserstat();
    /**
     * <pre>
     * Enables or disables collection of statistics
     * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/user_stats.html#userstat).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue userstat = 82;</code>
     * @return The userstat.
     */
    com.google.protobuf.BoolValue getUserstat();
    /**
     * <pre>
     * Enables or disables collection of statistics
     * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/user_stats.html#userstat).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue userstat = 82;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getUserstatOrBuilder();

    /**
     * <pre>
     * The execution timeout for SELECT statements, in milliseconds. If the value is 0, timeouts are not enabled.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_execution_time)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_execution_time = 83 [(.yandex.cloud.value) = "0-4294967295"];</code>
     * @return Whether the maxExecutionTime field is set.
     */
    boolean hasMaxExecutionTime();
    /**
     * <pre>
     * The execution timeout for SELECT statements, in milliseconds. If the value is 0, timeouts are not enabled.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_execution_time)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_execution_time = 83 [(.yandex.cloud.value) = "0-4294967295"];</code>
     * @return The maxExecutionTime.
     */
    com.google.protobuf.Int64Value getMaxExecutionTime();
    /**
     * <pre>
     * The execution timeout for SELECT statements, in milliseconds. If the value is 0, timeouts are not enabled.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_execution_time)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_execution_time = 83 [(.yandex.cloud.value) = "0-4294967295"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxExecutionTimeOrBuilder();

    /**
     * <pre>
     * The policy controlling how the audit log plugin writes events to its log file
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#sysvar_audit_log_policy)
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuditLogPolicy audit_log_policy = 84;</code>
     * @return The enum numeric value on the wire for auditLogPolicy.
     */
    int getAuditLogPolicyValue();
    /**
     * <pre>
     * The policy controlling how the audit log plugin writes events to its log file
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#sysvar_audit_log_policy)
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuditLogPolicy audit_log_policy = 84;</code>
     * @return The auditLogPolicy.
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuditLogPolicy getAuditLogPolicy();

    /**
     * <pre>
     * Limit callbacks to improve performance for semisynchronous replication
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_sender_observe_commit_only).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue replication_sender_observe_commit_only = 85;</code>
     * @return Whether the replicationSenderObserveCommitOnly field is set.
     */
    boolean hasReplicationSenderObserveCommitOnly();
    /**
     * <pre>
     * Limit callbacks to improve performance for semisynchronous replication
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_sender_observe_commit_only).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue replication_sender_observe_commit_only = 85;</code>
     * @return The replicationSenderObserveCommitOnly.
     */
    com.google.protobuf.BoolValue getReplicationSenderObserveCommitOnly();
    /**
     * <pre>
     * Limit callbacks to improve performance for semisynchronous replication
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_sender_observe_commit_only).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue replication_sender_observe_commit_only = 85;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getReplicationSenderObserveCommitOnlyOrBuilder();

    /**
     * <pre>
     * Use shared locks, and avoid unnecessary lock acquisitions, to improve performance for semisynchronous replication
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_optimize_for_static_plugin_config).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue replication_optimize_for_static_plugin_config = 86;</code>
     * @return Whether the replicationOptimizeForStaticPluginConfig field is set.
     */
    boolean hasReplicationOptimizeForStaticPluginConfig();
    /**
     * <pre>
     * Use shared locks, and avoid unnecessary lock acquisitions, to improve performance for semisynchronous replication
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_optimize_for_static_plugin_config).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue replication_optimize_for_static_plugin_config = 86;</code>
     * @return The replicationOptimizeForStaticPluginConfig.
     */
    com.google.protobuf.BoolValue getReplicationOptimizeForStaticPluginConfig();
    /**
     * <pre>
     * Use shared locks, and avoid unnecessary lock acquisitions, to improve performance for semisynchronous replication
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_optimize_for_static_plugin_config).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue replication_optimize_for_static_plugin_config = 86;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getReplicationOptimizeForStaticPluginConfigOrBuilder();

    /**
     * <pre>
     * A parameter that influences the algorithms and heuristics for the flush operation for the InnoDB buffer pool
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lru_scan_depth)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_lru_scan_depth = 87 [(.yandex.cloud.value) = "100-4294967295"];</code>
     * @return Whether the innodbLruScanDepth field is set.
     */
    boolean hasInnodbLruScanDepth();
    /**
     * <pre>
     * A parameter that influences the algorithms and heuristics for the flush operation for the InnoDB buffer pool
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lru_scan_depth)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_lru_scan_depth = 87 [(.yandex.cloud.value) = "100-4294967295"];</code>
     * @return The innodbLruScanDepth.
     */
    com.google.protobuf.Int64Value getInnodbLruScanDepth();
    /**
     * <pre>
     * A parameter that influences the algorithms and heuristics for the flush operation for the InnoDB buffer pool
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lru_scan_depth)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_lru_scan_depth = 87 [(.yandex.cloud.value) = "100-4294967295"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getInnodbLruScanDepthOrBuilder();

    /**
     * <pre>
     * Whether statements that create new tables or alter the structure of existing tables enforce the requirement that tables have a primary key
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sql_require_primary_key).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue sql_require_primary_key = 88;</code>
     * @return Whether the sqlRequirePrimaryKey field is set.
     */
    boolean hasSqlRequirePrimaryKey();
    /**
     * <pre>
     * Whether statements that create new tables or alter the structure of existing tables enforce the requirement that tables have a primary key
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sql_require_primary_key).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue sql_require_primary_key = 88;</code>
     * @return The sqlRequirePrimaryKey.
     */
    com.google.protobuf.BoolValue getSqlRequirePrimaryKey();
    /**
     * <pre>
     * Whether statements that create new tables or alter the structure of existing tables enforce the requirement that tables have a primary key
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sql_require_primary_key).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue sql_require_primary_key = 88;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getSqlRequirePrimaryKeyOrBuilder();

    /**
     * <pre>
     * Force ssl on all hosts (require_secure_transport)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue mdb_force_ssl = 89;</code>
     * @return Whether the mdbForceSsl field is set.
     */
    boolean hasMdbForceSsl();
    /**
     * <pre>
     * Force ssl on all hosts (require_secure_transport)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue mdb_force_ssl = 89;</code>
     * @return The mdbForceSsl.
     */
    com.google.protobuf.BoolValue getMdbForceSsl();
    /**
     * <pre>
     * Force ssl on all hosts (require_secure_transport)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue mdb_force_ssl = 89;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getMdbForceSslOrBuilder();

    /**
     * <pre>
     * An optimization for change buffering
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_change_buffering).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.InnodbChangeBuffering innodb_change_buffering = 90;</code>
     * @return The enum numeric value on the wire for innodbChangeBuffering.
     */
    int getInnodbChangeBufferingValue();
    /**
     * <pre>
     * An optimization for change buffering
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_change_buffering).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.InnodbChangeBuffering innodb_change_buffering = 90;</code>
     * @return The innodbChangeBuffering.
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.InnodbChangeBuffering getInnodbChangeBuffering();

    /**
     * <pre>
     * Permit some pending read lock requests interval
     * P.S. Should be UInt64, but java fails to handle UInt64 limits
     * For details, see [Percona documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_write_lock_count).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_write_lock_count = 91 [(.yandex.cloud.value) = "&gt;=1"];</code>
     * @return Whether the maxWriteLockCount field is set.
     */
    boolean hasMaxWriteLockCount();
    /**
     * <pre>
     * Permit some pending read lock requests interval
     * P.S. Should be UInt64, but java fails to handle UInt64 limits
     * For details, see [Percona documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_write_lock_count).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_write_lock_count = 91 [(.yandex.cloud.value) = "&gt;=1"];</code>
     * @return The maxWriteLockCount.
     */
    com.google.protobuf.Int64Value getMaxWriteLockCount();
    /**
     * <pre>
     * Permit some pending read lock requests interval
     * P.S. Should be UInt64, but java fails to handle UInt64 limits
     * For details, see [Percona documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_write_lock_count).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_write_lock_count = 91 [(.yandex.cloud.value) = "&gt;=1"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxWriteLockCountOrBuilder();
  }
  /**
   * <pre>
   * Options and structure of `MysqlConfig8_0` reflects MySQL 8.0 configuration file.
   * </pre>
   *
   * Protobuf type {@code yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0}
   */
  public static final class MysqlConfig8_0 extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0)
      MysqlConfig8_0OrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MysqlConfig8_0.newBuilder() to construct.
    private MysqlConfig8_0(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MysqlConfig8_0() {
      sqlMode_ = java.util.Collections.emptyList();
      defaultAuthenticationPlugin_ = 0;
      transactionIsolation_ = 0;
      defaultTimeZone_ = "";
      characterSetServer_ = "";
      collationServer_ = "";
      binlogRowImage_ = 0;
      slaveParallelType_ = 0;
      logSlowRateType_ = 0;
      logSlowFilter_ = java.util.Collections.emptyList();
      binlogTransactionDependencyTracking_ = 0;
      optimizerSwitch_ = "";
      auditLogPolicy_ = 0;
      innodbChangeBuffering_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new MysqlConfig8_0();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MysqlConfig8_0(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (innodbBufferPoolSize_ != null) {
                subBuilder = innodbBufferPoolSize_.toBuilder();
              }
              innodbBufferPoolSize_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbBufferPoolSize_);
                innodbBufferPoolSize_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxConnections_ != null) {
                subBuilder = maxConnections_.toBuilder();
              }
              maxConnections_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxConnections_);
                maxConnections_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              com.google.protobuf.DoubleValue.Builder subBuilder = null;
              if (longQueryTime_ != null) {
                subBuilder = longQueryTime_.toBuilder();
              }
              longQueryTime_ = input.readMessage(com.google.protobuf.DoubleValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(longQueryTime_);
                longQueryTime_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (generalLog_ != null) {
                subBuilder = generalLog_.toBuilder();
              }
              generalLog_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(generalLog_);
                generalLog_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (auditLog_ != null) {
                subBuilder = auditLog_.toBuilder();
              }
              auditLog_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(auditLog_);
                auditLog_ = subBuilder.buildPartial();
              }

              break;
            }
            case 48: {
              int rawValue = input.readEnum();
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                sqlMode_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              sqlMode_.add(rawValue);
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int rawValue = input.readEnum();
                if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                  sqlMode_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000001;
                }
                sqlMode_.add(rawValue);
              }
              input.popLimit(oldLimit);
              break;
            }
            case 58: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxAllowedPacket_ != null) {
                subBuilder = maxAllowedPacket_.toBuilder();
              }
              maxAllowedPacket_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxAllowedPacket_);
                maxAllowedPacket_ = subBuilder.buildPartial();
              }

              break;
            }
            case 64: {
              int rawValue = input.readEnum();

              defaultAuthenticationPlugin_ = rawValue;
              break;
            }
            case 74: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (innodbFlushLogAtTrxCommit_ != null) {
                subBuilder = innodbFlushLogAtTrxCommit_.toBuilder();
              }
              innodbFlushLogAtTrxCommit_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbFlushLogAtTrxCommit_);
                innodbFlushLogAtTrxCommit_ = subBuilder.buildPartial();
              }

              break;
            }
            case 82: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (innodbLockWaitTimeout_ != null) {
                subBuilder = innodbLockWaitTimeout_.toBuilder();
              }
              innodbLockWaitTimeout_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbLockWaitTimeout_);
                innodbLockWaitTimeout_ = subBuilder.buildPartial();
              }

              break;
            }
            case 88: {
              int rawValue = input.readEnum();

              transactionIsolation_ = rawValue;
              break;
            }
            case 98: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (innodbPrintAllDeadlocks_ != null) {
                subBuilder = innodbPrintAllDeadlocks_.toBuilder();
              }
              innodbPrintAllDeadlocks_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbPrintAllDeadlocks_);
                innodbPrintAllDeadlocks_ = subBuilder.buildPartial();
              }

              break;
            }
            case 106: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (netReadTimeout_ != null) {
                subBuilder = netReadTimeout_.toBuilder();
              }
              netReadTimeout_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(netReadTimeout_);
                netReadTimeout_ = subBuilder.buildPartial();
              }

              break;
            }
            case 114: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (netWriteTimeout_ != null) {
                subBuilder = netWriteTimeout_.toBuilder();
              }
              netWriteTimeout_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(netWriteTimeout_);
                netWriteTimeout_ = subBuilder.buildPartial();
              }

              break;
            }
            case 122: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (groupConcatMaxLen_ != null) {
                subBuilder = groupConcatMaxLen_.toBuilder();
              }
              groupConcatMaxLen_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(groupConcatMaxLen_);
                groupConcatMaxLen_ = subBuilder.buildPartial();
              }

              break;
            }
            case 130: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (tmpTableSize_ != null) {
                subBuilder = tmpTableSize_.toBuilder();
              }
              tmpTableSize_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(tmpTableSize_);
                tmpTableSize_ = subBuilder.buildPartial();
              }

              break;
            }
            case 138: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxHeapTableSize_ != null) {
                subBuilder = maxHeapTableSize_.toBuilder();
              }
              maxHeapTableSize_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxHeapTableSize_);
                maxHeapTableSize_ = subBuilder.buildPartial();
              }

              break;
            }
            case 146: {
              java.lang.String s = input.readStringRequireUtf8();

              defaultTimeZone_ = s;
              break;
            }
            case 154: {
              java.lang.String s = input.readStringRequireUtf8();

              characterSetServer_ = s;
              break;
            }
            case 162: {
              java.lang.String s = input.readStringRequireUtf8();

              collationServer_ = s;
              break;
            }
            case 170: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (innodbAdaptiveHashIndex_ != null) {
                subBuilder = innodbAdaptiveHashIndex_.toBuilder();
              }
              innodbAdaptiveHashIndex_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbAdaptiveHashIndex_);
                innodbAdaptiveHashIndex_ = subBuilder.buildPartial();
              }

              break;
            }
            case 178: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (innodbNumaInterleave_ != null) {
                subBuilder = innodbNumaInterleave_.toBuilder();
              }
              innodbNumaInterleave_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbNumaInterleave_);
                innodbNumaInterleave_ = subBuilder.buildPartial();
              }

              break;
            }
            case 186: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (innodbLogBufferSize_ != null) {
                subBuilder = innodbLogBufferSize_.toBuilder();
              }
              innodbLogBufferSize_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbLogBufferSize_);
                innodbLogBufferSize_ = subBuilder.buildPartial();
              }

              break;
            }
            case 194: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (innodbLogFileSize_ != null) {
                subBuilder = innodbLogFileSize_.toBuilder();
              }
              innodbLogFileSize_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbLogFileSize_);
                innodbLogFileSize_ = subBuilder.buildPartial();
              }

              break;
            }
            case 202: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (innodbIoCapacity_ != null) {
                subBuilder = innodbIoCapacity_.toBuilder();
              }
              innodbIoCapacity_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbIoCapacity_);
                innodbIoCapacity_ = subBuilder.buildPartial();
              }

              break;
            }
            case 210: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (innodbIoCapacityMax_ != null) {
                subBuilder = innodbIoCapacityMax_.toBuilder();
              }
              innodbIoCapacityMax_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbIoCapacityMax_);
                innodbIoCapacityMax_ = subBuilder.buildPartial();
              }

              break;
            }
            case 218: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (innodbReadIoThreads_ != null) {
                subBuilder = innodbReadIoThreads_.toBuilder();
              }
              innodbReadIoThreads_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbReadIoThreads_);
                innodbReadIoThreads_ = subBuilder.buildPartial();
              }

              break;
            }
            case 226: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (innodbWriteIoThreads_ != null) {
                subBuilder = innodbWriteIoThreads_.toBuilder();
              }
              innodbWriteIoThreads_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbWriteIoThreads_);
                innodbWriteIoThreads_ = subBuilder.buildPartial();
              }

              break;
            }
            case 234: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (innodbPurgeThreads_ != null) {
                subBuilder = innodbPurgeThreads_.toBuilder();
              }
              innodbPurgeThreads_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbPurgeThreads_);
                innodbPurgeThreads_ = subBuilder.buildPartial();
              }

              break;
            }
            case 242: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (innodbThreadConcurrency_ != null) {
                subBuilder = innodbThreadConcurrency_.toBuilder();
              }
              innodbThreadConcurrency_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbThreadConcurrency_);
                innodbThreadConcurrency_ = subBuilder.buildPartial();
              }

              break;
            }
            case 250: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (innodbTempDataFileMaxSize_ != null) {
                subBuilder = innodbTempDataFileMaxSize_.toBuilder();
              }
              innodbTempDataFileMaxSize_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbTempDataFileMaxSize_);
                innodbTempDataFileMaxSize_ = subBuilder.buildPartial();
              }

              break;
            }
            case 258: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (threadCacheSize_ != null) {
                subBuilder = threadCacheSize_.toBuilder();
              }
              threadCacheSize_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(threadCacheSize_);
                threadCacheSize_ = subBuilder.buildPartial();
              }

              break;
            }
            case 266: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (threadStack_ != null) {
                subBuilder = threadStack_.toBuilder();
              }
              threadStack_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(threadStack_);
                threadStack_ = subBuilder.buildPartial();
              }

              break;
            }
            case 274: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (joinBufferSize_ != null) {
                subBuilder = joinBufferSize_.toBuilder();
              }
              joinBufferSize_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(joinBufferSize_);
                joinBufferSize_ = subBuilder.buildPartial();
              }

              break;
            }
            case 282: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (sortBufferSize_ != null) {
                subBuilder = sortBufferSize_.toBuilder();
              }
              sortBufferSize_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(sortBufferSize_);
                sortBufferSize_ = subBuilder.buildPartial();
              }

              break;
            }
            case 290: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (tableDefinitionCache_ != null) {
                subBuilder = tableDefinitionCache_.toBuilder();
              }
              tableDefinitionCache_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(tableDefinitionCache_);
                tableDefinitionCache_ = subBuilder.buildPartial();
              }

              break;
            }
            case 298: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (tableOpenCache_ != null) {
                subBuilder = tableOpenCache_.toBuilder();
              }
              tableOpenCache_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(tableOpenCache_);
                tableOpenCache_ = subBuilder.buildPartial();
              }

              break;
            }
            case 306: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (tableOpenCacheInstances_ != null) {
                subBuilder = tableOpenCacheInstances_.toBuilder();
              }
              tableOpenCacheInstances_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(tableOpenCacheInstances_);
                tableOpenCacheInstances_ = subBuilder.buildPartial();
              }

              break;
            }
            case 314: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (explicitDefaultsForTimestamp_ != null) {
                subBuilder = explicitDefaultsForTimestamp_.toBuilder();
              }
              explicitDefaultsForTimestamp_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(explicitDefaultsForTimestamp_);
                explicitDefaultsForTimestamp_ = subBuilder.buildPartial();
              }

              break;
            }
            case 322: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (autoIncrementIncrement_ != null) {
                subBuilder = autoIncrementIncrement_.toBuilder();
              }
              autoIncrementIncrement_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(autoIncrementIncrement_);
                autoIncrementIncrement_ = subBuilder.buildPartial();
              }

              break;
            }
            case 330: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (autoIncrementOffset_ != null) {
                subBuilder = autoIncrementOffset_.toBuilder();
              }
              autoIncrementOffset_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(autoIncrementOffset_);
                autoIncrementOffset_ = subBuilder.buildPartial();
              }

              break;
            }
            case 338: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (syncBinlog_ != null) {
                subBuilder = syncBinlog_.toBuilder();
              }
              syncBinlog_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(syncBinlog_);
                syncBinlog_ = subBuilder.buildPartial();
              }

              break;
            }
            case 346: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (binlogCacheSize_ != null) {
                subBuilder = binlogCacheSize_.toBuilder();
              }
              binlogCacheSize_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(binlogCacheSize_);
                binlogCacheSize_ = subBuilder.buildPartial();
              }

              break;
            }
            case 354: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (binlogGroupCommitSyncDelay_ != null) {
                subBuilder = binlogGroupCommitSyncDelay_.toBuilder();
              }
              binlogGroupCommitSyncDelay_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(binlogGroupCommitSyncDelay_);
                binlogGroupCommitSyncDelay_ = subBuilder.buildPartial();
              }

              break;
            }
            case 360: {
              int rawValue = input.readEnum();

              binlogRowImage_ = rawValue;
              break;
            }
            case 370: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (binlogRowsQueryLogEvents_ != null) {
                subBuilder = binlogRowsQueryLogEvents_.toBuilder();
              }
              binlogRowsQueryLogEvents_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(binlogRowsQueryLogEvents_);
                binlogRowsQueryLogEvents_ = subBuilder.buildPartial();
              }

              break;
            }
            case 378: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (rplSemiSyncMasterWaitForSlaveCount_ != null) {
                subBuilder = rplSemiSyncMasterWaitForSlaveCount_.toBuilder();
              }
              rplSemiSyncMasterWaitForSlaveCount_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(rplSemiSyncMasterWaitForSlaveCount_);
                rplSemiSyncMasterWaitForSlaveCount_ = subBuilder.buildPartial();
              }

              break;
            }
            case 384: {
              int rawValue = input.readEnum();

              slaveParallelType_ = rawValue;
              break;
            }
            case 394: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (slaveParallelWorkers_ != null) {
                subBuilder = slaveParallelWorkers_.toBuilder();
              }
              slaveParallelWorkers_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(slaveParallelWorkers_);
                slaveParallelWorkers_ = subBuilder.buildPartial();
              }

              break;
            }
            case 402: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (regexpTimeLimit_ != null) {
                subBuilder = regexpTimeLimit_.toBuilder();
              }
              regexpTimeLimit_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(regexpTimeLimit_);
                regexpTimeLimit_ = subBuilder.buildPartial();
              }

              break;
            }
            case 410: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (mdbPreserveBinlogBytes_ != null) {
                subBuilder = mdbPreserveBinlogBytes_.toBuilder();
              }
              mdbPreserveBinlogBytes_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mdbPreserveBinlogBytes_);
                mdbPreserveBinlogBytes_ = subBuilder.buildPartial();
              }

              break;
            }
            case 418: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (interactiveTimeout_ != null) {
                subBuilder = interactiveTimeout_.toBuilder();
              }
              interactiveTimeout_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(interactiveTimeout_);
                interactiveTimeout_ = subBuilder.buildPartial();
              }

              break;
            }
            case 426: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (waitTimeout_ != null) {
                subBuilder = waitTimeout_.toBuilder();
              }
              waitTimeout_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(waitTimeout_);
                waitTimeout_ = subBuilder.buildPartial();
              }

              break;
            }
            case 434: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (mdbOfflineModeEnableLag_ != null) {
                subBuilder = mdbOfflineModeEnableLag_.toBuilder();
              }
              mdbOfflineModeEnableLag_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mdbOfflineModeEnableLag_);
                mdbOfflineModeEnableLag_ = subBuilder.buildPartial();
              }

              break;
            }
            case 442: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (mdbOfflineModeDisableLag_ != null) {
                subBuilder = mdbOfflineModeDisableLag_.toBuilder();
              }
              mdbOfflineModeDisableLag_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mdbOfflineModeDisableLag_);
                mdbOfflineModeDisableLag_ = subBuilder.buildPartial();
              }

              break;
            }
            case 450: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (rangeOptimizerMaxMemSize_ != null) {
                subBuilder = rangeOptimizerMaxMemSize_.toBuilder();
              }
              rangeOptimizerMaxMemSize_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(rangeOptimizerMaxMemSize_);
                rangeOptimizerMaxMemSize_ = subBuilder.buildPartial();
              }

              break;
            }
            case 458: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (slowQueryLog_ != null) {
                subBuilder = slowQueryLog_.toBuilder();
              }
              slowQueryLog_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(slowQueryLog_);
                slowQueryLog_ = subBuilder.buildPartial();
              }

              break;
            }
            case 466: {
              com.google.protobuf.DoubleValue.Builder subBuilder = null;
              if (slowQueryLogAlwaysWriteTime_ != null) {
                subBuilder = slowQueryLogAlwaysWriteTime_.toBuilder();
              }
              slowQueryLogAlwaysWriteTime_ = input.readMessage(com.google.protobuf.DoubleValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(slowQueryLogAlwaysWriteTime_);
                slowQueryLogAlwaysWriteTime_ = subBuilder.buildPartial();
              }

              break;
            }
            case 472: {
              int rawValue = input.readEnum();

              logSlowRateType_ = rawValue;
              break;
            }
            case 482: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (logSlowRateLimit_ != null) {
                subBuilder = logSlowRateLimit_.toBuilder();
              }
              logSlowRateLimit_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(logSlowRateLimit_);
                logSlowRateLimit_ = subBuilder.buildPartial();
              }

              break;
            }
            case 490: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (logSlowSpStatements_ != null) {
                subBuilder = logSlowSpStatements_.toBuilder();
              }
              logSlowSpStatements_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(logSlowSpStatements_);
                logSlowSpStatements_ = subBuilder.buildPartial();
              }

              break;
            }
            case 496: {
              int rawValue = input.readEnum();
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                logSlowFilter_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              logSlowFilter_.add(rawValue);
              break;
            }
            case 498: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int rawValue = input.readEnum();
                if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                  logSlowFilter_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000002;
                }
                logSlowFilter_.add(rawValue);
              }
              input.popLimit(oldLimit);
              break;
            }
            case 506: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (mdbPriorityChoiceMaxLag_ != null) {
                subBuilder = mdbPriorityChoiceMaxLag_.toBuilder();
              }
              mdbPriorityChoiceMaxLag_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mdbPriorityChoiceMaxLag_);
                mdbPriorityChoiceMaxLag_ = subBuilder.buildPartial();
              }

              break;
            }
            case 514: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (innodbPageSize_ != null) {
                subBuilder = innodbPageSize_.toBuilder();
              }
              innodbPageSize_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbPageSize_);
                innodbPageSize_ = subBuilder.buildPartial();
              }

              break;
            }
            case 522: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (innodbOnlineAlterLogMaxSize_ != null) {
                subBuilder = innodbOnlineAlterLogMaxSize_.toBuilder();
              }
              innodbOnlineAlterLogMaxSize_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbOnlineAlterLogMaxSize_);
                innodbOnlineAlterLogMaxSize_ = subBuilder.buildPartial();
              }

              break;
            }
            case 530: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (innodbFtMinTokenSize_ != null) {
                subBuilder = innodbFtMinTokenSize_.toBuilder();
              }
              innodbFtMinTokenSize_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbFtMinTokenSize_);
                innodbFtMinTokenSize_ = subBuilder.buildPartial();
              }

              break;
            }
            case 538: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (innodbFtMaxTokenSize_ != null) {
                subBuilder = innodbFtMaxTokenSize_.toBuilder();
              }
              innodbFtMaxTokenSize_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbFtMaxTokenSize_);
                innodbFtMaxTokenSize_ = subBuilder.buildPartial();
              }

              break;
            }
            case 546: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (lowerCaseTableNames_ != null) {
                subBuilder = lowerCaseTableNames_.toBuilder();
              }
              lowerCaseTableNames_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(lowerCaseTableNames_);
                lowerCaseTableNames_ = subBuilder.buildPartial();
              }

              break;
            }
            case 554: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxSpRecursionDepth_ != null) {
                subBuilder = maxSpRecursionDepth_.toBuilder();
              }
              maxSpRecursionDepth_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxSpRecursionDepth_);
                maxSpRecursionDepth_ = subBuilder.buildPartial();
              }

              break;
            }
            case 562: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (innodbCompressionLevel_ != null) {
                subBuilder = innodbCompressionLevel_.toBuilder();
              }
              innodbCompressionLevel_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbCompressionLevel_);
                innodbCompressionLevel_ = subBuilder.buildPartial();
              }

              break;
            }
            case 568: {
              int rawValue = input.readEnum();

              binlogTransactionDependencyTracking_ = rawValue;
              break;
            }
            case 578: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (autocommit_ != null) {
                subBuilder = autocommit_.toBuilder();
              }
              autocommit_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(autocommit_);
                autocommit_ = subBuilder.buildPartial();
              }

              break;
            }
            case 586: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (innodbStatusOutput_ != null) {
                subBuilder = innodbStatusOutput_.toBuilder();
              }
              innodbStatusOutput_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbStatusOutput_);
                innodbStatusOutput_ = subBuilder.buildPartial();
              }

              break;
            }
            case 594: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (innodbStrictMode_ != null) {
                subBuilder = innodbStrictMode_.toBuilder();
              }
              innodbStrictMode_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbStrictMode_);
                innodbStrictMode_ = subBuilder.buildPartial();
              }

              break;
            }
            case 602: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (innodbPrintLockWaitTimeoutInfo_ != null) {
                subBuilder = innodbPrintLockWaitTimeoutInfo_.toBuilder();
              }
              innodbPrintLockWaitTimeoutInfo_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbPrintLockWaitTimeoutInfo_);
                innodbPrintLockWaitTimeoutInfo_ = subBuilder.buildPartial();
              }

              break;
            }
            case 610: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (logErrorVerbosity_ != null) {
                subBuilder = logErrorVerbosity_.toBuilder();
              }
              logErrorVerbosity_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(logErrorVerbosity_);
                logErrorVerbosity_ = subBuilder.buildPartial();
              }

              break;
            }
            case 618: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxDigestLength_ != null) {
                subBuilder = maxDigestLength_.toBuilder();
              }
              maxDigestLength_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxDigestLength_);
                maxDigestLength_ = subBuilder.buildPartial();
              }

              break;
            }
            case 626: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (lockWaitTimeout_ != null) {
                subBuilder = lockWaitTimeout_.toBuilder();
              }
              lockWaitTimeout_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(lockWaitTimeout_);
                lockWaitTimeout_ = subBuilder.buildPartial();
              }

              break;
            }
            case 634: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxPreparedStmtCount_ != null) {
                subBuilder = maxPreparedStmtCount_.toBuilder();
              }
              maxPreparedStmtCount_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxPreparedStmtCount_);
                maxPreparedStmtCount_ = subBuilder.buildPartial();
              }

              break;
            }
            case 642: {
              java.lang.String s = input.readStringRequireUtf8();

              optimizerSwitch_ = s;
              break;
            }
            case 650: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (optimizerSearchDepth_ != null) {
                subBuilder = optimizerSearchDepth_.toBuilder();
              }
              optimizerSearchDepth_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(optimizerSearchDepth_);
                optimizerSearchDepth_ = subBuilder.buildPartial();
              }

              break;
            }
            case 658: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (userstat_ != null) {
                subBuilder = userstat_.toBuilder();
              }
              userstat_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(userstat_);
                userstat_ = subBuilder.buildPartial();
              }

              break;
            }
            case 666: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxExecutionTime_ != null) {
                subBuilder = maxExecutionTime_.toBuilder();
              }
              maxExecutionTime_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxExecutionTime_);
                maxExecutionTime_ = subBuilder.buildPartial();
              }

              break;
            }
            case 672: {
              int rawValue = input.readEnum();

              auditLogPolicy_ = rawValue;
              break;
            }
            case 682: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (replicationSenderObserveCommitOnly_ != null) {
                subBuilder = replicationSenderObserveCommitOnly_.toBuilder();
              }
              replicationSenderObserveCommitOnly_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(replicationSenderObserveCommitOnly_);
                replicationSenderObserveCommitOnly_ = subBuilder.buildPartial();
              }

              break;
            }
            case 690: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (replicationOptimizeForStaticPluginConfig_ != null) {
                subBuilder = replicationOptimizeForStaticPluginConfig_.toBuilder();
              }
              replicationOptimizeForStaticPluginConfig_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(replicationOptimizeForStaticPluginConfig_);
                replicationOptimizeForStaticPluginConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            case 698: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (innodbLruScanDepth_ != null) {
                subBuilder = innodbLruScanDepth_.toBuilder();
              }
              innodbLruScanDepth_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innodbLruScanDepth_);
                innodbLruScanDepth_ = subBuilder.buildPartial();
              }

              break;
            }
            case 706: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (sqlRequirePrimaryKey_ != null) {
                subBuilder = sqlRequirePrimaryKey_.toBuilder();
              }
              sqlRequirePrimaryKey_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(sqlRequirePrimaryKey_);
                sqlRequirePrimaryKey_ = subBuilder.buildPartial();
              }

              break;
            }
            case 714: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (mdbForceSsl_ != null) {
                subBuilder = mdbForceSsl_.toBuilder();
              }
              mdbForceSsl_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mdbForceSsl_);
                mdbForceSsl_ = subBuilder.buildPartial();
              }

              break;
            }
            case 720: {
              int rawValue = input.readEnum();

              innodbChangeBuffering_ = rawValue;
              break;
            }
            case 730: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxWriteLockCount_ != null) {
                subBuilder = maxWriteLockCount_.toBuilder();
              }
              maxWriteLockCount_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxWriteLockCount_);
                maxWriteLockCount_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          sqlMode_ = java.util.Collections.unmodifiableList(sqlMode_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          logSlowFilter_ = java.util.Collections.unmodifiableList(logSlowFilter_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig8_0_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig8_0_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.class, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder.class);
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode}
     */
    public enum SQLMode
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>SQLMODE_UNSPECIFIED = 0;</code>
       */
      SQLMODE_UNSPECIFIED(0),
      /**
       * <code>ALLOW_INVALID_DATES = 1;</code>
       */
      ALLOW_INVALID_DATES(1),
      /**
       * <code>ANSI_QUOTES = 2;</code>
       */
      ANSI_QUOTES(2),
      /**
       * <code>ERROR_FOR_DIVISION_BY_ZERO = 3;</code>
       */
      ERROR_FOR_DIVISION_BY_ZERO(3),
      /**
       * <code>HIGH_NOT_PRECEDENCE = 4;</code>
       */
      HIGH_NOT_PRECEDENCE(4),
      /**
       * <code>IGNORE_SPACE = 5;</code>
       */
      IGNORE_SPACE(5),
      /**
       * <code>NO_AUTO_VALUE_ON_ZERO = 6;</code>
       */
      NO_AUTO_VALUE_ON_ZERO(6),
      /**
       * <code>NO_BACKSLASH_ESCAPES = 7;</code>
       */
      NO_BACKSLASH_ESCAPES(7),
      /**
       * <code>NO_ENGINE_SUBSTITUTION = 8;</code>
       */
      NO_ENGINE_SUBSTITUTION(8),
      /**
       * <code>NO_UNSIGNED_SUBTRACTION = 9;</code>
       */
      NO_UNSIGNED_SUBTRACTION(9),
      /**
       * <code>NO_ZERO_DATE = 10;</code>
       */
      NO_ZERO_DATE(10),
      /**
       * <code>NO_ZERO_IN_DATE = 11;</code>
       */
      NO_ZERO_IN_DATE(11),
      /**
       * <code>ONLY_FULL_GROUP_BY = 15;</code>
       */
      ONLY_FULL_GROUP_BY(15),
      /**
       * <code>PAD_CHAR_TO_FULL_LENGTH = 16;</code>
       */
      PAD_CHAR_TO_FULL_LENGTH(16),
      /**
       * <code>PIPES_AS_CONCAT = 17;</code>
       */
      PIPES_AS_CONCAT(17),
      /**
       * <code>REAL_AS_FLOAT = 18;</code>
       */
      REAL_AS_FLOAT(18),
      /**
       * <code>STRICT_ALL_TABLES = 19;</code>
       */
      STRICT_ALL_TABLES(19),
      /**
       * <code>STRICT_TRANS_TABLES = 20;</code>
       */
      STRICT_TRANS_TABLES(20),
      /**
       * <code>TIME_TRUNCATE_FRACTIONAL = 21;</code>
       */
      TIME_TRUNCATE_FRACTIONAL(21),
      /**
       * <code>ANSI = 22;</code>
       */
      ANSI(22),
      /**
       * <code>TRADITIONAL = 23;</code>
       */
      TRADITIONAL(23),
      /**
       * <code>NO_DIR_IN_CREATE = 24;</code>
       */
      NO_DIR_IN_CREATE(24),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>SQLMODE_UNSPECIFIED = 0;</code>
       */
      public static final int SQLMODE_UNSPECIFIED_VALUE = 0;
      /**
       * <code>ALLOW_INVALID_DATES = 1;</code>
       */
      public static final int ALLOW_INVALID_DATES_VALUE = 1;
      /**
       * <code>ANSI_QUOTES = 2;</code>
       */
      public static final int ANSI_QUOTES_VALUE = 2;
      /**
       * <code>ERROR_FOR_DIVISION_BY_ZERO = 3;</code>
       */
      public static final int ERROR_FOR_DIVISION_BY_ZERO_VALUE = 3;
      /**
       * <code>HIGH_NOT_PRECEDENCE = 4;</code>
       */
      public static final int HIGH_NOT_PRECEDENCE_VALUE = 4;
      /**
       * <code>IGNORE_SPACE = 5;</code>
       */
      public static final int IGNORE_SPACE_VALUE = 5;
      /**
       * <code>NO_AUTO_VALUE_ON_ZERO = 6;</code>
       */
      public static final int NO_AUTO_VALUE_ON_ZERO_VALUE = 6;
      /**
       * <code>NO_BACKSLASH_ESCAPES = 7;</code>
       */
      public static final int NO_BACKSLASH_ESCAPES_VALUE = 7;
      /**
       * <code>NO_ENGINE_SUBSTITUTION = 8;</code>
       */
      public static final int NO_ENGINE_SUBSTITUTION_VALUE = 8;
      /**
       * <code>NO_UNSIGNED_SUBTRACTION = 9;</code>
       */
      public static final int NO_UNSIGNED_SUBTRACTION_VALUE = 9;
      /**
       * <code>NO_ZERO_DATE = 10;</code>
       */
      public static final int NO_ZERO_DATE_VALUE = 10;
      /**
       * <code>NO_ZERO_IN_DATE = 11;</code>
       */
      public static final int NO_ZERO_IN_DATE_VALUE = 11;
      /**
       * <code>ONLY_FULL_GROUP_BY = 15;</code>
       */
      public static final int ONLY_FULL_GROUP_BY_VALUE = 15;
      /**
       * <code>PAD_CHAR_TO_FULL_LENGTH = 16;</code>
       */
      public static final int PAD_CHAR_TO_FULL_LENGTH_VALUE = 16;
      /**
       * <code>PIPES_AS_CONCAT = 17;</code>
       */
      public static final int PIPES_AS_CONCAT_VALUE = 17;
      /**
       * <code>REAL_AS_FLOAT = 18;</code>
       */
      public static final int REAL_AS_FLOAT_VALUE = 18;
      /**
       * <code>STRICT_ALL_TABLES = 19;</code>
       */
      public static final int STRICT_ALL_TABLES_VALUE = 19;
      /**
       * <code>STRICT_TRANS_TABLES = 20;</code>
       */
      public static final int STRICT_TRANS_TABLES_VALUE = 20;
      /**
       * <code>TIME_TRUNCATE_FRACTIONAL = 21;</code>
       */
      public static final int TIME_TRUNCATE_FRACTIONAL_VALUE = 21;
      /**
       * <code>ANSI = 22;</code>
       */
      public static final int ANSI_VALUE = 22;
      /**
       * <code>TRADITIONAL = 23;</code>
       */
      public static final int TRADITIONAL_VALUE = 23;
      /**
       * <code>NO_DIR_IN_CREATE = 24;</code>
       */
      public static final int NO_DIR_IN_CREATE_VALUE = 24;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static SQLMode valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static SQLMode forNumber(int value) {
        switch (value) {
          case 0: return SQLMODE_UNSPECIFIED;
          case 1: return ALLOW_INVALID_DATES;
          case 2: return ANSI_QUOTES;
          case 3: return ERROR_FOR_DIVISION_BY_ZERO;
          case 4: return HIGH_NOT_PRECEDENCE;
          case 5: return IGNORE_SPACE;
          case 6: return NO_AUTO_VALUE_ON_ZERO;
          case 7: return NO_BACKSLASH_ESCAPES;
          case 8: return NO_ENGINE_SUBSTITUTION;
          case 9: return NO_UNSIGNED_SUBTRACTION;
          case 10: return NO_ZERO_DATE;
          case 11: return NO_ZERO_IN_DATE;
          case 15: return ONLY_FULL_GROUP_BY;
          case 16: return PAD_CHAR_TO_FULL_LENGTH;
          case 17: return PIPES_AS_CONCAT;
          case 18: return REAL_AS_FLOAT;
          case 19: return STRICT_ALL_TABLES;
          case 20: return STRICT_TRANS_TABLES;
          case 21: return TIME_TRUNCATE_FRACTIONAL;
          case 22: return ANSI;
          case 23: return TRADITIONAL;
          case 24: return NO_DIR_IN_CREATE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SQLMode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          SQLMode> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SQLMode>() {
              public SQLMode findValueByNumber(int number) {
                return SQLMode.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDescriptor().getEnumTypes().get(0);
      }

      private static final SQLMode[] VALUES = values();

      public static SQLMode valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private SQLMode(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode)
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuthPlugin}
     */
    public enum AuthPlugin
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>AUTH_PLUGIN_UNSPECIFIED = 0;</code>
       */
      AUTH_PLUGIN_UNSPECIFIED(0),
      /**
       * <pre>
       * Using [Native Pluggable Authentication](https://dev.mysql.com/doc/refman/8.0/en/native-pluggable-authentication.html).
       * </pre>
       *
       * <code>MYSQL_NATIVE_PASSWORD = 1;</code>
       */
      MYSQL_NATIVE_PASSWORD(1),
      /**
       * <pre>
       * Using [Caching SHA-2 Pluggable Authentication](https://dev.mysql.com/doc/refman/8.0/en/caching-sha2-pluggable-authentication.html).
       * </pre>
       *
       * <code>CACHING_SHA2_PASSWORD = 2;</code>
       */
      CACHING_SHA2_PASSWORD(2),
      /**
       * <pre>
       * Using [SHA-256 Pluggable Authentication](https://dev.mysql.com/doc/refman/8.0/en/sha256-pluggable-authentication.html).
       * </pre>
       *
       * <code>SHA256_PASSWORD = 3;</code>
       */
      SHA256_PASSWORD(3),
      /**
       * <pre>
       * Use [MYSQL_NO_LOGIN Pluggable Authentication](https://dev.mysql.com/doc/refman/8.0/en/no-login-pluggable-authentication.html).
       * </pre>
       *
       * <code>MYSQL_NO_LOGIN = 4;</code>
       */
      MYSQL_NO_LOGIN(4),
      /**
       * <pre>
       * Use [IAM Pluggable Authentication](https://yandex.cloud/en/docs/iam/concepts/authorization/).
       * </pre>
       *
       * <code>MDB_IAMPROXY_AUTH = 5;</code>
       */
      MDB_IAMPROXY_AUTH(5),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>AUTH_PLUGIN_UNSPECIFIED = 0;</code>
       */
      public static final int AUTH_PLUGIN_UNSPECIFIED_VALUE = 0;
      /**
       * <pre>
       * Using [Native Pluggable Authentication](https://dev.mysql.com/doc/refman/8.0/en/native-pluggable-authentication.html).
       * </pre>
       *
       * <code>MYSQL_NATIVE_PASSWORD = 1;</code>
       */
      public static final int MYSQL_NATIVE_PASSWORD_VALUE = 1;
      /**
       * <pre>
       * Using [Caching SHA-2 Pluggable Authentication](https://dev.mysql.com/doc/refman/8.0/en/caching-sha2-pluggable-authentication.html).
       * </pre>
       *
       * <code>CACHING_SHA2_PASSWORD = 2;</code>
       */
      public static final int CACHING_SHA2_PASSWORD_VALUE = 2;
      /**
       * <pre>
       * Using [SHA-256 Pluggable Authentication](https://dev.mysql.com/doc/refman/8.0/en/sha256-pluggable-authentication.html).
       * </pre>
       *
       * <code>SHA256_PASSWORD = 3;</code>
       */
      public static final int SHA256_PASSWORD_VALUE = 3;
      /**
       * <pre>
       * Use [MYSQL_NO_LOGIN Pluggable Authentication](https://dev.mysql.com/doc/refman/8.0/en/no-login-pluggable-authentication.html).
       * </pre>
       *
       * <code>MYSQL_NO_LOGIN = 4;</code>
       */
      public static final int MYSQL_NO_LOGIN_VALUE = 4;
      /**
       * <pre>
       * Use [IAM Pluggable Authentication](https://yandex.cloud/en/docs/iam/concepts/authorization/).
       * </pre>
       *
       * <code>MDB_IAMPROXY_AUTH = 5;</code>
       */
      public static final int MDB_IAMPROXY_AUTH_VALUE = 5;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static AuthPlugin valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static AuthPlugin forNumber(int value) {
        switch (value) {
          case 0: return AUTH_PLUGIN_UNSPECIFIED;
          case 1: return MYSQL_NATIVE_PASSWORD;
          case 2: return CACHING_SHA2_PASSWORD;
          case 3: return SHA256_PASSWORD;
          case 4: return MYSQL_NO_LOGIN;
          case 5: return MDB_IAMPROXY_AUTH;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<AuthPlugin>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          AuthPlugin> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<AuthPlugin>() {
              public AuthPlugin findValueByNumber(int number) {
                return AuthPlugin.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDescriptor().getEnumTypes().get(1);
      }

      private static final AuthPlugin[] VALUES = values();

      public static AuthPlugin valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private AuthPlugin(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuthPlugin)
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.TransactionIsolation}
     */
    public enum TransactionIsolation
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>TRANSACTION_ISOLATION_UNSPECIFIED = 0;</code>
       */
      TRANSACTION_ISOLATION_UNSPECIFIED(0),
      /**
       * <code>READ_COMMITTED = 1;</code>
       */
      READ_COMMITTED(1),
      /**
       * <code>REPEATABLE_READ = 2;</code>
       */
      REPEATABLE_READ(2),
      /**
       * <code>SERIALIZABLE = 3;</code>
       */
      SERIALIZABLE(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>TRANSACTION_ISOLATION_UNSPECIFIED = 0;</code>
       */
      public static final int TRANSACTION_ISOLATION_UNSPECIFIED_VALUE = 0;
      /**
       * <code>READ_COMMITTED = 1;</code>
       */
      public static final int READ_COMMITTED_VALUE = 1;
      /**
       * <code>REPEATABLE_READ = 2;</code>
       */
      public static final int REPEATABLE_READ_VALUE = 2;
      /**
       * <code>SERIALIZABLE = 3;</code>
       */
      public static final int SERIALIZABLE_VALUE = 3;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TransactionIsolation valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static TransactionIsolation forNumber(int value) {
        switch (value) {
          case 0: return TRANSACTION_ISOLATION_UNSPECIFIED;
          case 1: return READ_COMMITTED;
          case 2: return REPEATABLE_READ;
          case 3: return SERIALIZABLE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<TransactionIsolation>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          TransactionIsolation> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<TransactionIsolation>() {
              public TransactionIsolation findValueByNumber(int number) {
                return TransactionIsolation.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDescriptor().getEnumTypes().get(2);
      }

      private static final TransactionIsolation[] VALUES = values();

      public static TransactionIsolation valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private TransactionIsolation(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.TransactionIsolation)
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.BinlogRowImage}
     */
    public enum BinlogRowImage
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>BINLOG_ROW_IMAGE_UNSPECIFIED = 0;</code>
       */
      BINLOG_ROW_IMAGE_UNSPECIFIED(0),
      /**
       * <code>FULL = 1;</code>
       */
      FULL(1),
      /**
       * <code>MINIMAL = 2;</code>
       */
      MINIMAL(2),
      /**
       * <code>NOBLOB = 3;</code>
       */
      NOBLOB(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>BINLOG_ROW_IMAGE_UNSPECIFIED = 0;</code>
       */
      public static final int BINLOG_ROW_IMAGE_UNSPECIFIED_VALUE = 0;
      /**
       * <code>FULL = 1;</code>
       */
      public static final int FULL_VALUE = 1;
      /**
       * <code>MINIMAL = 2;</code>
       */
      public static final int MINIMAL_VALUE = 2;
      /**
       * <code>NOBLOB = 3;</code>
       */
      public static final int NOBLOB_VALUE = 3;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static BinlogRowImage valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static BinlogRowImage forNumber(int value) {
        switch (value) {
          case 0: return BINLOG_ROW_IMAGE_UNSPECIFIED;
          case 1: return FULL;
          case 2: return MINIMAL;
          case 3: return NOBLOB;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<BinlogRowImage>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          BinlogRowImage> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<BinlogRowImage>() {
              public BinlogRowImage findValueByNumber(int number) {
                return BinlogRowImage.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDescriptor().getEnumTypes().get(3);
      }

      private static final BinlogRowImage[] VALUES = values();

      public static BinlogRowImage valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private BinlogRowImage(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.BinlogRowImage)
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SlaveParallelType}
     */
    public enum SlaveParallelType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>SLAVE_PARALLEL_TYPE_UNSPECIFIED = 0;</code>
       */
      SLAVE_PARALLEL_TYPE_UNSPECIFIED(0),
      /**
       * <code>DATABASE = 1;</code>
       */
      DATABASE(1),
      /**
       * <code>LOGICAL_CLOCK = 2;</code>
       */
      LOGICAL_CLOCK(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>SLAVE_PARALLEL_TYPE_UNSPECIFIED = 0;</code>
       */
      public static final int SLAVE_PARALLEL_TYPE_UNSPECIFIED_VALUE = 0;
      /**
       * <code>DATABASE = 1;</code>
       */
      public static final int DATABASE_VALUE = 1;
      /**
       * <code>LOGICAL_CLOCK = 2;</code>
       */
      public static final int LOGICAL_CLOCK_VALUE = 2;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static SlaveParallelType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static SlaveParallelType forNumber(int value) {
        switch (value) {
          case 0: return SLAVE_PARALLEL_TYPE_UNSPECIFIED;
          case 1: return DATABASE;
          case 2: return LOGICAL_CLOCK;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SlaveParallelType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          SlaveParallelType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SlaveParallelType>() {
              public SlaveParallelType findValueByNumber(int number) {
                return SlaveParallelType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDescriptor().getEnumTypes().get(4);
      }

      private static final SlaveParallelType[] VALUES = values();

      public static SlaveParallelType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private SlaveParallelType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SlaveParallelType)
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowRateType}
     */
    public enum LogSlowRateType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>LOG_SLOW_RATE_TYPE_UNSPECIFIED = 0;</code>
       */
      LOG_SLOW_RATE_TYPE_UNSPECIFIED(0),
      /**
       * <code>SESSION = 1;</code>
       */
      SESSION(1),
      /**
       * <code>QUERY = 2;</code>
       */
      QUERY(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>LOG_SLOW_RATE_TYPE_UNSPECIFIED = 0;</code>
       */
      public static final int LOG_SLOW_RATE_TYPE_UNSPECIFIED_VALUE = 0;
      /**
       * <code>SESSION = 1;</code>
       */
      public static final int SESSION_VALUE = 1;
      /**
       * <code>QUERY = 2;</code>
       */
      public static final int QUERY_VALUE = 2;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static LogSlowRateType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static LogSlowRateType forNumber(int value) {
        switch (value) {
          case 0: return LOG_SLOW_RATE_TYPE_UNSPECIFIED;
          case 1: return SESSION;
          case 2: return QUERY;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<LogSlowRateType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          LogSlowRateType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<LogSlowRateType>() {
              public LogSlowRateType findValueByNumber(int number) {
                return LogSlowRateType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDescriptor().getEnumTypes().get(5);
      }

      private static final LogSlowRateType[] VALUES = values();

      public static LogSlowRateType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private LogSlowRateType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowRateType)
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowFilterType}
     */
    public enum LogSlowFilterType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>LOG_SLOW_FILTER_TYPE_UNSPECIFIED = 0;</code>
       */
      LOG_SLOW_FILTER_TYPE_UNSPECIFIED(0),
      /**
       * <code>FULL_SCAN = 1;</code>
       */
      FULL_SCAN(1),
      /**
       * <code>FULL_JOIN = 2;</code>
       */
      FULL_JOIN(2),
      /**
       * <code>TMP_TABLE = 3;</code>
       */
      TMP_TABLE(3),
      /**
       * <code>TMP_TABLE_ON_DISK = 4;</code>
       */
      TMP_TABLE_ON_DISK(4),
      /**
       * <code>FILESORT = 5;</code>
       */
      FILESORT(5),
      /**
       * <code>FILESORT_ON_DISK = 6;</code>
       */
      FILESORT_ON_DISK(6),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>LOG_SLOW_FILTER_TYPE_UNSPECIFIED = 0;</code>
       */
      public static final int LOG_SLOW_FILTER_TYPE_UNSPECIFIED_VALUE = 0;
      /**
       * <code>FULL_SCAN = 1;</code>
       */
      public static final int FULL_SCAN_VALUE = 1;
      /**
       * <code>FULL_JOIN = 2;</code>
       */
      public static final int FULL_JOIN_VALUE = 2;
      /**
       * <code>TMP_TABLE = 3;</code>
       */
      public static final int TMP_TABLE_VALUE = 3;
      /**
       * <code>TMP_TABLE_ON_DISK = 4;</code>
       */
      public static final int TMP_TABLE_ON_DISK_VALUE = 4;
      /**
       * <code>FILESORT = 5;</code>
       */
      public static final int FILESORT_VALUE = 5;
      /**
       * <code>FILESORT_ON_DISK = 6;</code>
       */
      public static final int FILESORT_ON_DISK_VALUE = 6;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static LogSlowFilterType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static LogSlowFilterType forNumber(int value) {
        switch (value) {
          case 0: return LOG_SLOW_FILTER_TYPE_UNSPECIFIED;
          case 1: return FULL_SCAN;
          case 2: return FULL_JOIN;
          case 3: return TMP_TABLE;
          case 4: return TMP_TABLE_ON_DISK;
          case 5: return FILESORT;
          case 6: return FILESORT_ON_DISK;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<LogSlowFilterType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          LogSlowFilterType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<LogSlowFilterType>() {
              public LogSlowFilterType findValueByNumber(int number) {
                return LogSlowFilterType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDescriptor().getEnumTypes().get(6);
      }

      private static final LogSlowFilterType[] VALUES = values();

      public static LogSlowFilterType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private LogSlowFilterType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowFilterType)
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.BinlogTransactionDependencyTracking}
     */
    public enum BinlogTransactionDependencyTracking
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>BINLOG_TRANSACTION_DEPENDENCY_TRACKING_UNSPECIFIED = 0;</code>
       */
      BINLOG_TRANSACTION_DEPENDENCY_TRACKING_UNSPECIFIED(0),
      /**
       * <code>COMMIT_ORDER = 1;</code>
       */
      COMMIT_ORDER(1),
      /**
       * <code>WRITESET = 2;</code>
       */
      WRITESET(2),
      /**
       * <code>WRITESET_SESSION = 3;</code>
       */
      WRITESET_SESSION(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>BINLOG_TRANSACTION_DEPENDENCY_TRACKING_UNSPECIFIED = 0;</code>
       */
      public static final int BINLOG_TRANSACTION_DEPENDENCY_TRACKING_UNSPECIFIED_VALUE = 0;
      /**
       * <code>COMMIT_ORDER = 1;</code>
       */
      public static final int COMMIT_ORDER_VALUE = 1;
      /**
       * <code>WRITESET = 2;</code>
       */
      public static final int WRITESET_VALUE = 2;
      /**
       * <code>WRITESET_SESSION = 3;</code>
       */
      public static final int WRITESET_SESSION_VALUE = 3;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static BinlogTransactionDependencyTracking valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static BinlogTransactionDependencyTracking forNumber(int value) {
        switch (value) {
          case 0: return BINLOG_TRANSACTION_DEPENDENCY_TRACKING_UNSPECIFIED;
          case 1: return COMMIT_ORDER;
          case 2: return WRITESET;
          case 3: return WRITESET_SESSION;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<BinlogTransactionDependencyTracking>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          BinlogTransactionDependencyTracking> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<BinlogTransactionDependencyTracking>() {
              public BinlogTransactionDependencyTracking findValueByNumber(int number) {
                return BinlogTransactionDependencyTracking.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDescriptor().getEnumTypes().get(7);
      }

      private static final BinlogTransactionDependencyTracking[] VALUES = values();

      public static BinlogTransactionDependencyTracking valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private BinlogTransactionDependencyTracking(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.BinlogTransactionDependencyTracking)
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuditLogPolicy}
     */
    public enum AuditLogPolicy
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>AUDIT_LOG_POLICY_UNSPECIFIED = 0;</code>
       */
      AUDIT_LOG_POLICY_UNSPECIFIED(0),
      /**
       * <code>ALL = 1;</code>
       */
      ALL(1),
      /**
       * <code>LOGINS = 2;</code>
       */
      LOGINS(2),
      /**
       * <code>QUERIES = 3;</code>
       */
      QUERIES(3),
      /**
       * <code>NONE = 4;</code>
       */
      NONE(4),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>AUDIT_LOG_POLICY_UNSPECIFIED = 0;</code>
       */
      public static final int AUDIT_LOG_POLICY_UNSPECIFIED_VALUE = 0;
      /**
       * <code>ALL = 1;</code>
       */
      public static final int ALL_VALUE = 1;
      /**
       * <code>LOGINS = 2;</code>
       */
      public static final int LOGINS_VALUE = 2;
      /**
       * <code>QUERIES = 3;</code>
       */
      public static final int QUERIES_VALUE = 3;
      /**
       * <code>NONE = 4;</code>
       */
      public static final int NONE_VALUE = 4;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static AuditLogPolicy valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static AuditLogPolicy forNumber(int value) {
        switch (value) {
          case 0: return AUDIT_LOG_POLICY_UNSPECIFIED;
          case 1: return ALL;
          case 2: return LOGINS;
          case 3: return QUERIES;
          case 4: return NONE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<AuditLogPolicy>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          AuditLogPolicy> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<AuditLogPolicy>() {
              public AuditLogPolicy findValueByNumber(int number) {
                return AuditLogPolicy.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDescriptor().getEnumTypes().get(8);
      }

      private static final AuditLogPolicy[] VALUES = values();

      public static AuditLogPolicy valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private AuditLogPolicy(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuditLogPolicy)
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.InnodbChangeBuffering}
     */
    public enum InnodbChangeBuffering
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>INNODB_CHANGE_BUFFERING_UNSPECIFIED = 0;</code>
       */
      INNODB_CHANGE_BUFFERING_UNSPECIFIED(0),
      /**
       * <code>INNODB_CHANGE_BUFFERING_NONE = 1;</code>
       */
      INNODB_CHANGE_BUFFERING_NONE(1),
      /**
       * <code>INNODB_CHANGE_BUFFERING_INSERTS = 2;</code>
       */
      INNODB_CHANGE_BUFFERING_INSERTS(2),
      /**
       * <code>INNODB_CHANGE_BUFFERING_DELETES = 3;</code>
       */
      INNODB_CHANGE_BUFFERING_DELETES(3),
      /**
       * <code>INNODB_CHANGE_BUFFERING_CHANGES = 4;</code>
       */
      INNODB_CHANGE_BUFFERING_CHANGES(4),
      /**
       * <code>INNODB_CHANGE_BUFFERING_PURGES = 5;</code>
       */
      INNODB_CHANGE_BUFFERING_PURGES(5),
      /**
       * <code>INNODB_CHANGE_BUFFERING_ALL = 6;</code>
       */
      INNODB_CHANGE_BUFFERING_ALL(6),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>INNODB_CHANGE_BUFFERING_UNSPECIFIED = 0;</code>
       */
      public static final int INNODB_CHANGE_BUFFERING_UNSPECIFIED_VALUE = 0;
      /**
       * <code>INNODB_CHANGE_BUFFERING_NONE = 1;</code>
       */
      public static final int INNODB_CHANGE_BUFFERING_NONE_VALUE = 1;
      /**
       * <code>INNODB_CHANGE_BUFFERING_INSERTS = 2;</code>
       */
      public static final int INNODB_CHANGE_BUFFERING_INSERTS_VALUE = 2;
      /**
       * <code>INNODB_CHANGE_BUFFERING_DELETES = 3;</code>
       */
      public static final int INNODB_CHANGE_BUFFERING_DELETES_VALUE = 3;
      /**
       * <code>INNODB_CHANGE_BUFFERING_CHANGES = 4;</code>
       */
      public static final int INNODB_CHANGE_BUFFERING_CHANGES_VALUE = 4;
      /**
       * <code>INNODB_CHANGE_BUFFERING_PURGES = 5;</code>
       */
      public static final int INNODB_CHANGE_BUFFERING_PURGES_VALUE = 5;
      /**
       * <code>INNODB_CHANGE_BUFFERING_ALL = 6;</code>
       */
      public static final int INNODB_CHANGE_BUFFERING_ALL_VALUE = 6;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static InnodbChangeBuffering valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static InnodbChangeBuffering forNumber(int value) {
        switch (value) {
          case 0: return INNODB_CHANGE_BUFFERING_UNSPECIFIED;
          case 1: return INNODB_CHANGE_BUFFERING_NONE;
          case 2: return INNODB_CHANGE_BUFFERING_INSERTS;
          case 3: return INNODB_CHANGE_BUFFERING_DELETES;
          case 4: return INNODB_CHANGE_BUFFERING_CHANGES;
          case 5: return INNODB_CHANGE_BUFFERING_PURGES;
          case 6: return INNODB_CHANGE_BUFFERING_ALL;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<InnodbChangeBuffering>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          InnodbChangeBuffering> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<InnodbChangeBuffering>() {
              public InnodbChangeBuffering findValueByNumber(int number) {
                return InnodbChangeBuffering.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDescriptor().getEnumTypes().get(9);
      }

      private static final InnodbChangeBuffering[] VALUES = values();

      public static InnodbChangeBuffering valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private InnodbChangeBuffering(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.InnodbChangeBuffering)
    }

    public static final int INNODB_BUFFER_POOL_SIZE_FIELD_NUMBER = 1;
    private com.google.protobuf.Int64Value innodbBufferPoolSize_;
    /**
     * <pre>
     * Size of the InnoDB buffer pool used for caching table and index data.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
     * @return Whether the innodbBufferPoolSize field is set.
     */
    @java.lang.Override
    public boolean hasInnodbBufferPoolSize() {
      return innodbBufferPoolSize_ != null;
    }
    /**
     * <pre>
     * Size of the InnoDB buffer pool used for caching table and index data.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
     * @return The innodbBufferPoolSize.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getInnodbBufferPoolSize() {
      return innodbBufferPoolSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbBufferPoolSize_;
    }
    /**
     * <pre>
     * Size of the InnoDB buffer pool used for caching table and index data.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getInnodbBufferPoolSizeOrBuilder() {
      return getInnodbBufferPoolSize();
    }

    public static final int MAX_CONNECTIONS_FIELD_NUMBER = 2;
    private com.google.protobuf.Int64Value maxConnections_;
    /**
     * <pre>
     * The maximum permitted number of simultaneous client connections.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-16384"];</code>
     * @return Whether the maxConnections field is set.
     */
    @java.lang.Override
    public boolean hasMaxConnections() {
      return maxConnections_ != null;
    }
    /**
     * <pre>
     * The maximum permitted number of simultaneous client connections.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-16384"];</code>
     * @return The maxConnections.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxConnections() {
      return maxConnections_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxConnections_;
    }
    /**
     * <pre>
     * The maximum permitted number of simultaneous client connections.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-16384"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxConnectionsOrBuilder() {
      return getMaxConnections();
    }

    public static final int LONG_QUERY_TIME_FIELD_NUMBER = 3;
    private com.google.protobuf.DoubleValue longQueryTime_;
    /**
     * <pre>
     * Time that it takes to process a query before it is considered slow.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time) for details.
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
     * @return Whether the longQueryTime field is set.
     */
    @java.lang.Override
    public boolean hasLongQueryTime() {
      return longQueryTime_ != null;
    }
    /**
     * <pre>
     * Time that it takes to process a query before it is considered slow.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time) for details.
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
     * @return The longQueryTime.
     */
    @java.lang.Override
    public com.google.protobuf.DoubleValue getLongQueryTime() {
      return longQueryTime_ == null ? com.google.protobuf.DoubleValue.getDefaultInstance() : longQueryTime_;
    }
    /**
     * <pre>
     * Time that it takes to process a query before it is considered slow.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time) for details.
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
     */
    @java.lang.Override
    public com.google.protobuf.DoubleValueOrBuilder getLongQueryTimeOrBuilder() {
      return getLongQueryTime();
    }

    public static final int GENERAL_LOG_FIELD_NUMBER = 4;
    private com.google.protobuf.BoolValue generalLog_;
    /**
     * <pre>
     * Enable writing of general query log of MySQL.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue general_log = 4;</code>
     * @return Whether the generalLog field is set.
     */
    @java.lang.Override
    public boolean hasGeneralLog() {
      return generalLog_ != null;
    }
    /**
     * <pre>
     * Enable writing of general query log of MySQL.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue general_log = 4;</code>
     * @return The generalLog.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getGeneralLog() {
      return generalLog_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : generalLog_;
    }
    /**
     * <pre>
     * Enable writing of general query log of MySQL.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue general_log = 4;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getGeneralLogOrBuilder() {
      return getGeneralLog();
    }

    public static final int AUDIT_LOG_FIELD_NUMBER = 5;
    private com.google.protobuf.BoolValue auditLog_;
    /**
     * <pre>
     * Enable writing of audit log of MySQL.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue audit_log = 5;</code>
     * @return Whether the auditLog field is set.
     */
    @java.lang.Override
    public boolean hasAuditLog() {
      return auditLog_ != null;
    }
    /**
     * <pre>
     * Enable writing of audit log of MySQL.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue audit_log = 5;</code>
     * @return The auditLog.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getAuditLog() {
      return auditLog_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : auditLog_;
    }
    /**
     * <pre>
     * Enable writing of audit log of MySQL.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue audit_log = 5;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getAuditLogOrBuilder() {
      return getAuditLog();
    }

    public static final int SQL_MODE_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> sqlMode_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode> sqlMode_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode>() {
              public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode convert(java.lang.Integer from) {
                @SuppressWarnings("deprecation")
                yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode result = yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode.valueOf(from);
                return result == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode.UNRECOGNIZED : result;
              }
            };
    /**
     * <pre>
     * Server SQL mode of MySQL.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting) for details.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
     * @return A list containing the sqlMode.
     */
    @java.lang.Override
    public java.util.List<yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode> getSqlModeList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode>(sqlMode_, sqlMode_converter_);
    }
    /**
     * <pre>
     * Server SQL mode of MySQL.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting) for details.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
     * @return The count of sqlMode.
     */
    @java.lang.Override
    public int getSqlModeCount() {
      return sqlMode_.size();
    }
    /**
     * <pre>
     * Server SQL mode of MySQL.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting) for details.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
     * @param index The index of the element to return.
     * @return The sqlMode at the given index.
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode getSqlMode(int index) {
      return sqlMode_converter_.convert(sqlMode_.get(index));
    }
    /**
     * <pre>
     * Server SQL mode of MySQL.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting) for details.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
     * @return A list containing the enum numeric values on the wire for sqlMode.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
    getSqlModeValueList() {
      return sqlMode_;
    }
    /**
     * <pre>
     * Server SQL mode of MySQL.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting) for details.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of sqlMode at the given index.
     */
    @java.lang.Override
    public int getSqlModeValue(int index) {
      return sqlMode_.get(index);
    }
    private int sqlModeMemoizedSerializedSize;

    public static final int MAX_ALLOWED_PACKET_FIELD_NUMBER = 7;
    private com.google.protobuf.Int64Value maxAllowedPacket_;
    /**
     * <pre>
     * The maximum size in bytes of one packet.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-1073741824"];</code>
     * @return Whether the maxAllowedPacket field is set.
     */
    @java.lang.Override
    public boolean hasMaxAllowedPacket() {
      return maxAllowedPacket_ != null;
    }
    /**
     * <pre>
     * The maximum size in bytes of one packet.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-1073741824"];</code>
     * @return The maxAllowedPacket.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxAllowedPacket() {
      return maxAllowedPacket_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxAllowedPacket_;
    }
    /**
     * <pre>
     * The maximum size in bytes of one packet.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-1073741824"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxAllowedPacketOrBuilder() {
      return getMaxAllowedPacket();
    }

    public static final int DEFAULT_AUTHENTICATION_PLUGIN_FIELD_NUMBER = 8;
    private int defaultAuthenticationPlugin_;
    /**
     * <pre>
     * Authentication plugin used in the managed MySQL cluster.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_default_authentication_plugin) for details.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuthPlugin default_authentication_plugin = 8;</code>
     * @return The enum numeric value on the wire for defaultAuthenticationPlugin.
     */
    @java.lang.Override public int getDefaultAuthenticationPluginValue() {
      return defaultAuthenticationPlugin_;
    }
    /**
     * <pre>
     * Authentication plugin used in the managed MySQL cluster.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_default_authentication_plugin) for details.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuthPlugin default_authentication_plugin = 8;</code>
     * @return The defaultAuthenticationPlugin.
     */
    @java.lang.Override public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuthPlugin getDefaultAuthenticationPlugin() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuthPlugin result = yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuthPlugin.valueOf(defaultAuthenticationPlugin_);
      return result == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuthPlugin.UNRECOGNIZED : result;
    }

    public static final int INNODB_FLUSH_LOG_AT_TRX_COMMIT_FIELD_NUMBER = 9;
    private com.google.protobuf.Int64Value innodbFlushLogAtTrxCommit_;
    /**
     * <pre>
     * Transaction log flush behaviour.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
     * @return Whether the innodbFlushLogAtTrxCommit field is set.
     */
    @java.lang.Override
    public boolean hasInnodbFlushLogAtTrxCommit() {
      return innodbFlushLogAtTrxCommit_ != null;
    }
    /**
     * <pre>
     * Transaction log flush behaviour.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
     * @return The innodbFlushLogAtTrxCommit.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getInnodbFlushLogAtTrxCommit() {
      return innodbFlushLogAtTrxCommit_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbFlushLogAtTrxCommit_;
    }
    /**
     * <pre>
     * Transaction log flush behaviour.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getInnodbFlushLogAtTrxCommitOrBuilder() {
      return getInnodbFlushLogAtTrxCommit();
    }

    public static final int INNODB_LOCK_WAIT_TIMEOUT_FIELD_NUMBER = 10;
    private com.google.protobuf.Int64Value innodbLockWaitTimeout_;
    /**
     * <pre>
     * Max time in seconds for a transaction to wait for a row lock.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
     * @return Whether the innodbLockWaitTimeout field is set.
     */
    @java.lang.Override
    public boolean hasInnodbLockWaitTimeout() {
      return innodbLockWaitTimeout_ != null;
    }
    /**
     * <pre>
     * Max time in seconds for a transaction to wait for a row lock.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
     * @return The innodbLockWaitTimeout.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getInnodbLockWaitTimeout() {
      return innodbLockWaitTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbLockWaitTimeout_;
    }
    /**
     * <pre>
     * Max time in seconds for a transaction to wait for a row lock.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getInnodbLockWaitTimeoutOrBuilder() {
      return getInnodbLockWaitTimeout();
    }

    public static final int TRANSACTION_ISOLATION_FIELD_NUMBER = 11;
    private int transactionIsolation_;
    /**
     * <pre>
     * Default transaction isolation level.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_transaction_isolation) for details.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.TransactionIsolation transaction_isolation = 11;</code>
     * @return The enum numeric value on the wire for transactionIsolation.
     */
    @java.lang.Override public int getTransactionIsolationValue() {
      return transactionIsolation_;
    }
    /**
     * <pre>
     * Default transaction isolation level.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_transaction_isolation) for details.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.TransactionIsolation transaction_isolation = 11;</code>
     * @return The transactionIsolation.
     */
    @java.lang.Override public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.TransactionIsolation getTransactionIsolation() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.TransactionIsolation result = yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.TransactionIsolation.valueOf(transactionIsolation_);
      return result == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.TransactionIsolation.UNRECOGNIZED : result;
    }

    public static final int INNODB_PRINT_ALL_DEADLOCKS_FIELD_NUMBER = 12;
    private com.google.protobuf.BoolValue innodbPrintAllDeadlocks_;
    /**
     * <pre>
     * Print information about deadlocks in error log.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
     * @return Whether the innodbPrintAllDeadlocks field is set.
     */
    @java.lang.Override
    public boolean hasInnodbPrintAllDeadlocks() {
      return innodbPrintAllDeadlocks_ != null;
    }
    /**
     * <pre>
     * Print information about deadlocks in error log.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
     * @return The innodbPrintAllDeadlocks.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getInnodbPrintAllDeadlocks() {
      return innodbPrintAllDeadlocks_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : innodbPrintAllDeadlocks_;
    }
    /**
     * <pre>
     * Print information about deadlocks in error log.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getInnodbPrintAllDeadlocksOrBuilder() {
      return getInnodbPrintAllDeadlocks();
    }

    public static final int NET_READ_TIMEOUT_FIELD_NUMBER = 13;
    private com.google.protobuf.Int64Value netReadTimeout_;
    /**
     * <pre>
     * The number of seconds to wait for more data from a connection before aborting the read.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_read_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
     * @return Whether the netReadTimeout field is set.
     */
    @java.lang.Override
    public boolean hasNetReadTimeout() {
      return netReadTimeout_ != null;
    }
    /**
     * <pre>
     * The number of seconds to wait for more data from a connection before aborting the read.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_read_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
     * @return The netReadTimeout.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getNetReadTimeout() {
      return netReadTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : netReadTimeout_;
    }
    /**
     * <pre>
     * The number of seconds to wait for more data from a connection before aborting the read.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_read_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getNetReadTimeoutOrBuilder() {
      return getNetReadTimeout();
    }

    public static final int NET_WRITE_TIMEOUT_FIELD_NUMBER = 14;
    private com.google.protobuf.Int64Value netWriteTimeout_;
    /**
     * <pre>
     * The number of seconds to wait for a block to be written to a connection before aborting the write.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_write_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
     * @return Whether the netWriteTimeout field is set.
     */
    @java.lang.Override
    public boolean hasNetWriteTimeout() {
      return netWriteTimeout_ != null;
    }
    /**
     * <pre>
     * The number of seconds to wait for a block to be written to a connection before aborting the write.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_write_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
     * @return The netWriteTimeout.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getNetWriteTimeout() {
      return netWriteTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : netWriteTimeout_;
    }
    /**
     * <pre>
     * The number of seconds to wait for a block to be written to a connection before aborting the write.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_write_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getNetWriteTimeoutOrBuilder() {
      return getNetWriteTimeout();
    }

    public static final int GROUP_CONCAT_MAX_LEN_FIELD_NUMBER = 15;
    private com.google.protobuf.Int64Value groupConcatMaxLen_;
    /**
     * <pre>
     * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_group_concat_max_len) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
     * @return Whether the groupConcatMaxLen field is set.
     */
    @java.lang.Override
    public boolean hasGroupConcatMaxLen() {
      return groupConcatMaxLen_ != null;
    }
    /**
     * <pre>
     * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_group_concat_max_len) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
     * @return The groupConcatMaxLen.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getGroupConcatMaxLen() {
      return groupConcatMaxLen_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : groupConcatMaxLen_;
    }
    /**
     * <pre>
     * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_group_concat_max_len) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getGroupConcatMaxLenOrBuilder() {
      return getGroupConcatMaxLen();
    }

    public static final int TMP_TABLE_SIZE_FIELD_NUMBER = 16;
    private com.google.protobuf.Int64Value tmpTableSize_;
    /**
     * <pre>
     * The maximum size of internal in-memory temporary tables.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmp_table_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-536870912"];</code>
     * @return Whether the tmpTableSize field is set.
     */
    @java.lang.Override
    public boolean hasTmpTableSize() {
      return tmpTableSize_ != null;
    }
    /**
     * <pre>
     * The maximum size of internal in-memory temporary tables.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmp_table_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-536870912"];</code>
     * @return The tmpTableSize.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getTmpTableSize() {
      return tmpTableSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : tmpTableSize_;
    }
    /**
     * <pre>
     * The maximum size of internal in-memory temporary tables.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmp_table_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-536870912"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getTmpTableSizeOrBuilder() {
      return getTmpTableSize();
    }

    public static final int MAX_HEAP_TABLE_SIZE_FIELD_NUMBER = 17;
    private com.google.protobuf.Int64Value maxHeapTableSize_;
    /**
     * <pre>
     * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_heap_table_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "16384-536870912"];</code>
     * @return Whether the maxHeapTableSize field is set.
     */
    @java.lang.Override
    public boolean hasMaxHeapTableSize() {
      return maxHeapTableSize_ != null;
    }
    /**
     * <pre>
     * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_heap_table_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "16384-536870912"];</code>
     * @return The maxHeapTableSize.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxHeapTableSize() {
      return maxHeapTableSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxHeapTableSize_;
    }
    /**
     * <pre>
     * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_heap_table_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "16384-536870912"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxHeapTableSizeOrBuilder() {
      return getMaxHeapTableSize();
    }

    public static final int DEFAULT_TIME_ZONE_FIELD_NUMBER = 18;
    private volatile java.lang.Object defaultTimeZone_;
    /**
     * <pre>
     * The servers default time zone.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-options.html#option_mysqld_default-time-zone) for details.
     * </pre>
     *
     * <code>string default_time_zone = 18;</code>
     * @return The defaultTimeZone.
     */
    @java.lang.Override
    public java.lang.String getDefaultTimeZone() {
      java.lang.Object ref = defaultTimeZone_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        defaultTimeZone_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The servers default time zone.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-options.html#option_mysqld_default-time-zone) for details.
     * </pre>
     *
     * <code>string default_time_zone = 18;</code>
     * @return The bytes for defaultTimeZone.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDefaultTimeZoneBytes() {
      java.lang.Object ref = defaultTimeZone_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        defaultTimeZone_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CHARACTER_SET_SERVER_FIELD_NUMBER = 19;
    private volatile java.lang.Object characterSetServer_;
    /**
     * <pre>
     * The servers default character set.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_character_set_server) for details.
     * </pre>
     *
     * <code>string character_set_server = 19;</code>
     * @return The characterSetServer.
     */
    @java.lang.Override
    public java.lang.String getCharacterSetServer() {
      java.lang.Object ref = characterSetServer_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        characterSetServer_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The servers default character set.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_character_set_server) for details.
     * </pre>
     *
     * <code>string character_set_server = 19;</code>
     * @return The bytes for characterSetServer.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCharacterSetServerBytes() {
      java.lang.Object ref = characterSetServer_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        characterSetServer_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int COLLATION_SERVER_FIELD_NUMBER = 20;
    private volatile java.lang.Object collationServer_;
    /**
     * <pre>
     * The server default collation.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_collation_server) for details.
     * </pre>
     *
     * <code>string collation_server = 20;</code>
     * @return The collationServer.
     */
    @java.lang.Override
    public java.lang.String getCollationServer() {
      java.lang.Object ref = collationServer_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        collationServer_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The server default collation.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_collation_server) for details.
     * </pre>
     *
     * <code>string collation_server = 20;</code>
     * @return The bytes for collationServer.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCollationServerBytes() {
      java.lang.Object ref = collationServer_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        collationServer_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int INNODB_ADAPTIVE_HASH_INDEX_FIELD_NUMBER = 21;
    private com.google.protobuf.BoolValue innodbAdaptiveHashIndex_;
    /**
     * <pre>
     * Enables InnoDB adaptive hash index.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_adaptive_hash_index) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_adaptive_hash_index = 21;</code>
     * @return Whether the innodbAdaptiveHashIndex field is set.
     */
    @java.lang.Override
    public boolean hasInnodbAdaptiveHashIndex() {
      return innodbAdaptiveHashIndex_ != null;
    }
    /**
     * <pre>
     * Enables InnoDB adaptive hash index.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_adaptive_hash_index) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_adaptive_hash_index = 21;</code>
     * @return The innodbAdaptiveHashIndex.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getInnodbAdaptiveHashIndex() {
      return innodbAdaptiveHashIndex_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : innodbAdaptiveHashIndex_;
    }
    /**
     * <pre>
     * Enables InnoDB adaptive hash index.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_adaptive_hash_index) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_adaptive_hash_index = 21;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getInnodbAdaptiveHashIndexOrBuilder() {
      return getInnodbAdaptiveHashIndex();
    }

    public static final int INNODB_NUMA_INTERLEAVE_FIELD_NUMBER = 22;
    private com.google.protobuf.BoolValue innodbNumaInterleave_;
    /**
     * <pre>
     * Enables the NUMA interleave memory policy for allocation of the InnoDB buffer pool.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_numa_interleave) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_numa_interleave = 22;</code>
     * @return Whether the innodbNumaInterleave field is set.
     */
    @java.lang.Override
    public boolean hasInnodbNumaInterleave() {
      return innodbNumaInterleave_ != null;
    }
    /**
     * <pre>
     * Enables the NUMA interleave memory policy for allocation of the InnoDB buffer pool.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_numa_interleave) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_numa_interleave = 22;</code>
     * @return The innodbNumaInterleave.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getInnodbNumaInterleave() {
      return innodbNumaInterleave_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : innodbNumaInterleave_;
    }
    /**
     * <pre>
     * Enables the NUMA interleave memory policy for allocation of the InnoDB buffer pool.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_numa_interleave) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_numa_interleave = 22;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getInnodbNumaInterleaveOrBuilder() {
      return getInnodbNumaInterleave();
    }

    public static final int INNODB_LOG_BUFFER_SIZE_FIELD_NUMBER = 23;
    private com.google.protobuf.Int64Value innodbLogBufferSize_;
    /**
     * <pre>
     * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_buffer_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_log_buffer_size = 23 [(.yandex.cloud.value) = "1048576-268435456"];</code>
     * @return Whether the innodbLogBufferSize field is set.
     */
    @java.lang.Override
    public boolean hasInnodbLogBufferSize() {
      return innodbLogBufferSize_ != null;
    }
    /**
     * <pre>
     * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_buffer_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_log_buffer_size = 23 [(.yandex.cloud.value) = "1048576-268435456"];</code>
     * @return The innodbLogBufferSize.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getInnodbLogBufferSize() {
      return innodbLogBufferSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbLogBufferSize_;
    }
    /**
     * <pre>
     * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_buffer_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_log_buffer_size = 23 [(.yandex.cloud.value) = "1048576-268435456"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getInnodbLogBufferSizeOrBuilder() {
      return getInnodbLogBufferSize();
    }

    public static final int INNODB_LOG_FILE_SIZE_FIELD_NUMBER = 24;
    private com.google.protobuf.Int64Value innodbLogFileSize_;
    /**
     * <pre>
     * The size in bytes of the single InnoDB Redo log file.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_file_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_log_file_size = 24 [(.yandex.cloud.value) = "268435456-4294967296"];</code>
     * @return Whether the innodbLogFileSize field is set.
     */
    @java.lang.Override
    public boolean hasInnodbLogFileSize() {
      return innodbLogFileSize_ != null;
    }
    /**
     * <pre>
     * The size in bytes of the single InnoDB Redo log file.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_file_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_log_file_size = 24 [(.yandex.cloud.value) = "268435456-4294967296"];</code>
     * @return The innodbLogFileSize.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getInnodbLogFileSize() {
      return innodbLogFileSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbLogFileSize_;
    }
    /**
     * <pre>
     * The size in bytes of the single InnoDB Redo log file.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_file_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_log_file_size = 24 [(.yandex.cloud.value) = "268435456-4294967296"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getInnodbLogFileSizeOrBuilder() {
      return getInnodbLogFileSize();
    }

    public static final int INNODB_IO_CAPACITY_FIELD_NUMBER = 25;
    private com.google.protobuf.Int64Value innodbIoCapacity_;
    /**
     * <pre>
     * Limits IO available for InnoDB background tasks.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_io_capacity = 25 [(.yandex.cloud.value) = "100-100000"];</code>
     * @return Whether the innodbIoCapacity field is set.
     */
    @java.lang.Override
    public boolean hasInnodbIoCapacity() {
      return innodbIoCapacity_ != null;
    }
    /**
     * <pre>
     * Limits IO available for InnoDB background tasks.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_io_capacity = 25 [(.yandex.cloud.value) = "100-100000"];</code>
     * @return The innodbIoCapacity.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getInnodbIoCapacity() {
      return innodbIoCapacity_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbIoCapacity_;
    }
    /**
     * <pre>
     * Limits IO available for InnoDB background tasks.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_io_capacity = 25 [(.yandex.cloud.value) = "100-100000"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getInnodbIoCapacityOrBuilder() {
      return getInnodbIoCapacity();
    }

    public static final int INNODB_IO_CAPACITY_MAX_FIELD_NUMBER = 26;
    private com.google.protobuf.Int64Value innodbIoCapacityMax_;
    /**
     * <pre>
     * Limits IO available for InnoDB background tasks.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity_max) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_io_capacity_max = 26 [(.yandex.cloud.value) = "100-100000"];</code>
     * @return Whether the innodbIoCapacityMax field is set.
     */
    @java.lang.Override
    public boolean hasInnodbIoCapacityMax() {
      return innodbIoCapacityMax_ != null;
    }
    /**
     * <pre>
     * Limits IO available for InnoDB background tasks.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity_max) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_io_capacity_max = 26 [(.yandex.cloud.value) = "100-100000"];</code>
     * @return The innodbIoCapacityMax.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getInnodbIoCapacityMax() {
      return innodbIoCapacityMax_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbIoCapacityMax_;
    }
    /**
     * <pre>
     * Limits IO available for InnoDB background tasks.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity_max) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_io_capacity_max = 26 [(.yandex.cloud.value) = "100-100000"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getInnodbIoCapacityMaxOrBuilder() {
      return getInnodbIoCapacityMax();
    }

    public static final int INNODB_READ_IO_THREADS_FIELD_NUMBER = 27;
    private com.google.protobuf.Int64Value innodbReadIoThreads_;
    /**
     * <pre>
     * The number of I/O threads for read operations in InnoDB.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_read_io_threads) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_read_io_threads = 27 [(.yandex.cloud.value) = "1-16"];</code>
     * @return Whether the innodbReadIoThreads field is set.
     */
    @java.lang.Override
    public boolean hasInnodbReadIoThreads() {
      return innodbReadIoThreads_ != null;
    }
    /**
     * <pre>
     * The number of I/O threads for read operations in InnoDB.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_read_io_threads) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_read_io_threads = 27 [(.yandex.cloud.value) = "1-16"];</code>
     * @return The innodbReadIoThreads.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getInnodbReadIoThreads() {
      return innodbReadIoThreads_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbReadIoThreads_;
    }
    /**
     * <pre>
     * The number of I/O threads for read operations in InnoDB.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_read_io_threads) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_read_io_threads = 27 [(.yandex.cloud.value) = "1-16"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getInnodbReadIoThreadsOrBuilder() {
      return getInnodbReadIoThreads();
    }

    public static final int INNODB_WRITE_IO_THREADS_FIELD_NUMBER = 28;
    private com.google.protobuf.Int64Value innodbWriteIoThreads_;
    /**
     * <pre>
     * The number of I/O threads for write operations in InnoDB.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_write_io_threads) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_write_io_threads = 28 [(.yandex.cloud.value) = "1-16"];</code>
     * @return Whether the innodbWriteIoThreads field is set.
     */
    @java.lang.Override
    public boolean hasInnodbWriteIoThreads() {
      return innodbWriteIoThreads_ != null;
    }
    /**
     * <pre>
     * The number of I/O threads for write operations in InnoDB.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_write_io_threads) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_write_io_threads = 28 [(.yandex.cloud.value) = "1-16"];</code>
     * @return The innodbWriteIoThreads.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getInnodbWriteIoThreads() {
      return innodbWriteIoThreads_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbWriteIoThreads_;
    }
    /**
     * <pre>
     * The number of I/O threads for write operations in InnoDB.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_write_io_threads) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_write_io_threads = 28 [(.yandex.cloud.value) = "1-16"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getInnodbWriteIoThreadsOrBuilder() {
      return getInnodbWriteIoThreads();
    }

    public static final int INNODB_PURGE_THREADS_FIELD_NUMBER = 29;
    private com.google.protobuf.Int64Value innodbPurgeThreads_;
    /**
     * <pre>
     * The number of background threads devoted to the InnoDB purge operation.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_purge_threads) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_purge_threads = 29 [(.yandex.cloud.value) = "1-16"];</code>
     * @return Whether the innodbPurgeThreads field is set.
     */
    @java.lang.Override
    public boolean hasInnodbPurgeThreads() {
      return innodbPurgeThreads_ != null;
    }
    /**
     * <pre>
     * The number of background threads devoted to the InnoDB purge operation.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_purge_threads) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_purge_threads = 29 [(.yandex.cloud.value) = "1-16"];</code>
     * @return The innodbPurgeThreads.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getInnodbPurgeThreads() {
      return innodbPurgeThreads_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbPurgeThreads_;
    }
    /**
     * <pre>
     * The number of background threads devoted to the InnoDB purge operation.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_purge_threads) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_purge_threads = 29 [(.yandex.cloud.value) = "1-16"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getInnodbPurgeThreadsOrBuilder() {
      return getInnodbPurgeThreads();
    }

    public static final int INNODB_THREAD_CONCURRENCY_FIELD_NUMBER = 30;
    private com.google.protobuf.Int64Value innodbThreadConcurrency_;
    /**
     * <pre>
     * Defines the maximum number of threads permitted inside of InnoDB.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_thread_concurrency) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_thread_concurrency = 30 [(.yandex.cloud.value) = "0-1000"];</code>
     * @return Whether the innodbThreadConcurrency field is set.
     */
    @java.lang.Override
    public boolean hasInnodbThreadConcurrency() {
      return innodbThreadConcurrency_ != null;
    }
    /**
     * <pre>
     * Defines the maximum number of threads permitted inside of InnoDB.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_thread_concurrency) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_thread_concurrency = 30 [(.yandex.cloud.value) = "0-1000"];</code>
     * @return The innodbThreadConcurrency.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getInnodbThreadConcurrency() {
      return innodbThreadConcurrency_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbThreadConcurrency_;
    }
    /**
     * <pre>
     * Defines the maximum number of threads permitted inside of InnoDB.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_thread_concurrency) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_thread_concurrency = 30 [(.yandex.cloud.value) = "0-1000"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getInnodbThreadConcurrencyOrBuilder() {
      return getInnodbThreadConcurrency();
    }

    public static final int INNODB_TEMP_DATA_FILE_MAX_SIZE_FIELD_NUMBER = 31;
    private com.google.protobuf.Int64Value innodbTempDataFileMaxSize_;
    /**
     * <pre>
     * Limits the max size of InnoDB temp tablespace.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_temp_data_file_path) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_temp_data_file_max_size = 31 [(.yandex.cloud.value) = "0-107374182400"];</code>
     * @return Whether the innodbTempDataFileMaxSize field is set.
     */
    @java.lang.Override
    public boolean hasInnodbTempDataFileMaxSize() {
      return innodbTempDataFileMaxSize_ != null;
    }
    /**
     * <pre>
     * Limits the max size of InnoDB temp tablespace.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_temp_data_file_path) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_temp_data_file_max_size = 31 [(.yandex.cloud.value) = "0-107374182400"];</code>
     * @return The innodbTempDataFileMaxSize.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getInnodbTempDataFileMaxSize() {
      return innodbTempDataFileMaxSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbTempDataFileMaxSize_;
    }
    /**
     * <pre>
     * Limits the max size of InnoDB temp tablespace.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_temp_data_file_path) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_temp_data_file_max_size = 31 [(.yandex.cloud.value) = "0-107374182400"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getInnodbTempDataFileMaxSizeOrBuilder() {
      return getInnodbTempDataFileMaxSize();
    }

    public static final int THREAD_CACHE_SIZE_FIELD_NUMBER = 32;
    private com.google.protobuf.Int64Value threadCacheSize_;
    /**
     * <pre>
     * How many threads the server should cache for reuse.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_cache_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value thread_cache_size = 32 [(.yandex.cloud.value) = "10-10000"];</code>
     * @return Whether the threadCacheSize field is set.
     */
    @java.lang.Override
    public boolean hasThreadCacheSize() {
      return threadCacheSize_ != null;
    }
    /**
     * <pre>
     * How many threads the server should cache for reuse.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_cache_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value thread_cache_size = 32 [(.yandex.cloud.value) = "10-10000"];</code>
     * @return The threadCacheSize.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getThreadCacheSize() {
      return threadCacheSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : threadCacheSize_;
    }
    /**
     * <pre>
     * How many threads the server should cache for reuse.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_cache_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value thread_cache_size = 32 [(.yandex.cloud.value) = "10-10000"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getThreadCacheSizeOrBuilder() {
      return getThreadCacheSize();
    }

    public static final int THREAD_STACK_FIELD_NUMBER = 33;
    private com.google.protobuf.Int64Value threadStack_;
    /**
     * <pre>
     * The stack size for each thread. The default is large enough for normal operation.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_stack) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value thread_stack = 33 [(.yandex.cloud.value) = "131072-16777216"];</code>
     * @return Whether the threadStack field is set.
     */
    @java.lang.Override
    public boolean hasThreadStack() {
      return threadStack_ != null;
    }
    /**
     * <pre>
     * The stack size for each thread. The default is large enough for normal operation.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_stack) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value thread_stack = 33 [(.yandex.cloud.value) = "131072-16777216"];</code>
     * @return The threadStack.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getThreadStack() {
      return threadStack_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : threadStack_;
    }
    /**
     * <pre>
     * The stack size for each thread. The default is large enough for normal operation.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_stack) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value thread_stack = 33 [(.yandex.cloud.value) = "131072-16777216"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getThreadStackOrBuilder() {
      return getThreadStack();
    }

    public static final int JOIN_BUFFER_SIZE_FIELD_NUMBER = 34;
    private com.google.protobuf.Int64Value joinBufferSize_;
    /**
     * <pre>
     * The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_join_buffer_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value join_buffer_size = 34 [(.yandex.cloud.value) = "1024-16777216"];</code>
     * @return Whether the joinBufferSize field is set.
     */
    @java.lang.Override
    public boolean hasJoinBufferSize() {
      return joinBufferSize_ != null;
    }
    /**
     * <pre>
     * The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_join_buffer_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value join_buffer_size = 34 [(.yandex.cloud.value) = "1024-16777216"];</code>
     * @return The joinBufferSize.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getJoinBufferSize() {
      return joinBufferSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : joinBufferSize_;
    }
    /**
     * <pre>
     * The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_join_buffer_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value join_buffer_size = 34 [(.yandex.cloud.value) = "1024-16777216"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getJoinBufferSizeOrBuilder() {
      return getJoinBufferSize();
    }

    public static final int SORT_BUFFER_SIZE_FIELD_NUMBER = 35;
    private com.google.protobuf.Int64Value sortBufferSize_;
    /**
     * <pre>
     * Each session that must perform a sort allocates a buffer of this size.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sort_buffer_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value sort_buffer_size = 35 [(.yandex.cloud.value) = "1024-16777216"];</code>
     * @return Whether the sortBufferSize field is set.
     */
    @java.lang.Override
    public boolean hasSortBufferSize() {
      return sortBufferSize_ != null;
    }
    /**
     * <pre>
     * Each session that must perform a sort allocates a buffer of this size.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sort_buffer_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value sort_buffer_size = 35 [(.yandex.cloud.value) = "1024-16777216"];</code>
     * @return The sortBufferSize.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getSortBufferSize() {
      return sortBufferSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : sortBufferSize_;
    }
    /**
     * <pre>
     * Each session that must perform a sort allocates a buffer of this size.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sort_buffer_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value sort_buffer_size = 35 [(.yandex.cloud.value) = "1024-16777216"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getSortBufferSizeOrBuilder() {
      return getSortBufferSize();
    }

    public static final int TABLE_DEFINITION_CACHE_FIELD_NUMBER = 36;
    private com.google.protobuf.Int64Value tableDefinitionCache_;
    /**
     * <pre>
     * The number of table definitions that can be stored in the definition cache.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_definition_cache) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value table_definition_cache = 36 [(.yandex.cloud.value) = "400-524288"];</code>
     * @return Whether the tableDefinitionCache field is set.
     */
    @java.lang.Override
    public boolean hasTableDefinitionCache() {
      return tableDefinitionCache_ != null;
    }
    /**
     * <pre>
     * The number of table definitions that can be stored in the definition cache.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_definition_cache) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value table_definition_cache = 36 [(.yandex.cloud.value) = "400-524288"];</code>
     * @return The tableDefinitionCache.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getTableDefinitionCache() {
      return tableDefinitionCache_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : tableDefinitionCache_;
    }
    /**
     * <pre>
     * The number of table definitions that can be stored in the definition cache.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_definition_cache) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value table_definition_cache = 36 [(.yandex.cloud.value) = "400-524288"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getTableDefinitionCacheOrBuilder() {
      return getTableDefinitionCache();
    }

    public static final int TABLE_OPEN_CACHE_FIELD_NUMBER = 37;
    private com.google.protobuf.Int64Value tableOpenCache_;
    /**
     * <pre>
     * The number of open tables for all threads.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value table_open_cache = 37 [(.yandex.cloud.value) = "400-524288"];</code>
     * @return Whether the tableOpenCache field is set.
     */
    @java.lang.Override
    public boolean hasTableOpenCache() {
      return tableOpenCache_ != null;
    }
    /**
     * <pre>
     * The number of open tables for all threads.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value table_open_cache = 37 [(.yandex.cloud.value) = "400-524288"];</code>
     * @return The tableOpenCache.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getTableOpenCache() {
      return tableOpenCache_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : tableOpenCache_;
    }
    /**
     * <pre>
     * The number of open tables for all threads.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value table_open_cache = 37 [(.yandex.cloud.value) = "400-524288"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getTableOpenCacheOrBuilder() {
      return getTableOpenCache();
    }

    public static final int TABLE_OPEN_CACHE_INSTANCES_FIELD_NUMBER = 38;
    private com.google.protobuf.Int64Value tableOpenCacheInstances_;
    /**
     * <pre>
     * The number of open tables cache instances.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache_instances) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value table_open_cache_instances = 38 [(.yandex.cloud.value) = "1-32"];</code>
     * @return Whether the tableOpenCacheInstances field is set.
     */
    @java.lang.Override
    public boolean hasTableOpenCacheInstances() {
      return tableOpenCacheInstances_ != null;
    }
    /**
     * <pre>
     * The number of open tables cache instances.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache_instances) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value table_open_cache_instances = 38 [(.yandex.cloud.value) = "1-32"];</code>
     * @return The tableOpenCacheInstances.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getTableOpenCacheInstances() {
      return tableOpenCacheInstances_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : tableOpenCacheInstances_;
    }
    /**
     * <pre>
     * The number of open tables cache instances.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache_instances) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value table_open_cache_instances = 38 [(.yandex.cloud.value) = "1-32"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getTableOpenCacheInstancesOrBuilder() {
      return getTableOpenCacheInstances();
    }

    public static final int EXPLICIT_DEFAULTS_FOR_TIMESTAMP_FIELD_NUMBER = 39;
    private com.google.protobuf.BoolValue explicitDefaultsForTimestamp_;
    /**
     * <pre>
     * Determines whether the server enables certain nonstandard behaviors for default values and NULL-value handling in TIMESTAMP columns.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue explicit_defaults_for_timestamp = 39;</code>
     * @return Whether the explicitDefaultsForTimestamp field is set.
     */
    @java.lang.Override
    public boolean hasExplicitDefaultsForTimestamp() {
      return explicitDefaultsForTimestamp_ != null;
    }
    /**
     * <pre>
     * Determines whether the server enables certain nonstandard behaviors for default values and NULL-value handling in TIMESTAMP columns.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue explicit_defaults_for_timestamp = 39;</code>
     * @return The explicitDefaultsForTimestamp.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getExplicitDefaultsForTimestamp() {
      return explicitDefaultsForTimestamp_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : explicitDefaultsForTimestamp_;
    }
    /**
     * <pre>
     * Determines whether the server enables certain nonstandard behaviors for default values and NULL-value handling in TIMESTAMP columns.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue explicit_defaults_for_timestamp = 39;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getExplicitDefaultsForTimestampOrBuilder() {
      return getExplicitDefaultsForTimestamp();
    }

    public static final int AUTO_INCREMENT_INCREMENT_FIELD_NUMBER = 40;
    private com.google.protobuf.Int64Value autoIncrementIncrement_;
    /**
     * <pre>
     * Can be used to control the operation of AUTO_INCREMENT columns.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_increment) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value auto_increment_increment = 40 [(.yandex.cloud.value) = "1-65535"];</code>
     * @return Whether the autoIncrementIncrement field is set.
     */
    @java.lang.Override
    public boolean hasAutoIncrementIncrement() {
      return autoIncrementIncrement_ != null;
    }
    /**
     * <pre>
     * Can be used to control the operation of AUTO_INCREMENT columns.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_increment) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value auto_increment_increment = 40 [(.yandex.cloud.value) = "1-65535"];</code>
     * @return The autoIncrementIncrement.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getAutoIncrementIncrement() {
      return autoIncrementIncrement_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : autoIncrementIncrement_;
    }
    /**
     * <pre>
     * Can be used to control the operation of AUTO_INCREMENT columns.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_increment) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value auto_increment_increment = 40 [(.yandex.cloud.value) = "1-65535"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getAutoIncrementIncrementOrBuilder() {
      return getAutoIncrementIncrement();
    }

    public static final int AUTO_INCREMENT_OFFSET_FIELD_NUMBER = 41;
    private com.google.protobuf.Int64Value autoIncrementOffset_;
    /**
     * <pre>
     * Can be used to control the operation of AUTO_INCREMENT columns.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_offset) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value auto_increment_offset = 41 [(.yandex.cloud.value) = "1-65535"];</code>
     * @return Whether the autoIncrementOffset field is set.
     */
    @java.lang.Override
    public boolean hasAutoIncrementOffset() {
      return autoIncrementOffset_ != null;
    }
    /**
     * <pre>
     * Can be used to control the operation of AUTO_INCREMENT columns.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_offset) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value auto_increment_offset = 41 [(.yandex.cloud.value) = "1-65535"];</code>
     * @return The autoIncrementOffset.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getAutoIncrementOffset() {
      return autoIncrementOffset_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : autoIncrementOffset_;
    }
    /**
     * <pre>
     * Can be used to control the operation of AUTO_INCREMENT columns.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_offset) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value auto_increment_offset = 41 [(.yandex.cloud.value) = "1-65535"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getAutoIncrementOffsetOrBuilder() {
      return getAutoIncrementOffset();
    }

    public static final int SYNC_BINLOG_FIELD_NUMBER = 42;
    private com.google.protobuf.Int64Value syncBinlog_;
    /**
     * <pre>
     * Controls how often the MySQL server synchronizes the binary log to disk.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_sync_binlog) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value sync_binlog = 42 [(.yandex.cloud.value) = "0-4096"];</code>
     * @return Whether the syncBinlog field is set.
     */
    @java.lang.Override
    public boolean hasSyncBinlog() {
      return syncBinlog_ != null;
    }
    /**
     * <pre>
     * Controls how often the MySQL server synchronizes the binary log to disk.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_sync_binlog) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value sync_binlog = 42 [(.yandex.cloud.value) = "0-4096"];</code>
     * @return The syncBinlog.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getSyncBinlog() {
      return syncBinlog_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : syncBinlog_;
    }
    /**
     * <pre>
     * Controls how often the MySQL server synchronizes the binary log to disk.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_sync_binlog) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value sync_binlog = 42 [(.yandex.cloud.value) = "0-4096"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getSyncBinlogOrBuilder() {
      return getSyncBinlog();
    }

    public static final int BINLOG_CACHE_SIZE_FIELD_NUMBER = 43;
    private com.google.protobuf.Int64Value binlogCacheSize_;
    /**
     * <pre>
     * The size of the cache to hold changes to the binary log during a transaction.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_cache_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value binlog_cache_size = 43 [(.yandex.cloud.value) = "4096-67108864"];</code>
     * @return Whether the binlogCacheSize field is set.
     */
    @java.lang.Override
    public boolean hasBinlogCacheSize() {
      return binlogCacheSize_ != null;
    }
    /**
     * <pre>
     * The size of the cache to hold changes to the binary log during a transaction.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_cache_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value binlog_cache_size = 43 [(.yandex.cloud.value) = "4096-67108864"];</code>
     * @return The binlogCacheSize.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getBinlogCacheSize() {
      return binlogCacheSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : binlogCacheSize_;
    }
    /**
     * <pre>
     * The size of the cache to hold changes to the binary log during a transaction.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_cache_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value binlog_cache_size = 43 [(.yandex.cloud.value) = "4096-67108864"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getBinlogCacheSizeOrBuilder() {
      return getBinlogCacheSize();
    }

    public static final int BINLOG_GROUP_COMMIT_SYNC_DELAY_FIELD_NUMBER = 44;
    private com.google.protobuf.Int64Value binlogGroupCommitSyncDelay_;
    /**
     * <pre>
     * Controls how many microseconds the binary log commit waits before synchronizing the binary log file to disk.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_group_commit_sync_delay) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value binlog_group_commit_sync_delay = 44 [(.yandex.cloud.value) = "0-50000"];</code>
     * @return Whether the binlogGroupCommitSyncDelay field is set.
     */
    @java.lang.Override
    public boolean hasBinlogGroupCommitSyncDelay() {
      return binlogGroupCommitSyncDelay_ != null;
    }
    /**
     * <pre>
     * Controls how many microseconds the binary log commit waits before synchronizing the binary log file to disk.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_group_commit_sync_delay) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value binlog_group_commit_sync_delay = 44 [(.yandex.cloud.value) = "0-50000"];</code>
     * @return The binlogGroupCommitSyncDelay.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getBinlogGroupCommitSyncDelay() {
      return binlogGroupCommitSyncDelay_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : binlogGroupCommitSyncDelay_;
    }
    /**
     * <pre>
     * Controls how many microseconds the binary log commit waits before synchronizing the binary log file to disk.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_group_commit_sync_delay) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value binlog_group_commit_sync_delay = 44 [(.yandex.cloud.value) = "0-50000"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getBinlogGroupCommitSyncDelayOrBuilder() {
      return getBinlogGroupCommitSyncDelay();
    }

    public static final int BINLOG_ROW_IMAGE_FIELD_NUMBER = 45;
    private int binlogRowImage_;
    /**
     * <pre>
     * For MySQL row-based replication, this variable determines how row images are written to the binary log.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_image) for details.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.BinlogRowImage binlog_row_image = 45;</code>
     * @return The enum numeric value on the wire for binlogRowImage.
     */
    @java.lang.Override public int getBinlogRowImageValue() {
      return binlogRowImage_;
    }
    /**
     * <pre>
     * For MySQL row-based replication, this variable determines how row images are written to the binary log.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_image) for details.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.BinlogRowImage binlog_row_image = 45;</code>
     * @return The binlogRowImage.
     */
    @java.lang.Override public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.BinlogRowImage getBinlogRowImage() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.BinlogRowImage result = yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.BinlogRowImage.valueOf(binlogRowImage_);
      return result == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.BinlogRowImage.UNRECOGNIZED : result;
    }

    public static final int BINLOG_ROWS_QUERY_LOG_EVENTS_FIELD_NUMBER = 46;
    private com.google.protobuf.BoolValue binlogRowsQueryLogEvents_;
    /**
     * <pre>
     * When enabled, it causes the server to write informational log events such as row query log events into its binary log.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_rows_query_log_events) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue binlog_rows_query_log_events = 46;</code>
     * @return Whether the binlogRowsQueryLogEvents field is set.
     */
    @java.lang.Override
    public boolean hasBinlogRowsQueryLogEvents() {
      return binlogRowsQueryLogEvents_ != null;
    }
    /**
     * <pre>
     * When enabled, it causes the server to write informational log events such as row query log events into its binary log.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_rows_query_log_events) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue binlog_rows_query_log_events = 46;</code>
     * @return The binlogRowsQueryLogEvents.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getBinlogRowsQueryLogEvents() {
      return binlogRowsQueryLogEvents_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : binlogRowsQueryLogEvents_;
    }
    /**
     * <pre>
     * When enabled, it causes the server to write informational log events such as row query log events into its binary log.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_rows_query_log_events) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue binlog_rows_query_log_events = 46;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getBinlogRowsQueryLogEventsOrBuilder() {
      return getBinlogRowsQueryLogEvents();
    }

    public static final int RPL_SEMI_SYNC_MASTER_WAIT_FOR_SLAVE_COUNT_FIELD_NUMBER = 47;
    private com.google.protobuf.Int64Value rplSemiSyncMasterWaitForSlaveCount_;
    /**
     * <pre>
     * The number of replica acknowledgments the source must receive per transaction before proceeding.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_rpl_semi_sync_master_wait_for_slave_count) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value rpl_semi_sync_master_wait_for_slave_count = 47 [(.yandex.cloud.value) = "1-2"];</code>
     * @return Whether the rplSemiSyncMasterWaitForSlaveCount field is set.
     */
    @java.lang.Override
    public boolean hasRplSemiSyncMasterWaitForSlaveCount() {
      return rplSemiSyncMasterWaitForSlaveCount_ != null;
    }
    /**
     * <pre>
     * The number of replica acknowledgments the source must receive per transaction before proceeding.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_rpl_semi_sync_master_wait_for_slave_count) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value rpl_semi_sync_master_wait_for_slave_count = 47 [(.yandex.cloud.value) = "1-2"];</code>
     * @return The rplSemiSyncMasterWaitForSlaveCount.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getRplSemiSyncMasterWaitForSlaveCount() {
      return rplSemiSyncMasterWaitForSlaveCount_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : rplSemiSyncMasterWaitForSlaveCount_;
    }
    /**
     * <pre>
     * The number of replica acknowledgments the source must receive per transaction before proceeding.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_rpl_semi_sync_master_wait_for_slave_count) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value rpl_semi_sync_master_wait_for_slave_count = 47 [(.yandex.cloud.value) = "1-2"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getRplSemiSyncMasterWaitForSlaveCountOrBuilder() {
      return getRplSemiSyncMasterWaitForSlaveCount();
    }

    public static final int SLAVE_PARALLEL_TYPE_FIELD_NUMBER = 48;
    private int slaveParallelType_;
    /**
     * <pre>
     * When using a multi-threaded replica, this variable specifies the policy used to decide which transactions are allowed to execute in parallel on the replica.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_slave_parallel_type) for details.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SlaveParallelType slave_parallel_type = 48;</code>
     * @return The enum numeric value on the wire for slaveParallelType.
     */
    @java.lang.Override public int getSlaveParallelTypeValue() {
      return slaveParallelType_;
    }
    /**
     * <pre>
     * When using a multi-threaded replica, this variable specifies the policy used to decide which transactions are allowed to execute in parallel on the replica.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_slave_parallel_type) for details.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SlaveParallelType slave_parallel_type = 48;</code>
     * @return The slaveParallelType.
     */
    @java.lang.Override public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SlaveParallelType getSlaveParallelType() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SlaveParallelType result = yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SlaveParallelType.valueOf(slaveParallelType_);
      return result == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SlaveParallelType.UNRECOGNIZED : result;
    }

    public static final int SLAVE_PARALLEL_WORKERS_FIELD_NUMBER = 49;
    private com.google.protobuf.Int64Value slaveParallelWorkers_;
    /**
     * <pre>
     * Sets the number of applier threads for executing replication transactions in parallel.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_slave_parallel_workers) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value slave_parallel_workers = 49 [(.yandex.cloud.value) = "0-64"];</code>
     * @return Whether the slaveParallelWorkers field is set.
     */
    @java.lang.Override
    public boolean hasSlaveParallelWorkers() {
      return slaveParallelWorkers_ != null;
    }
    /**
     * <pre>
     * Sets the number of applier threads for executing replication transactions in parallel.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_slave_parallel_workers) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value slave_parallel_workers = 49 [(.yandex.cloud.value) = "0-64"];</code>
     * @return The slaveParallelWorkers.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getSlaveParallelWorkers() {
      return slaveParallelWorkers_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : slaveParallelWorkers_;
    }
    /**
     * <pre>
     * Sets the number of applier threads for executing replication transactions in parallel.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_slave_parallel_workers) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value slave_parallel_workers = 49 [(.yandex.cloud.value) = "0-64"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getSlaveParallelWorkersOrBuilder() {
      return getSlaveParallelWorkers();
    }

    public static final int REGEXP_TIME_LIMIT_FIELD_NUMBER = 50;
    private com.google.protobuf.Int64Value regexpTimeLimit_;
    /**
     * <pre>
     * The time limit for regular expression matching operations performed by REGEXP_LIKE and similar functions.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_regexp_time_limit) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value regexp_time_limit = 50 [(.yandex.cloud.value) = "0-1048576"];</code>
     * @return Whether the regexpTimeLimit field is set.
     */
    @java.lang.Override
    public boolean hasRegexpTimeLimit() {
      return regexpTimeLimit_ != null;
    }
    /**
     * <pre>
     * The time limit for regular expression matching operations performed by REGEXP_LIKE and similar functions.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_regexp_time_limit) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value regexp_time_limit = 50 [(.yandex.cloud.value) = "0-1048576"];</code>
     * @return The regexpTimeLimit.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getRegexpTimeLimit() {
      return regexpTimeLimit_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : regexpTimeLimit_;
    }
    /**
     * <pre>
     * The time limit for regular expression matching operations performed by REGEXP_LIKE and similar functions.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_regexp_time_limit) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value regexp_time_limit = 50 [(.yandex.cloud.value) = "0-1048576"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getRegexpTimeLimitOrBuilder() {
      return getRegexpTimeLimit();
    }

    public static final int MDB_PRESERVE_BINLOG_BYTES_FIELD_NUMBER = 51;
    private com.google.protobuf.Int64Value mdbPreserveBinlogBytes_;
    /**
     * <pre>
     * The size of the binary log to hold.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mdb_preserve_binlog_bytes = 51 [(.yandex.cloud.value) = "1073741824-1099511627776"];</code>
     * @return Whether the mdbPreserveBinlogBytes field is set.
     */
    @java.lang.Override
    public boolean hasMdbPreserveBinlogBytes() {
      return mdbPreserveBinlogBytes_ != null;
    }
    /**
     * <pre>
     * The size of the binary log to hold.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mdb_preserve_binlog_bytes = 51 [(.yandex.cloud.value) = "1073741824-1099511627776"];</code>
     * @return The mdbPreserveBinlogBytes.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMdbPreserveBinlogBytes() {
      return mdbPreserveBinlogBytes_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : mdbPreserveBinlogBytes_;
    }
    /**
     * <pre>
     * The size of the binary log to hold.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mdb_preserve_binlog_bytes = 51 [(.yandex.cloud.value) = "1073741824-1099511627776"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMdbPreserveBinlogBytesOrBuilder() {
      return getMdbPreserveBinlogBytes();
    }

    public static final int INTERACTIVE_TIMEOUT_FIELD_NUMBER = 52;
    private com.google.protobuf.Int64Value interactiveTimeout_;
    /**
     * <pre>
     * The number of seconds the server waits for activity on an interactive connection before closing it.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_interactive_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value interactive_timeout = 52 [(.yandex.cloud.value) = "600-86400"];</code>
     * @return Whether the interactiveTimeout field is set.
     */
    @java.lang.Override
    public boolean hasInteractiveTimeout() {
      return interactiveTimeout_ != null;
    }
    /**
     * <pre>
     * The number of seconds the server waits for activity on an interactive connection before closing it.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_interactive_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value interactive_timeout = 52 [(.yandex.cloud.value) = "600-86400"];</code>
     * @return The interactiveTimeout.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getInteractiveTimeout() {
      return interactiveTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : interactiveTimeout_;
    }
    /**
     * <pre>
     * The number of seconds the server waits for activity on an interactive connection before closing it.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_interactive_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value interactive_timeout = 52 [(.yandex.cloud.value) = "600-86400"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getInteractiveTimeoutOrBuilder() {
      return getInteractiveTimeout();
    }

    public static final int WAIT_TIMEOUT_FIELD_NUMBER = 53;
    private com.google.protobuf.Int64Value waitTimeout_;
    /**
     * <pre>
     * The number of seconds the server waits for activity on a noninteractive connection before closing it.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_wait_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value wait_timeout = 53 [(.yandex.cloud.value) = "600-86400"];</code>
     * @return Whether the waitTimeout field is set.
     */
    @java.lang.Override
    public boolean hasWaitTimeout() {
      return waitTimeout_ != null;
    }
    /**
     * <pre>
     * The number of seconds the server waits for activity on a noninteractive connection before closing it.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_wait_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value wait_timeout = 53 [(.yandex.cloud.value) = "600-86400"];</code>
     * @return The waitTimeout.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getWaitTimeout() {
      return waitTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : waitTimeout_;
    }
    /**
     * <pre>
     * The number of seconds the server waits for activity on a noninteractive connection before closing it.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_wait_timeout) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value wait_timeout = 53 [(.yandex.cloud.value) = "600-86400"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getWaitTimeoutOrBuilder() {
      return getWaitTimeout();
    }

    public static final int MDB_OFFLINE_MODE_ENABLE_LAG_FIELD_NUMBER = 54;
    private com.google.protobuf.Int64Value mdbOfflineModeEnableLag_;
    /**
     * <pre>
     * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = ON' to prevent users from reading stale data.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mdb_offline_mode_enable_lag = 54 [(.yandex.cloud.value) = "600-432000"];</code>
     * @return Whether the mdbOfflineModeEnableLag field is set.
     */
    @java.lang.Override
    public boolean hasMdbOfflineModeEnableLag() {
      return mdbOfflineModeEnableLag_ != null;
    }
    /**
     * <pre>
     * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = ON' to prevent users from reading stale data.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mdb_offline_mode_enable_lag = 54 [(.yandex.cloud.value) = "600-432000"];</code>
     * @return The mdbOfflineModeEnableLag.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMdbOfflineModeEnableLag() {
      return mdbOfflineModeEnableLag_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : mdbOfflineModeEnableLag_;
    }
    /**
     * <pre>
     * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = ON' to prevent users from reading stale data.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mdb_offline_mode_enable_lag = 54 [(.yandex.cloud.value) = "600-432000"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMdbOfflineModeEnableLagOrBuilder() {
      return getMdbOfflineModeEnableLag();
    }

    public static final int MDB_OFFLINE_MODE_DISABLE_LAG_FIELD_NUMBER = 55;
    private com.google.protobuf.Int64Value mdbOfflineModeDisableLag_;
    /**
     * <pre>
     * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = OFF'.
     * Should be less than mdb_offline_mode_enable_lag.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mdb_offline_mode_disable_lag = 55 [(.yandex.cloud.value) = "60-86400"];</code>
     * @return Whether the mdbOfflineModeDisableLag field is set.
     */
    @java.lang.Override
    public boolean hasMdbOfflineModeDisableLag() {
      return mdbOfflineModeDisableLag_ != null;
    }
    /**
     * <pre>
     * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = OFF'.
     * Should be less than mdb_offline_mode_enable_lag.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mdb_offline_mode_disable_lag = 55 [(.yandex.cloud.value) = "60-86400"];</code>
     * @return The mdbOfflineModeDisableLag.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMdbOfflineModeDisableLag() {
      return mdbOfflineModeDisableLag_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : mdbOfflineModeDisableLag_;
    }
    /**
     * <pre>
     * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = OFF'.
     * Should be less than mdb_offline_mode_enable_lag.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mdb_offline_mode_disable_lag = 55 [(.yandex.cloud.value) = "60-86400"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMdbOfflineModeDisableLagOrBuilder() {
      return getMdbOfflineModeDisableLag();
    }

    public static final int RANGE_OPTIMIZER_MAX_MEM_SIZE_FIELD_NUMBER = 56;
    private com.google.protobuf.Int64Value rangeOptimizerMaxMemSize_;
    /**
     * <pre>
     * The limit on memory consumption for the range optimizer.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_range_optimizer_max_mem_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value range_optimizer_max_mem_size = 56 [(.yandex.cloud.value) = "1048576-268435456"];</code>
     * @return Whether the rangeOptimizerMaxMemSize field is set.
     */
    @java.lang.Override
    public boolean hasRangeOptimizerMaxMemSize() {
      return rangeOptimizerMaxMemSize_ != null;
    }
    /**
     * <pre>
     * The limit on memory consumption for the range optimizer.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_range_optimizer_max_mem_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value range_optimizer_max_mem_size = 56 [(.yandex.cloud.value) = "1048576-268435456"];</code>
     * @return The rangeOptimizerMaxMemSize.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getRangeOptimizerMaxMemSize() {
      return rangeOptimizerMaxMemSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : rangeOptimizerMaxMemSize_;
    }
    /**
     * <pre>
     * The limit on memory consumption for the range optimizer.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_range_optimizer_max_mem_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value range_optimizer_max_mem_size = 56 [(.yandex.cloud.value) = "1048576-268435456"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getRangeOptimizerMaxMemSizeOrBuilder() {
      return getRangeOptimizerMaxMemSize();
    }

    public static final int SLOW_QUERY_LOG_FIELD_NUMBER = 57;
    private com.google.protobuf.BoolValue slowQueryLog_;
    /**
     * <pre>
     * Manages slow query log.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_slow_query_log) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue slow_query_log = 57;</code>
     * @return Whether the slowQueryLog field is set.
     */
    @java.lang.Override
    public boolean hasSlowQueryLog() {
      return slowQueryLog_ != null;
    }
    /**
     * <pre>
     * Manages slow query log.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_slow_query_log) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue slow_query_log = 57;</code>
     * @return The slowQueryLog.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getSlowQueryLog() {
      return slowQueryLog_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : slowQueryLog_;
    }
    /**
     * <pre>
     * Manages slow query log.
     * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_slow_query_log) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue slow_query_log = 57;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getSlowQueryLogOrBuilder() {
      return getSlowQueryLog();
    }

    public static final int SLOW_QUERY_LOG_ALWAYS_WRITE_TIME_FIELD_NUMBER = 58;
    private com.google.protobuf.DoubleValue slowQueryLogAlwaysWriteTime_;
    /**
     * <pre>
     * Query execution time, after which query to be logged unconditionally, that is, `log_slow_rate_limit` will not apply to it.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#slow_query_log_always_write_time) for details.
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue slow_query_log_always_write_time = 58;</code>
     * @return Whether the slowQueryLogAlwaysWriteTime field is set.
     */
    @java.lang.Override
    public boolean hasSlowQueryLogAlwaysWriteTime() {
      return slowQueryLogAlwaysWriteTime_ != null;
    }
    /**
     * <pre>
     * Query execution time, after which query to be logged unconditionally, that is, `log_slow_rate_limit` will not apply to it.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#slow_query_log_always_write_time) for details.
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue slow_query_log_always_write_time = 58;</code>
     * @return The slowQueryLogAlwaysWriteTime.
     */
    @java.lang.Override
    public com.google.protobuf.DoubleValue getSlowQueryLogAlwaysWriteTime() {
      return slowQueryLogAlwaysWriteTime_ == null ? com.google.protobuf.DoubleValue.getDefaultInstance() : slowQueryLogAlwaysWriteTime_;
    }
    /**
     * <pre>
     * Query execution time, after which query to be logged unconditionally, that is, `log_slow_rate_limit` will not apply to it.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#slow_query_log_always_write_time) for details.
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue slow_query_log_always_write_time = 58;</code>
     */
    @java.lang.Override
    public com.google.protobuf.DoubleValueOrBuilder getSlowQueryLogAlwaysWriteTimeOrBuilder() {
      return getSlowQueryLogAlwaysWriteTime();
    }

    public static final int LOG_SLOW_RATE_TYPE_FIELD_NUMBER = 59;
    private int logSlowRateType_;
    /**
     * <pre>
     * Specifies slow log granularity for `log_slow_rate_limit` QUERY or SESSION value.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_rate_type) for details.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowRateType log_slow_rate_type = 59;</code>
     * @return The enum numeric value on the wire for logSlowRateType.
     */
    @java.lang.Override public int getLogSlowRateTypeValue() {
      return logSlowRateType_;
    }
    /**
     * <pre>
     * Specifies slow log granularity for `log_slow_rate_limit` QUERY or SESSION value.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_rate_type) for details.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowRateType log_slow_rate_type = 59;</code>
     * @return The logSlowRateType.
     */
    @java.lang.Override public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowRateType getLogSlowRateType() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowRateType result = yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowRateType.valueOf(logSlowRateType_);
      return result == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowRateType.UNRECOGNIZED : result;
    }

    public static final int LOG_SLOW_RATE_LIMIT_FIELD_NUMBER = 60;
    private com.google.protobuf.Int64Value logSlowRateLimit_;
    /**
     * <pre>
     * Specifies what fraction of session/query should be logged. Logging is enabled for every nth session/query.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_rate_limit) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value log_slow_rate_limit = 60 [(.yandex.cloud.value) = "1-1000"];</code>
     * @return Whether the logSlowRateLimit field is set.
     */
    @java.lang.Override
    public boolean hasLogSlowRateLimit() {
      return logSlowRateLimit_ != null;
    }
    /**
     * <pre>
     * Specifies what fraction of session/query should be logged. Logging is enabled for every nth session/query.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_rate_limit) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value log_slow_rate_limit = 60 [(.yandex.cloud.value) = "1-1000"];</code>
     * @return The logSlowRateLimit.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getLogSlowRateLimit() {
      return logSlowRateLimit_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : logSlowRateLimit_;
    }
    /**
     * <pre>
     * Specifies what fraction of session/query should be logged. Logging is enabled for every nth session/query.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_rate_limit) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value log_slow_rate_limit = 60 [(.yandex.cloud.value) = "1-1000"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getLogSlowRateLimitOrBuilder() {
      return getLogSlowRateLimit();
    }

    public static final int LOG_SLOW_SP_STATEMENTS_FIELD_NUMBER = 61;
    private com.google.protobuf.BoolValue logSlowSpStatements_;
    /**
     * <pre>
     * When TRUE, statements executed by stored procedures are logged to the slow log.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_sp_statements) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue log_slow_sp_statements = 61;</code>
     * @return Whether the logSlowSpStatements field is set.
     */
    @java.lang.Override
    public boolean hasLogSlowSpStatements() {
      return logSlowSpStatements_ != null;
    }
    /**
     * <pre>
     * When TRUE, statements executed by stored procedures are logged to the slow log.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_sp_statements) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue log_slow_sp_statements = 61;</code>
     * @return The logSlowSpStatements.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getLogSlowSpStatements() {
      return logSlowSpStatements_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : logSlowSpStatements_;
    }
    /**
     * <pre>
     * When TRUE, statements executed by stored procedures are logged to the slow log.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_sp_statements) for details.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue log_slow_sp_statements = 61;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getLogSlowSpStatementsOrBuilder() {
      return getLogSlowSpStatements();
    }

    public static final int LOG_SLOW_FILTER_FIELD_NUMBER = 62;
    private java.util.List<java.lang.Integer> logSlowFilter_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowFilterType> logSlowFilter_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowFilterType>() {
              public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowFilterType convert(java.lang.Integer from) {
                @SuppressWarnings("deprecation")
                yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowFilterType result = yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowFilterType.valueOf(from);
                return result == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowFilterType.UNRECOGNIZED : result;
              }
            };
    /**
     * <pre>
     * Filters the slow log by the query's execution plan.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_filter) for details.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowFilterType log_slow_filter = 62;</code>
     * @return A list containing the logSlowFilter.
     */
    @java.lang.Override
    public java.util.List<yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowFilterType> getLogSlowFilterList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowFilterType>(logSlowFilter_, logSlowFilter_converter_);
    }
    /**
     * <pre>
     * Filters the slow log by the query's execution plan.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_filter) for details.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowFilterType log_slow_filter = 62;</code>
     * @return The count of logSlowFilter.
     */
    @java.lang.Override
    public int getLogSlowFilterCount() {
      return logSlowFilter_.size();
    }
    /**
     * <pre>
     * Filters the slow log by the query's execution plan.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_filter) for details.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowFilterType log_slow_filter = 62;</code>
     * @param index The index of the element to return.
     * @return The logSlowFilter at the given index.
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowFilterType getLogSlowFilter(int index) {
      return logSlowFilter_converter_.convert(logSlowFilter_.get(index));
    }
    /**
     * <pre>
     * Filters the slow log by the query's execution plan.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_filter) for details.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowFilterType log_slow_filter = 62;</code>
     * @return A list containing the enum numeric values on the wire for logSlowFilter.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
    getLogSlowFilterValueList() {
      return logSlowFilter_;
    }
    /**
     * <pre>
     * Filters the slow log by the query's execution plan.
     * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_filter) for details.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowFilterType log_slow_filter = 62;</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of logSlowFilter at the given index.
     */
    @java.lang.Override
    public int getLogSlowFilterValue(int index) {
      return logSlowFilter_.get(index);
    }
    private int logSlowFilterMemoizedSerializedSize;

    public static final int MDB_PRIORITY_CHOICE_MAX_LAG_FIELD_NUMBER = 63;
    private com.google.protobuf.Int64Value mdbPriorityChoiceMaxLag_;
    /**
     * <pre>
     * Replication lag threshold (seconds) which allows replica to be promoted to master while executing "switchover from".
     * Should be less than mdb_offline_mode_disable_lag.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mdb_priority_choice_max_lag = 63 [(.yandex.cloud.value) = "0-86400"];</code>
     * @return Whether the mdbPriorityChoiceMaxLag field is set.
     */
    @java.lang.Override
    public boolean hasMdbPriorityChoiceMaxLag() {
      return mdbPriorityChoiceMaxLag_ != null;
    }
    /**
     * <pre>
     * Replication lag threshold (seconds) which allows replica to be promoted to master while executing "switchover from".
     * Should be less than mdb_offline_mode_disable_lag.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mdb_priority_choice_max_lag = 63 [(.yandex.cloud.value) = "0-86400"];</code>
     * @return The mdbPriorityChoiceMaxLag.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMdbPriorityChoiceMaxLag() {
      return mdbPriorityChoiceMaxLag_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : mdbPriorityChoiceMaxLag_;
    }
    /**
     * <pre>
     * Replication lag threshold (seconds) which allows replica to be promoted to master while executing "switchover from".
     * Should be less than mdb_offline_mode_disable_lag.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value mdb_priority_choice_max_lag = 63 [(.yandex.cloud.value) = "0-86400"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMdbPriorityChoiceMaxLagOrBuilder() {
      return getMdbPriorityChoiceMaxLag();
    }

    public static final int INNODB_PAGE_SIZE_FIELD_NUMBER = 64;
    private com.google.protobuf.Int64Value innodbPageSize_;
    /**
     * <pre>
     * Specifies the page size for InnoDB tablespaces.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_page_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_page_size = 64 [(.yandex.cloud.value) = "4096-65536"];</code>
     * @return Whether the innodbPageSize field is set.
     */
    @java.lang.Override
    public boolean hasInnodbPageSize() {
      return innodbPageSize_ != null;
    }
    /**
     * <pre>
     * Specifies the page size for InnoDB tablespaces.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_page_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_page_size = 64 [(.yandex.cloud.value) = "4096-65536"];</code>
     * @return The innodbPageSize.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getInnodbPageSize() {
      return innodbPageSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbPageSize_;
    }
    /**
     * <pre>
     * Specifies the page size for InnoDB tablespaces.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_page_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_page_size = 64 [(.yandex.cloud.value) = "4096-65536"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getInnodbPageSizeOrBuilder() {
      return getInnodbPageSize();
    }

    public static final int INNODB_ONLINE_ALTER_LOG_MAX_SIZE_FIELD_NUMBER = 65;
    private com.google.protobuf.Int64Value innodbOnlineAlterLogMaxSize_;
    /**
     * <pre>
     * The limit in bytes on the size of the temporary log files used during online DDL operations
     * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_online_alter_log_max_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_online_alter_log_max_size = 65 [(.yandex.cloud.value) = "65536-107374182400"];</code>
     * @return Whether the innodbOnlineAlterLogMaxSize field is set.
     */
    @java.lang.Override
    public boolean hasInnodbOnlineAlterLogMaxSize() {
      return innodbOnlineAlterLogMaxSize_ != null;
    }
    /**
     * <pre>
     * The limit in bytes on the size of the temporary log files used during online DDL operations
     * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_online_alter_log_max_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_online_alter_log_max_size = 65 [(.yandex.cloud.value) = "65536-107374182400"];</code>
     * @return The innodbOnlineAlterLogMaxSize.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getInnodbOnlineAlterLogMaxSize() {
      return innodbOnlineAlterLogMaxSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbOnlineAlterLogMaxSize_;
    }
    /**
     * <pre>
     * The limit in bytes on the size of the temporary log files used during online DDL operations
     * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_online_alter_log_max_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_online_alter_log_max_size = 65 [(.yandex.cloud.value) = "65536-107374182400"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getInnodbOnlineAlterLogMaxSizeOrBuilder() {
      return getInnodbOnlineAlterLogMaxSize();
    }

    public static final int INNODB_FT_MIN_TOKEN_SIZE_FIELD_NUMBER = 66;
    private com.google.protobuf.Int64Value innodbFtMinTokenSize_;
    /**
     * <pre>
     * Minimum length of words that are stored in an InnoDB FULLTEXT index
     * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_min_token_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_ft_min_token_size = 66 [(.yandex.cloud.value) = "0-16"];</code>
     * @return Whether the innodbFtMinTokenSize field is set.
     */
    @java.lang.Override
    public boolean hasInnodbFtMinTokenSize() {
      return innodbFtMinTokenSize_ != null;
    }
    /**
     * <pre>
     * Minimum length of words that are stored in an InnoDB FULLTEXT index
     * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_min_token_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_ft_min_token_size = 66 [(.yandex.cloud.value) = "0-16"];</code>
     * @return The innodbFtMinTokenSize.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getInnodbFtMinTokenSize() {
      return innodbFtMinTokenSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbFtMinTokenSize_;
    }
    /**
     * <pre>
     * Minimum length of words that are stored in an InnoDB FULLTEXT index
     * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_min_token_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_ft_min_token_size = 66 [(.yandex.cloud.value) = "0-16"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getInnodbFtMinTokenSizeOrBuilder() {
      return getInnodbFtMinTokenSize();
    }

    public static final int INNODB_FT_MAX_TOKEN_SIZE_FIELD_NUMBER = 67;
    private com.google.protobuf.Int64Value innodbFtMaxTokenSize_;
    /**
     * <pre>
     * Maximum length of words that are stored in an InnoDB FULLTEXT index
     * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_max_token_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_ft_max_token_size = 67 [(.yandex.cloud.value) = "10-84"];</code>
     * @return Whether the innodbFtMaxTokenSize field is set.
     */
    @java.lang.Override
    public boolean hasInnodbFtMaxTokenSize() {
      return innodbFtMaxTokenSize_ != null;
    }
    /**
     * <pre>
     * Maximum length of words that are stored in an InnoDB FULLTEXT index
     * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_max_token_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_ft_max_token_size = 67 [(.yandex.cloud.value) = "10-84"];</code>
     * @return The innodbFtMaxTokenSize.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getInnodbFtMaxTokenSize() {
      return innodbFtMaxTokenSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbFtMaxTokenSize_;
    }
    /**
     * <pre>
     * Maximum length of words that are stored in an InnoDB FULLTEXT index
     * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_max_token_size) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_ft_max_token_size = 67 [(.yandex.cloud.value) = "10-84"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getInnodbFtMaxTokenSizeOrBuilder() {
      return getInnodbFtMaxTokenSize();
    }

    public static final int LOWER_CASE_TABLE_NAMES_FIELD_NUMBER = 68;
    private com.google.protobuf.Int64Value lowerCaseTableNames_;
    /**
     * <pre>
     * Table names storage and comparison strategy
     * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lower_case_table_names) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value lower_case_table_names = 68 [(.yandex.cloud.value) = "0-1"];</code>
     * @return Whether the lowerCaseTableNames field is set.
     */
    @java.lang.Override
    public boolean hasLowerCaseTableNames() {
      return lowerCaseTableNames_ != null;
    }
    /**
     * <pre>
     * Table names storage and comparison strategy
     * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lower_case_table_names) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value lower_case_table_names = 68 [(.yandex.cloud.value) = "0-1"];</code>
     * @return The lowerCaseTableNames.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getLowerCaseTableNames() {
      return lowerCaseTableNames_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : lowerCaseTableNames_;
    }
    /**
     * <pre>
     * Table names storage and comparison strategy
     * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lower_case_table_names) for details.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value lower_case_table_names = 68 [(.yandex.cloud.value) = "0-1"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getLowerCaseTableNamesOrBuilder() {
      return getLowerCaseTableNames();
    }

    public static final int MAX_SP_RECURSION_DEPTH_FIELD_NUMBER = 69;
    private com.google.protobuf.Int64Value maxSpRecursionDepth_;
    /**
     * <pre>
     * The number of times that any given stored procedure may be called recursively.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_sp_recursion_depth).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_sp_recursion_depth = 69 [(.yandex.cloud.value) = "0-255"];</code>
     * @return Whether the maxSpRecursionDepth field is set.
     */
    @java.lang.Override
    public boolean hasMaxSpRecursionDepth() {
      return maxSpRecursionDepth_ != null;
    }
    /**
     * <pre>
     * The number of times that any given stored procedure may be called recursively.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_sp_recursion_depth).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_sp_recursion_depth = 69 [(.yandex.cloud.value) = "0-255"];</code>
     * @return The maxSpRecursionDepth.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxSpRecursionDepth() {
      return maxSpRecursionDepth_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxSpRecursionDepth_;
    }
    /**
     * <pre>
     * The number of times that any given stored procedure may be called recursively.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_sp_recursion_depth).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_sp_recursion_depth = 69 [(.yandex.cloud.value) = "0-255"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxSpRecursionDepthOrBuilder() {
      return getMaxSpRecursionDepth();
    }

    public static final int INNODB_COMPRESSION_LEVEL_FIELD_NUMBER = 70;
    private com.google.protobuf.Int64Value innodbCompressionLevel_;
    /**
     * <pre>
     * The level of zlib compression to use for InnoDB compressed tables and indexes.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_compression_level).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_compression_level = 70 [(.yandex.cloud.value) = "0-9"];</code>
     * @return Whether the innodbCompressionLevel field is set.
     */
    @java.lang.Override
    public boolean hasInnodbCompressionLevel() {
      return innodbCompressionLevel_ != null;
    }
    /**
     * <pre>
     * The level of zlib compression to use for InnoDB compressed tables and indexes.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_compression_level).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_compression_level = 70 [(.yandex.cloud.value) = "0-9"];</code>
     * @return The innodbCompressionLevel.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getInnodbCompressionLevel() {
      return innodbCompressionLevel_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbCompressionLevel_;
    }
    /**
     * <pre>
     * The level of zlib compression to use for InnoDB compressed tables and indexes.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_compression_level).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_compression_level = 70 [(.yandex.cloud.value) = "0-9"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getInnodbCompressionLevelOrBuilder() {
      return getInnodbCompressionLevel();
    }

    public static final int BINLOG_TRANSACTION_DEPENDENCY_TRACKING_FIELD_NUMBER = 71;
    private int binlogTransactionDependencyTracking_;
    /**
     * <pre>
     * Specifies how the source mysqld generates the dependency information that it writes in the binary log to help replicas determine which transactions can be executed in parallel.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_transaction_dependency_tracking).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.BinlogTransactionDependencyTracking binlog_transaction_dependency_tracking = 71;</code>
     * @return The enum numeric value on the wire for binlogTransactionDependencyTracking.
     */
    @java.lang.Override public int getBinlogTransactionDependencyTrackingValue() {
      return binlogTransactionDependencyTracking_;
    }
    /**
     * <pre>
     * Specifies how the source mysqld generates the dependency information that it writes in the binary log to help replicas determine which transactions can be executed in parallel.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_transaction_dependency_tracking).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.BinlogTransactionDependencyTracking binlog_transaction_dependency_tracking = 71;</code>
     * @return The binlogTransactionDependencyTracking.
     */
    @java.lang.Override public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.BinlogTransactionDependencyTracking getBinlogTransactionDependencyTracking() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.BinlogTransactionDependencyTracking result = yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.BinlogTransactionDependencyTracking.valueOf(binlogTransactionDependencyTracking_);
      return result == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.BinlogTransactionDependencyTracking.UNRECOGNIZED : result;
    }

    public static final int AUTOCOMMIT_FIELD_NUMBER = 72;
    private com.google.protobuf.BoolValue autocommit_;
    /**
     * <pre>
     * Config specific will be all changes to a table take effect immediately or you must use COMMIT to accept a transaction or ROLLBACK to cancel it.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_autocommit).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue autocommit = 72;</code>
     * @return Whether the autocommit field is set.
     */
    @java.lang.Override
    public boolean hasAutocommit() {
      return autocommit_ != null;
    }
    /**
     * <pre>
     * Config specific will be all changes to a table take effect immediately or you must use COMMIT to accept a transaction or ROLLBACK to cancel it.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_autocommit).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue autocommit = 72;</code>
     * @return The autocommit.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getAutocommit() {
      return autocommit_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : autocommit_;
    }
    /**
     * <pre>
     * Config specific will be all changes to a table take effect immediately or you must use COMMIT to accept a transaction or ROLLBACK to cancel it.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_autocommit).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue autocommit = 72;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getAutocommitOrBuilder() {
      return getAutocommit();
    }

    public static final int INNODB_STATUS_OUTPUT_FIELD_NUMBER = 73;
    private com.google.protobuf.BoolValue innodbStatusOutput_;
    /**
     * <pre>
     * Enables or disables periodic output for the standard InnoDB Monitor.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_status_output).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_status_output = 73;</code>
     * @return Whether the innodbStatusOutput field is set.
     */
    @java.lang.Override
    public boolean hasInnodbStatusOutput() {
      return innodbStatusOutput_ != null;
    }
    /**
     * <pre>
     * Enables or disables periodic output for the standard InnoDB Monitor.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_status_output).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_status_output = 73;</code>
     * @return The innodbStatusOutput.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getInnodbStatusOutput() {
      return innodbStatusOutput_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : innodbStatusOutput_;
    }
    /**
     * <pre>
     * Enables or disables periodic output for the standard InnoDB Monitor.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_status_output).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_status_output = 73;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getInnodbStatusOutputOrBuilder() {
      return getInnodbStatusOutput();
    }

    public static final int INNODB_STRICT_MODE_FIELD_NUMBER = 74;
    private com.google.protobuf.BoolValue innodbStrictMode_;
    /**
     * <pre>
     * When innodb_strict_mode is enabled, InnoDB returns errors rather than warnings when checking for invalid or incompatible table options.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_strict_mode).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_strict_mode = 74;</code>
     * @return Whether the innodbStrictMode field is set.
     */
    @java.lang.Override
    public boolean hasInnodbStrictMode() {
      return innodbStrictMode_ != null;
    }
    /**
     * <pre>
     * When innodb_strict_mode is enabled, InnoDB returns errors rather than warnings when checking for invalid or incompatible table options.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_strict_mode).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_strict_mode = 74;</code>
     * @return The innodbStrictMode.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getInnodbStrictMode() {
      return innodbStrictMode_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : innodbStrictMode_;
    }
    /**
     * <pre>
     * When innodb_strict_mode is enabled, InnoDB returns errors rather than warnings when checking for invalid or incompatible table options.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_strict_mode).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_strict_mode = 74;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getInnodbStrictModeOrBuilder() {
      return getInnodbStrictMode();
    }

    public static final int INNODB_PRINT_LOCK_WAIT_TIMEOUT_INFO_FIELD_NUMBER = 75;
    private com.google.protobuf.BoolValue innodbPrintLockWaitTimeoutInfo_;
    /**
     * <pre>
     * Makes InnoDB to write information about all lock wait timeout errors into the log file.
     * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/innodb_show_status.html?highlight=innodb_print_lock_wait_timeout_info).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_print_lock_wait_timeout_info = 75;</code>
     * @return Whether the innodbPrintLockWaitTimeoutInfo field is set.
     */
    @java.lang.Override
    public boolean hasInnodbPrintLockWaitTimeoutInfo() {
      return innodbPrintLockWaitTimeoutInfo_ != null;
    }
    /**
     * <pre>
     * Makes InnoDB to write information about all lock wait timeout errors into the log file.
     * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/innodb_show_status.html?highlight=innodb_print_lock_wait_timeout_info).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_print_lock_wait_timeout_info = 75;</code>
     * @return The innodbPrintLockWaitTimeoutInfo.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getInnodbPrintLockWaitTimeoutInfo() {
      return innodbPrintLockWaitTimeoutInfo_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : innodbPrintLockWaitTimeoutInfo_;
    }
    /**
     * <pre>
     * Makes InnoDB to write information about all lock wait timeout errors into the log file.
     * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/innodb_show_status.html?highlight=innodb_print_lock_wait_timeout_info).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue innodb_print_lock_wait_timeout_info = 75;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getInnodbPrintLockWaitTimeoutInfoOrBuilder() {
      return getInnodbPrintLockWaitTimeoutInfo();
    }

    public static final int LOG_ERROR_VERBOSITY_FIELD_NUMBER = 76;
    private com.google.protobuf.Int64Value logErrorVerbosity_;
    /**
     * <pre>
     * System variable specifies the verbosity for handling events intended for the error log
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_log_error_verbosity).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value log_error_verbosity = 76 [(.yandex.cloud.value) = "1-3"];</code>
     * @return Whether the logErrorVerbosity field is set.
     */
    @java.lang.Override
    public boolean hasLogErrorVerbosity() {
      return logErrorVerbosity_ != null;
    }
    /**
     * <pre>
     * System variable specifies the verbosity for handling events intended for the error log
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_log_error_verbosity).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value log_error_verbosity = 76 [(.yandex.cloud.value) = "1-3"];</code>
     * @return The logErrorVerbosity.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getLogErrorVerbosity() {
      return logErrorVerbosity_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : logErrorVerbosity_;
    }
    /**
     * <pre>
     * System variable specifies the verbosity for handling events intended for the error log
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_log_error_verbosity).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value log_error_verbosity = 76 [(.yandex.cloud.value) = "1-3"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getLogErrorVerbosityOrBuilder() {
      return getLogErrorVerbosity();
    }

    public static final int MAX_DIGEST_LENGTH_FIELD_NUMBER = 77;
    private com.google.protobuf.Int64Value maxDigestLength_;
    /**
     * <pre>
     * The maximum number of bytes of memory reserved per session for computation of normalized statement digests.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_digest_length).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_digest_length = 77 [(.yandex.cloud.value) = "0-1048576"];</code>
     * @return Whether the maxDigestLength field is set.
     */
    @java.lang.Override
    public boolean hasMaxDigestLength() {
      return maxDigestLength_ != null;
    }
    /**
     * <pre>
     * The maximum number of bytes of memory reserved per session for computation of normalized statement digests.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_digest_length).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_digest_length = 77 [(.yandex.cloud.value) = "0-1048576"];</code>
     * @return The maxDigestLength.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxDigestLength() {
      return maxDigestLength_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxDigestLength_;
    }
    /**
     * <pre>
     * The maximum number of bytes of memory reserved per session for computation of normalized statement digests.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_digest_length).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_digest_length = 77 [(.yandex.cloud.value) = "0-1048576"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxDigestLengthOrBuilder() {
      return getMaxDigestLength();
    }

    public static final int LOCK_WAIT_TIMEOUT_FIELD_NUMBER = 78;
    private com.google.protobuf.Int64Value lockWaitTimeout_;
    /**
     * <pre>
     * This variable specifies the timeout in seconds for attempts to acquire metadata locks
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lock_wait_timeout).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value lock_wait_timeout = 78 [(.yandex.cloud.value) = "1-31536000"];</code>
     * @return Whether the lockWaitTimeout field is set.
     */
    @java.lang.Override
    public boolean hasLockWaitTimeout() {
      return lockWaitTimeout_ != null;
    }
    /**
     * <pre>
     * This variable specifies the timeout in seconds for attempts to acquire metadata locks
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lock_wait_timeout).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value lock_wait_timeout = 78 [(.yandex.cloud.value) = "1-31536000"];</code>
     * @return The lockWaitTimeout.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getLockWaitTimeout() {
      return lockWaitTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : lockWaitTimeout_;
    }
    /**
     * <pre>
     * This variable specifies the timeout in seconds for attempts to acquire metadata locks
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lock_wait_timeout).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value lock_wait_timeout = 78 [(.yandex.cloud.value) = "1-31536000"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getLockWaitTimeoutOrBuilder() {
      return getLockWaitTimeout();
    }

    public static final int MAX_PREPARED_STMT_COUNT_FIELD_NUMBER = 79;
    private com.google.protobuf.Int64Value maxPreparedStmtCount_;
    /**
     * <pre>
     * This variable limits the total number of prepared statements in the server.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_prepared_stmt_count).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_prepared_stmt_count = 79 [(.yandex.cloud.value) = "0-4194304"];</code>
     * @return Whether the maxPreparedStmtCount field is set.
     */
    @java.lang.Override
    public boolean hasMaxPreparedStmtCount() {
      return maxPreparedStmtCount_ != null;
    }
    /**
     * <pre>
     * This variable limits the total number of prepared statements in the server.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_prepared_stmt_count).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_prepared_stmt_count = 79 [(.yandex.cloud.value) = "0-4194304"];</code>
     * @return The maxPreparedStmtCount.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxPreparedStmtCount() {
      return maxPreparedStmtCount_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxPreparedStmtCount_;
    }
    /**
     * <pre>
     * This variable limits the total number of prepared statements in the server.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_prepared_stmt_count).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_prepared_stmt_count = 79 [(.yandex.cloud.value) = "0-4194304"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxPreparedStmtCountOrBuilder() {
      return getMaxPreparedStmtCount();
    }

    public static final int OPTIMIZER_SWITCH_FIELD_NUMBER = 80;
    private volatile java.lang.Object optimizerSwitch_;
    /**
     * <pre>
     * The system variable enables control over optimizer behavior.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_optimizer_switch)
     * https://dev.mysql.com/doc/refman/8.0/en/switchable-optimizations.html
     * </pre>
     *
     * <code>string optimizer_switch = 80;</code>
     * @return The optimizerSwitch.
     */
    @java.lang.Override
    public java.lang.String getOptimizerSwitch() {
      java.lang.Object ref = optimizerSwitch_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        optimizerSwitch_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The system variable enables control over optimizer behavior.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_optimizer_switch)
     * https://dev.mysql.com/doc/refman/8.0/en/switchable-optimizations.html
     * </pre>
     *
     * <code>string optimizer_switch = 80;</code>
     * @return The bytes for optimizerSwitch.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getOptimizerSwitchBytes() {
      java.lang.Object ref = optimizerSwitch_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        optimizerSwitch_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OPTIMIZER_SEARCH_DEPTH_FIELD_NUMBER = 81;
    private com.google.protobuf.Int64Value optimizerSearchDepth_;
    /**
     * <pre>
     * The maximum depth of search performed by the query optimizer
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value optimizer_search_depth = 81 [(.yandex.cloud.value) = "0-62"];</code>
     * @return Whether the optimizerSearchDepth field is set.
     */
    @java.lang.Override
    public boolean hasOptimizerSearchDepth() {
      return optimizerSearchDepth_ != null;
    }
    /**
     * <pre>
     * The maximum depth of search performed by the query optimizer
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value optimizer_search_depth = 81 [(.yandex.cloud.value) = "0-62"];</code>
     * @return The optimizerSearchDepth.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getOptimizerSearchDepth() {
      return optimizerSearchDepth_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : optimizerSearchDepth_;
    }
    /**
     * <pre>
     * The maximum depth of search performed by the query optimizer
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value optimizer_search_depth = 81 [(.yandex.cloud.value) = "0-62"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getOptimizerSearchDepthOrBuilder() {
      return getOptimizerSearchDepth();
    }

    public static final int USERSTAT_FIELD_NUMBER = 82;
    private com.google.protobuf.BoolValue userstat_;
    /**
     * <pre>
     * Enables or disables collection of statistics
     * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/user_stats.html#userstat).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue userstat = 82;</code>
     * @return Whether the userstat field is set.
     */
    @java.lang.Override
    public boolean hasUserstat() {
      return userstat_ != null;
    }
    /**
     * <pre>
     * Enables or disables collection of statistics
     * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/user_stats.html#userstat).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue userstat = 82;</code>
     * @return The userstat.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getUserstat() {
      return userstat_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : userstat_;
    }
    /**
     * <pre>
     * Enables or disables collection of statistics
     * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/user_stats.html#userstat).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue userstat = 82;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getUserstatOrBuilder() {
      return getUserstat();
    }

    public static final int MAX_EXECUTION_TIME_FIELD_NUMBER = 83;
    private com.google.protobuf.Int64Value maxExecutionTime_;
    /**
     * <pre>
     * The execution timeout for SELECT statements, in milliseconds. If the value is 0, timeouts are not enabled.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_execution_time)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_execution_time = 83 [(.yandex.cloud.value) = "0-4294967295"];</code>
     * @return Whether the maxExecutionTime field is set.
     */
    @java.lang.Override
    public boolean hasMaxExecutionTime() {
      return maxExecutionTime_ != null;
    }
    /**
     * <pre>
     * The execution timeout for SELECT statements, in milliseconds. If the value is 0, timeouts are not enabled.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_execution_time)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_execution_time = 83 [(.yandex.cloud.value) = "0-4294967295"];</code>
     * @return The maxExecutionTime.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxExecutionTime() {
      return maxExecutionTime_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxExecutionTime_;
    }
    /**
     * <pre>
     * The execution timeout for SELECT statements, in milliseconds. If the value is 0, timeouts are not enabled.
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_execution_time)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_execution_time = 83 [(.yandex.cloud.value) = "0-4294967295"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxExecutionTimeOrBuilder() {
      return getMaxExecutionTime();
    }

    public static final int AUDIT_LOG_POLICY_FIELD_NUMBER = 84;
    private int auditLogPolicy_;
    /**
     * <pre>
     * The policy controlling how the audit log plugin writes events to its log file
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#sysvar_audit_log_policy)
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuditLogPolicy audit_log_policy = 84;</code>
     * @return The enum numeric value on the wire for auditLogPolicy.
     */
    @java.lang.Override public int getAuditLogPolicyValue() {
      return auditLogPolicy_;
    }
    /**
     * <pre>
     * The policy controlling how the audit log plugin writes events to its log file
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#sysvar_audit_log_policy)
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuditLogPolicy audit_log_policy = 84;</code>
     * @return The auditLogPolicy.
     */
    @java.lang.Override public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuditLogPolicy getAuditLogPolicy() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuditLogPolicy result = yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuditLogPolicy.valueOf(auditLogPolicy_);
      return result == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuditLogPolicy.UNRECOGNIZED : result;
    }

    public static final int REPLICATION_SENDER_OBSERVE_COMMIT_ONLY_FIELD_NUMBER = 85;
    private com.google.protobuf.BoolValue replicationSenderObserveCommitOnly_;
    /**
     * <pre>
     * Limit callbacks to improve performance for semisynchronous replication
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_sender_observe_commit_only).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue replication_sender_observe_commit_only = 85;</code>
     * @return Whether the replicationSenderObserveCommitOnly field is set.
     */
    @java.lang.Override
    public boolean hasReplicationSenderObserveCommitOnly() {
      return replicationSenderObserveCommitOnly_ != null;
    }
    /**
     * <pre>
     * Limit callbacks to improve performance for semisynchronous replication
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_sender_observe_commit_only).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue replication_sender_observe_commit_only = 85;</code>
     * @return The replicationSenderObserveCommitOnly.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getReplicationSenderObserveCommitOnly() {
      return replicationSenderObserveCommitOnly_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : replicationSenderObserveCommitOnly_;
    }
    /**
     * <pre>
     * Limit callbacks to improve performance for semisynchronous replication
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_sender_observe_commit_only).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue replication_sender_observe_commit_only = 85;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getReplicationSenderObserveCommitOnlyOrBuilder() {
      return getReplicationSenderObserveCommitOnly();
    }

    public static final int REPLICATION_OPTIMIZE_FOR_STATIC_PLUGIN_CONFIG_FIELD_NUMBER = 86;
    private com.google.protobuf.BoolValue replicationOptimizeForStaticPluginConfig_;
    /**
     * <pre>
     * Use shared locks, and avoid unnecessary lock acquisitions, to improve performance for semisynchronous replication
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_optimize_for_static_plugin_config).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue replication_optimize_for_static_plugin_config = 86;</code>
     * @return Whether the replicationOptimizeForStaticPluginConfig field is set.
     */
    @java.lang.Override
    public boolean hasReplicationOptimizeForStaticPluginConfig() {
      return replicationOptimizeForStaticPluginConfig_ != null;
    }
    /**
     * <pre>
     * Use shared locks, and avoid unnecessary lock acquisitions, to improve performance for semisynchronous replication
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_optimize_for_static_plugin_config).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue replication_optimize_for_static_plugin_config = 86;</code>
     * @return The replicationOptimizeForStaticPluginConfig.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getReplicationOptimizeForStaticPluginConfig() {
      return replicationOptimizeForStaticPluginConfig_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : replicationOptimizeForStaticPluginConfig_;
    }
    /**
     * <pre>
     * Use shared locks, and avoid unnecessary lock acquisitions, to improve performance for semisynchronous replication
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_optimize_for_static_plugin_config).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue replication_optimize_for_static_plugin_config = 86;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getReplicationOptimizeForStaticPluginConfigOrBuilder() {
      return getReplicationOptimizeForStaticPluginConfig();
    }

    public static final int INNODB_LRU_SCAN_DEPTH_FIELD_NUMBER = 87;
    private com.google.protobuf.Int64Value innodbLruScanDepth_;
    /**
     * <pre>
     * A parameter that influences the algorithms and heuristics for the flush operation for the InnoDB buffer pool
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lru_scan_depth)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_lru_scan_depth = 87 [(.yandex.cloud.value) = "100-4294967295"];</code>
     * @return Whether the innodbLruScanDepth field is set.
     */
    @java.lang.Override
    public boolean hasInnodbLruScanDepth() {
      return innodbLruScanDepth_ != null;
    }
    /**
     * <pre>
     * A parameter that influences the algorithms and heuristics for the flush operation for the InnoDB buffer pool
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lru_scan_depth)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_lru_scan_depth = 87 [(.yandex.cloud.value) = "100-4294967295"];</code>
     * @return The innodbLruScanDepth.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getInnodbLruScanDepth() {
      return innodbLruScanDepth_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbLruScanDepth_;
    }
    /**
     * <pre>
     * A parameter that influences the algorithms and heuristics for the flush operation for the InnoDB buffer pool
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lru_scan_depth)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value innodb_lru_scan_depth = 87 [(.yandex.cloud.value) = "100-4294967295"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getInnodbLruScanDepthOrBuilder() {
      return getInnodbLruScanDepth();
    }

    public static final int SQL_REQUIRE_PRIMARY_KEY_FIELD_NUMBER = 88;
    private com.google.protobuf.BoolValue sqlRequirePrimaryKey_;
    /**
     * <pre>
     * Whether statements that create new tables or alter the structure of existing tables enforce the requirement that tables have a primary key
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sql_require_primary_key).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue sql_require_primary_key = 88;</code>
     * @return Whether the sqlRequirePrimaryKey field is set.
     */
    @java.lang.Override
    public boolean hasSqlRequirePrimaryKey() {
      return sqlRequirePrimaryKey_ != null;
    }
    /**
     * <pre>
     * Whether statements that create new tables or alter the structure of existing tables enforce the requirement that tables have a primary key
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sql_require_primary_key).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue sql_require_primary_key = 88;</code>
     * @return The sqlRequirePrimaryKey.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getSqlRequirePrimaryKey() {
      return sqlRequirePrimaryKey_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : sqlRequirePrimaryKey_;
    }
    /**
     * <pre>
     * Whether statements that create new tables or alter the structure of existing tables enforce the requirement that tables have a primary key
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sql_require_primary_key).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue sql_require_primary_key = 88;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getSqlRequirePrimaryKeyOrBuilder() {
      return getSqlRequirePrimaryKey();
    }

    public static final int MDB_FORCE_SSL_FIELD_NUMBER = 89;
    private com.google.protobuf.BoolValue mdbForceSsl_;
    /**
     * <pre>
     * Force ssl on all hosts (require_secure_transport)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue mdb_force_ssl = 89;</code>
     * @return Whether the mdbForceSsl field is set.
     */
    @java.lang.Override
    public boolean hasMdbForceSsl() {
      return mdbForceSsl_ != null;
    }
    /**
     * <pre>
     * Force ssl on all hosts (require_secure_transport)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue mdb_force_ssl = 89;</code>
     * @return The mdbForceSsl.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getMdbForceSsl() {
      return mdbForceSsl_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : mdbForceSsl_;
    }
    /**
     * <pre>
     * Force ssl on all hosts (require_secure_transport)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue mdb_force_ssl = 89;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getMdbForceSslOrBuilder() {
      return getMdbForceSsl();
    }

    public static final int INNODB_CHANGE_BUFFERING_FIELD_NUMBER = 90;
    private int innodbChangeBuffering_;
    /**
     * <pre>
     * An optimization for change buffering
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_change_buffering).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.InnodbChangeBuffering innodb_change_buffering = 90;</code>
     * @return The enum numeric value on the wire for innodbChangeBuffering.
     */
    @java.lang.Override public int getInnodbChangeBufferingValue() {
      return innodbChangeBuffering_;
    }
    /**
     * <pre>
     * An optimization for change buffering
     * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_change_buffering).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.InnodbChangeBuffering innodb_change_buffering = 90;</code>
     * @return The innodbChangeBuffering.
     */
    @java.lang.Override public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.InnodbChangeBuffering getInnodbChangeBuffering() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.InnodbChangeBuffering result = yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.InnodbChangeBuffering.valueOf(innodbChangeBuffering_);
      return result == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.InnodbChangeBuffering.UNRECOGNIZED : result;
    }

    public static final int MAX_WRITE_LOCK_COUNT_FIELD_NUMBER = 91;
    private com.google.protobuf.Int64Value maxWriteLockCount_;
    /**
     * <pre>
     * Permit some pending read lock requests interval
     * P.S. Should be UInt64, but java fails to handle UInt64 limits
     * For details, see [Percona documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_write_lock_count).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_write_lock_count = 91 [(.yandex.cloud.value) = "&gt;=1"];</code>
     * @return Whether the maxWriteLockCount field is set.
     */
    @java.lang.Override
    public boolean hasMaxWriteLockCount() {
      return maxWriteLockCount_ != null;
    }
    /**
     * <pre>
     * Permit some pending read lock requests interval
     * P.S. Should be UInt64, but java fails to handle UInt64 limits
     * For details, see [Percona documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_write_lock_count).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_write_lock_count = 91 [(.yandex.cloud.value) = "&gt;=1"];</code>
     * @return The maxWriteLockCount.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxWriteLockCount() {
      return maxWriteLockCount_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxWriteLockCount_;
    }
    /**
     * <pre>
     * Permit some pending read lock requests interval
     * P.S. Should be UInt64, but java fails to handle UInt64 limits
     * For details, see [Percona documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_write_lock_count).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_write_lock_count = 91 [(.yandex.cloud.value) = "&gt;=1"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxWriteLockCountOrBuilder() {
      return getMaxWriteLockCount();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (innodbBufferPoolSize_ != null) {
        output.writeMessage(1, getInnodbBufferPoolSize());
      }
      if (maxConnections_ != null) {
        output.writeMessage(2, getMaxConnections());
      }
      if (longQueryTime_ != null) {
        output.writeMessage(3, getLongQueryTime());
      }
      if (generalLog_ != null) {
        output.writeMessage(4, getGeneralLog());
      }
      if (auditLog_ != null) {
        output.writeMessage(5, getAuditLog());
      }
      if (getSqlModeList().size() > 0) {
        output.writeUInt32NoTag(50);
        output.writeUInt32NoTag(sqlModeMemoizedSerializedSize);
      }
      for (int i = 0; i < sqlMode_.size(); i++) {
        output.writeEnumNoTag(sqlMode_.get(i));
      }
      if (maxAllowedPacket_ != null) {
        output.writeMessage(7, getMaxAllowedPacket());
      }
      if (defaultAuthenticationPlugin_ != yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuthPlugin.AUTH_PLUGIN_UNSPECIFIED.getNumber()) {
        output.writeEnum(8, defaultAuthenticationPlugin_);
      }
      if (innodbFlushLogAtTrxCommit_ != null) {
        output.writeMessage(9, getInnodbFlushLogAtTrxCommit());
      }
      if (innodbLockWaitTimeout_ != null) {
        output.writeMessage(10, getInnodbLockWaitTimeout());
      }
      if (transactionIsolation_ != yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.TransactionIsolation.TRANSACTION_ISOLATION_UNSPECIFIED.getNumber()) {
        output.writeEnum(11, transactionIsolation_);
      }
      if (innodbPrintAllDeadlocks_ != null) {
        output.writeMessage(12, getInnodbPrintAllDeadlocks());
      }
      if (netReadTimeout_ != null) {
        output.writeMessage(13, getNetReadTimeout());
      }
      if (netWriteTimeout_ != null) {
        output.writeMessage(14, getNetWriteTimeout());
      }
      if (groupConcatMaxLen_ != null) {
        output.writeMessage(15, getGroupConcatMaxLen());
      }
      if (tmpTableSize_ != null) {
        output.writeMessage(16, getTmpTableSize());
      }
      if (maxHeapTableSize_ != null) {
        output.writeMessage(17, getMaxHeapTableSize());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(defaultTimeZone_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 18, defaultTimeZone_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(characterSetServer_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 19, characterSetServer_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(collationServer_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 20, collationServer_);
      }
      if (innodbAdaptiveHashIndex_ != null) {
        output.writeMessage(21, getInnodbAdaptiveHashIndex());
      }
      if (innodbNumaInterleave_ != null) {
        output.writeMessage(22, getInnodbNumaInterleave());
      }
      if (innodbLogBufferSize_ != null) {
        output.writeMessage(23, getInnodbLogBufferSize());
      }
      if (innodbLogFileSize_ != null) {
        output.writeMessage(24, getInnodbLogFileSize());
      }
      if (innodbIoCapacity_ != null) {
        output.writeMessage(25, getInnodbIoCapacity());
      }
      if (innodbIoCapacityMax_ != null) {
        output.writeMessage(26, getInnodbIoCapacityMax());
      }
      if (innodbReadIoThreads_ != null) {
        output.writeMessage(27, getInnodbReadIoThreads());
      }
      if (innodbWriteIoThreads_ != null) {
        output.writeMessage(28, getInnodbWriteIoThreads());
      }
      if (innodbPurgeThreads_ != null) {
        output.writeMessage(29, getInnodbPurgeThreads());
      }
      if (innodbThreadConcurrency_ != null) {
        output.writeMessage(30, getInnodbThreadConcurrency());
      }
      if (innodbTempDataFileMaxSize_ != null) {
        output.writeMessage(31, getInnodbTempDataFileMaxSize());
      }
      if (threadCacheSize_ != null) {
        output.writeMessage(32, getThreadCacheSize());
      }
      if (threadStack_ != null) {
        output.writeMessage(33, getThreadStack());
      }
      if (joinBufferSize_ != null) {
        output.writeMessage(34, getJoinBufferSize());
      }
      if (sortBufferSize_ != null) {
        output.writeMessage(35, getSortBufferSize());
      }
      if (tableDefinitionCache_ != null) {
        output.writeMessage(36, getTableDefinitionCache());
      }
      if (tableOpenCache_ != null) {
        output.writeMessage(37, getTableOpenCache());
      }
      if (tableOpenCacheInstances_ != null) {
        output.writeMessage(38, getTableOpenCacheInstances());
      }
      if (explicitDefaultsForTimestamp_ != null) {
        output.writeMessage(39, getExplicitDefaultsForTimestamp());
      }
      if (autoIncrementIncrement_ != null) {
        output.writeMessage(40, getAutoIncrementIncrement());
      }
      if (autoIncrementOffset_ != null) {
        output.writeMessage(41, getAutoIncrementOffset());
      }
      if (syncBinlog_ != null) {
        output.writeMessage(42, getSyncBinlog());
      }
      if (binlogCacheSize_ != null) {
        output.writeMessage(43, getBinlogCacheSize());
      }
      if (binlogGroupCommitSyncDelay_ != null) {
        output.writeMessage(44, getBinlogGroupCommitSyncDelay());
      }
      if (binlogRowImage_ != yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.BinlogRowImage.BINLOG_ROW_IMAGE_UNSPECIFIED.getNumber()) {
        output.writeEnum(45, binlogRowImage_);
      }
      if (binlogRowsQueryLogEvents_ != null) {
        output.writeMessage(46, getBinlogRowsQueryLogEvents());
      }
      if (rplSemiSyncMasterWaitForSlaveCount_ != null) {
        output.writeMessage(47, getRplSemiSyncMasterWaitForSlaveCount());
      }
      if (slaveParallelType_ != yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SlaveParallelType.SLAVE_PARALLEL_TYPE_UNSPECIFIED.getNumber()) {
        output.writeEnum(48, slaveParallelType_);
      }
      if (slaveParallelWorkers_ != null) {
        output.writeMessage(49, getSlaveParallelWorkers());
      }
      if (regexpTimeLimit_ != null) {
        output.writeMessage(50, getRegexpTimeLimit());
      }
      if (mdbPreserveBinlogBytes_ != null) {
        output.writeMessage(51, getMdbPreserveBinlogBytes());
      }
      if (interactiveTimeout_ != null) {
        output.writeMessage(52, getInteractiveTimeout());
      }
      if (waitTimeout_ != null) {
        output.writeMessage(53, getWaitTimeout());
      }
      if (mdbOfflineModeEnableLag_ != null) {
        output.writeMessage(54, getMdbOfflineModeEnableLag());
      }
      if (mdbOfflineModeDisableLag_ != null) {
        output.writeMessage(55, getMdbOfflineModeDisableLag());
      }
      if (rangeOptimizerMaxMemSize_ != null) {
        output.writeMessage(56, getRangeOptimizerMaxMemSize());
      }
      if (slowQueryLog_ != null) {
        output.writeMessage(57, getSlowQueryLog());
      }
      if (slowQueryLogAlwaysWriteTime_ != null) {
        output.writeMessage(58, getSlowQueryLogAlwaysWriteTime());
      }
      if (logSlowRateType_ != yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowRateType.LOG_SLOW_RATE_TYPE_UNSPECIFIED.getNumber()) {
        output.writeEnum(59, logSlowRateType_);
      }
      if (logSlowRateLimit_ != null) {
        output.writeMessage(60, getLogSlowRateLimit());
      }
      if (logSlowSpStatements_ != null) {
        output.writeMessage(61, getLogSlowSpStatements());
      }
      if (getLogSlowFilterList().size() > 0) {
        output.writeUInt32NoTag(498);
        output.writeUInt32NoTag(logSlowFilterMemoizedSerializedSize);
      }
      for (int i = 0; i < logSlowFilter_.size(); i++) {
        output.writeEnumNoTag(logSlowFilter_.get(i));
      }
      if (mdbPriorityChoiceMaxLag_ != null) {
        output.writeMessage(63, getMdbPriorityChoiceMaxLag());
      }
      if (innodbPageSize_ != null) {
        output.writeMessage(64, getInnodbPageSize());
      }
      if (innodbOnlineAlterLogMaxSize_ != null) {
        output.writeMessage(65, getInnodbOnlineAlterLogMaxSize());
      }
      if (innodbFtMinTokenSize_ != null) {
        output.writeMessage(66, getInnodbFtMinTokenSize());
      }
      if (innodbFtMaxTokenSize_ != null) {
        output.writeMessage(67, getInnodbFtMaxTokenSize());
      }
      if (lowerCaseTableNames_ != null) {
        output.writeMessage(68, getLowerCaseTableNames());
      }
      if (maxSpRecursionDepth_ != null) {
        output.writeMessage(69, getMaxSpRecursionDepth());
      }
      if (innodbCompressionLevel_ != null) {
        output.writeMessage(70, getInnodbCompressionLevel());
      }
      if (binlogTransactionDependencyTracking_ != yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.BinlogTransactionDependencyTracking.BINLOG_TRANSACTION_DEPENDENCY_TRACKING_UNSPECIFIED.getNumber()) {
        output.writeEnum(71, binlogTransactionDependencyTracking_);
      }
      if (autocommit_ != null) {
        output.writeMessage(72, getAutocommit());
      }
      if (innodbStatusOutput_ != null) {
        output.writeMessage(73, getInnodbStatusOutput());
      }
      if (innodbStrictMode_ != null) {
        output.writeMessage(74, getInnodbStrictMode());
      }
      if (innodbPrintLockWaitTimeoutInfo_ != null) {
        output.writeMessage(75, getInnodbPrintLockWaitTimeoutInfo());
      }
      if (logErrorVerbosity_ != null) {
        output.writeMessage(76, getLogErrorVerbosity());
      }
      if (maxDigestLength_ != null) {
        output.writeMessage(77, getMaxDigestLength());
      }
      if (lockWaitTimeout_ != null) {
        output.writeMessage(78, getLockWaitTimeout());
      }
      if (maxPreparedStmtCount_ != null) {
        output.writeMessage(79, getMaxPreparedStmtCount());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(optimizerSwitch_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 80, optimizerSwitch_);
      }
      if (optimizerSearchDepth_ != null) {
        output.writeMessage(81, getOptimizerSearchDepth());
      }
      if (userstat_ != null) {
        output.writeMessage(82, getUserstat());
      }
      if (maxExecutionTime_ != null) {
        output.writeMessage(83, getMaxExecutionTime());
      }
      if (auditLogPolicy_ != yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuditLogPolicy.AUDIT_LOG_POLICY_UNSPECIFIED.getNumber()) {
        output.writeEnum(84, auditLogPolicy_);
      }
      if (replicationSenderObserveCommitOnly_ != null) {
        output.writeMessage(85, getReplicationSenderObserveCommitOnly());
      }
      if (replicationOptimizeForStaticPluginConfig_ != null) {
        output.writeMessage(86, getReplicationOptimizeForStaticPluginConfig());
      }
      if (innodbLruScanDepth_ != null) {
        output.writeMessage(87, getInnodbLruScanDepth());
      }
      if (sqlRequirePrimaryKey_ != null) {
        output.writeMessage(88, getSqlRequirePrimaryKey());
      }
      if (mdbForceSsl_ != null) {
        output.writeMessage(89, getMdbForceSsl());
      }
      if (innodbChangeBuffering_ != yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.InnodbChangeBuffering.INNODB_CHANGE_BUFFERING_UNSPECIFIED.getNumber()) {
        output.writeEnum(90, innodbChangeBuffering_);
      }
      if (maxWriteLockCount_ != null) {
        output.writeMessage(91, getMaxWriteLockCount());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (innodbBufferPoolSize_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getInnodbBufferPoolSize());
      }
      if (maxConnections_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getMaxConnections());
      }
      if (longQueryTime_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getLongQueryTime());
      }
      if (generalLog_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getGeneralLog());
      }
      if (auditLog_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getAuditLog());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < sqlMode_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(sqlMode_.get(i));
        }
        size += dataSize;
        if (!getSqlModeList().isEmpty()) {  size += 1;
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(dataSize);
        }sqlModeMemoizedSerializedSize = dataSize;
      }
      if (maxAllowedPacket_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getMaxAllowedPacket());
      }
      if (defaultAuthenticationPlugin_ != yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuthPlugin.AUTH_PLUGIN_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, defaultAuthenticationPlugin_);
      }
      if (innodbFlushLogAtTrxCommit_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, getInnodbFlushLogAtTrxCommit());
      }
      if (innodbLockWaitTimeout_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, getInnodbLockWaitTimeout());
      }
      if (transactionIsolation_ != yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.TransactionIsolation.TRANSACTION_ISOLATION_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(11, transactionIsolation_);
      }
      if (innodbPrintAllDeadlocks_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, getInnodbPrintAllDeadlocks());
      }
      if (netReadTimeout_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, getNetReadTimeout());
      }
      if (netWriteTimeout_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, getNetWriteTimeout());
      }
      if (groupConcatMaxLen_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, getGroupConcatMaxLen());
      }
      if (tmpTableSize_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, getTmpTableSize());
      }
      if (maxHeapTableSize_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, getMaxHeapTableSize());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(defaultTimeZone_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(18, defaultTimeZone_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(characterSetServer_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(19, characterSetServer_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(collationServer_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(20, collationServer_);
      }
      if (innodbAdaptiveHashIndex_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, getInnodbAdaptiveHashIndex());
      }
      if (innodbNumaInterleave_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(22, getInnodbNumaInterleave());
      }
      if (innodbLogBufferSize_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(23, getInnodbLogBufferSize());
      }
      if (innodbLogFileSize_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(24, getInnodbLogFileSize());
      }
      if (innodbIoCapacity_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(25, getInnodbIoCapacity());
      }
      if (innodbIoCapacityMax_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(26, getInnodbIoCapacityMax());
      }
      if (innodbReadIoThreads_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(27, getInnodbReadIoThreads());
      }
      if (innodbWriteIoThreads_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(28, getInnodbWriteIoThreads());
      }
      if (innodbPurgeThreads_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(29, getInnodbPurgeThreads());
      }
      if (innodbThreadConcurrency_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(30, getInnodbThreadConcurrency());
      }
      if (innodbTempDataFileMaxSize_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(31, getInnodbTempDataFileMaxSize());
      }
      if (threadCacheSize_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(32, getThreadCacheSize());
      }
      if (threadStack_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(33, getThreadStack());
      }
      if (joinBufferSize_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(34, getJoinBufferSize());
      }
      if (sortBufferSize_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(35, getSortBufferSize());
      }
      if (tableDefinitionCache_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(36, getTableDefinitionCache());
      }
      if (tableOpenCache_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(37, getTableOpenCache());
      }
      if (tableOpenCacheInstances_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(38, getTableOpenCacheInstances());
      }
      if (explicitDefaultsForTimestamp_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(39, getExplicitDefaultsForTimestamp());
      }
      if (autoIncrementIncrement_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(40, getAutoIncrementIncrement());
      }
      if (autoIncrementOffset_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(41, getAutoIncrementOffset());
      }
      if (syncBinlog_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(42, getSyncBinlog());
      }
      if (binlogCacheSize_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(43, getBinlogCacheSize());
      }
      if (binlogGroupCommitSyncDelay_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(44, getBinlogGroupCommitSyncDelay());
      }
      if (binlogRowImage_ != yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.BinlogRowImage.BINLOG_ROW_IMAGE_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(45, binlogRowImage_);
      }
      if (binlogRowsQueryLogEvents_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(46, getBinlogRowsQueryLogEvents());
      }
      if (rplSemiSyncMasterWaitForSlaveCount_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(47, getRplSemiSyncMasterWaitForSlaveCount());
      }
      if (slaveParallelType_ != yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SlaveParallelType.SLAVE_PARALLEL_TYPE_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(48, slaveParallelType_);
      }
      if (slaveParallelWorkers_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(49, getSlaveParallelWorkers());
      }
      if (regexpTimeLimit_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(50, getRegexpTimeLimit());
      }
      if (mdbPreserveBinlogBytes_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(51, getMdbPreserveBinlogBytes());
      }
      if (interactiveTimeout_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(52, getInteractiveTimeout());
      }
      if (waitTimeout_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(53, getWaitTimeout());
      }
      if (mdbOfflineModeEnableLag_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(54, getMdbOfflineModeEnableLag());
      }
      if (mdbOfflineModeDisableLag_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(55, getMdbOfflineModeDisableLag());
      }
      if (rangeOptimizerMaxMemSize_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(56, getRangeOptimizerMaxMemSize());
      }
      if (slowQueryLog_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(57, getSlowQueryLog());
      }
      if (slowQueryLogAlwaysWriteTime_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(58, getSlowQueryLogAlwaysWriteTime());
      }
      if (logSlowRateType_ != yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowRateType.LOG_SLOW_RATE_TYPE_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(59, logSlowRateType_);
      }
      if (logSlowRateLimit_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(60, getLogSlowRateLimit());
      }
      if (logSlowSpStatements_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(61, getLogSlowSpStatements());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < logSlowFilter_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(logSlowFilter_.get(i));
        }
        size += dataSize;
        if (!getLogSlowFilterList().isEmpty()) {  size += 2;
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(dataSize);
        }logSlowFilterMemoizedSerializedSize = dataSize;
      }
      if (mdbPriorityChoiceMaxLag_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(63, getMdbPriorityChoiceMaxLag());
      }
      if (innodbPageSize_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(64, getInnodbPageSize());
      }
      if (innodbOnlineAlterLogMaxSize_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(65, getInnodbOnlineAlterLogMaxSize());
      }
      if (innodbFtMinTokenSize_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(66, getInnodbFtMinTokenSize());
      }
      if (innodbFtMaxTokenSize_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(67, getInnodbFtMaxTokenSize());
      }
      if (lowerCaseTableNames_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(68, getLowerCaseTableNames());
      }
      if (maxSpRecursionDepth_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(69, getMaxSpRecursionDepth());
      }
      if (innodbCompressionLevel_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(70, getInnodbCompressionLevel());
      }
      if (binlogTransactionDependencyTracking_ != yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.BinlogTransactionDependencyTracking.BINLOG_TRANSACTION_DEPENDENCY_TRACKING_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(71, binlogTransactionDependencyTracking_);
      }
      if (autocommit_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(72, getAutocommit());
      }
      if (innodbStatusOutput_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(73, getInnodbStatusOutput());
      }
      if (innodbStrictMode_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(74, getInnodbStrictMode());
      }
      if (innodbPrintLockWaitTimeoutInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(75, getInnodbPrintLockWaitTimeoutInfo());
      }
      if (logErrorVerbosity_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(76, getLogErrorVerbosity());
      }
      if (maxDigestLength_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(77, getMaxDigestLength());
      }
      if (lockWaitTimeout_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(78, getLockWaitTimeout());
      }
      if (maxPreparedStmtCount_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(79, getMaxPreparedStmtCount());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(optimizerSwitch_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(80, optimizerSwitch_);
      }
      if (optimizerSearchDepth_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(81, getOptimizerSearchDepth());
      }
      if (userstat_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(82, getUserstat());
      }
      if (maxExecutionTime_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(83, getMaxExecutionTime());
      }
      if (auditLogPolicy_ != yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuditLogPolicy.AUDIT_LOG_POLICY_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(84, auditLogPolicy_);
      }
      if (replicationSenderObserveCommitOnly_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(85, getReplicationSenderObserveCommitOnly());
      }
      if (replicationOptimizeForStaticPluginConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(86, getReplicationOptimizeForStaticPluginConfig());
      }
      if (innodbLruScanDepth_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(87, getInnodbLruScanDepth());
      }
      if (sqlRequirePrimaryKey_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(88, getSqlRequirePrimaryKey());
      }
      if (mdbForceSsl_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(89, getMdbForceSsl());
      }
      if (innodbChangeBuffering_ != yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.InnodbChangeBuffering.INNODB_CHANGE_BUFFERING_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(90, innodbChangeBuffering_);
      }
      if (maxWriteLockCount_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(91, getMaxWriteLockCount());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0)) {
        return super.equals(obj);
      }
      yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 other = (yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0) obj;

      if (hasInnodbBufferPoolSize() != other.hasInnodbBufferPoolSize()) return false;
      if (hasInnodbBufferPoolSize()) {
        if (!getInnodbBufferPoolSize()
            .equals(other.getInnodbBufferPoolSize())) return false;
      }
      if (hasMaxConnections() != other.hasMaxConnections()) return false;
      if (hasMaxConnections()) {
        if (!getMaxConnections()
            .equals(other.getMaxConnections())) return false;
      }
      if (hasLongQueryTime() != other.hasLongQueryTime()) return false;
      if (hasLongQueryTime()) {
        if (!getLongQueryTime()
            .equals(other.getLongQueryTime())) return false;
      }
      if (hasGeneralLog() != other.hasGeneralLog()) return false;
      if (hasGeneralLog()) {
        if (!getGeneralLog()
            .equals(other.getGeneralLog())) return false;
      }
      if (hasAuditLog() != other.hasAuditLog()) return false;
      if (hasAuditLog()) {
        if (!getAuditLog()
            .equals(other.getAuditLog())) return false;
      }
      if (!sqlMode_.equals(other.sqlMode_)) return false;
      if (hasMaxAllowedPacket() != other.hasMaxAllowedPacket()) return false;
      if (hasMaxAllowedPacket()) {
        if (!getMaxAllowedPacket()
            .equals(other.getMaxAllowedPacket())) return false;
      }
      if (defaultAuthenticationPlugin_ != other.defaultAuthenticationPlugin_) return false;
      if (hasInnodbFlushLogAtTrxCommit() != other.hasInnodbFlushLogAtTrxCommit()) return false;
      if (hasInnodbFlushLogAtTrxCommit()) {
        if (!getInnodbFlushLogAtTrxCommit()
            .equals(other.getInnodbFlushLogAtTrxCommit())) return false;
      }
      if (hasInnodbLockWaitTimeout() != other.hasInnodbLockWaitTimeout()) return false;
      if (hasInnodbLockWaitTimeout()) {
        if (!getInnodbLockWaitTimeout()
            .equals(other.getInnodbLockWaitTimeout())) return false;
      }
      if (transactionIsolation_ != other.transactionIsolation_) return false;
      if (hasInnodbPrintAllDeadlocks() != other.hasInnodbPrintAllDeadlocks()) return false;
      if (hasInnodbPrintAllDeadlocks()) {
        if (!getInnodbPrintAllDeadlocks()
            .equals(other.getInnodbPrintAllDeadlocks())) return false;
      }
      if (hasNetReadTimeout() != other.hasNetReadTimeout()) return false;
      if (hasNetReadTimeout()) {
        if (!getNetReadTimeout()
            .equals(other.getNetReadTimeout())) return false;
      }
      if (hasNetWriteTimeout() != other.hasNetWriteTimeout()) return false;
      if (hasNetWriteTimeout()) {
        if (!getNetWriteTimeout()
            .equals(other.getNetWriteTimeout())) return false;
      }
      if (hasGroupConcatMaxLen() != other.hasGroupConcatMaxLen()) return false;
      if (hasGroupConcatMaxLen()) {
        if (!getGroupConcatMaxLen()
            .equals(other.getGroupConcatMaxLen())) return false;
      }
      if (hasTmpTableSize() != other.hasTmpTableSize()) return false;
      if (hasTmpTableSize()) {
        if (!getTmpTableSize()
            .equals(other.getTmpTableSize())) return false;
      }
      if (hasMaxHeapTableSize() != other.hasMaxHeapTableSize()) return false;
      if (hasMaxHeapTableSize()) {
        if (!getMaxHeapTableSize()
            .equals(other.getMaxHeapTableSize())) return false;
      }
      if (!getDefaultTimeZone()
          .equals(other.getDefaultTimeZone())) return false;
      if (!getCharacterSetServer()
          .equals(other.getCharacterSetServer())) return false;
      if (!getCollationServer()
          .equals(other.getCollationServer())) return false;
      if (hasInnodbAdaptiveHashIndex() != other.hasInnodbAdaptiveHashIndex()) return false;
      if (hasInnodbAdaptiveHashIndex()) {
        if (!getInnodbAdaptiveHashIndex()
            .equals(other.getInnodbAdaptiveHashIndex())) return false;
      }
      if (hasInnodbNumaInterleave() != other.hasInnodbNumaInterleave()) return false;
      if (hasInnodbNumaInterleave()) {
        if (!getInnodbNumaInterleave()
            .equals(other.getInnodbNumaInterleave())) return false;
      }
      if (hasInnodbLogBufferSize() != other.hasInnodbLogBufferSize()) return false;
      if (hasInnodbLogBufferSize()) {
        if (!getInnodbLogBufferSize()
            .equals(other.getInnodbLogBufferSize())) return false;
      }
      if (hasInnodbLogFileSize() != other.hasInnodbLogFileSize()) return false;
      if (hasInnodbLogFileSize()) {
        if (!getInnodbLogFileSize()
            .equals(other.getInnodbLogFileSize())) return false;
      }
      if (hasInnodbIoCapacity() != other.hasInnodbIoCapacity()) return false;
      if (hasInnodbIoCapacity()) {
        if (!getInnodbIoCapacity()
            .equals(other.getInnodbIoCapacity())) return false;
      }
      if (hasInnodbIoCapacityMax() != other.hasInnodbIoCapacityMax()) return false;
      if (hasInnodbIoCapacityMax()) {
        if (!getInnodbIoCapacityMax()
            .equals(other.getInnodbIoCapacityMax())) return false;
      }
      if (hasInnodbReadIoThreads() != other.hasInnodbReadIoThreads()) return false;
      if (hasInnodbReadIoThreads()) {
        if (!getInnodbReadIoThreads()
            .equals(other.getInnodbReadIoThreads())) return false;
      }
      if (hasInnodbWriteIoThreads() != other.hasInnodbWriteIoThreads()) return false;
      if (hasInnodbWriteIoThreads()) {
        if (!getInnodbWriteIoThreads()
            .equals(other.getInnodbWriteIoThreads())) return false;
      }
      if (hasInnodbPurgeThreads() != other.hasInnodbPurgeThreads()) return false;
      if (hasInnodbPurgeThreads()) {
        if (!getInnodbPurgeThreads()
            .equals(other.getInnodbPurgeThreads())) return false;
      }
      if (hasInnodbThreadConcurrency() != other.hasInnodbThreadConcurrency()) return false;
      if (hasInnodbThreadConcurrency()) {
        if (!getInnodbThreadConcurrency()
            .equals(other.getInnodbThreadConcurrency())) return false;
      }
      if (hasInnodbTempDataFileMaxSize() != other.hasInnodbTempDataFileMaxSize()) return false;
      if (hasInnodbTempDataFileMaxSize()) {
        if (!getInnodbTempDataFileMaxSize()
            .equals(other.getInnodbTempDataFileMaxSize())) return false;
      }
      if (hasThreadCacheSize() != other.hasThreadCacheSize()) return false;
      if (hasThreadCacheSize()) {
        if (!getThreadCacheSize()
            .equals(other.getThreadCacheSize())) return false;
      }
      if (hasThreadStack() != other.hasThreadStack()) return false;
      if (hasThreadStack()) {
        if (!getThreadStack()
            .equals(other.getThreadStack())) return false;
      }
      if (hasJoinBufferSize() != other.hasJoinBufferSize()) return false;
      if (hasJoinBufferSize()) {
        if (!getJoinBufferSize()
            .equals(other.getJoinBufferSize())) return false;
      }
      if (hasSortBufferSize() != other.hasSortBufferSize()) return false;
      if (hasSortBufferSize()) {
        if (!getSortBufferSize()
            .equals(other.getSortBufferSize())) return false;
      }
      if (hasTableDefinitionCache() != other.hasTableDefinitionCache()) return false;
      if (hasTableDefinitionCache()) {
        if (!getTableDefinitionCache()
            .equals(other.getTableDefinitionCache())) return false;
      }
      if (hasTableOpenCache() != other.hasTableOpenCache()) return false;
      if (hasTableOpenCache()) {
        if (!getTableOpenCache()
            .equals(other.getTableOpenCache())) return false;
      }
      if (hasTableOpenCacheInstances() != other.hasTableOpenCacheInstances()) return false;
      if (hasTableOpenCacheInstances()) {
        if (!getTableOpenCacheInstances()
            .equals(other.getTableOpenCacheInstances())) return false;
      }
      if (hasExplicitDefaultsForTimestamp() != other.hasExplicitDefaultsForTimestamp()) return false;
      if (hasExplicitDefaultsForTimestamp()) {
        if (!getExplicitDefaultsForTimestamp()
            .equals(other.getExplicitDefaultsForTimestamp())) return false;
      }
      if (hasAutoIncrementIncrement() != other.hasAutoIncrementIncrement()) return false;
      if (hasAutoIncrementIncrement()) {
        if (!getAutoIncrementIncrement()
            .equals(other.getAutoIncrementIncrement())) return false;
      }
      if (hasAutoIncrementOffset() != other.hasAutoIncrementOffset()) return false;
      if (hasAutoIncrementOffset()) {
        if (!getAutoIncrementOffset()
            .equals(other.getAutoIncrementOffset())) return false;
      }
      if (hasSyncBinlog() != other.hasSyncBinlog()) return false;
      if (hasSyncBinlog()) {
        if (!getSyncBinlog()
            .equals(other.getSyncBinlog())) return false;
      }
      if (hasBinlogCacheSize() != other.hasBinlogCacheSize()) return false;
      if (hasBinlogCacheSize()) {
        if (!getBinlogCacheSize()
            .equals(other.getBinlogCacheSize())) return false;
      }
      if (hasBinlogGroupCommitSyncDelay() != other.hasBinlogGroupCommitSyncDelay()) return false;
      if (hasBinlogGroupCommitSyncDelay()) {
        if (!getBinlogGroupCommitSyncDelay()
            .equals(other.getBinlogGroupCommitSyncDelay())) return false;
      }
      if (binlogRowImage_ != other.binlogRowImage_) return false;
      if (hasBinlogRowsQueryLogEvents() != other.hasBinlogRowsQueryLogEvents()) return false;
      if (hasBinlogRowsQueryLogEvents()) {
        if (!getBinlogRowsQueryLogEvents()
            .equals(other.getBinlogRowsQueryLogEvents())) return false;
      }
      if (hasRplSemiSyncMasterWaitForSlaveCount() != other.hasRplSemiSyncMasterWaitForSlaveCount()) return false;
      if (hasRplSemiSyncMasterWaitForSlaveCount()) {
        if (!getRplSemiSyncMasterWaitForSlaveCount()
            .equals(other.getRplSemiSyncMasterWaitForSlaveCount())) return false;
      }
      if (slaveParallelType_ != other.slaveParallelType_) return false;
      if (hasSlaveParallelWorkers() != other.hasSlaveParallelWorkers()) return false;
      if (hasSlaveParallelWorkers()) {
        if (!getSlaveParallelWorkers()
            .equals(other.getSlaveParallelWorkers())) return false;
      }
      if (hasRegexpTimeLimit() != other.hasRegexpTimeLimit()) return false;
      if (hasRegexpTimeLimit()) {
        if (!getRegexpTimeLimit()
            .equals(other.getRegexpTimeLimit())) return false;
      }
      if (hasMdbPreserveBinlogBytes() != other.hasMdbPreserveBinlogBytes()) return false;
      if (hasMdbPreserveBinlogBytes()) {
        if (!getMdbPreserveBinlogBytes()
            .equals(other.getMdbPreserveBinlogBytes())) return false;
      }
      if (hasInteractiveTimeout() != other.hasInteractiveTimeout()) return false;
      if (hasInteractiveTimeout()) {
        if (!getInteractiveTimeout()
            .equals(other.getInteractiveTimeout())) return false;
      }
      if (hasWaitTimeout() != other.hasWaitTimeout()) return false;
      if (hasWaitTimeout()) {
        if (!getWaitTimeout()
            .equals(other.getWaitTimeout())) return false;
      }
      if (hasMdbOfflineModeEnableLag() != other.hasMdbOfflineModeEnableLag()) return false;
      if (hasMdbOfflineModeEnableLag()) {
        if (!getMdbOfflineModeEnableLag()
            .equals(other.getMdbOfflineModeEnableLag())) return false;
      }
      if (hasMdbOfflineModeDisableLag() != other.hasMdbOfflineModeDisableLag()) return false;
      if (hasMdbOfflineModeDisableLag()) {
        if (!getMdbOfflineModeDisableLag()
            .equals(other.getMdbOfflineModeDisableLag())) return false;
      }
      if (hasRangeOptimizerMaxMemSize() != other.hasRangeOptimizerMaxMemSize()) return false;
      if (hasRangeOptimizerMaxMemSize()) {
        if (!getRangeOptimizerMaxMemSize()
            .equals(other.getRangeOptimizerMaxMemSize())) return false;
      }
      if (hasSlowQueryLog() != other.hasSlowQueryLog()) return false;
      if (hasSlowQueryLog()) {
        if (!getSlowQueryLog()
            .equals(other.getSlowQueryLog())) return false;
      }
      if (hasSlowQueryLogAlwaysWriteTime() != other.hasSlowQueryLogAlwaysWriteTime()) return false;
      if (hasSlowQueryLogAlwaysWriteTime()) {
        if (!getSlowQueryLogAlwaysWriteTime()
            .equals(other.getSlowQueryLogAlwaysWriteTime())) return false;
      }
      if (logSlowRateType_ != other.logSlowRateType_) return false;
      if (hasLogSlowRateLimit() != other.hasLogSlowRateLimit()) return false;
      if (hasLogSlowRateLimit()) {
        if (!getLogSlowRateLimit()
            .equals(other.getLogSlowRateLimit())) return false;
      }
      if (hasLogSlowSpStatements() != other.hasLogSlowSpStatements()) return false;
      if (hasLogSlowSpStatements()) {
        if (!getLogSlowSpStatements()
            .equals(other.getLogSlowSpStatements())) return false;
      }
      if (!logSlowFilter_.equals(other.logSlowFilter_)) return false;
      if (hasMdbPriorityChoiceMaxLag() != other.hasMdbPriorityChoiceMaxLag()) return false;
      if (hasMdbPriorityChoiceMaxLag()) {
        if (!getMdbPriorityChoiceMaxLag()
            .equals(other.getMdbPriorityChoiceMaxLag())) return false;
      }
      if (hasInnodbPageSize() != other.hasInnodbPageSize()) return false;
      if (hasInnodbPageSize()) {
        if (!getInnodbPageSize()
            .equals(other.getInnodbPageSize())) return false;
      }
      if (hasInnodbOnlineAlterLogMaxSize() != other.hasInnodbOnlineAlterLogMaxSize()) return false;
      if (hasInnodbOnlineAlterLogMaxSize()) {
        if (!getInnodbOnlineAlterLogMaxSize()
            .equals(other.getInnodbOnlineAlterLogMaxSize())) return false;
      }
      if (hasInnodbFtMinTokenSize() != other.hasInnodbFtMinTokenSize()) return false;
      if (hasInnodbFtMinTokenSize()) {
        if (!getInnodbFtMinTokenSize()
            .equals(other.getInnodbFtMinTokenSize())) return false;
      }
      if (hasInnodbFtMaxTokenSize() != other.hasInnodbFtMaxTokenSize()) return false;
      if (hasInnodbFtMaxTokenSize()) {
        if (!getInnodbFtMaxTokenSize()
            .equals(other.getInnodbFtMaxTokenSize())) return false;
      }
      if (hasLowerCaseTableNames() != other.hasLowerCaseTableNames()) return false;
      if (hasLowerCaseTableNames()) {
        if (!getLowerCaseTableNames()
            .equals(other.getLowerCaseTableNames())) return false;
      }
      if (hasMaxSpRecursionDepth() != other.hasMaxSpRecursionDepth()) return false;
      if (hasMaxSpRecursionDepth()) {
        if (!getMaxSpRecursionDepth()
            .equals(other.getMaxSpRecursionDepth())) return false;
      }
      if (hasInnodbCompressionLevel() != other.hasInnodbCompressionLevel()) return false;
      if (hasInnodbCompressionLevel()) {
        if (!getInnodbCompressionLevel()
            .equals(other.getInnodbCompressionLevel())) return false;
      }
      if (binlogTransactionDependencyTracking_ != other.binlogTransactionDependencyTracking_) return false;
      if (hasAutocommit() != other.hasAutocommit()) return false;
      if (hasAutocommit()) {
        if (!getAutocommit()
            .equals(other.getAutocommit())) return false;
      }
      if (hasInnodbStatusOutput() != other.hasInnodbStatusOutput()) return false;
      if (hasInnodbStatusOutput()) {
        if (!getInnodbStatusOutput()
            .equals(other.getInnodbStatusOutput())) return false;
      }
      if (hasInnodbStrictMode() != other.hasInnodbStrictMode()) return false;
      if (hasInnodbStrictMode()) {
        if (!getInnodbStrictMode()
            .equals(other.getInnodbStrictMode())) return false;
      }
      if (hasInnodbPrintLockWaitTimeoutInfo() != other.hasInnodbPrintLockWaitTimeoutInfo()) return false;
      if (hasInnodbPrintLockWaitTimeoutInfo()) {
        if (!getInnodbPrintLockWaitTimeoutInfo()
            .equals(other.getInnodbPrintLockWaitTimeoutInfo())) return false;
      }
      if (hasLogErrorVerbosity() != other.hasLogErrorVerbosity()) return false;
      if (hasLogErrorVerbosity()) {
        if (!getLogErrorVerbosity()
            .equals(other.getLogErrorVerbosity())) return false;
      }
      if (hasMaxDigestLength() != other.hasMaxDigestLength()) return false;
      if (hasMaxDigestLength()) {
        if (!getMaxDigestLength()
            .equals(other.getMaxDigestLength())) return false;
      }
      if (hasLockWaitTimeout() != other.hasLockWaitTimeout()) return false;
      if (hasLockWaitTimeout()) {
        if (!getLockWaitTimeout()
            .equals(other.getLockWaitTimeout())) return false;
      }
      if (hasMaxPreparedStmtCount() != other.hasMaxPreparedStmtCount()) return false;
      if (hasMaxPreparedStmtCount()) {
        if (!getMaxPreparedStmtCount()
            .equals(other.getMaxPreparedStmtCount())) return false;
      }
      if (!getOptimizerSwitch()
          .equals(other.getOptimizerSwitch())) return false;
      if (hasOptimizerSearchDepth() != other.hasOptimizerSearchDepth()) return false;
      if (hasOptimizerSearchDepth()) {
        if (!getOptimizerSearchDepth()
            .equals(other.getOptimizerSearchDepth())) return false;
      }
      if (hasUserstat() != other.hasUserstat()) return false;
      if (hasUserstat()) {
        if (!getUserstat()
            .equals(other.getUserstat())) return false;
      }
      if (hasMaxExecutionTime() != other.hasMaxExecutionTime()) return false;
      if (hasMaxExecutionTime()) {
        if (!getMaxExecutionTime()
            .equals(other.getMaxExecutionTime())) return false;
      }
      if (auditLogPolicy_ != other.auditLogPolicy_) return false;
      if (hasReplicationSenderObserveCommitOnly() != other.hasReplicationSenderObserveCommitOnly()) return false;
      if (hasReplicationSenderObserveCommitOnly()) {
        if (!getReplicationSenderObserveCommitOnly()
            .equals(other.getReplicationSenderObserveCommitOnly())) return false;
      }
      if (hasReplicationOptimizeForStaticPluginConfig() != other.hasReplicationOptimizeForStaticPluginConfig()) return false;
      if (hasReplicationOptimizeForStaticPluginConfig()) {
        if (!getReplicationOptimizeForStaticPluginConfig()
            .equals(other.getReplicationOptimizeForStaticPluginConfig())) return false;
      }
      if (hasInnodbLruScanDepth() != other.hasInnodbLruScanDepth()) return false;
      if (hasInnodbLruScanDepth()) {
        if (!getInnodbLruScanDepth()
            .equals(other.getInnodbLruScanDepth())) return false;
      }
      if (hasSqlRequirePrimaryKey() != other.hasSqlRequirePrimaryKey()) return false;
      if (hasSqlRequirePrimaryKey()) {
        if (!getSqlRequirePrimaryKey()
            .equals(other.getSqlRequirePrimaryKey())) return false;
      }
      if (hasMdbForceSsl() != other.hasMdbForceSsl()) return false;
      if (hasMdbForceSsl()) {
        if (!getMdbForceSsl()
            .equals(other.getMdbForceSsl())) return false;
      }
      if (innodbChangeBuffering_ != other.innodbChangeBuffering_) return false;
      if (hasMaxWriteLockCount() != other.hasMaxWriteLockCount()) return false;
      if (hasMaxWriteLockCount()) {
        if (!getMaxWriteLockCount()
            .equals(other.getMaxWriteLockCount())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasInnodbBufferPoolSize()) {
        hash = (37 * hash) + INNODB_BUFFER_POOL_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbBufferPoolSize().hashCode();
      }
      if (hasMaxConnections()) {
        hash = (37 * hash) + MAX_CONNECTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getMaxConnections().hashCode();
      }
      if (hasLongQueryTime()) {
        hash = (37 * hash) + LONG_QUERY_TIME_FIELD_NUMBER;
        hash = (53 * hash) + getLongQueryTime().hashCode();
      }
      if (hasGeneralLog()) {
        hash = (37 * hash) + GENERAL_LOG_FIELD_NUMBER;
        hash = (53 * hash) + getGeneralLog().hashCode();
      }
      if (hasAuditLog()) {
        hash = (37 * hash) + AUDIT_LOG_FIELD_NUMBER;
        hash = (53 * hash) + getAuditLog().hashCode();
      }
      if (getSqlModeCount() > 0) {
        hash = (37 * hash) + SQL_MODE_FIELD_NUMBER;
        hash = (53 * hash) + sqlMode_.hashCode();
      }
      if (hasMaxAllowedPacket()) {
        hash = (37 * hash) + MAX_ALLOWED_PACKET_FIELD_NUMBER;
        hash = (53 * hash) + getMaxAllowedPacket().hashCode();
      }
      hash = (37 * hash) + DEFAULT_AUTHENTICATION_PLUGIN_FIELD_NUMBER;
      hash = (53 * hash) + defaultAuthenticationPlugin_;
      if (hasInnodbFlushLogAtTrxCommit()) {
        hash = (37 * hash) + INNODB_FLUSH_LOG_AT_TRX_COMMIT_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbFlushLogAtTrxCommit().hashCode();
      }
      if (hasInnodbLockWaitTimeout()) {
        hash = (37 * hash) + INNODB_LOCK_WAIT_TIMEOUT_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbLockWaitTimeout().hashCode();
      }
      hash = (37 * hash) + TRANSACTION_ISOLATION_FIELD_NUMBER;
      hash = (53 * hash) + transactionIsolation_;
      if (hasInnodbPrintAllDeadlocks()) {
        hash = (37 * hash) + INNODB_PRINT_ALL_DEADLOCKS_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbPrintAllDeadlocks().hashCode();
      }
      if (hasNetReadTimeout()) {
        hash = (37 * hash) + NET_READ_TIMEOUT_FIELD_NUMBER;
        hash = (53 * hash) + getNetReadTimeout().hashCode();
      }
      if (hasNetWriteTimeout()) {
        hash = (37 * hash) + NET_WRITE_TIMEOUT_FIELD_NUMBER;
        hash = (53 * hash) + getNetWriteTimeout().hashCode();
      }
      if (hasGroupConcatMaxLen()) {
        hash = (37 * hash) + GROUP_CONCAT_MAX_LEN_FIELD_NUMBER;
        hash = (53 * hash) + getGroupConcatMaxLen().hashCode();
      }
      if (hasTmpTableSize()) {
        hash = (37 * hash) + TMP_TABLE_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getTmpTableSize().hashCode();
      }
      if (hasMaxHeapTableSize()) {
        hash = (37 * hash) + MAX_HEAP_TABLE_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getMaxHeapTableSize().hashCode();
      }
      hash = (37 * hash) + DEFAULT_TIME_ZONE_FIELD_NUMBER;
      hash = (53 * hash) + getDefaultTimeZone().hashCode();
      hash = (37 * hash) + CHARACTER_SET_SERVER_FIELD_NUMBER;
      hash = (53 * hash) + getCharacterSetServer().hashCode();
      hash = (37 * hash) + COLLATION_SERVER_FIELD_NUMBER;
      hash = (53 * hash) + getCollationServer().hashCode();
      if (hasInnodbAdaptiveHashIndex()) {
        hash = (37 * hash) + INNODB_ADAPTIVE_HASH_INDEX_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbAdaptiveHashIndex().hashCode();
      }
      if (hasInnodbNumaInterleave()) {
        hash = (37 * hash) + INNODB_NUMA_INTERLEAVE_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbNumaInterleave().hashCode();
      }
      if (hasInnodbLogBufferSize()) {
        hash = (37 * hash) + INNODB_LOG_BUFFER_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbLogBufferSize().hashCode();
      }
      if (hasInnodbLogFileSize()) {
        hash = (37 * hash) + INNODB_LOG_FILE_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbLogFileSize().hashCode();
      }
      if (hasInnodbIoCapacity()) {
        hash = (37 * hash) + INNODB_IO_CAPACITY_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbIoCapacity().hashCode();
      }
      if (hasInnodbIoCapacityMax()) {
        hash = (37 * hash) + INNODB_IO_CAPACITY_MAX_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbIoCapacityMax().hashCode();
      }
      if (hasInnodbReadIoThreads()) {
        hash = (37 * hash) + INNODB_READ_IO_THREADS_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbReadIoThreads().hashCode();
      }
      if (hasInnodbWriteIoThreads()) {
        hash = (37 * hash) + INNODB_WRITE_IO_THREADS_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbWriteIoThreads().hashCode();
      }
      if (hasInnodbPurgeThreads()) {
        hash = (37 * hash) + INNODB_PURGE_THREADS_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbPurgeThreads().hashCode();
      }
      if (hasInnodbThreadConcurrency()) {
        hash = (37 * hash) + INNODB_THREAD_CONCURRENCY_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbThreadConcurrency().hashCode();
      }
      if (hasInnodbTempDataFileMaxSize()) {
        hash = (37 * hash) + INNODB_TEMP_DATA_FILE_MAX_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbTempDataFileMaxSize().hashCode();
      }
      if (hasThreadCacheSize()) {
        hash = (37 * hash) + THREAD_CACHE_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getThreadCacheSize().hashCode();
      }
      if (hasThreadStack()) {
        hash = (37 * hash) + THREAD_STACK_FIELD_NUMBER;
        hash = (53 * hash) + getThreadStack().hashCode();
      }
      if (hasJoinBufferSize()) {
        hash = (37 * hash) + JOIN_BUFFER_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getJoinBufferSize().hashCode();
      }
      if (hasSortBufferSize()) {
        hash = (37 * hash) + SORT_BUFFER_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getSortBufferSize().hashCode();
      }
      if (hasTableDefinitionCache()) {
        hash = (37 * hash) + TABLE_DEFINITION_CACHE_FIELD_NUMBER;
        hash = (53 * hash) + getTableDefinitionCache().hashCode();
      }
      if (hasTableOpenCache()) {
        hash = (37 * hash) + TABLE_OPEN_CACHE_FIELD_NUMBER;
        hash = (53 * hash) + getTableOpenCache().hashCode();
      }
      if (hasTableOpenCacheInstances()) {
        hash = (37 * hash) + TABLE_OPEN_CACHE_INSTANCES_FIELD_NUMBER;
        hash = (53 * hash) + getTableOpenCacheInstances().hashCode();
      }
      if (hasExplicitDefaultsForTimestamp()) {
        hash = (37 * hash) + EXPLICIT_DEFAULTS_FOR_TIMESTAMP_FIELD_NUMBER;
        hash = (53 * hash) + getExplicitDefaultsForTimestamp().hashCode();
      }
      if (hasAutoIncrementIncrement()) {
        hash = (37 * hash) + AUTO_INCREMENT_INCREMENT_FIELD_NUMBER;
        hash = (53 * hash) + getAutoIncrementIncrement().hashCode();
      }
      if (hasAutoIncrementOffset()) {
        hash = (37 * hash) + AUTO_INCREMENT_OFFSET_FIELD_NUMBER;
        hash = (53 * hash) + getAutoIncrementOffset().hashCode();
      }
      if (hasSyncBinlog()) {
        hash = (37 * hash) + SYNC_BINLOG_FIELD_NUMBER;
        hash = (53 * hash) + getSyncBinlog().hashCode();
      }
      if (hasBinlogCacheSize()) {
        hash = (37 * hash) + BINLOG_CACHE_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getBinlogCacheSize().hashCode();
      }
      if (hasBinlogGroupCommitSyncDelay()) {
        hash = (37 * hash) + BINLOG_GROUP_COMMIT_SYNC_DELAY_FIELD_NUMBER;
        hash = (53 * hash) + getBinlogGroupCommitSyncDelay().hashCode();
      }
      hash = (37 * hash) + BINLOG_ROW_IMAGE_FIELD_NUMBER;
      hash = (53 * hash) + binlogRowImage_;
      if (hasBinlogRowsQueryLogEvents()) {
        hash = (37 * hash) + BINLOG_ROWS_QUERY_LOG_EVENTS_FIELD_NUMBER;
        hash = (53 * hash) + getBinlogRowsQueryLogEvents().hashCode();
      }
      if (hasRplSemiSyncMasterWaitForSlaveCount()) {
        hash = (37 * hash) + RPL_SEMI_SYNC_MASTER_WAIT_FOR_SLAVE_COUNT_FIELD_NUMBER;
        hash = (53 * hash) + getRplSemiSyncMasterWaitForSlaveCount().hashCode();
      }
      hash = (37 * hash) + SLAVE_PARALLEL_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + slaveParallelType_;
      if (hasSlaveParallelWorkers()) {
        hash = (37 * hash) + SLAVE_PARALLEL_WORKERS_FIELD_NUMBER;
        hash = (53 * hash) + getSlaveParallelWorkers().hashCode();
      }
      if (hasRegexpTimeLimit()) {
        hash = (37 * hash) + REGEXP_TIME_LIMIT_FIELD_NUMBER;
        hash = (53 * hash) + getRegexpTimeLimit().hashCode();
      }
      if (hasMdbPreserveBinlogBytes()) {
        hash = (37 * hash) + MDB_PRESERVE_BINLOG_BYTES_FIELD_NUMBER;
        hash = (53 * hash) + getMdbPreserveBinlogBytes().hashCode();
      }
      if (hasInteractiveTimeout()) {
        hash = (37 * hash) + INTERACTIVE_TIMEOUT_FIELD_NUMBER;
        hash = (53 * hash) + getInteractiveTimeout().hashCode();
      }
      if (hasWaitTimeout()) {
        hash = (37 * hash) + WAIT_TIMEOUT_FIELD_NUMBER;
        hash = (53 * hash) + getWaitTimeout().hashCode();
      }
      if (hasMdbOfflineModeEnableLag()) {
        hash = (37 * hash) + MDB_OFFLINE_MODE_ENABLE_LAG_FIELD_NUMBER;
        hash = (53 * hash) + getMdbOfflineModeEnableLag().hashCode();
      }
      if (hasMdbOfflineModeDisableLag()) {
        hash = (37 * hash) + MDB_OFFLINE_MODE_DISABLE_LAG_FIELD_NUMBER;
        hash = (53 * hash) + getMdbOfflineModeDisableLag().hashCode();
      }
      if (hasRangeOptimizerMaxMemSize()) {
        hash = (37 * hash) + RANGE_OPTIMIZER_MAX_MEM_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getRangeOptimizerMaxMemSize().hashCode();
      }
      if (hasSlowQueryLog()) {
        hash = (37 * hash) + SLOW_QUERY_LOG_FIELD_NUMBER;
        hash = (53 * hash) + getSlowQueryLog().hashCode();
      }
      if (hasSlowQueryLogAlwaysWriteTime()) {
        hash = (37 * hash) + SLOW_QUERY_LOG_ALWAYS_WRITE_TIME_FIELD_NUMBER;
        hash = (53 * hash) + getSlowQueryLogAlwaysWriteTime().hashCode();
      }
      hash = (37 * hash) + LOG_SLOW_RATE_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + logSlowRateType_;
      if (hasLogSlowRateLimit()) {
        hash = (37 * hash) + LOG_SLOW_RATE_LIMIT_FIELD_NUMBER;
        hash = (53 * hash) + getLogSlowRateLimit().hashCode();
      }
      if (hasLogSlowSpStatements()) {
        hash = (37 * hash) + LOG_SLOW_SP_STATEMENTS_FIELD_NUMBER;
        hash = (53 * hash) + getLogSlowSpStatements().hashCode();
      }
      if (getLogSlowFilterCount() > 0) {
        hash = (37 * hash) + LOG_SLOW_FILTER_FIELD_NUMBER;
        hash = (53 * hash) + logSlowFilter_.hashCode();
      }
      if (hasMdbPriorityChoiceMaxLag()) {
        hash = (37 * hash) + MDB_PRIORITY_CHOICE_MAX_LAG_FIELD_NUMBER;
        hash = (53 * hash) + getMdbPriorityChoiceMaxLag().hashCode();
      }
      if (hasInnodbPageSize()) {
        hash = (37 * hash) + INNODB_PAGE_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbPageSize().hashCode();
      }
      if (hasInnodbOnlineAlterLogMaxSize()) {
        hash = (37 * hash) + INNODB_ONLINE_ALTER_LOG_MAX_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbOnlineAlterLogMaxSize().hashCode();
      }
      if (hasInnodbFtMinTokenSize()) {
        hash = (37 * hash) + INNODB_FT_MIN_TOKEN_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbFtMinTokenSize().hashCode();
      }
      if (hasInnodbFtMaxTokenSize()) {
        hash = (37 * hash) + INNODB_FT_MAX_TOKEN_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbFtMaxTokenSize().hashCode();
      }
      if (hasLowerCaseTableNames()) {
        hash = (37 * hash) + LOWER_CASE_TABLE_NAMES_FIELD_NUMBER;
        hash = (53 * hash) + getLowerCaseTableNames().hashCode();
      }
      if (hasMaxSpRecursionDepth()) {
        hash = (37 * hash) + MAX_SP_RECURSION_DEPTH_FIELD_NUMBER;
        hash = (53 * hash) + getMaxSpRecursionDepth().hashCode();
      }
      if (hasInnodbCompressionLevel()) {
        hash = (37 * hash) + INNODB_COMPRESSION_LEVEL_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbCompressionLevel().hashCode();
      }
      hash = (37 * hash) + BINLOG_TRANSACTION_DEPENDENCY_TRACKING_FIELD_NUMBER;
      hash = (53 * hash) + binlogTransactionDependencyTracking_;
      if (hasAutocommit()) {
        hash = (37 * hash) + AUTOCOMMIT_FIELD_NUMBER;
        hash = (53 * hash) + getAutocommit().hashCode();
      }
      if (hasInnodbStatusOutput()) {
        hash = (37 * hash) + INNODB_STATUS_OUTPUT_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbStatusOutput().hashCode();
      }
      if (hasInnodbStrictMode()) {
        hash = (37 * hash) + INNODB_STRICT_MODE_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbStrictMode().hashCode();
      }
      if (hasInnodbPrintLockWaitTimeoutInfo()) {
        hash = (37 * hash) + INNODB_PRINT_LOCK_WAIT_TIMEOUT_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbPrintLockWaitTimeoutInfo().hashCode();
      }
      if (hasLogErrorVerbosity()) {
        hash = (37 * hash) + LOG_ERROR_VERBOSITY_FIELD_NUMBER;
        hash = (53 * hash) + getLogErrorVerbosity().hashCode();
      }
      if (hasMaxDigestLength()) {
        hash = (37 * hash) + MAX_DIGEST_LENGTH_FIELD_NUMBER;
        hash = (53 * hash) + getMaxDigestLength().hashCode();
      }
      if (hasLockWaitTimeout()) {
        hash = (37 * hash) + LOCK_WAIT_TIMEOUT_FIELD_NUMBER;
        hash = (53 * hash) + getLockWaitTimeout().hashCode();
      }
      if (hasMaxPreparedStmtCount()) {
        hash = (37 * hash) + MAX_PREPARED_STMT_COUNT_FIELD_NUMBER;
        hash = (53 * hash) + getMaxPreparedStmtCount().hashCode();
      }
      hash = (37 * hash) + OPTIMIZER_SWITCH_FIELD_NUMBER;
      hash = (53 * hash) + getOptimizerSwitch().hashCode();
      if (hasOptimizerSearchDepth()) {
        hash = (37 * hash) + OPTIMIZER_SEARCH_DEPTH_FIELD_NUMBER;
        hash = (53 * hash) + getOptimizerSearchDepth().hashCode();
      }
      if (hasUserstat()) {
        hash = (37 * hash) + USERSTAT_FIELD_NUMBER;
        hash = (53 * hash) + getUserstat().hashCode();
      }
      if (hasMaxExecutionTime()) {
        hash = (37 * hash) + MAX_EXECUTION_TIME_FIELD_NUMBER;
        hash = (53 * hash) + getMaxExecutionTime().hashCode();
      }
      hash = (37 * hash) + AUDIT_LOG_POLICY_FIELD_NUMBER;
      hash = (53 * hash) + auditLogPolicy_;
      if (hasReplicationSenderObserveCommitOnly()) {
        hash = (37 * hash) + REPLICATION_SENDER_OBSERVE_COMMIT_ONLY_FIELD_NUMBER;
        hash = (53 * hash) + getReplicationSenderObserveCommitOnly().hashCode();
      }
      if (hasReplicationOptimizeForStaticPluginConfig()) {
        hash = (37 * hash) + REPLICATION_OPTIMIZE_FOR_STATIC_PLUGIN_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getReplicationOptimizeForStaticPluginConfig().hashCode();
      }
      if (hasInnodbLruScanDepth()) {
        hash = (37 * hash) + INNODB_LRU_SCAN_DEPTH_FIELD_NUMBER;
        hash = (53 * hash) + getInnodbLruScanDepth().hashCode();
      }
      if (hasSqlRequirePrimaryKey()) {
        hash = (37 * hash) + SQL_REQUIRE_PRIMARY_KEY_FIELD_NUMBER;
        hash = (53 * hash) + getSqlRequirePrimaryKey().hashCode();
      }
      if (hasMdbForceSsl()) {
        hash = (37 * hash) + MDB_FORCE_SSL_FIELD_NUMBER;
        hash = (53 * hash) + getMdbForceSsl().hashCode();
      }
      hash = (37 * hash) + INNODB_CHANGE_BUFFERING_FIELD_NUMBER;
      hash = (53 * hash) + innodbChangeBuffering_;
      if (hasMaxWriteLockCount()) {
        hash = (37 * hash) + MAX_WRITE_LOCK_COUNT_FIELD_NUMBER;
        hash = (53 * hash) + getMaxWriteLockCount().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Options and structure of `MysqlConfig8_0` reflects MySQL 8.0 configuration file.
     * </pre>
     *
     * Protobuf type {@code yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0)
        yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig8_0_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig8_0_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.class, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder.class);
      }

      // Construct using yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (innodbBufferPoolSizeBuilder_ == null) {
          innodbBufferPoolSize_ = null;
        } else {
          innodbBufferPoolSize_ = null;
          innodbBufferPoolSizeBuilder_ = null;
        }
        if (maxConnectionsBuilder_ == null) {
          maxConnections_ = null;
        } else {
          maxConnections_ = null;
          maxConnectionsBuilder_ = null;
        }
        if (longQueryTimeBuilder_ == null) {
          longQueryTime_ = null;
        } else {
          longQueryTime_ = null;
          longQueryTimeBuilder_ = null;
        }
        if (generalLogBuilder_ == null) {
          generalLog_ = null;
        } else {
          generalLog_ = null;
          generalLogBuilder_ = null;
        }
        if (auditLogBuilder_ == null) {
          auditLog_ = null;
        } else {
          auditLog_ = null;
          auditLogBuilder_ = null;
        }
        sqlMode_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        if (maxAllowedPacketBuilder_ == null) {
          maxAllowedPacket_ = null;
        } else {
          maxAllowedPacket_ = null;
          maxAllowedPacketBuilder_ = null;
        }
        defaultAuthenticationPlugin_ = 0;

        if (innodbFlushLogAtTrxCommitBuilder_ == null) {
          innodbFlushLogAtTrxCommit_ = null;
        } else {
          innodbFlushLogAtTrxCommit_ = null;
          innodbFlushLogAtTrxCommitBuilder_ = null;
        }
        if (innodbLockWaitTimeoutBuilder_ == null) {
          innodbLockWaitTimeout_ = null;
        } else {
          innodbLockWaitTimeout_ = null;
          innodbLockWaitTimeoutBuilder_ = null;
        }
        transactionIsolation_ = 0;

        if (innodbPrintAllDeadlocksBuilder_ == null) {
          innodbPrintAllDeadlocks_ = null;
        } else {
          innodbPrintAllDeadlocks_ = null;
          innodbPrintAllDeadlocksBuilder_ = null;
        }
        if (netReadTimeoutBuilder_ == null) {
          netReadTimeout_ = null;
        } else {
          netReadTimeout_ = null;
          netReadTimeoutBuilder_ = null;
        }
        if (netWriteTimeoutBuilder_ == null) {
          netWriteTimeout_ = null;
        } else {
          netWriteTimeout_ = null;
          netWriteTimeoutBuilder_ = null;
        }
        if (groupConcatMaxLenBuilder_ == null) {
          groupConcatMaxLen_ = null;
        } else {
          groupConcatMaxLen_ = null;
          groupConcatMaxLenBuilder_ = null;
        }
        if (tmpTableSizeBuilder_ == null) {
          tmpTableSize_ = null;
        } else {
          tmpTableSize_ = null;
          tmpTableSizeBuilder_ = null;
        }
        if (maxHeapTableSizeBuilder_ == null) {
          maxHeapTableSize_ = null;
        } else {
          maxHeapTableSize_ = null;
          maxHeapTableSizeBuilder_ = null;
        }
        defaultTimeZone_ = "";

        characterSetServer_ = "";

        collationServer_ = "";

        if (innodbAdaptiveHashIndexBuilder_ == null) {
          innodbAdaptiveHashIndex_ = null;
        } else {
          innodbAdaptiveHashIndex_ = null;
          innodbAdaptiveHashIndexBuilder_ = null;
        }
        if (innodbNumaInterleaveBuilder_ == null) {
          innodbNumaInterleave_ = null;
        } else {
          innodbNumaInterleave_ = null;
          innodbNumaInterleaveBuilder_ = null;
        }
        if (innodbLogBufferSizeBuilder_ == null) {
          innodbLogBufferSize_ = null;
        } else {
          innodbLogBufferSize_ = null;
          innodbLogBufferSizeBuilder_ = null;
        }
        if (innodbLogFileSizeBuilder_ == null) {
          innodbLogFileSize_ = null;
        } else {
          innodbLogFileSize_ = null;
          innodbLogFileSizeBuilder_ = null;
        }
        if (innodbIoCapacityBuilder_ == null) {
          innodbIoCapacity_ = null;
        } else {
          innodbIoCapacity_ = null;
          innodbIoCapacityBuilder_ = null;
        }
        if (innodbIoCapacityMaxBuilder_ == null) {
          innodbIoCapacityMax_ = null;
        } else {
          innodbIoCapacityMax_ = null;
          innodbIoCapacityMaxBuilder_ = null;
        }
        if (innodbReadIoThreadsBuilder_ == null) {
          innodbReadIoThreads_ = null;
        } else {
          innodbReadIoThreads_ = null;
          innodbReadIoThreadsBuilder_ = null;
        }
        if (innodbWriteIoThreadsBuilder_ == null) {
          innodbWriteIoThreads_ = null;
        } else {
          innodbWriteIoThreads_ = null;
          innodbWriteIoThreadsBuilder_ = null;
        }
        if (innodbPurgeThreadsBuilder_ == null) {
          innodbPurgeThreads_ = null;
        } else {
          innodbPurgeThreads_ = null;
          innodbPurgeThreadsBuilder_ = null;
        }
        if (innodbThreadConcurrencyBuilder_ == null) {
          innodbThreadConcurrency_ = null;
        } else {
          innodbThreadConcurrency_ = null;
          innodbThreadConcurrencyBuilder_ = null;
        }
        if (innodbTempDataFileMaxSizeBuilder_ == null) {
          innodbTempDataFileMaxSize_ = null;
        } else {
          innodbTempDataFileMaxSize_ = null;
          innodbTempDataFileMaxSizeBuilder_ = null;
        }
        if (threadCacheSizeBuilder_ == null) {
          threadCacheSize_ = null;
        } else {
          threadCacheSize_ = null;
          threadCacheSizeBuilder_ = null;
        }
        if (threadStackBuilder_ == null) {
          threadStack_ = null;
        } else {
          threadStack_ = null;
          threadStackBuilder_ = null;
        }
        if (joinBufferSizeBuilder_ == null) {
          joinBufferSize_ = null;
        } else {
          joinBufferSize_ = null;
          joinBufferSizeBuilder_ = null;
        }
        if (sortBufferSizeBuilder_ == null) {
          sortBufferSize_ = null;
        } else {
          sortBufferSize_ = null;
          sortBufferSizeBuilder_ = null;
        }
        if (tableDefinitionCacheBuilder_ == null) {
          tableDefinitionCache_ = null;
        } else {
          tableDefinitionCache_ = null;
          tableDefinitionCacheBuilder_ = null;
        }
        if (tableOpenCacheBuilder_ == null) {
          tableOpenCache_ = null;
        } else {
          tableOpenCache_ = null;
          tableOpenCacheBuilder_ = null;
        }
        if (tableOpenCacheInstancesBuilder_ == null) {
          tableOpenCacheInstances_ = null;
        } else {
          tableOpenCacheInstances_ = null;
          tableOpenCacheInstancesBuilder_ = null;
        }
        if (explicitDefaultsForTimestampBuilder_ == null) {
          explicitDefaultsForTimestamp_ = null;
        } else {
          explicitDefaultsForTimestamp_ = null;
          explicitDefaultsForTimestampBuilder_ = null;
        }
        if (autoIncrementIncrementBuilder_ == null) {
          autoIncrementIncrement_ = null;
        } else {
          autoIncrementIncrement_ = null;
          autoIncrementIncrementBuilder_ = null;
        }
        if (autoIncrementOffsetBuilder_ == null) {
          autoIncrementOffset_ = null;
        } else {
          autoIncrementOffset_ = null;
          autoIncrementOffsetBuilder_ = null;
        }
        if (syncBinlogBuilder_ == null) {
          syncBinlog_ = null;
        } else {
          syncBinlog_ = null;
          syncBinlogBuilder_ = null;
        }
        if (binlogCacheSizeBuilder_ == null) {
          binlogCacheSize_ = null;
        } else {
          binlogCacheSize_ = null;
          binlogCacheSizeBuilder_ = null;
        }
        if (binlogGroupCommitSyncDelayBuilder_ == null) {
          binlogGroupCommitSyncDelay_ = null;
        } else {
          binlogGroupCommitSyncDelay_ = null;
          binlogGroupCommitSyncDelayBuilder_ = null;
        }
        binlogRowImage_ = 0;

        if (binlogRowsQueryLogEventsBuilder_ == null) {
          binlogRowsQueryLogEvents_ = null;
        } else {
          binlogRowsQueryLogEvents_ = null;
          binlogRowsQueryLogEventsBuilder_ = null;
        }
        if (rplSemiSyncMasterWaitForSlaveCountBuilder_ == null) {
          rplSemiSyncMasterWaitForSlaveCount_ = null;
        } else {
          rplSemiSyncMasterWaitForSlaveCount_ = null;
          rplSemiSyncMasterWaitForSlaveCountBuilder_ = null;
        }
        slaveParallelType_ = 0;

        if (slaveParallelWorkersBuilder_ == null) {
          slaveParallelWorkers_ = null;
        } else {
          slaveParallelWorkers_ = null;
          slaveParallelWorkersBuilder_ = null;
        }
        if (regexpTimeLimitBuilder_ == null) {
          regexpTimeLimit_ = null;
        } else {
          regexpTimeLimit_ = null;
          regexpTimeLimitBuilder_ = null;
        }
        if (mdbPreserveBinlogBytesBuilder_ == null) {
          mdbPreserveBinlogBytes_ = null;
        } else {
          mdbPreserveBinlogBytes_ = null;
          mdbPreserveBinlogBytesBuilder_ = null;
        }
        if (interactiveTimeoutBuilder_ == null) {
          interactiveTimeout_ = null;
        } else {
          interactiveTimeout_ = null;
          interactiveTimeoutBuilder_ = null;
        }
        if (waitTimeoutBuilder_ == null) {
          waitTimeout_ = null;
        } else {
          waitTimeout_ = null;
          waitTimeoutBuilder_ = null;
        }
        if (mdbOfflineModeEnableLagBuilder_ == null) {
          mdbOfflineModeEnableLag_ = null;
        } else {
          mdbOfflineModeEnableLag_ = null;
          mdbOfflineModeEnableLagBuilder_ = null;
        }
        if (mdbOfflineModeDisableLagBuilder_ == null) {
          mdbOfflineModeDisableLag_ = null;
        } else {
          mdbOfflineModeDisableLag_ = null;
          mdbOfflineModeDisableLagBuilder_ = null;
        }
        if (rangeOptimizerMaxMemSizeBuilder_ == null) {
          rangeOptimizerMaxMemSize_ = null;
        } else {
          rangeOptimizerMaxMemSize_ = null;
          rangeOptimizerMaxMemSizeBuilder_ = null;
        }
        if (slowQueryLogBuilder_ == null) {
          slowQueryLog_ = null;
        } else {
          slowQueryLog_ = null;
          slowQueryLogBuilder_ = null;
        }
        if (slowQueryLogAlwaysWriteTimeBuilder_ == null) {
          slowQueryLogAlwaysWriteTime_ = null;
        } else {
          slowQueryLogAlwaysWriteTime_ = null;
          slowQueryLogAlwaysWriteTimeBuilder_ = null;
        }
        logSlowRateType_ = 0;

        if (logSlowRateLimitBuilder_ == null) {
          logSlowRateLimit_ = null;
        } else {
          logSlowRateLimit_ = null;
          logSlowRateLimitBuilder_ = null;
        }
        if (logSlowSpStatementsBuilder_ == null) {
          logSlowSpStatements_ = null;
        } else {
          logSlowSpStatements_ = null;
          logSlowSpStatementsBuilder_ = null;
        }
        logSlowFilter_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        if (mdbPriorityChoiceMaxLagBuilder_ == null) {
          mdbPriorityChoiceMaxLag_ = null;
        } else {
          mdbPriorityChoiceMaxLag_ = null;
          mdbPriorityChoiceMaxLagBuilder_ = null;
        }
        if (innodbPageSizeBuilder_ == null) {
          innodbPageSize_ = null;
        } else {
          innodbPageSize_ = null;
          innodbPageSizeBuilder_ = null;
        }
        if (innodbOnlineAlterLogMaxSizeBuilder_ == null) {
          innodbOnlineAlterLogMaxSize_ = null;
        } else {
          innodbOnlineAlterLogMaxSize_ = null;
          innodbOnlineAlterLogMaxSizeBuilder_ = null;
        }
        if (innodbFtMinTokenSizeBuilder_ == null) {
          innodbFtMinTokenSize_ = null;
        } else {
          innodbFtMinTokenSize_ = null;
          innodbFtMinTokenSizeBuilder_ = null;
        }
        if (innodbFtMaxTokenSizeBuilder_ == null) {
          innodbFtMaxTokenSize_ = null;
        } else {
          innodbFtMaxTokenSize_ = null;
          innodbFtMaxTokenSizeBuilder_ = null;
        }
        if (lowerCaseTableNamesBuilder_ == null) {
          lowerCaseTableNames_ = null;
        } else {
          lowerCaseTableNames_ = null;
          lowerCaseTableNamesBuilder_ = null;
        }
        if (maxSpRecursionDepthBuilder_ == null) {
          maxSpRecursionDepth_ = null;
        } else {
          maxSpRecursionDepth_ = null;
          maxSpRecursionDepthBuilder_ = null;
        }
        if (innodbCompressionLevelBuilder_ == null) {
          innodbCompressionLevel_ = null;
        } else {
          innodbCompressionLevel_ = null;
          innodbCompressionLevelBuilder_ = null;
        }
        binlogTransactionDependencyTracking_ = 0;

        if (autocommitBuilder_ == null) {
          autocommit_ = null;
        } else {
          autocommit_ = null;
          autocommitBuilder_ = null;
        }
        if (innodbStatusOutputBuilder_ == null) {
          innodbStatusOutput_ = null;
        } else {
          innodbStatusOutput_ = null;
          innodbStatusOutputBuilder_ = null;
        }
        if (innodbStrictModeBuilder_ == null) {
          innodbStrictMode_ = null;
        } else {
          innodbStrictMode_ = null;
          innodbStrictModeBuilder_ = null;
        }
        if (innodbPrintLockWaitTimeoutInfoBuilder_ == null) {
          innodbPrintLockWaitTimeoutInfo_ = null;
        } else {
          innodbPrintLockWaitTimeoutInfo_ = null;
          innodbPrintLockWaitTimeoutInfoBuilder_ = null;
        }
        if (logErrorVerbosityBuilder_ == null) {
          logErrorVerbosity_ = null;
        } else {
          logErrorVerbosity_ = null;
          logErrorVerbosityBuilder_ = null;
        }
        if (maxDigestLengthBuilder_ == null) {
          maxDigestLength_ = null;
        } else {
          maxDigestLength_ = null;
          maxDigestLengthBuilder_ = null;
        }
        if (lockWaitTimeoutBuilder_ == null) {
          lockWaitTimeout_ = null;
        } else {
          lockWaitTimeout_ = null;
          lockWaitTimeoutBuilder_ = null;
        }
        if (maxPreparedStmtCountBuilder_ == null) {
          maxPreparedStmtCount_ = null;
        } else {
          maxPreparedStmtCount_ = null;
          maxPreparedStmtCountBuilder_ = null;
        }
        optimizerSwitch_ = "";

        if (optimizerSearchDepthBuilder_ == null) {
          optimizerSearchDepth_ = null;
        } else {
          optimizerSearchDepth_ = null;
          optimizerSearchDepthBuilder_ = null;
        }
        if (userstatBuilder_ == null) {
          userstat_ = null;
        } else {
          userstat_ = null;
          userstatBuilder_ = null;
        }
        if (maxExecutionTimeBuilder_ == null) {
          maxExecutionTime_ = null;
        } else {
          maxExecutionTime_ = null;
          maxExecutionTimeBuilder_ = null;
        }
        auditLogPolicy_ = 0;

        if (replicationSenderObserveCommitOnlyBuilder_ == null) {
          replicationSenderObserveCommitOnly_ = null;
        } else {
          replicationSenderObserveCommitOnly_ = null;
          replicationSenderObserveCommitOnlyBuilder_ = null;
        }
        if (replicationOptimizeForStaticPluginConfigBuilder_ == null) {
          replicationOptimizeForStaticPluginConfig_ = null;
        } else {
          replicationOptimizeForStaticPluginConfig_ = null;
          replicationOptimizeForStaticPluginConfigBuilder_ = null;
        }
        if (innodbLruScanDepthBuilder_ == null) {
          innodbLruScanDepth_ = null;
        } else {
          innodbLruScanDepth_ = null;
          innodbLruScanDepthBuilder_ = null;
        }
        if (sqlRequirePrimaryKeyBuilder_ == null) {
          sqlRequirePrimaryKey_ = null;
        } else {
          sqlRequirePrimaryKey_ = null;
          sqlRequirePrimaryKeyBuilder_ = null;
        }
        if (mdbForceSslBuilder_ == null) {
          mdbForceSsl_ = null;
        } else {
          mdbForceSsl_ = null;
          mdbForceSslBuilder_ = null;
        }
        innodbChangeBuffering_ = 0;

        if (maxWriteLockCountBuilder_ == null) {
          maxWriteLockCount_ = null;
        } else {
          maxWriteLockCount_ = null;
          maxWriteLockCountBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig8_0_descriptor;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 getDefaultInstanceForType() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDefaultInstance();
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 build() {
        yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 buildPartial() {
        yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 result = new yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0(this);
        int from_bitField0_ = bitField0_;
        if (innodbBufferPoolSizeBuilder_ == null) {
          result.innodbBufferPoolSize_ = innodbBufferPoolSize_;
        } else {
          result.innodbBufferPoolSize_ = innodbBufferPoolSizeBuilder_.build();
        }
        if (maxConnectionsBuilder_ == null) {
          result.maxConnections_ = maxConnections_;
        } else {
          result.maxConnections_ = maxConnectionsBuilder_.build();
        }
        if (longQueryTimeBuilder_ == null) {
          result.longQueryTime_ = longQueryTime_;
        } else {
          result.longQueryTime_ = longQueryTimeBuilder_.build();
        }
        if (generalLogBuilder_ == null) {
          result.generalLog_ = generalLog_;
        } else {
          result.generalLog_ = generalLogBuilder_.build();
        }
        if (auditLogBuilder_ == null) {
          result.auditLog_ = auditLog_;
        } else {
          result.auditLog_ = auditLogBuilder_.build();
        }
        if (((bitField0_ & 0x00000001) != 0)) {
          sqlMode_ = java.util.Collections.unmodifiableList(sqlMode_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.sqlMode_ = sqlMode_;
        if (maxAllowedPacketBuilder_ == null) {
          result.maxAllowedPacket_ = maxAllowedPacket_;
        } else {
          result.maxAllowedPacket_ = maxAllowedPacketBuilder_.build();
        }
        result.defaultAuthenticationPlugin_ = defaultAuthenticationPlugin_;
        if (innodbFlushLogAtTrxCommitBuilder_ == null) {
          result.innodbFlushLogAtTrxCommit_ = innodbFlushLogAtTrxCommit_;
        } else {
          result.innodbFlushLogAtTrxCommit_ = innodbFlushLogAtTrxCommitBuilder_.build();
        }
        if (innodbLockWaitTimeoutBuilder_ == null) {
          result.innodbLockWaitTimeout_ = innodbLockWaitTimeout_;
        } else {
          result.innodbLockWaitTimeout_ = innodbLockWaitTimeoutBuilder_.build();
        }
        result.transactionIsolation_ = transactionIsolation_;
        if (innodbPrintAllDeadlocksBuilder_ == null) {
          result.innodbPrintAllDeadlocks_ = innodbPrintAllDeadlocks_;
        } else {
          result.innodbPrintAllDeadlocks_ = innodbPrintAllDeadlocksBuilder_.build();
        }
        if (netReadTimeoutBuilder_ == null) {
          result.netReadTimeout_ = netReadTimeout_;
        } else {
          result.netReadTimeout_ = netReadTimeoutBuilder_.build();
        }
        if (netWriteTimeoutBuilder_ == null) {
          result.netWriteTimeout_ = netWriteTimeout_;
        } else {
          result.netWriteTimeout_ = netWriteTimeoutBuilder_.build();
        }
        if (groupConcatMaxLenBuilder_ == null) {
          result.groupConcatMaxLen_ = groupConcatMaxLen_;
        } else {
          result.groupConcatMaxLen_ = groupConcatMaxLenBuilder_.build();
        }
        if (tmpTableSizeBuilder_ == null) {
          result.tmpTableSize_ = tmpTableSize_;
        } else {
          result.tmpTableSize_ = tmpTableSizeBuilder_.build();
        }
        if (maxHeapTableSizeBuilder_ == null) {
          result.maxHeapTableSize_ = maxHeapTableSize_;
        } else {
          result.maxHeapTableSize_ = maxHeapTableSizeBuilder_.build();
        }
        result.defaultTimeZone_ = defaultTimeZone_;
        result.characterSetServer_ = characterSetServer_;
        result.collationServer_ = collationServer_;
        if (innodbAdaptiveHashIndexBuilder_ == null) {
          result.innodbAdaptiveHashIndex_ = innodbAdaptiveHashIndex_;
        } else {
          result.innodbAdaptiveHashIndex_ = innodbAdaptiveHashIndexBuilder_.build();
        }
        if (innodbNumaInterleaveBuilder_ == null) {
          result.innodbNumaInterleave_ = innodbNumaInterleave_;
        } else {
          result.innodbNumaInterleave_ = innodbNumaInterleaveBuilder_.build();
        }
        if (innodbLogBufferSizeBuilder_ == null) {
          result.innodbLogBufferSize_ = innodbLogBufferSize_;
        } else {
          result.innodbLogBufferSize_ = innodbLogBufferSizeBuilder_.build();
        }
        if (innodbLogFileSizeBuilder_ == null) {
          result.innodbLogFileSize_ = innodbLogFileSize_;
        } else {
          result.innodbLogFileSize_ = innodbLogFileSizeBuilder_.build();
        }
        if (innodbIoCapacityBuilder_ == null) {
          result.innodbIoCapacity_ = innodbIoCapacity_;
        } else {
          result.innodbIoCapacity_ = innodbIoCapacityBuilder_.build();
        }
        if (innodbIoCapacityMaxBuilder_ == null) {
          result.innodbIoCapacityMax_ = innodbIoCapacityMax_;
        } else {
          result.innodbIoCapacityMax_ = innodbIoCapacityMaxBuilder_.build();
        }
        if (innodbReadIoThreadsBuilder_ == null) {
          result.innodbReadIoThreads_ = innodbReadIoThreads_;
        } else {
          result.innodbReadIoThreads_ = innodbReadIoThreadsBuilder_.build();
        }
        if (innodbWriteIoThreadsBuilder_ == null) {
          result.innodbWriteIoThreads_ = innodbWriteIoThreads_;
        } else {
          result.innodbWriteIoThreads_ = innodbWriteIoThreadsBuilder_.build();
        }
        if (innodbPurgeThreadsBuilder_ == null) {
          result.innodbPurgeThreads_ = innodbPurgeThreads_;
        } else {
          result.innodbPurgeThreads_ = innodbPurgeThreadsBuilder_.build();
        }
        if (innodbThreadConcurrencyBuilder_ == null) {
          result.innodbThreadConcurrency_ = innodbThreadConcurrency_;
        } else {
          result.innodbThreadConcurrency_ = innodbThreadConcurrencyBuilder_.build();
        }
        if (innodbTempDataFileMaxSizeBuilder_ == null) {
          result.innodbTempDataFileMaxSize_ = innodbTempDataFileMaxSize_;
        } else {
          result.innodbTempDataFileMaxSize_ = innodbTempDataFileMaxSizeBuilder_.build();
        }
        if (threadCacheSizeBuilder_ == null) {
          result.threadCacheSize_ = threadCacheSize_;
        } else {
          result.threadCacheSize_ = threadCacheSizeBuilder_.build();
        }
        if (threadStackBuilder_ == null) {
          result.threadStack_ = threadStack_;
        } else {
          result.threadStack_ = threadStackBuilder_.build();
        }
        if (joinBufferSizeBuilder_ == null) {
          result.joinBufferSize_ = joinBufferSize_;
        } else {
          result.joinBufferSize_ = joinBufferSizeBuilder_.build();
        }
        if (sortBufferSizeBuilder_ == null) {
          result.sortBufferSize_ = sortBufferSize_;
        } else {
          result.sortBufferSize_ = sortBufferSizeBuilder_.build();
        }
        if (tableDefinitionCacheBuilder_ == null) {
          result.tableDefinitionCache_ = tableDefinitionCache_;
        } else {
          result.tableDefinitionCache_ = tableDefinitionCacheBuilder_.build();
        }
        if (tableOpenCacheBuilder_ == null) {
          result.tableOpenCache_ = tableOpenCache_;
        } else {
          result.tableOpenCache_ = tableOpenCacheBuilder_.build();
        }
        if (tableOpenCacheInstancesBuilder_ == null) {
          result.tableOpenCacheInstances_ = tableOpenCacheInstances_;
        } else {
          result.tableOpenCacheInstances_ = tableOpenCacheInstancesBuilder_.build();
        }
        if (explicitDefaultsForTimestampBuilder_ == null) {
          result.explicitDefaultsForTimestamp_ = explicitDefaultsForTimestamp_;
        } else {
          result.explicitDefaultsForTimestamp_ = explicitDefaultsForTimestampBuilder_.build();
        }
        if (autoIncrementIncrementBuilder_ == null) {
          result.autoIncrementIncrement_ = autoIncrementIncrement_;
        } else {
          result.autoIncrementIncrement_ = autoIncrementIncrementBuilder_.build();
        }
        if (autoIncrementOffsetBuilder_ == null) {
          result.autoIncrementOffset_ = autoIncrementOffset_;
        } else {
          result.autoIncrementOffset_ = autoIncrementOffsetBuilder_.build();
        }
        if (syncBinlogBuilder_ == null) {
          result.syncBinlog_ = syncBinlog_;
        } else {
          result.syncBinlog_ = syncBinlogBuilder_.build();
        }
        if (binlogCacheSizeBuilder_ == null) {
          result.binlogCacheSize_ = binlogCacheSize_;
        } else {
          result.binlogCacheSize_ = binlogCacheSizeBuilder_.build();
        }
        if (binlogGroupCommitSyncDelayBuilder_ == null) {
          result.binlogGroupCommitSyncDelay_ = binlogGroupCommitSyncDelay_;
        } else {
          result.binlogGroupCommitSyncDelay_ = binlogGroupCommitSyncDelayBuilder_.build();
        }
        result.binlogRowImage_ = binlogRowImage_;
        if (binlogRowsQueryLogEventsBuilder_ == null) {
          result.binlogRowsQueryLogEvents_ = binlogRowsQueryLogEvents_;
        } else {
          result.binlogRowsQueryLogEvents_ = binlogRowsQueryLogEventsBuilder_.build();
        }
        if (rplSemiSyncMasterWaitForSlaveCountBuilder_ == null) {
          result.rplSemiSyncMasterWaitForSlaveCount_ = rplSemiSyncMasterWaitForSlaveCount_;
        } else {
          result.rplSemiSyncMasterWaitForSlaveCount_ = rplSemiSyncMasterWaitForSlaveCountBuilder_.build();
        }
        result.slaveParallelType_ = slaveParallelType_;
        if (slaveParallelWorkersBuilder_ == null) {
          result.slaveParallelWorkers_ = slaveParallelWorkers_;
        } else {
          result.slaveParallelWorkers_ = slaveParallelWorkersBuilder_.build();
        }
        if (regexpTimeLimitBuilder_ == null) {
          result.regexpTimeLimit_ = regexpTimeLimit_;
        } else {
          result.regexpTimeLimit_ = regexpTimeLimitBuilder_.build();
        }
        if (mdbPreserveBinlogBytesBuilder_ == null) {
          result.mdbPreserveBinlogBytes_ = mdbPreserveBinlogBytes_;
        } else {
          result.mdbPreserveBinlogBytes_ = mdbPreserveBinlogBytesBuilder_.build();
        }
        if (interactiveTimeoutBuilder_ == null) {
          result.interactiveTimeout_ = interactiveTimeout_;
        } else {
          result.interactiveTimeout_ = interactiveTimeoutBuilder_.build();
        }
        if (waitTimeoutBuilder_ == null) {
          result.waitTimeout_ = waitTimeout_;
        } else {
          result.waitTimeout_ = waitTimeoutBuilder_.build();
        }
        if (mdbOfflineModeEnableLagBuilder_ == null) {
          result.mdbOfflineModeEnableLag_ = mdbOfflineModeEnableLag_;
        } else {
          result.mdbOfflineModeEnableLag_ = mdbOfflineModeEnableLagBuilder_.build();
        }
        if (mdbOfflineModeDisableLagBuilder_ == null) {
          result.mdbOfflineModeDisableLag_ = mdbOfflineModeDisableLag_;
        } else {
          result.mdbOfflineModeDisableLag_ = mdbOfflineModeDisableLagBuilder_.build();
        }
        if (rangeOptimizerMaxMemSizeBuilder_ == null) {
          result.rangeOptimizerMaxMemSize_ = rangeOptimizerMaxMemSize_;
        } else {
          result.rangeOptimizerMaxMemSize_ = rangeOptimizerMaxMemSizeBuilder_.build();
        }
        if (slowQueryLogBuilder_ == null) {
          result.slowQueryLog_ = slowQueryLog_;
        } else {
          result.slowQueryLog_ = slowQueryLogBuilder_.build();
        }
        if (slowQueryLogAlwaysWriteTimeBuilder_ == null) {
          result.slowQueryLogAlwaysWriteTime_ = slowQueryLogAlwaysWriteTime_;
        } else {
          result.slowQueryLogAlwaysWriteTime_ = slowQueryLogAlwaysWriteTimeBuilder_.build();
        }
        result.logSlowRateType_ = logSlowRateType_;
        if (logSlowRateLimitBuilder_ == null) {
          result.logSlowRateLimit_ = logSlowRateLimit_;
        } else {
          result.logSlowRateLimit_ = logSlowRateLimitBuilder_.build();
        }
        if (logSlowSpStatementsBuilder_ == null) {
          result.logSlowSpStatements_ = logSlowSpStatements_;
        } else {
          result.logSlowSpStatements_ = logSlowSpStatementsBuilder_.build();
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          logSlowFilter_ = java.util.Collections.unmodifiableList(logSlowFilter_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.logSlowFilter_ = logSlowFilter_;
        if (mdbPriorityChoiceMaxLagBuilder_ == null) {
          result.mdbPriorityChoiceMaxLag_ = mdbPriorityChoiceMaxLag_;
        } else {
          result.mdbPriorityChoiceMaxLag_ = mdbPriorityChoiceMaxLagBuilder_.build();
        }
        if (innodbPageSizeBuilder_ == null) {
          result.innodbPageSize_ = innodbPageSize_;
        } else {
          result.innodbPageSize_ = innodbPageSizeBuilder_.build();
        }
        if (innodbOnlineAlterLogMaxSizeBuilder_ == null) {
          result.innodbOnlineAlterLogMaxSize_ = innodbOnlineAlterLogMaxSize_;
        } else {
          result.innodbOnlineAlterLogMaxSize_ = innodbOnlineAlterLogMaxSizeBuilder_.build();
        }
        if (innodbFtMinTokenSizeBuilder_ == null) {
          result.innodbFtMinTokenSize_ = innodbFtMinTokenSize_;
        } else {
          result.innodbFtMinTokenSize_ = innodbFtMinTokenSizeBuilder_.build();
        }
        if (innodbFtMaxTokenSizeBuilder_ == null) {
          result.innodbFtMaxTokenSize_ = innodbFtMaxTokenSize_;
        } else {
          result.innodbFtMaxTokenSize_ = innodbFtMaxTokenSizeBuilder_.build();
        }
        if (lowerCaseTableNamesBuilder_ == null) {
          result.lowerCaseTableNames_ = lowerCaseTableNames_;
        } else {
          result.lowerCaseTableNames_ = lowerCaseTableNamesBuilder_.build();
        }
        if (maxSpRecursionDepthBuilder_ == null) {
          result.maxSpRecursionDepth_ = maxSpRecursionDepth_;
        } else {
          result.maxSpRecursionDepth_ = maxSpRecursionDepthBuilder_.build();
        }
        if (innodbCompressionLevelBuilder_ == null) {
          result.innodbCompressionLevel_ = innodbCompressionLevel_;
        } else {
          result.innodbCompressionLevel_ = innodbCompressionLevelBuilder_.build();
        }
        result.binlogTransactionDependencyTracking_ = binlogTransactionDependencyTracking_;
        if (autocommitBuilder_ == null) {
          result.autocommit_ = autocommit_;
        } else {
          result.autocommit_ = autocommitBuilder_.build();
        }
        if (innodbStatusOutputBuilder_ == null) {
          result.innodbStatusOutput_ = innodbStatusOutput_;
        } else {
          result.innodbStatusOutput_ = innodbStatusOutputBuilder_.build();
        }
        if (innodbStrictModeBuilder_ == null) {
          result.innodbStrictMode_ = innodbStrictMode_;
        } else {
          result.innodbStrictMode_ = innodbStrictModeBuilder_.build();
        }
        if (innodbPrintLockWaitTimeoutInfoBuilder_ == null) {
          result.innodbPrintLockWaitTimeoutInfo_ = innodbPrintLockWaitTimeoutInfo_;
        } else {
          result.innodbPrintLockWaitTimeoutInfo_ = innodbPrintLockWaitTimeoutInfoBuilder_.build();
        }
        if (logErrorVerbosityBuilder_ == null) {
          result.logErrorVerbosity_ = logErrorVerbosity_;
        } else {
          result.logErrorVerbosity_ = logErrorVerbosityBuilder_.build();
        }
        if (maxDigestLengthBuilder_ == null) {
          result.maxDigestLength_ = maxDigestLength_;
        } else {
          result.maxDigestLength_ = maxDigestLengthBuilder_.build();
        }
        if (lockWaitTimeoutBuilder_ == null) {
          result.lockWaitTimeout_ = lockWaitTimeout_;
        } else {
          result.lockWaitTimeout_ = lockWaitTimeoutBuilder_.build();
        }
        if (maxPreparedStmtCountBuilder_ == null) {
          result.maxPreparedStmtCount_ = maxPreparedStmtCount_;
        } else {
          result.maxPreparedStmtCount_ = maxPreparedStmtCountBuilder_.build();
        }
        result.optimizerSwitch_ = optimizerSwitch_;
        if (optimizerSearchDepthBuilder_ == null) {
          result.optimizerSearchDepth_ = optimizerSearchDepth_;
        } else {
          result.optimizerSearchDepth_ = optimizerSearchDepthBuilder_.build();
        }
        if (userstatBuilder_ == null) {
          result.userstat_ = userstat_;
        } else {
          result.userstat_ = userstatBuilder_.build();
        }
        if (maxExecutionTimeBuilder_ == null) {
          result.maxExecutionTime_ = maxExecutionTime_;
        } else {
          result.maxExecutionTime_ = maxExecutionTimeBuilder_.build();
        }
        result.auditLogPolicy_ = auditLogPolicy_;
        if (replicationSenderObserveCommitOnlyBuilder_ == null) {
          result.replicationSenderObserveCommitOnly_ = replicationSenderObserveCommitOnly_;
        } else {
          result.replicationSenderObserveCommitOnly_ = replicationSenderObserveCommitOnlyBuilder_.build();
        }
        if (replicationOptimizeForStaticPluginConfigBuilder_ == null) {
          result.replicationOptimizeForStaticPluginConfig_ = replicationOptimizeForStaticPluginConfig_;
        } else {
          result.replicationOptimizeForStaticPluginConfig_ = replicationOptimizeForStaticPluginConfigBuilder_.build();
        }
        if (innodbLruScanDepthBuilder_ == null) {
          result.innodbLruScanDepth_ = innodbLruScanDepth_;
        } else {
          result.innodbLruScanDepth_ = innodbLruScanDepthBuilder_.build();
        }
        if (sqlRequirePrimaryKeyBuilder_ == null) {
          result.sqlRequirePrimaryKey_ = sqlRequirePrimaryKey_;
        } else {
          result.sqlRequirePrimaryKey_ = sqlRequirePrimaryKeyBuilder_.build();
        }
        if (mdbForceSslBuilder_ == null) {
          result.mdbForceSsl_ = mdbForceSsl_;
        } else {
          result.mdbForceSsl_ = mdbForceSslBuilder_.build();
        }
        result.innodbChangeBuffering_ = innodbChangeBuffering_;
        if (maxWriteLockCountBuilder_ == null) {
          result.maxWriteLockCount_ = maxWriteLockCount_;
        } else {
          result.maxWriteLockCount_ = maxWriteLockCountBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0) {
          return mergeFrom((yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 other) {
        if (other == yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDefaultInstance()) return this;
        if (other.hasInnodbBufferPoolSize()) {
          mergeInnodbBufferPoolSize(other.getInnodbBufferPoolSize());
        }
        if (other.hasMaxConnections()) {
          mergeMaxConnections(other.getMaxConnections());
        }
        if (other.hasLongQueryTime()) {
          mergeLongQueryTime(other.getLongQueryTime());
        }
        if (other.hasGeneralLog()) {
          mergeGeneralLog(other.getGeneralLog());
        }
        if (other.hasAuditLog()) {
          mergeAuditLog(other.getAuditLog());
        }
        if (!other.sqlMode_.isEmpty()) {
          if (sqlMode_.isEmpty()) {
            sqlMode_ = other.sqlMode_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureSqlModeIsMutable();
            sqlMode_.addAll(other.sqlMode_);
          }
          onChanged();
        }
        if (other.hasMaxAllowedPacket()) {
          mergeMaxAllowedPacket(other.getMaxAllowedPacket());
        }
        if (other.defaultAuthenticationPlugin_ != 0) {
          setDefaultAuthenticationPluginValue(other.getDefaultAuthenticationPluginValue());
        }
        if (other.hasInnodbFlushLogAtTrxCommit()) {
          mergeInnodbFlushLogAtTrxCommit(other.getInnodbFlushLogAtTrxCommit());
        }
        if (other.hasInnodbLockWaitTimeout()) {
          mergeInnodbLockWaitTimeout(other.getInnodbLockWaitTimeout());
        }
        if (other.transactionIsolation_ != 0) {
          setTransactionIsolationValue(other.getTransactionIsolationValue());
        }
        if (other.hasInnodbPrintAllDeadlocks()) {
          mergeInnodbPrintAllDeadlocks(other.getInnodbPrintAllDeadlocks());
        }
        if (other.hasNetReadTimeout()) {
          mergeNetReadTimeout(other.getNetReadTimeout());
        }
        if (other.hasNetWriteTimeout()) {
          mergeNetWriteTimeout(other.getNetWriteTimeout());
        }
        if (other.hasGroupConcatMaxLen()) {
          mergeGroupConcatMaxLen(other.getGroupConcatMaxLen());
        }
        if (other.hasTmpTableSize()) {
          mergeTmpTableSize(other.getTmpTableSize());
        }
        if (other.hasMaxHeapTableSize()) {
          mergeMaxHeapTableSize(other.getMaxHeapTableSize());
        }
        if (!other.getDefaultTimeZone().isEmpty()) {
          defaultTimeZone_ = other.defaultTimeZone_;
          onChanged();
        }
        if (!other.getCharacterSetServer().isEmpty()) {
          characterSetServer_ = other.characterSetServer_;
          onChanged();
        }
        if (!other.getCollationServer().isEmpty()) {
          collationServer_ = other.collationServer_;
          onChanged();
        }
        if (other.hasInnodbAdaptiveHashIndex()) {
          mergeInnodbAdaptiveHashIndex(other.getInnodbAdaptiveHashIndex());
        }
        if (other.hasInnodbNumaInterleave()) {
          mergeInnodbNumaInterleave(other.getInnodbNumaInterleave());
        }
        if (other.hasInnodbLogBufferSize()) {
          mergeInnodbLogBufferSize(other.getInnodbLogBufferSize());
        }
        if (other.hasInnodbLogFileSize()) {
          mergeInnodbLogFileSize(other.getInnodbLogFileSize());
        }
        if (other.hasInnodbIoCapacity()) {
          mergeInnodbIoCapacity(other.getInnodbIoCapacity());
        }
        if (other.hasInnodbIoCapacityMax()) {
          mergeInnodbIoCapacityMax(other.getInnodbIoCapacityMax());
        }
        if (other.hasInnodbReadIoThreads()) {
          mergeInnodbReadIoThreads(other.getInnodbReadIoThreads());
        }
        if (other.hasInnodbWriteIoThreads()) {
          mergeInnodbWriteIoThreads(other.getInnodbWriteIoThreads());
        }
        if (other.hasInnodbPurgeThreads()) {
          mergeInnodbPurgeThreads(other.getInnodbPurgeThreads());
        }
        if (other.hasInnodbThreadConcurrency()) {
          mergeInnodbThreadConcurrency(other.getInnodbThreadConcurrency());
        }
        if (other.hasInnodbTempDataFileMaxSize()) {
          mergeInnodbTempDataFileMaxSize(other.getInnodbTempDataFileMaxSize());
        }
        if (other.hasThreadCacheSize()) {
          mergeThreadCacheSize(other.getThreadCacheSize());
        }
        if (other.hasThreadStack()) {
          mergeThreadStack(other.getThreadStack());
        }
        if (other.hasJoinBufferSize()) {
          mergeJoinBufferSize(other.getJoinBufferSize());
        }
        if (other.hasSortBufferSize()) {
          mergeSortBufferSize(other.getSortBufferSize());
        }
        if (other.hasTableDefinitionCache()) {
          mergeTableDefinitionCache(other.getTableDefinitionCache());
        }
        if (other.hasTableOpenCache()) {
          mergeTableOpenCache(other.getTableOpenCache());
        }
        if (other.hasTableOpenCacheInstances()) {
          mergeTableOpenCacheInstances(other.getTableOpenCacheInstances());
        }
        if (other.hasExplicitDefaultsForTimestamp()) {
          mergeExplicitDefaultsForTimestamp(other.getExplicitDefaultsForTimestamp());
        }
        if (other.hasAutoIncrementIncrement()) {
          mergeAutoIncrementIncrement(other.getAutoIncrementIncrement());
        }
        if (other.hasAutoIncrementOffset()) {
          mergeAutoIncrementOffset(other.getAutoIncrementOffset());
        }
        if (other.hasSyncBinlog()) {
          mergeSyncBinlog(other.getSyncBinlog());
        }
        if (other.hasBinlogCacheSize()) {
          mergeBinlogCacheSize(other.getBinlogCacheSize());
        }
        if (other.hasBinlogGroupCommitSyncDelay()) {
          mergeBinlogGroupCommitSyncDelay(other.getBinlogGroupCommitSyncDelay());
        }
        if (other.binlogRowImage_ != 0) {
          setBinlogRowImageValue(other.getBinlogRowImageValue());
        }
        if (other.hasBinlogRowsQueryLogEvents()) {
          mergeBinlogRowsQueryLogEvents(other.getBinlogRowsQueryLogEvents());
        }
        if (other.hasRplSemiSyncMasterWaitForSlaveCount()) {
          mergeRplSemiSyncMasterWaitForSlaveCount(other.getRplSemiSyncMasterWaitForSlaveCount());
        }
        if (other.slaveParallelType_ != 0) {
          setSlaveParallelTypeValue(other.getSlaveParallelTypeValue());
        }
        if (other.hasSlaveParallelWorkers()) {
          mergeSlaveParallelWorkers(other.getSlaveParallelWorkers());
        }
        if (other.hasRegexpTimeLimit()) {
          mergeRegexpTimeLimit(other.getRegexpTimeLimit());
        }
        if (other.hasMdbPreserveBinlogBytes()) {
          mergeMdbPreserveBinlogBytes(other.getMdbPreserveBinlogBytes());
        }
        if (other.hasInteractiveTimeout()) {
          mergeInteractiveTimeout(other.getInteractiveTimeout());
        }
        if (other.hasWaitTimeout()) {
          mergeWaitTimeout(other.getWaitTimeout());
        }
        if (other.hasMdbOfflineModeEnableLag()) {
          mergeMdbOfflineModeEnableLag(other.getMdbOfflineModeEnableLag());
        }
        if (other.hasMdbOfflineModeDisableLag()) {
          mergeMdbOfflineModeDisableLag(other.getMdbOfflineModeDisableLag());
        }
        if (other.hasRangeOptimizerMaxMemSize()) {
          mergeRangeOptimizerMaxMemSize(other.getRangeOptimizerMaxMemSize());
        }
        if (other.hasSlowQueryLog()) {
          mergeSlowQueryLog(other.getSlowQueryLog());
        }
        if (other.hasSlowQueryLogAlwaysWriteTime()) {
          mergeSlowQueryLogAlwaysWriteTime(other.getSlowQueryLogAlwaysWriteTime());
        }
        if (other.logSlowRateType_ != 0) {
          setLogSlowRateTypeValue(other.getLogSlowRateTypeValue());
        }
        if (other.hasLogSlowRateLimit()) {
          mergeLogSlowRateLimit(other.getLogSlowRateLimit());
        }
        if (other.hasLogSlowSpStatements()) {
          mergeLogSlowSpStatements(other.getLogSlowSpStatements());
        }
        if (!other.logSlowFilter_.isEmpty()) {
          if (logSlowFilter_.isEmpty()) {
            logSlowFilter_ = other.logSlowFilter_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureLogSlowFilterIsMutable();
            logSlowFilter_.addAll(other.logSlowFilter_);
          }
          onChanged();
        }
        if (other.hasMdbPriorityChoiceMaxLag()) {
          mergeMdbPriorityChoiceMaxLag(other.getMdbPriorityChoiceMaxLag());
        }
        if (other.hasInnodbPageSize()) {
          mergeInnodbPageSize(other.getInnodbPageSize());
        }
        if (other.hasInnodbOnlineAlterLogMaxSize()) {
          mergeInnodbOnlineAlterLogMaxSize(other.getInnodbOnlineAlterLogMaxSize());
        }
        if (other.hasInnodbFtMinTokenSize()) {
          mergeInnodbFtMinTokenSize(other.getInnodbFtMinTokenSize());
        }
        if (other.hasInnodbFtMaxTokenSize()) {
          mergeInnodbFtMaxTokenSize(other.getInnodbFtMaxTokenSize());
        }
        if (other.hasLowerCaseTableNames()) {
          mergeLowerCaseTableNames(other.getLowerCaseTableNames());
        }
        if (other.hasMaxSpRecursionDepth()) {
          mergeMaxSpRecursionDepth(other.getMaxSpRecursionDepth());
        }
        if (other.hasInnodbCompressionLevel()) {
          mergeInnodbCompressionLevel(other.getInnodbCompressionLevel());
        }
        if (other.binlogTransactionDependencyTracking_ != 0) {
          setBinlogTransactionDependencyTrackingValue(other.getBinlogTransactionDependencyTrackingValue());
        }
        if (other.hasAutocommit()) {
          mergeAutocommit(other.getAutocommit());
        }
        if (other.hasInnodbStatusOutput()) {
          mergeInnodbStatusOutput(other.getInnodbStatusOutput());
        }
        if (other.hasInnodbStrictMode()) {
          mergeInnodbStrictMode(other.getInnodbStrictMode());
        }
        if (other.hasInnodbPrintLockWaitTimeoutInfo()) {
          mergeInnodbPrintLockWaitTimeoutInfo(other.getInnodbPrintLockWaitTimeoutInfo());
        }
        if (other.hasLogErrorVerbosity()) {
          mergeLogErrorVerbosity(other.getLogErrorVerbosity());
        }
        if (other.hasMaxDigestLength()) {
          mergeMaxDigestLength(other.getMaxDigestLength());
        }
        if (other.hasLockWaitTimeout()) {
          mergeLockWaitTimeout(other.getLockWaitTimeout());
        }
        if (other.hasMaxPreparedStmtCount()) {
          mergeMaxPreparedStmtCount(other.getMaxPreparedStmtCount());
        }
        if (!other.getOptimizerSwitch().isEmpty()) {
          optimizerSwitch_ = other.optimizerSwitch_;
          onChanged();
        }
        if (other.hasOptimizerSearchDepth()) {
          mergeOptimizerSearchDepth(other.getOptimizerSearchDepth());
        }
        if (other.hasUserstat()) {
          mergeUserstat(other.getUserstat());
        }
        if (other.hasMaxExecutionTime()) {
          mergeMaxExecutionTime(other.getMaxExecutionTime());
        }
        if (other.auditLogPolicy_ != 0) {
          setAuditLogPolicyValue(other.getAuditLogPolicyValue());
        }
        if (other.hasReplicationSenderObserveCommitOnly()) {
          mergeReplicationSenderObserveCommitOnly(other.getReplicationSenderObserveCommitOnly());
        }
        if (other.hasReplicationOptimizeForStaticPluginConfig()) {
          mergeReplicationOptimizeForStaticPluginConfig(other.getReplicationOptimizeForStaticPluginConfig());
        }
        if (other.hasInnodbLruScanDepth()) {
          mergeInnodbLruScanDepth(other.getInnodbLruScanDepth());
        }
        if (other.hasSqlRequirePrimaryKey()) {
          mergeSqlRequirePrimaryKey(other.getSqlRequirePrimaryKey());
        }
        if (other.hasMdbForceSsl()) {
          mergeMdbForceSsl(other.getMdbForceSsl());
        }
        if (other.innodbChangeBuffering_ != 0) {
          setInnodbChangeBufferingValue(other.getInnodbChangeBufferingValue());
        }
        if (other.hasMaxWriteLockCount()) {
          mergeMaxWriteLockCount(other.getMaxWriteLockCount());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Int64Value innodbBufferPoolSize_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> innodbBufferPoolSizeBuilder_;
      /**
       * <pre>
       * Size of the InnoDB buffer pool used for caching table and index data.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
       * @return Whether the innodbBufferPoolSize field is set.
       */
      public boolean hasInnodbBufferPoolSize() {
        return innodbBufferPoolSizeBuilder_ != null || innodbBufferPoolSize_ != null;
      }
      /**
       * <pre>
       * Size of the InnoDB buffer pool used for caching table and index data.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
       * @return The innodbBufferPoolSize.
       */
      public com.google.protobuf.Int64Value getInnodbBufferPoolSize() {
        if (innodbBufferPoolSizeBuilder_ == null) {
          return innodbBufferPoolSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbBufferPoolSize_;
        } else {
          return innodbBufferPoolSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Size of the InnoDB buffer pool used for caching table and index data.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
       */
      public Builder setInnodbBufferPoolSize(com.google.protobuf.Int64Value value) {
        if (innodbBufferPoolSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbBufferPoolSize_ = value;
          onChanged();
        } else {
          innodbBufferPoolSizeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Size of the InnoDB buffer pool used for caching table and index data.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
       */
      public Builder setInnodbBufferPoolSize(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (innodbBufferPoolSizeBuilder_ == null) {
          innodbBufferPoolSize_ = builderForValue.build();
          onChanged();
        } else {
          innodbBufferPoolSizeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Size of the InnoDB buffer pool used for caching table and index data.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
       */
      public Builder mergeInnodbBufferPoolSize(com.google.protobuf.Int64Value value) {
        if (innodbBufferPoolSizeBuilder_ == null) {
          if (innodbBufferPoolSize_ != null) {
            innodbBufferPoolSize_ =
              com.google.protobuf.Int64Value.newBuilder(innodbBufferPoolSize_).mergeFrom(value).buildPartial();
          } else {
            innodbBufferPoolSize_ = value;
          }
          onChanged();
        } else {
          innodbBufferPoolSizeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Size of the InnoDB buffer pool used for caching table and index data.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
       */
      public Builder clearInnodbBufferPoolSize() {
        if (innodbBufferPoolSizeBuilder_ == null) {
          innodbBufferPoolSize_ = null;
          onChanged();
        } else {
          innodbBufferPoolSize_ = null;
          innodbBufferPoolSizeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Size of the InnoDB buffer pool used for caching table and index data.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getInnodbBufferPoolSizeBuilder() {
        
        onChanged();
        return getInnodbBufferPoolSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Size of the InnoDB buffer pool used for caching table and index data.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getInnodbBufferPoolSizeOrBuilder() {
        if (innodbBufferPoolSizeBuilder_ != null) {
          return innodbBufferPoolSizeBuilder_.getMessageOrBuilder();
        } else {
          return innodbBufferPoolSize_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : innodbBufferPoolSize_;
        }
      }
      /**
       * <pre>
       * Size of the InnoDB buffer pool used for caching table and index data.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_buffer_pool_size = 1 [(.yandex.cloud.value) = "&gt;=5242880"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getInnodbBufferPoolSizeFieldBuilder() {
        if (innodbBufferPoolSizeBuilder_ == null) {
          innodbBufferPoolSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getInnodbBufferPoolSize(),
                  getParentForChildren(),
                  isClean());
          innodbBufferPoolSize_ = null;
        }
        return innodbBufferPoolSizeBuilder_;
      }

      private com.google.protobuf.Int64Value maxConnections_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxConnectionsBuilder_;
      /**
       * <pre>
       * The maximum permitted number of simultaneous client connections.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-16384"];</code>
       * @return Whether the maxConnections field is set.
       */
      public boolean hasMaxConnections() {
        return maxConnectionsBuilder_ != null || maxConnections_ != null;
      }
      /**
       * <pre>
       * The maximum permitted number of simultaneous client connections.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-16384"];</code>
       * @return The maxConnections.
       */
      public com.google.protobuf.Int64Value getMaxConnections() {
        if (maxConnectionsBuilder_ == null) {
          return maxConnections_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxConnections_;
        } else {
          return maxConnectionsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The maximum permitted number of simultaneous client connections.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-16384"];</code>
       */
      public Builder setMaxConnections(com.google.protobuf.Int64Value value) {
        if (maxConnectionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxConnections_ = value;
          onChanged();
        } else {
          maxConnectionsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum permitted number of simultaneous client connections.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-16384"];</code>
       */
      public Builder setMaxConnections(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxConnectionsBuilder_ == null) {
          maxConnections_ = builderForValue.build();
          onChanged();
        } else {
          maxConnectionsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The maximum permitted number of simultaneous client connections.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-16384"];</code>
       */
      public Builder mergeMaxConnections(com.google.protobuf.Int64Value value) {
        if (maxConnectionsBuilder_ == null) {
          if (maxConnections_ != null) {
            maxConnections_ =
              com.google.protobuf.Int64Value.newBuilder(maxConnections_).mergeFrom(value).buildPartial();
          } else {
            maxConnections_ = value;
          }
          onChanged();
        } else {
          maxConnectionsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum permitted number of simultaneous client connections.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-16384"];</code>
       */
      public Builder clearMaxConnections() {
        if (maxConnectionsBuilder_ == null) {
          maxConnections_ = null;
          onChanged();
        } else {
          maxConnections_ = null;
          maxConnectionsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The maximum permitted number of simultaneous client connections.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-16384"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxConnectionsBuilder() {
        
        onChanged();
        return getMaxConnectionsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The maximum permitted number of simultaneous client connections.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-16384"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxConnectionsOrBuilder() {
        if (maxConnectionsBuilder_ != null) {
          return maxConnectionsBuilder_.getMessageOrBuilder();
        } else {
          return maxConnections_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxConnections_;
        }
      }
      /**
       * <pre>
       * The maximum permitted number of simultaneous client connections.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_connections) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_connections = 2 [(.yandex.cloud.value) = "10-16384"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxConnectionsFieldBuilder() {
        if (maxConnectionsBuilder_ == null) {
          maxConnectionsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxConnections(),
                  getParentForChildren(),
                  isClean());
          maxConnections_ = null;
        }
        return maxConnectionsBuilder_;
      }

      private com.google.protobuf.DoubleValue longQueryTime_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.DoubleValue, com.google.protobuf.DoubleValue.Builder, com.google.protobuf.DoubleValueOrBuilder> longQueryTimeBuilder_;
      /**
       * <pre>
       * Time that it takes to process a query before it is considered slow.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time) for details.
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
       * @return Whether the longQueryTime field is set.
       */
      public boolean hasLongQueryTime() {
        return longQueryTimeBuilder_ != null || longQueryTime_ != null;
      }
      /**
       * <pre>
       * Time that it takes to process a query before it is considered slow.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time) for details.
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
       * @return The longQueryTime.
       */
      public com.google.protobuf.DoubleValue getLongQueryTime() {
        if (longQueryTimeBuilder_ == null) {
          return longQueryTime_ == null ? com.google.protobuf.DoubleValue.getDefaultInstance() : longQueryTime_;
        } else {
          return longQueryTimeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Time that it takes to process a query before it is considered slow.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time) for details.
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
       */
      public Builder setLongQueryTime(com.google.protobuf.DoubleValue value) {
        if (longQueryTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          longQueryTime_ = value;
          onChanged();
        } else {
          longQueryTimeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Time that it takes to process a query before it is considered slow.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time) for details.
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
       */
      public Builder setLongQueryTime(
          com.google.protobuf.DoubleValue.Builder builderForValue) {
        if (longQueryTimeBuilder_ == null) {
          longQueryTime_ = builderForValue.build();
          onChanged();
        } else {
          longQueryTimeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Time that it takes to process a query before it is considered slow.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time) for details.
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
       */
      public Builder mergeLongQueryTime(com.google.protobuf.DoubleValue value) {
        if (longQueryTimeBuilder_ == null) {
          if (longQueryTime_ != null) {
            longQueryTime_ =
              com.google.protobuf.DoubleValue.newBuilder(longQueryTime_).mergeFrom(value).buildPartial();
          } else {
            longQueryTime_ = value;
          }
          onChanged();
        } else {
          longQueryTimeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Time that it takes to process a query before it is considered slow.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time) for details.
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
       */
      public Builder clearLongQueryTime() {
        if (longQueryTimeBuilder_ == null) {
          longQueryTime_ = null;
          onChanged();
        } else {
          longQueryTime_ = null;
          longQueryTimeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Time that it takes to process a query before it is considered slow.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time) for details.
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
       */
      public com.google.protobuf.DoubleValue.Builder getLongQueryTimeBuilder() {
        
        onChanged();
        return getLongQueryTimeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Time that it takes to process a query before it is considered slow.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time) for details.
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
       */
      public com.google.protobuf.DoubleValueOrBuilder getLongQueryTimeOrBuilder() {
        if (longQueryTimeBuilder_ != null) {
          return longQueryTimeBuilder_.getMessageOrBuilder();
        } else {
          return longQueryTime_ == null ?
              com.google.protobuf.DoubleValue.getDefaultInstance() : longQueryTime_;
        }
      }
      /**
       * <pre>
       * Time that it takes to process a query before it is considered slow.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_long_query_time) for details.
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue long_query_time = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.DoubleValue, com.google.protobuf.DoubleValue.Builder, com.google.protobuf.DoubleValueOrBuilder> 
          getLongQueryTimeFieldBuilder() {
        if (longQueryTimeBuilder_ == null) {
          longQueryTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.DoubleValue, com.google.protobuf.DoubleValue.Builder, com.google.protobuf.DoubleValueOrBuilder>(
                  getLongQueryTime(),
                  getParentForChildren(),
                  isClean());
          longQueryTime_ = null;
        }
        return longQueryTimeBuilder_;
      }

      private com.google.protobuf.BoolValue generalLog_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> generalLogBuilder_;
      /**
       * <pre>
       * Enable writing of general query log of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue general_log = 4;</code>
       * @return Whether the generalLog field is set.
       */
      public boolean hasGeneralLog() {
        return generalLogBuilder_ != null || generalLog_ != null;
      }
      /**
       * <pre>
       * Enable writing of general query log of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue general_log = 4;</code>
       * @return The generalLog.
       */
      public com.google.protobuf.BoolValue getGeneralLog() {
        if (generalLogBuilder_ == null) {
          return generalLog_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : generalLog_;
        } else {
          return generalLogBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enable writing of general query log of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue general_log = 4;</code>
       */
      public Builder setGeneralLog(com.google.protobuf.BoolValue value) {
        if (generalLogBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          generalLog_ = value;
          onChanged();
        } else {
          generalLogBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enable writing of general query log of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue general_log = 4;</code>
       */
      public Builder setGeneralLog(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (generalLogBuilder_ == null) {
          generalLog_ = builderForValue.build();
          onChanged();
        } else {
          generalLogBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enable writing of general query log of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue general_log = 4;</code>
       */
      public Builder mergeGeneralLog(com.google.protobuf.BoolValue value) {
        if (generalLogBuilder_ == null) {
          if (generalLog_ != null) {
            generalLog_ =
              com.google.protobuf.BoolValue.newBuilder(generalLog_).mergeFrom(value).buildPartial();
          } else {
            generalLog_ = value;
          }
          onChanged();
        } else {
          generalLogBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enable writing of general query log of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue general_log = 4;</code>
       */
      public Builder clearGeneralLog() {
        if (generalLogBuilder_ == null) {
          generalLog_ = null;
          onChanged();
        } else {
          generalLog_ = null;
          generalLogBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enable writing of general query log of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue general_log = 4;</code>
       */
      public com.google.protobuf.BoolValue.Builder getGeneralLogBuilder() {
        
        onChanged();
        return getGeneralLogFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enable writing of general query log of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue general_log = 4;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getGeneralLogOrBuilder() {
        if (generalLogBuilder_ != null) {
          return generalLogBuilder_.getMessageOrBuilder();
        } else {
          return generalLog_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : generalLog_;
        }
      }
      /**
       * <pre>
       * Enable writing of general query log of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_general_log) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue general_log = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getGeneralLogFieldBuilder() {
        if (generalLogBuilder_ == null) {
          generalLogBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getGeneralLog(),
                  getParentForChildren(),
                  isClean());
          generalLog_ = null;
        }
        return generalLogBuilder_;
      }

      private com.google.protobuf.BoolValue auditLog_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> auditLogBuilder_;
      /**
       * <pre>
       * Enable writing of audit log of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue audit_log = 5;</code>
       * @return Whether the auditLog field is set.
       */
      public boolean hasAuditLog() {
        return auditLogBuilder_ != null || auditLog_ != null;
      }
      /**
       * <pre>
       * Enable writing of audit log of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue audit_log = 5;</code>
       * @return The auditLog.
       */
      public com.google.protobuf.BoolValue getAuditLog() {
        if (auditLogBuilder_ == null) {
          return auditLog_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : auditLog_;
        } else {
          return auditLogBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enable writing of audit log of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue audit_log = 5;</code>
       */
      public Builder setAuditLog(com.google.protobuf.BoolValue value) {
        if (auditLogBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          auditLog_ = value;
          onChanged();
        } else {
          auditLogBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enable writing of audit log of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue audit_log = 5;</code>
       */
      public Builder setAuditLog(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (auditLogBuilder_ == null) {
          auditLog_ = builderForValue.build();
          onChanged();
        } else {
          auditLogBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enable writing of audit log of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue audit_log = 5;</code>
       */
      public Builder mergeAuditLog(com.google.protobuf.BoolValue value) {
        if (auditLogBuilder_ == null) {
          if (auditLog_ != null) {
            auditLog_ =
              com.google.protobuf.BoolValue.newBuilder(auditLog_).mergeFrom(value).buildPartial();
          } else {
            auditLog_ = value;
          }
          onChanged();
        } else {
          auditLogBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enable writing of audit log of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue audit_log = 5;</code>
       */
      public Builder clearAuditLog() {
        if (auditLogBuilder_ == null) {
          auditLog_ = null;
          onChanged();
        } else {
          auditLog_ = null;
          auditLogBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enable writing of audit log of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue audit_log = 5;</code>
       */
      public com.google.protobuf.BoolValue.Builder getAuditLogBuilder() {
        
        onChanged();
        return getAuditLogFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enable writing of audit log of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue audit_log = 5;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getAuditLogOrBuilder() {
        if (auditLogBuilder_ != null) {
          return auditLogBuilder_.getMessageOrBuilder();
        } else {
          return auditLog_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : auditLog_;
        }
      }
      /**
       * <pre>
       * Enable writing of audit log of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#audit-log-options-variables) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue audit_log = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getAuditLogFieldBuilder() {
        if (auditLogBuilder_ == null) {
          auditLogBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getAuditLog(),
                  getParentForChildren(),
                  isClean());
          auditLog_ = null;
        }
        return auditLogBuilder_;
      }

      private java.util.List<java.lang.Integer> sqlMode_ =
        java.util.Collections.emptyList();
      private void ensureSqlModeIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          sqlMode_ = new java.util.ArrayList<java.lang.Integer>(sqlMode_);
          bitField0_ |= 0x00000001;
        }
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting) for details.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
       * @return A list containing the sqlMode.
       */
      public java.util.List<yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode> getSqlModeList() {
        return new com.google.protobuf.Internal.ListAdapter<
            java.lang.Integer, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode>(sqlMode_, sqlMode_converter_);
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting) for details.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
       * @return The count of sqlMode.
       */
      public int getSqlModeCount() {
        return sqlMode_.size();
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting) for details.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
       * @param index The index of the element to return.
       * @return The sqlMode at the given index.
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode getSqlMode(int index) {
        return sqlMode_converter_.convert(sqlMode_.get(index));
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting) for details.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
       * @param index The index to set the value at.
       * @param value The sqlMode to set.
       * @return This builder for chaining.
       */
      public Builder setSqlMode(
          int index, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSqlModeIsMutable();
        sqlMode_.set(index, value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting) for details.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
       * @param value The sqlMode to add.
       * @return This builder for chaining.
       */
      public Builder addSqlMode(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSqlModeIsMutable();
        sqlMode_.add(value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting) for details.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
       * @param values The sqlMode to add.
       * @return This builder for chaining.
       */
      public Builder addAllSqlMode(
          java.lang.Iterable<? extends yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode> values) {
        ensureSqlModeIsMutable();
        for (yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SQLMode value : values) {
          sqlMode_.add(value.getNumber());
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting) for details.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearSqlMode() {
        sqlMode_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting) for details.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
       * @return A list containing the enum numeric values on the wire for sqlMode.
       */
      public java.util.List<java.lang.Integer>
      getSqlModeValueList() {
        return java.util.Collections.unmodifiableList(sqlMode_);
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting) for details.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
       * @param index The index of the value to return.
       * @return The enum numeric value on the wire of sqlMode at the given index.
       */
      public int getSqlModeValue(int index) {
        return sqlMode_.get(index);
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting) for details.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
       * @param index The index of the value to return.
       * @return The enum numeric value on the wire of sqlMode at the given index.
       * @return This builder for chaining.
       */
      public Builder setSqlModeValue(
          int index, int value) {
        ensureSqlModeIsMutable();
        sqlMode_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting) for details.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
       * @param value The enum numeric value on the wire for sqlMode to add.
       * @return This builder for chaining.
       */
      public Builder addSqlModeValue(int value) {
        ensureSqlModeIsMutable();
        sqlMode_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Server SQL mode of MySQL.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-setting) for details.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SQLMode sql_mode = 6;</code>
       * @param values The enum numeric values on the wire for sqlMode to add.
       * @return This builder for chaining.
       */
      public Builder addAllSqlModeValue(
          java.lang.Iterable<java.lang.Integer> values) {
        ensureSqlModeIsMutable();
        for (int value : values) {
          sqlMode_.add(value);
        }
        onChanged();
        return this;
      }

      private com.google.protobuf.Int64Value maxAllowedPacket_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxAllowedPacketBuilder_;
      /**
       * <pre>
       * The maximum size in bytes of one packet.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-1073741824"];</code>
       * @return Whether the maxAllowedPacket field is set.
       */
      public boolean hasMaxAllowedPacket() {
        return maxAllowedPacketBuilder_ != null || maxAllowedPacket_ != null;
      }
      /**
       * <pre>
       * The maximum size in bytes of one packet.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-1073741824"];</code>
       * @return The maxAllowedPacket.
       */
      public com.google.protobuf.Int64Value getMaxAllowedPacket() {
        if (maxAllowedPacketBuilder_ == null) {
          return maxAllowedPacket_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxAllowedPacket_;
        } else {
          return maxAllowedPacketBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The maximum size in bytes of one packet.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-1073741824"];</code>
       */
      public Builder setMaxAllowedPacket(com.google.protobuf.Int64Value value) {
        if (maxAllowedPacketBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxAllowedPacket_ = value;
          onChanged();
        } else {
          maxAllowedPacketBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size in bytes of one packet.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-1073741824"];</code>
       */
      public Builder setMaxAllowedPacket(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxAllowedPacketBuilder_ == null) {
          maxAllowedPacket_ = builderForValue.build();
          onChanged();
        } else {
          maxAllowedPacketBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size in bytes of one packet.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-1073741824"];</code>
       */
      public Builder mergeMaxAllowedPacket(com.google.protobuf.Int64Value value) {
        if (maxAllowedPacketBuilder_ == null) {
          if (maxAllowedPacket_ != null) {
            maxAllowedPacket_ =
              com.google.protobuf.Int64Value.newBuilder(maxAllowedPacket_).mergeFrom(value).buildPartial();
          } else {
            maxAllowedPacket_ = value;
          }
          onChanged();
        } else {
          maxAllowedPacketBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size in bytes of one packet.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-1073741824"];</code>
       */
      public Builder clearMaxAllowedPacket() {
        if (maxAllowedPacketBuilder_ == null) {
          maxAllowedPacket_ = null;
          onChanged();
        } else {
          maxAllowedPacket_ = null;
          maxAllowedPacketBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size in bytes of one packet.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-1073741824"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxAllowedPacketBuilder() {
        
        onChanged();
        return getMaxAllowedPacketFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The maximum size in bytes of one packet.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-1073741824"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxAllowedPacketOrBuilder() {
        if (maxAllowedPacketBuilder_ != null) {
          return maxAllowedPacketBuilder_.getMessageOrBuilder();
        } else {
          return maxAllowedPacket_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxAllowedPacket_;
        }
      }
      /**
       * <pre>
       * The maximum size in bytes of one packet.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_allowed_packet = 7 [(.yandex.cloud.value) = "1024-1073741824"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxAllowedPacketFieldBuilder() {
        if (maxAllowedPacketBuilder_ == null) {
          maxAllowedPacketBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxAllowedPacket(),
                  getParentForChildren(),
                  isClean());
          maxAllowedPacket_ = null;
        }
        return maxAllowedPacketBuilder_;
      }

      private int defaultAuthenticationPlugin_ = 0;
      /**
       * <pre>
       * Authentication plugin used in the managed MySQL cluster.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_default_authentication_plugin) for details.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuthPlugin default_authentication_plugin = 8;</code>
       * @return The enum numeric value on the wire for defaultAuthenticationPlugin.
       */
      @java.lang.Override public int getDefaultAuthenticationPluginValue() {
        return defaultAuthenticationPlugin_;
      }
      /**
       * <pre>
       * Authentication plugin used in the managed MySQL cluster.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_default_authentication_plugin) for details.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuthPlugin default_authentication_plugin = 8;</code>
       * @param value The enum numeric value on the wire for defaultAuthenticationPlugin to set.
       * @return This builder for chaining.
       */
      public Builder setDefaultAuthenticationPluginValue(int value) {
        
        defaultAuthenticationPlugin_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Authentication plugin used in the managed MySQL cluster.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_default_authentication_plugin) for details.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuthPlugin default_authentication_plugin = 8;</code>
       * @return The defaultAuthenticationPlugin.
       */
      @java.lang.Override
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuthPlugin getDefaultAuthenticationPlugin() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuthPlugin result = yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuthPlugin.valueOf(defaultAuthenticationPlugin_);
        return result == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuthPlugin.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Authentication plugin used in the managed MySQL cluster.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_default_authentication_plugin) for details.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuthPlugin default_authentication_plugin = 8;</code>
       * @param value The defaultAuthenticationPlugin to set.
       * @return This builder for chaining.
       */
      public Builder setDefaultAuthenticationPlugin(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuthPlugin value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        defaultAuthenticationPlugin_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Authentication plugin used in the managed MySQL cluster.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_default_authentication_plugin) for details.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuthPlugin default_authentication_plugin = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearDefaultAuthenticationPlugin() {
        
        defaultAuthenticationPlugin_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Int64Value innodbFlushLogAtTrxCommit_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> innodbFlushLogAtTrxCommitBuilder_;
      /**
       * <pre>
       * Transaction log flush behaviour.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
       * @return Whether the innodbFlushLogAtTrxCommit field is set.
       */
      public boolean hasInnodbFlushLogAtTrxCommit() {
        return innodbFlushLogAtTrxCommitBuilder_ != null || innodbFlushLogAtTrxCommit_ != null;
      }
      /**
       * <pre>
       * Transaction log flush behaviour.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
       * @return The innodbFlushLogAtTrxCommit.
       */
      public com.google.protobuf.Int64Value getInnodbFlushLogAtTrxCommit() {
        if (innodbFlushLogAtTrxCommitBuilder_ == null) {
          return innodbFlushLogAtTrxCommit_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbFlushLogAtTrxCommit_;
        } else {
          return innodbFlushLogAtTrxCommitBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Transaction log flush behaviour.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
       */
      public Builder setInnodbFlushLogAtTrxCommit(com.google.protobuf.Int64Value value) {
        if (innodbFlushLogAtTrxCommitBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbFlushLogAtTrxCommit_ = value;
          onChanged();
        } else {
          innodbFlushLogAtTrxCommitBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Transaction log flush behaviour.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
       */
      public Builder setInnodbFlushLogAtTrxCommit(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (innodbFlushLogAtTrxCommitBuilder_ == null) {
          innodbFlushLogAtTrxCommit_ = builderForValue.build();
          onChanged();
        } else {
          innodbFlushLogAtTrxCommitBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Transaction log flush behaviour.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
       */
      public Builder mergeInnodbFlushLogAtTrxCommit(com.google.protobuf.Int64Value value) {
        if (innodbFlushLogAtTrxCommitBuilder_ == null) {
          if (innodbFlushLogAtTrxCommit_ != null) {
            innodbFlushLogAtTrxCommit_ =
              com.google.protobuf.Int64Value.newBuilder(innodbFlushLogAtTrxCommit_).mergeFrom(value).buildPartial();
          } else {
            innodbFlushLogAtTrxCommit_ = value;
          }
          onChanged();
        } else {
          innodbFlushLogAtTrxCommitBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Transaction log flush behaviour.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
       */
      public Builder clearInnodbFlushLogAtTrxCommit() {
        if (innodbFlushLogAtTrxCommitBuilder_ == null) {
          innodbFlushLogAtTrxCommit_ = null;
          onChanged();
        } else {
          innodbFlushLogAtTrxCommit_ = null;
          innodbFlushLogAtTrxCommitBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Transaction log flush behaviour.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getInnodbFlushLogAtTrxCommitBuilder() {
        
        onChanged();
        return getInnodbFlushLogAtTrxCommitFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Transaction log flush behaviour.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getInnodbFlushLogAtTrxCommitOrBuilder() {
        if (innodbFlushLogAtTrxCommitBuilder_ != null) {
          return innodbFlushLogAtTrxCommitBuilder_.getMessageOrBuilder();
        } else {
          return innodbFlushLogAtTrxCommit_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : innodbFlushLogAtTrxCommit_;
        }
      }
      /**
       * <pre>
       * Transaction log flush behaviour.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_flush_log_at_trx_commit = 9 [(.yandex.cloud.value) = "1-2"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getInnodbFlushLogAtTrxCommitFieldBuilder() {
        if (innodbFlushLogAtTrxCommitBuilder_ == null) {
          innodbFlushLogAtTrxCommitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getInnodbFlushLogAtTrxCommit(),
                  getParentForChildren(),
                  isClean());
          innodbFlushLogAtTrxCommit_ = null;
        }
        return innodbFlushLogAtTrxCommitBuilder_;
      }

      private com.google.protobuf.Int64Value innodbLockWaitTimeout_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> innodbLockWaitTimeoutBuilder_;
      /**
       * <pre>
       * Max time in seconds for a transaction to wait for a row lock.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
       * @return Whether the innodbLockWaitTimeout field is set.
       */
      public boolean hasInnodbLockWaitTimeout() {
        return innodbLockWaitTimeoutBuilder_ != null || innodbLockWaitTimeout_ != null;
      }
      /**
       * <pre>
       * Max time in seconds for a transaction to wait for a row lock.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
       * @return The innodbLockWaitTimeout.
       */
      public com.google.protobuf.Int64Value getInnodbLockWaitTimeout() {
        if (innodbLockWaitTimeoutBuilder_ == null) {
          return innodbLockWaitTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbLockWaitTimeout_;
        } else {
          return innodbLockWaitTimeoutBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Max time in seconds for a transaction to wait for a row lock.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
       */
      public Builder setInnodbLockWaitTimeout(com.google.protobuf.Int64Value value) {
        if (innodbLockWaitTimeoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbLockWaitTimeout_ = value;
          onChanged();
        } else {
          innodbLockWaitTimeoutBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Max time in seconds for a transaction to wait for a row lock.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
       */
      public Builder setInnodbLockWaitTimeout(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (innodbLockWaitTimeoutBuilder_ == null) {
          innodbLockWaitTimeout_ = builderForValue.build();
          onChanged();
        } else {
          innodbLockWaitTimeoutBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Max time in seconds for a transaction to wait for a row lock.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
       */
      public Builder mergeInnodbLockWaitTimeout(com.google.protobuf.Int64Value value) {
        if (innodbLockWaitTimeoutBuilder_ == null) {
          if (innodbLockWaitTimeout_ != null) {
            innodbLockWaitTimeout_ =
              com.google.protobuf.Int64Value.newBuilder(innodbLockWaitTimeout_).mergeFrom(value).buildPartial();
          } else {
            innodbLockWaitTimeout_ = value;
          }
          onChanged();
        } else {
          innodbLockWaitTimeoutBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Max time in seconds for a transaction to wait for a row lock.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
       */
      public Builder clearInnodbLockWaitTimeout() {
        if (innodbLockWaitTimeoutBuilder_ == null) {
          innodbLockWaitTimeout_ = null;
          onChanged();
        } else {
          innodbLockWaitTimeout_ = null;
          innodbLockWaitTimeoutBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Max time in seconds for a transaction to wait for a row lock.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getInnodbLockWaitTimeoutBuilder() {
        
        onChanged();
        return getInnodbLockWaitTimeoutFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Max time in seconds for a transaction to wait for a row lock.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getInnodbLockWaitTimeoutOrBuilder() {
        if (innodbLockWaitTimeoutBuilder_ != null) {
          return innodbLockWaitTimeoutBuilder_.getMessageOrBuilder();
        } else {
          return innodbLockWaitTimeout_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : innodbLockWaitTimeout_;
        }
      }
      /**
       * <pre>
       * Max time in seconds for a transaction to wait for a row lock.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_lock_wait_timeout = 10 [(.yandex.cloud.value) = "1-28800"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getInnodbLockWaitTimeoutFieldBuilder() {
        if (innodbLockWaitTimeoutBuilder_ == null) {
          innodbLockWaitTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getInnodbLockWaitTimeout(),
                  getParentForChildren(),
                  isClean());
          innodbLockWaitTimeout_ = null;
        }
        return innodbLockWaitTimeoutBuilder_;
      }

      private int transactionIsolation_ = 0;
      /**
       * <pre>
       * Default transaction isolation level.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_transaction_isolation) for details.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.TransactionIsolation transaction_isolation = 11;</code>
       * @return The enum numeric value on the wire for transactionIsolation.
       */
      @java.lang.Override public int getTransactionIsolationValue() {
        return transactionIsolation_;
      }
      /**
       * <pre>
       * Default transaction isolation level.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_transaction_isolation) for details.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.TransactionIsolation transaction_isolation = 11;</code>
       * @param value The enum numeric value on the wire for transactionIsolation to set.
       * @return This builder for chaining.
       */
      public Builder setTransactionIsolationValue(int value) {
        
        transactionIsolation_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Default transaction isolation level.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_transaction_isolation) for details.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.TransactionIsolation transaction_isolation = 11;</code>
       * @return The transactionIsolation.
       */
      @java.lang.Override
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.TransactionIsolation getTransactionIsolation() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.TransactionIsolation result = yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.TransactionIsolation.valueOf(transactionIsolation_);
        return result == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.TransactionIsolation.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Default transaction isolation level.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_transaction_isolation) for details.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.TransactionIsolation transaction_isolation = 11;</code>
       * @param value The transactionIsolation to set.
       * @return This builder for chaining.
       */
      public Builder setTransactionIsolation(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.TransactionIsolation value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        transactionIsolation_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Default transaction isolation level.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_transaction_isolation) for details.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.TransactionIsolation transaction_isolation = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearTransactionIsolation() {
        
        transactionIsolation_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.BoolValue innodbPrintAllDeadlocks_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> innodbPrintAllDeadlocksBuilder_;
      /**
       * <pre>
       * Print information about deadlocks in error log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
       * @return Whether the innodbPrintAllDeadlocks field is set.
       */
      public boolean hasInnodbPrintAllDeadlocks() {
        return innodbPrintAllDeadlocksBuilder_ != null || innodbPrintAllDeadlocks_ != null;
      }
      /**
       * <pre>
       * Print information about deadlocks in error log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
       * @return The innodbPrintAllDeadlocks.
       */
      public com.google.protobuf.BoolValue getInnodbPrintAllDeadlocks() {
        if (innodbPrintAllDeadlocksBuilder_ == null) {
          return innodbPrintAllDeadlocks_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : innodbPrintAllDeadlocks_;
        } else {
          return innodbPrintAllDeadlocksBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Print information about deadlocks in error log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
       */
      public Builder setInnodbPrintAllDeadlocks(com.google.protobuf.BoolValue value) {
        if (innodbPrintAllDeadlocksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbPrintAllDeadlocks_ = value;
          onChanged();
        } else {
          innodbPrintAllDeadlocksBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Print information about deadlocks in error log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
       */
      public Builder setInnodbPrintAllDeadlocks(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (innodbPrintAllDeadlocksBuilder_ == null) {
          innodbPrintAllDeadlocks_ = builderForValue.build();
          onChanged();
        } else {
          innodbPrintAllDeadlocksBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Print information about deadlocks in error log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
       */
      public Builder mergeInnodbPrintAllDeadlocks(com.google.protobuf.BoolValue value) {
        if (innodbPrintAllDeadlocksBuilder_ == null) {
          if (innodbPrintAllDeadlocks_ != null) {
            innodbPrintAllDeadlocks_ =
              com.google.protobuf.BoolValue.newBuilder(innodbPrintAllDeadlocks_).mergeFrom(value).buildPartial();
          } else {
            innodbPrintAllDeadlocks_ = value;
          }
          onChanged();
        } else {
          innodbPrintAllDeadlocksBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Print information about deadlocks in error log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
       */
      public Builder clearInnodbPrintAllDeadlocks() {
        if (innodbPrintAllDeadlocksBuilder_ == null) {
          innodbPrintAllDeadlocks_ = null;
          onChanged();
        } else {
          innodbPrintAllDeadlocks_ = null;
          innodbPrintAllDeadlocksBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Print information about deadlocks in error log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
       */
      public com.google.protobuf.BoolValue.Builder getInnodbPrintAllDeadlocksBuilder() {
        
        onChanged();
        return getInnodbPrintAllDeadlocksFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Print information about deadlocks in error log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getInnodbPrintAllDeadlocksOrBuilder() {
        if (innodbPrintAllDeadlocksBuilder_ != null) {
          return innodbPrintAllDeadlocksBuilder_.getMessageOrBuilder();
        } else {
          return innodbPrintAllDeadlocks_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : innodbPrintAllDeadlocks_;
        }
      }
      /**
       * <pre>
       * Print information about deadlocks in error log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_print_all_deadlocks = 12;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getInnodbPrintAllDeadlocksFieldBuilder() {
        if (innodbPrintAllDeadlocksBuilder_ == null) {
          innodbPrintAllDeadlocksBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getInnodbPrintAllDeadlocks(),
                  getParentForChildren(),
                  isClean());
          innodbPrintAllDeadlocks_ = null;
        }
        return innodbPrintAllDeadlocksBuilder_;
      }

      private com.google.protobuf.Int64Value netReadTimeout_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> netReadTimeoutBuilder_;
      /**
       * <pre>
       * The number of seconds to wait for more data from a connection before aborting the read.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_read_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
       * @return Whether the netReadTimeout field is set.
       */
      public boolean hasNetReadTimeout() {
        return netReadTimeoutBuilder_ != null || netReadTimeout_ != null;
      }
      /**
       * <pre>
       * The number of seconds to wait for more data from a connection before aborting the read.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_read_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
       * @return The netReadTimeout.
       */
      public com.google.protobuf.Int64Value getNetReadTimeout() {
        if (netReadTimeoutBuilder_ == null) {
          return netReadTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : netReadTimeout_;
        } else {
          return netReadTimeoutBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The number of seconds to wait for more data from a connection before aborting the read.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_read_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public Builder setNetReadTimeout(com.google.protobuf.Int64Value value) {
        if (netReadTimeoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          netReadTimeout_ = value;
          onChanged();
        } else {
          netReadTimeoutBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of seconds to wait for more data from a connection before aborting the read.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_read_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public Builder setNetReadTimeout(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (netReadTimeoutBuilder_ == null) {
          netReadTimeout_ = builderForValue.build();
          onChanged();
        } else {
          netReadTimeoutBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The number of seconds to wait for more data from a connection before aborting the read.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_read_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public Builder mergeNetReadTimeout(com.google.protobuf.Int64Value value) {
        if (netReadTimeoutBuilder_ == null) {
          if (netReadTimeout_ != null) {
            netReadTimeout_ =
              com.google.protobuf.Int64Value.newBuilder(netReadTimeout_).mergeFrom(value).buildPartial();
          } else {
            netReadTimeout_ = value;
          }
          onChanged();
        } else {
          netReadTimeoutBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of seconds to wait for more data from a connection before aborting the read.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_read_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public Builder clearNetReadTimeout() {
        if (netReadTimeoutBuilder_ == null) {
          netReadTimeout_ = null;
          onChanged();
        } else {
          netReadTimeout_ = null;
          netReadTimeoutBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The number of seconds to wait for more data from a connection before aborting the read.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_read_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getNetReadTimeoutBuilder() {
        
        onChanged();
        return getNetReadTimeoutFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The number of seconds to wait for more data from a connection before aborting the read.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_read_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getNetReadTimeoutOrBuilder() {
        if (netReadTimeoutBuilder_ != null) {
          return netReadTimeoutBuilder_.getMessageOrBuilder();
        } else {
          return netReadTimeout_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : netReadTimeout_;
        }
      }
      /**
       * <pre>
       * The number of seconds to wait for more data from a connection before aborting the read.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_read_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_read_timeout = 13 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getNetReadTimeoutFieldBuilder() {
        if (netReadTimeoutBuilder_ == null) {
          netReadTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getNetReadTimeout(),
                  getParentForChildren(),
                  isClean());
          netReadTimeout_ = null;
        }
        return netReadTimeoutBuilder_;
      }

      private com.google.protobuf.Int64Value netWriteTimeout_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> netWriteTimeoutBuilder_;
      /**
       * <pre>
       * The number of seconds to wait for a block to be written to a connection before aborting the write.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_write_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
       * @return Whether the netWriteTimeout field is set.
       */
      public boolean hasNetWriteTimeout() {
        return netWriteTimeoutBuilder_ != null || netWriteTimeout_ != null;
      }
      /**
       * <pre>
       * The number of seconds to wait for a block to be written to a connection before aborting the write.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_write_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
       * @return The netWriteTimeout.
       */
      public com.google.protobuf.Int64Value getNetWriteTimeout() {
        if (netWriteTimeoutBuilder_ == null) {
          return netWriteTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : netWriteTimeout_;
        } else {
          return netWriteTimeoutBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The number of seconds to wait for a block to be written to a connection before aborting the write.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_write_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public Builder setNetWriteTimeout(com.google.protobuf.Int64Value value) {
        if (netWriteTimeoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          netWriteTimeout_ = value;
          onChanged();
        } else {
          netWriteTimeoutBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of seconds to wait for a block to be written to a connection before aborting the write.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_write_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public Builder setNetWriteTimeout(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (netWriteTimeoutBuilder_ == null) {
          netWriteTimeout_ = builderForValue.build();
          onChanged();
        } else {
          netWriteTimeoutBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The number of seconds to wait for a block to be written to a connection before aborting the write.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_write_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public Builder mergeNetWriteTimeout(com.google.protobuf.Int64Value value) {
        if (netWriteTimeoutBuilder_ == null) {
          if (netWriteTimeout_ != null) {
            netWriteTimeout_ =
              com.google.protobuf.Int64Value.newBuilder(netWriteTimeout_).mergeFrom(value).buildPartial();
          } else {
            netWriteTimeout_ = value;
          }
          onChanged();
        } else {
          netWriteTimeoutBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of seconds to wait for a block to be written to a connection before aborting the write.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_write_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public Builder clearNetWriteTimeout() {
        if (netWriteTimeoutBuilder_ == null) {
          netWriteTimeout_ = null;
          onChanged();
        } else {
          netWriteTimeout_ = null;
          netWriteTimeoutBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The number of seconds to wait for a block to be written to a connection before aborting the write.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_write_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getNetWriteTimeoutBuilder() {
        
        onChanged();
        return getNetWriteTimeoutFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The number of seconds to wait for a block to be written to a connection before aborting the write.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_write_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getNetWriteTimeoutOrBuilder() {
        if (netWriteTimeoutBuilder_ != null) {
          return netWriteTimeoutBuilder_.getMessageOrBuilder();
        } else {
          return netWriteTimeout_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : netWriteTimeout_;
        }
      }
      /**
       * <pre>
       * The number of seconds to wait for a block to be written to a connection before aborting the write.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_net_write_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value net_write_timeout = 14 [(.yandex.cloud.value) = "1-1200"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getNetWriteTimeoutFieldBuilder() {
        if (netWriteTimeoutBuilder_ == null) {
          netWriteTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getNetWriteTimeout(),
                  getParentForChildren(),
                  isClean());
          netWriteTimeout_ = null;
        }
        return netWriteTimeoutBuilder_;
      }

      private com.google.protobuf.Int64Value groupConcatMaxLen_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> groupConcatMaxLenBuilder_;
      /**
       * <pre>
       * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_group_concat_max_len) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
       * @return Whether the groupConcatMaxLen field is set.
       */
      public boolean hasGroupConcatMaxLen() {
        return groupConcatMaxLenBuilder_ != null || groupConcatMaxLen_ != null;
      }
      /**
       * <pre>
       * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_group_concat_max_len) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
       * @return The groupConcatMaxLen.
       */
      public com.google.protobuf.Int64Value getGroupConcatMaxLen() {
        if (groupConcatMaxLenBuilder_ == null) {
          return groupConcatMaxLen_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : groupConcatMaxLen_;
        } else {
          return groupConcatMaxLenBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_group_concat_max_len) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
       */
      public Builder setGroupConcatMaxLen(com.google.protobuf.Int64Value value) {
        if (groupConcatMaxLenBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          groupConcatMaxLen_ = value;
          onChanged();
        } else {
          groupConcatMaxLenBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_group_concat_max_len) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
       */
      public Builder setGroupConcatMaxLen(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (groupConcatMaxLenBuilder_ == null) {
          groupConcatMaxLen_ = builderForValue.build();
          onChanged();
        } else {
          groupConcatMaxLenBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_group_concat_max_len) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
       */
      public Builder mergeGroupConcatMaxLen(com.google.protobuf.Int64Value value) {
        if (groupConcatMaxLenBuilder_ == null) {
          if (groupConcatMaxLen_ != null) {
            groupConcatMaxLen_ =
              com.google.protobuf.Int64Value.newBuilder(groupConcatMaxLen_).mergeFrom(value).buildPartial();
          } else {
            groupConcatMaxLen_ = value;
          }
          onChanged();
        } else {
          groupConcatMaxLenBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_group_concat_max_len) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
       */
      public Builder clearGroupConcatMaxLen() {
        if (groupConcatMaxLenBuilder_ == null) {
          groupConcatMaxLen_ = null;
          onChanged();
        } else {
          groupConcatMaxLen_ = null;
          groupConcatMaxLenBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_group_concat_max_len) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getGroupConcatMaxLenBuilder() {
        
        onChanged();
        return getGroupConcatMaxLenFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_group_concat_max_len) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getGroupConcatMaxLenOrBuilder() {
        if (groupConcatMaxLenBuilder_ != null) {
          return groupConcatMaxLenBuilder_.getMessageOrBuilder();
        } else {
          return groupConcatMaxLen_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : groupConcatMaxLen_;
        }
      }
      /**
       * <pre>
       * The maximum permitted result length in bytes for the GROUP_CONCAT() function.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_group_concat_max_len) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_concat_max_len = 15 [(.yandex.cloud.value) = "4-33554432"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getGroupConcatMaxLenFieldBuilder() {
        if (groupConcatMaxLenBuilder_ == null) {
          groupConcatMaxLenBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getGroupConcatMaxLen(),
                  getParentForChildren(),
                  isClean());
          groupConcatMaxLen_ = null;
        }
        return groupConcatMaxLenBuilder_;
      }

      private com.google.protobuf.Int64Value tmpTableSize_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> tmpTableSizeBuilder_;
      /**
       * <pre>
       * The maximum size of internal in-memory temporary tables.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmp_table_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-536870912"];</code>
       * @return Whether the tmpTableSize field is set.
       */
      public boolean hasTmpTableSize() {
        return tmpTableSizeBuilder_ != null || tmpTableSize_ != null;
      }
      /**
       * <pre>
       * The maximum size of internal in-memory temporary tables.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmp_table_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-536870912"];</code>
       * @return The tmpTableSize.
       */
      public com.google.protobuf.Int64Value getTmpTableSize() {
        if (tmpTableSizeBuilder_ == null) {
          return tmpTableSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : tmpTableSize_;
        } else {
          return tmpTableSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The maximum size of internal in-memory temporary tables.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmp_table_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-536870912"];</code>
       */
      public Builder setTmpTableSize(com.google.protobuf.Int64Value value) {
        if (tmpTableSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tmpTableSize_ = value;
          onChanged();
        } else {
          tmpTableSizeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size of internal in-memory temporary tables.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmp_table_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-536870912"];</code>
       */
      public Builder setTmpTableSize(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (tmpTableSizeBuilder_ == null) {
          tmpTableSize_ = builderForValue.build();
          onChanged();
        } else {
          tmpTableSizeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size of internal in-memory temporary tables.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmp_table_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-536870912"];</code>
       */
      public Builder mergeTmpTableSize(com.google.protobuf.Int64Value value) {
        if (tmpTableSizeBuilder_ == null) {
          if (tmpTableSize_ != null) {
            tmpTableSize_ =
              com.google.protobuf.Int64Value.newBuilder(tmpTableSize_).mergeFrom(value).buildPartial();
          } else {
            tmpTableSize_ = value;
          }
          onChanged();
        } else {
          tmpTableSizeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size of internal in-memory temporary tables.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmp_table_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-536870912"];</code>
       */
      public Builder clearTmpTableSize() {
        if (tmpTableSizeBuilder_ == null) {
          tmpTableSize_ = null;
          onChanged();
        } else {
          tmpTableSize_ = null;
          tmpTableSizeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size of internal in-memory temporary tables.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmp_table_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-536870912"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getTmpTableSizeBuilder() {
        
        onChanged();
        return getTmpTableSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The maximum size of internal in-memory temporary tables.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmp_table_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-536870912"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getTmpTableSizeOrBuilder() {
        if (tmpTableSizeBuilder_ != null) {
          return tmpTableSizeBuilder_.getMessageOrBuilder();
        } else {
          return tmpTableSize_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : tmpTableSize_;
        }
      }
      /**
       * <pre>
       * The maximum size of internal in-memory temporary tables.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmp_table_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value tmp_table_size = 16 [(.yandex.cloud.value) = "1024-536870912"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getTmpTableSizeFieldBuilder() {
        if (tmpTableSizeBuilder_ == null) {
          tmpTableSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getTmpTableSize(),
                  getParentForChildren(),
                  isClean());
          tmpTableSize_ = null;
        }
        return tmpTableSizeBuilder_;
      }

      private com.google.protobuf.Int64Value maxHeapTableSize_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxHeapTableSizeBuilder_;
      /**
       * <pre>
       * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_heap_table_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "16384-536870912"];</code>
       * @return Whether the maxHeapTableSize field is set.
       */
      public boolean hasMaxHeapTableSize() {
        return maxHeapTableSizeBuilder_ != null || maxHeapTableSize_ != null;
      }
      /**
       * <pre>
       * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_heap_table_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "16384-536870912"];</code>
       * @return The maxHeapTableSize.
       */
      public com.google.protobuf.Int64Value getMaxHeapTableSize() {
        if (maxHeapTableSizeBuilder_ == null) {
          return maxHeapTableSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxHeapTableSize_;
        } else {
          return maxHeapTableSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_heap_table_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "16384-536870912"];</code>
       */
      public Builder setMaxHeapTableSize(com.google.protobuf.Int64Value value) {
        if (maxHeapTableSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxHeapTableSize_ = value;
          onChanged();
        } else {
          maxHeapTableSizeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_heap_table_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "16384-536870912"];</code>
       */
      public Builder setMaxHeapTableSize(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxHeapTableSizeBuilder_ == null) {
          maxHeapTableSize_ = builderForValue.build();
          onChanged();
        } else {
          maxHeapTableSizeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_heap_table_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "16384-536870912"];</code>
       */
      public Builder mergeMaxHeapTableSize(com.google.protobuf.Int64Value value) {
        if (maxHeapTableSizeBuilder_ == null) {
          if (maxHeapTableSize_ != null) {
            maxHeapTableSize_ =
              com.google.protobuf.Int64Value.newBuilder(maxHeapTableSize_).mergeFrom(value).buildPartial();
          } else {
            maxHeapTableSize_ = value;
          }
          onChanged();
        } else {
          maxHeapTableSizeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_heap_table_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "16384-536870912"];</code>
       */
      public Builder clearMaxHeapTableSize() {
        if (maxHeapTableSizeBuilder_ == null) {
          maxHeapTableSize_ = null;
          onChanged();
        } else {
          maxHeapTableSize_ = null;
          maxHeapTableSizeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_heap_table_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "16384-536870912"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxHeapTableSizeBuilder() {
        
        onChanged();
        return getMaxHeapTableSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_heap_table_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "16384-536870912"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxHeapTableSizeOrBuilder() {
        if (maxHeapTableSizeBuilder_ != null) {
          return maxHeapTableSizeBuilder_.getMessageOrBuilder();
        } else {
          return maxHeapTableSize_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxHeapTableSize_;
        }
      }
      /**
       * <pre>
       * This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_heap_table_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_heap_table_size = 17 [(.yandex.cloud.value) = "16384-536870912"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxHeapTableSizeFieldBuilder() {
        if (maxHeapTableSizeBuilder_ == null) {
          maxHeapTableSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxHeapTableSize(),
                  getParentForChildren(),
                  isClean());
          maxHeapTableSize_ = null;
        }
        return maxHeapTableSizeBuilder_;
      }

      private java.lang.Object defaultTimeZone_ = "";
      /**
       * <pre>
       * The servers default time zone.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-options.html#option_mysqld_default-time-zone) for details.
       * </pre>
       *
       * <code>string default_time_zone = 18;</code>
       * @return The defaultTimeZone.
       */
      public java.lang.String getDefaultTimeZone() {
        java.lang.Object ref = defaultTimeZone_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          defaultTimeZone_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The servers default time zone.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-options.html#option_mysqld_default-time-zone) for details.
       * </pre>
       *
       * <code>string default_time_zone = 18;</code>
       * @return The bytes for defaultTimeZone.
       */
      public com.google.protobuf.ByteString
          getDefaultTimeZoneBytes() {
        java.lang.Object ref = defaultTimeZone_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          defaultTimeZone_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The servers default time zone.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-options.html#option_mysqld_default-time-zone) for details.
       * </pre>
       *
       * <code>string default_time_zone = 18;</code>
       * @param value The defaultTimeZone to set.
       * @return This builder for chaining.
       */
      public Builder setDefaultTimeZone(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        defaultTimeZone_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The servers default time zone.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-options.html#option_mysqld_default-time-zone) for details.
       * </pre>
       *
       * <code>string default_time_zone = 18;</code>
       * @return This builder for chaining.
       */
      public Builder clearDefaultTimeZone() {
        
        defaultTimeZone_ = getDefaultInstance().getDefaultTimeZone();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The servers default time zone.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-options.html#option_mysqld_default-time-zone) for details.
       * </pre>
       *
       * <code>string default_time_zone = 18;</code>
       * @param value The bytes for defaultTimeZone to set.
       * @return This builder for chaining.
       */
      public Builder setDefaultTimeZoneBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        defaultTimeZone_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object characterSetServer_ = "";
      /**
       * <pre>
       * The servers default character set.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_character_set_server) for details.
       * </pre>
       *
       * <code>string character_set_server = 19;</code>
       * @return The characterSetServer.
       */
      public java.lang.String getCharacterSetServer() {
        java.lang.Object ref = characterSetServer_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          characterSetServer_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The servers default character set.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_character_set_server) for details.
       * </pre>
       *
       * <code>string character_set_server = 19;</code>
       * @return The bytes for characterSetServer.
       */
      public com.google.protobuf.ByteString
          getCharacterSetServerBytes() {
        java.lang.Object ref = characterSetServer_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          characterSetServer_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The servers default character set.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_character_set_server) for details.
       * </pre>
       *
       * <code>string character_set_server = 19;</code>
       * @param value The characterSetServer to set.
       * @return This builder for chaining.
       */
      public Builder setCharacterSetServer(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        characterSetServer_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The servers default character set.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_character_set_server) for details.
       * </pre>
       *
       * <code>string character_set_server = 19;</code>
       * @return This builder for chaining.
       */
      public Builder clearCharacterSetServer() {
        
        characterSetServer_ = getDefaultInstance().getCharacterSetServer();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The servers default character set.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_character_set_server) for details.
       * </pre>
       *
       * <code>string character_set_server = 19;</code>
       * @param value The bytes for characterSetServer to set.
       * @return This builder for chaining.
       */
      public Builder setCharacterSetServerBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        characterSetServer_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object collationServer_ = "";
      /**
       * <pre>
       * The server default collation.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_collation_server) for details.
       * </pre>
       *
       * <code>string collation_server = 20;</code>
       * @return The collationServer.
       */
      public java.lang.String getCollationServer() {
        java.lang.Object ref = collationServer_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          collationServer_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The server default collation.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_collation_server) for details.
       * </pre>
       *
       * <code>string collation_server = 20;</code>
       * @return The bytes for collationServer.
       */
      public com.google.protobuf.ByteString
          getCollationServerBytes() {
        java.lang.Object ref = collationServer_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          collationServer_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The server default collation.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_collation_server) for details.
       * </pre>
       *
       * <code>string collation_server = 20;</code>
       * @param value The collationServer to set.
       * @return This builder for chaining.
       */
      public Builder setCollationServer(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        collationServer_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The server default collation.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_collation_server) for details.
       * </pre>
       *
       * <code>string collation_server = 20;</code>
       * @return This builder for chaining.
       */
      public Builder clearCollationServer() {
        
        collationServer_ = getDefaultInstance().getCollationServer();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The server default collation.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_collation_server) for details.
       * </pre>
       *
       * <code>string collation_server = 20;</code>
       * @param value The bytes for collationServer to set.
       * @return This builder for chaining.
       */
      public Builder setCollationServerBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        collationServer_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.BoolValue innodbAdaptiveHashIndex_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> innodbAdaptiveHashIndexBuilder_;
      /**
       * <pre>
       * Enables InnoDB adaptive hash index.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_adaptive_hash_index) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_adaptive_hash_index = 21;</code>
       * @return Whether the innodbAdaptiveHashIndex field is set.
       */
      public boolean hasInnodbAdaptiveHashIndex() {
        return innodbAdaptiveHashIndexBuilder_ != null || innodbAdaptiveHashIndex_ != null;
      }
      /**
       * <pre>
       * Enables InnoDB adaptive hash index.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_adaptive_hash_index) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_adaptive_hash_index = 21;</code>
       * @return The innodbAdaptiveHashIndex.
       */
      public com.google.protobuf.BoolValue getInnodbAdaptiveHashIndex() {
        if (innodbAdaptiveHashIndexBuilder_ == null) {
          return innodbAdaptiveHashIndex_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : innodbAdaptiveHashIndex_;
        } else {
          return innodbAdaptiveHashIndexBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enables InnoDB adaptive hash index.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_adaptive_hash_index) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_adaptive_hash_index = 21;</code>
       */
      public Builder setInnodbAdaptiveHashIndex(com.google.protobuf.BoolValue value) {
        if (innodbAdaptiveHashIndexBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbAdaptiveHashIndex_ = value;
          onChanged();
        } else {
          innodbAdaptiveHashIndexBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables InnoDB adaptive hash index.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_adaptive_hash_index) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_adaptive_hash_index = 21;</code>
       */
      public Builder setInnodbAdaptiveHashIndex(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (innodbAdaptiveHashIndexBuilder_ == null) {
          innodbAdaptiveHashIndex_ = builderForValue.build();
          onChanged();
        } else {
          innodbAdaptiveHashIndexBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enables InnoDB adaptive hash index.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_adaptive_hash_index) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_adaptive_hash_index = 21;</code>
       */
      public Builder mergeInnodbAdaptiveHashIndex(com.google.protobuf.BoolValue value) {
        if (innodbAdaptiveHashIndexBuilder_ == null) {
          if (innodbAdaptiveHashIndex_ != null) {
            innodbAdaptiveHashIndex_ =
              com.google.protobuf.BoolValue.newBuilder(innodbAdaptiveHashIndex_).mergeFrom(value).buildPartial();
          } else {
            innodbAdaptiveHashIndex_ = value;
          }
          onChanged();
        } else {
          innodbAdaptiveHashIndexBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables InnoDB adaptive hash index.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_adaptive_hash_index) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_adaptive_hash_index = 21;</code>
       */
      public Builder clearInnodbAdaptiveHashIndex() {
        if (innodbAdaptiveHashIndexBuilder_ == null) {
          innodbAdaptiveHashIndex_ = null;
          onChanged();
        } else {
          innodbAdaptiveHashIndex_ = null;
          innodbAdaptiveHashIndexBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enables InnoDB adaptive hash index.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_adaptive_hash_index) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_adaptive_hash_index = 21;</code>
       */
      public com.google.protobuf.BoolValue.Builder getInnodbAdaptiveHashIndexBuilder() {
        
        onChanged();
        return getInnodbAdaptiveHashIndexFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enables InnoDB adaptive hash index.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_adaptive_hash_index) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_adaptive_hash_index = 21;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getInnodbAdaptiveHashIndexOrBuilder() {
        if (innodbAdaptiveHashIndexBuilder_ != null) {
          return innodbAdaptiveHashIndexBuilder_.getMessageOrBuilder();
        } else {
          return innodbAdaptiveHashIndex_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : innodbAdaptiveHashIndex_;
        }
      }
      /**
       * <pre>
       * Enables InnoDB adaptive hash index.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_adaptive_hash_index) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_adaptive_hash_index = 21;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getInnodbAdaptiveHashIndexFieldBuilder() {
        if (innodbAdaptiveHashIndexBuilder_ == null) {
          innodbAdaptiveHashIndexBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getInnodbAdaptiveHashIndex(),
                  getParentForChildren(),
                  isClean());
          innodbAdaptiveHashIndex_ = null;
        }
        return innodbAdaptiveHashIndexBuilder_;
      }

      private com.google.protobuf.BoolValue innodbNumaInterleave_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> innodbNumaInterleaveBuilder_;
      /**
       * <pre>
       * Enables the NUMA interleave memory policy for allocation of the InnoDB buffer pool.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_numa_interleave) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_numa_interleave = 22;</code>
       * @return Whether the innodbNumaInterleave field is set.
       */
      public boolean hasInnodbNumaInterleave() {
        return innodbNumaInterleaveBuilder_ != null || innodbNumaInterleave_ != null;
      }
      /**
       * <pre>
       * Enables the NUMA interleave memory policy for allocation of the InnoDB buffer pool.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_numa_interleave) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_numa_interleave = 22;</code>
       * @return The innodbNumaInterleave.
       */
      public com.google.protobuf.BoolValue getInnodbNumaInterleave() {
        if (innodbNumaInterleaveBuilder_ == null) {
          return innodbNumaInterleave_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : innodbNumaInterleave_;
        } else {
          return innodbNumaInterleaveBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enables the NUMA interleave memory policy for allocation of the InnoDB buffer pool.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_numa_interleave) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_numa_interleave = 22;</code>
       */
      public Builder setInnodbNumaInterleave(com.google.protobuf.BoolValue value) {
        if (innodbNumaInterleaveBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbNumaInterleave_ = value;
          onChanged();
        } else {
          innodbNumaInterleaveBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables the NUMA interleave memory policy for allocation of the InnoDB buffer pool.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_numa_interleave) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_numa_interleave = 22;</code>
       */
      public Builder setInnodbNumaInterleave(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (innodbNumaInterleaveBuilder_ == null) {
          innodbNumaInterleave_ = builderForValue.build();
          onChanged();
        } else {
          innodbNumaInterleaveBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enables the NUMA interleave memory policy for allocation of the InnoDB buffer pool.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_numa_interleave) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_numa_interleave = 22;</code>
       */
      public Builder mergeInnodbNumaInterleave(com.google.protobuf.BoolValue value) {
        if (innodbNumaInterleaveBuilder_ == null) {
          if (innodbNumaInterleave_ != null) {
            innodbNumaInterleave_ =
              com.google.protobuf.BoolValue.newBuilder(innodbNumaInterleave_).mergeFrom(value).buildPartial();
          } else {
            innodbNumaInterleave_ = value;
          }
          onChanged();
        } else {
          innodbNumaInterleaveBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables the NUMA interleave memory policy for allocation of the InnoDB buffer pool.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_numa_interleave) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_numa_interleave = 22;</code>
       */
      public Builder clearInnodbNumaInterleave() {
        if (innodbNumaInterleaveBuilder_ == null) {
          innodbNumaInterleave_ = null;
          onChanged();
        } else {
          innodbNumaInterleave_ = null;
          innodbNumaInterleaveBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enables the NUMA interleave memory policy for allocation of the InnoDB buffer pool.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_numa_interleave) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_numa_interleave = 22;</code>
       */
      public com.google.protobuf.BoolValue.Builder getInnodbNumaInterleaveBuilder() {
        
        onChanged();
        return getInnodbNumaInterleaveFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enables the NUMA interleave memory policy for allocation of the InnoDB buffer pool.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_numa_interleave) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_numa_interleave = 22;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getInnodbNumaInterleaveOrBuilder() {
        if (innodbNumaInterleaveBuilder_ != null) {
          return innodbNumaInterleaveBuilder_.getMessageOrBuilder();
        } else {
          return innodbNumaInterleave_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : innodbNumaInterleave_;
        }
      }
      /**
       * <pre>
       * Enables the NUMA interleave memory policy for allocation of the InnoDB buffer pool.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_numa_interleave) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_numa_interleave = 22;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getInnodbNumaInterleaveFieldBuilder() {
        if (innodbNumaInterleaveBuilder_ == null) {
          innodbNumaInterleaveBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getInnodbNumaInterleave(),
                  getParentForChildren(),
                  isClean());
          innodbNumaInterleave_ = null;
        }
        return innodbNumaInterleaveBuilder_;
      }

      private com.google.protobuf.Int64Value innodbLogBufferSize_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> innodbLogBufferSizeBuilder_;
      /**
       * <pre>
       * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_buffer_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_log_buffer_size = 23 [(.yandex.cloud.value) = "1048576-268435456"];</code>
       * @return Whether the innodbLogBufferSize field is set.
       */
      public boolean hasInnodbLogBufferSize() {
        return innodbLogBufferSizeBuilder_ != null || innodbLogBufferSize_ != null;
      }
      /**
       * <pre>
       * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_buffer_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_log_buffer_size = 23 [(.yandex.cloud.value) = "1048576-268435456"];</code>
       * @return The innodbLogBufferSize.
       */
      public com.google.protobuf.Int64Value getInnodbLogBufferSize() {
        if (innodbLogBufferSizeBuilder_ == null) {
          return innodbLogBufferSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbLogBufferSize_;
        } else {
          return innodbLogBufferSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_buffer_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_log_buffer_size = 23 [(.yandex.cloud.value) = "1048576-268435456"];</code>
       */
      public Builder setInnodbLogBufferSize(com.google.protobuf.Int64Value value) {
        if (innodbLogBufferSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbLogBufferSize_ = value;
          onChanged();
        } else {
          innodbLogBufferSizeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_buffer_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_log_buffer_size = 23 [(.yandex.cloud.value) = "1048576-268435456"];</code>
       */
      public Builder setInnodbLogBufferSize(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (innodbLogBufferSizeBuilder_ == null) {
          innodbLogBufferSize_ = builderForValue.build();
          onChanged();
        } else {
          innodbLogBufferSizeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_buffer_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_log_buffer_size = 23 [(.yandex.cloud.value) = "1048576-268435456"];</code>
       */
      public Builder mergeInnodbLogBufferSize(com.google.protobuf.Int64Value value) {
        if (innodbLogBufferSizeBuilder_ == null) {
          if (innodbLogBufferSize_ != null) {
            innodbLogBufferSize_ =
              com.google.protobuf.Int64Value.newBuilder(innodbLogBufferSize_).mergeFrom(value).buildPartial();
          } else {
            innodbLogBufferSize_ = value;
          }
          onChanged();
        } else {
          innodbLogBufferSizeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_buffer_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_log_buffer_size = 23 [(.yandex.cloud.value) = "1048576-268435456"];</code>
       */
      public Builder clearInnodbLogBufferSize() {
        if (innodbLogBufferSizeBuilder_ == null) {
          innodbLogBufferSize_ = null;
          onChanged();
        } else {
          innodbLogBufferSize_ = null;
          innodbLogBufferSizeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_buffer_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_log_buffer_size = 23 [(.yandex.cloud.value) = "1048576-268435456"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getInnodbLogBufferSizeBuilder() {
        
        onChanged();
        return getInnodbLogBufferSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_buffer_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_log_buffer_size = 23 [(.yandex.cloud.value) = "1048576-268435456"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getInnodbLogBufferSizeOrBuilder() {
        if (innodbLogBufferSizeBuilder_ != null) {
          return innodbLogBufferSizeBuilder_.getMessageOrBuilder();
        } else {
          return innodbLogBufferSize_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : innodbLogBufferSize_;
        }
      }
      /**
       * <pre>
       * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_buffer_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_log_buffer_size = 23 [(.yandex.cloud.value) = "1048576-268435456"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getInnodbLogBufferSizeFieldBuilder() {
        if (innodbLogBufferSizeBuilder_ == null) {
          innodbLogBufferSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getInnodbLogBufferSize(),
                  getParentForChildren(),
                  isClean());
          innodbLogBufferSize_ = null;
        }
        return innodbLogBufferSizeBuilder_;
      }

      private com.google.protobuf.Int64Value innodbLogFileSize_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> innodbLogFileSizeBuilder_;
      /**
       * <pre>
       * The size in bytes of the single InnoDB Redo log file.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_file_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_log_file_size = 24 [(.yandex.cloud.value) = "268435456-4294967296"];</code>
       * @return Whether the innodbLogFileSize field is set.
       */
      public boolean hasInnodbLogFileSize() {
        return innodbLogFileSizeBuilder_ != null || innodbLogFileSize_ != null;
      }
      /**
       * <pre>
       * The size in bytes of the single InnoDB Redo log file.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_file_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_log_file_size = 24 [(.yandex.cloud.value) = "268435456-4294967296"];</code>
       * @return The innodbLogFileSize.
       */
      public com.google.protobuf.Int64Value getInnodbLogFileSize() {
        if (innodbLogFileSizeBuilder_ == null) {
          return innodbLogFileSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbLogFileSize_;
        } else {
          return innodbLogFileSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The size in bytes of the single InnoDB Redo log file.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_file_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_log_file_size = 24 [(.yandex.cloud.value) = "268435456-4294967296"];</code>
       */
      public Builder setInnodbLogFileSize(com.google.protobuf.Int64Value value) {
        if (innodbLogFileSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbLogFileSize_ = value;
          onChanged();
        } else {
          innodbLogFileSizeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The size in bytes of the single InnoDB Redo log file.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_file_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_log_file_size = 24 [(.yandex.cloud.value) = "268435456-4294967296"];</code>
       */
      public Builder setInnodbLogFileSize(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (innodbLogFileSizeBuilder_ == null) {
          innodbLogFileSize_ = builderForValue.build();
          onChanged();
        } else {
          innodbLogFileSizeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The size in bytes of the single InnoDB Redo log file.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_file_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_log_file_size = 24 [(.yandex.cloud.value) = "268435456-4294967296"];</code>
       */
      public Builder mergeInnodbLogFileSize(com.google.protobuf.Int64Value value) {
        if (innodbLogFileSizeBuilder_ == null) {
          if (innodbLogFileSize_ != null) {
            innodbLogFileSize_ =
              com.google.protobuf.Int64Value.newBuilder(innodbLogFileSize_).mergeFrom(value).buildPartial();
          } else {
            innodbLogFileSize_ = value;
          }
          onChanged();
        } else {
          innodbLogFileSizeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The size in bytes of the single InnoDB Redo log file.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_file_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_log_file_size = 24 [(.yandex.cloud.value) = "268435456-4294967296"];</code>
       */
      public Builder clearInnodbLogFileSize() {
        if (innodbLogFileSizeBuilder_ == null) {
          innodbLogFileSize_ = null;
          onChanged();
        } else {
          innodbLogFileSize_ = null;
          innodbLogFileSizeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The size in bytes of the single InnoDB Redo log file.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_file_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_log_file_size = 24 [(.yandex.cloud.value) = "268435456-4294967296"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getInnodbLogFileSizeBuilder() {
        
        onChanged();
        return getInnodbLogFileSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The size in bytes of the single InnoDB Redo log file.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_file_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_log_file_size = 24 [(.yandex.cloud.value) = "268435456-4294967296"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getInnodbLogFileSizeOrBuilder() {
        if (innodbLogFileSizeBuilder_ != null) {
          return innodbLogFileSizeBuilder_.getMessageOrBuilder();
        } else {
          return innodbLogFileSize_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : innodbLogFileSize_;
        }
      }
      /**
       * <pre>
       * The size in bytes of the single InnoDB Redo log file.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_file_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_log_file_size = 24 [(.yandex.cloud.value) = "268435456-4294967296"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getInnodbLogFileSizeFieldBuilder() {
        if (innodbLogFileSizeBuilder_ == null) {
          innodbLogFileSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getInnodbLogFileSize(),
                  getParentForChildren(),
                  isClean());
          innodbLogFileSize_ = null;
        }
        return innodbLogFileSizeBuilder_;
      }

      private com.google.protobuf.Int64Value innodbIoCapacity_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> innodbIoCapacityBuilder_;
      /**
       * <pre>
       * Limits IO available for InnoDB background tasks.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_io_capacity = 25 [(.yandex.cloud.value) = "100-100000"];</code>
       * @return Whether the innodbIoCapacity field is set.
       */
      public boolean hasInnodbIoCapacity() {
        return innodbIoCapacityBuilder_ != null || innodbIoCapacity_ != null;
      }
      /**
       * <pre>
       * Limits IO available for InnoDB background tasks.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_io_capacity = 25 [(.yandex.cloud.value) = "100-100000"];</code>
       * @return The innodbIoCapacity.
       */
      public com.google.protobuf.Int64Value getInnodbIoCapacity() {
        if (innodbIoCapacityBuilder_ == null) {
          return innodbIoCapacity_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbIoCapacity_;
        } else {
          return innodbIoCapacityBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits IO available for InnoDB background tasks.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_io_capacity = 25 [(.yandex.cloud.value) = "100-100000"];</code>
       */
      public Builder setInnodbIoCapacity(com.google.protobuf.Int64Value value) {
        if (innodbIoCapacityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbIoCapacity_ = value;
          onChanged();
        } else {
          innodbIoCapacityBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits IO available for InnoDB background tasks.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_io_capacity = 25 [(.yandex.cloud.value) = "100-100000"];</code>
       */
      public Builder setInnodbIoCapacity(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (innodbIoCapacityBuilder_ == null) {
          innodbIoCapacity_ = builderForValue.build();
          onChanged();
        } else {
          innodbIoCapacityBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits IO available for InnoDB background tasks.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_io_capacity = 25 [(.yandex.cloud.value) = "100-100000"];</code>
       */
      public Builder mergeInnodbIoCapacity(com.google.protobuf.Int64Value value) {
        if (innodbIoCapacityBuilder_ == null) {
          if (innodbIoCapacity_ != null) {
            innodbIoCapacity_ =
              com.google.protobuf.Int64Value.newBuilder(innodbIoCapacity_).mergeFrom(value).buildPartial();
          } else {
            innodbIoCapacity_ = value;
          }
          onChanged();
        } else {
          innodbIoCapacityBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits IO available for InnoDB background tasks.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_io_capacity = 25 [(.yandex.cloud.value) = "100-100000"];</code>
       */
      public Builder clearInnodbIoCapacity() {
        if (innodbIoCapacityBuilder_ == null) {
          innodbIoCapacity_ = null;
          onChanged();
        } else {
          innodbIoCapacity_ = null;
          innodbIoCapacityBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits IO available for InnoDB background tasks.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_io_capacity = 25 [(.yandex.cloud.value) = "100-100000"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getInnodbIoCapacityBuilder() {
        
        onChanged();
        return getInnodbIoCapacityFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits IO available for InnoDB background tasks.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_io_capacity = 25 [(.yandex.cloud.value) = "100-100000"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getInnodbIoCapacityOrBuilder() {
        if (innodbIoCapacityBuilder_ != null) {
          return innodbIoCapacityBuilder_.getMessageOrBuilder();
        } else {
          return innodbIoCapacity_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : innodbIoCapacity_;
        }
      }
      /**
       * <pre>
       * Limits IO available for InnoDB background tasks.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_io_capacity = 25 [(.yandex.cloud.value) = "100-100000"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getInnodbIoCapacityFieldBuilder() {
        if (innodbIoCapacityBuilder_ == null) {
          innodbIoCapacityBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getInnodbIoCapacity(),
                  getParentForChildren(),
                  isClean());
          innodbIoCapacity_ = null;
        }
        return innodbIoCapacityBuilder_;
      }

      private com.google.protobuf.Int64Value innodbIoCapacityMax_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> innodbIoCapacityMaxBuilder_;
      /**
       * <pre>
       * Limits IO available for InnoDB background tasks.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity_max) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_io_capacity_max = 26 [(.yandex.cloud.value) = "100-100000"];</code>
       * @return Whether the innodbIoCapacityMax field is set.
       */
      public boolean hasInnodbIoCapacityMax() {
        return innodbIoCapacityMaxBuilder_ != null || innodbIoCapacityMax_ != null;
      }
      /**
       * <pre>
       * Limits IO available for InnoDB background tasks.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity_max) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_io_capacity_max = 26 [(.yandex.cloud.value) = "100-100000"];</code>
       * @return The innodbIoCapacityMax.
       */
      public com.google.protobuf.Int64Value getInnodbIoCapacityMax() {
        if (innodbIoCapacityMaxBuilder_ == null) {
          return innodbIoCapacityMax_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbIoCapacityMax_;
        } else {
          return innodbIoCapacityMaxBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits IO available for InnoDB background tasks.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity_max) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_io_capacity_max = 26 [(.yandex.cloud.value) = "100-100000"];</code>
       */
      public Builder setInnodbIoCapacityMax(com.google.protobuf.Int64Value value) {
        if (innodbIoCapacityMaxBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbIoCapacityMax_ = value;
          onChanged();
        } else {
          innodbIoCapacityMaxBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits IO available for InnoDB background tasks.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity_max) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_io_capacity_max = 26 [(.yandex.cloud.value) = "100-100000"];</code>
       */
      public Builder setInnodbIoCapacityMax(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (innodbIoCapacityMaxBuilder_ == null) {
          innodbIoCapacityMax_ = builderForValue.build();
          onChanged();
        } else {
          innodbIoCapacityMaxBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits IO available for InnoDB background tasks.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity_max) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_io_capacity_max = 26 [(.yandex.cloud.value) = "100-100000"];</code>
       */
      public Builder mergeInnodbIoCapacityMax(com.google.protobuf.Int64Value value) {
        if (innodbIoCapacityMaxBuilder_ == null) {
          if (innodbIoCapacityMax_ != null) {
            innodbIoCapacityMax_ =
              com.google.protobuf.Int64Value.newBuilder(innodbIoCapacityMax_).mergeFrom(value).buildPartial();
          } else {
            innodbIoCapacityMax_ = value;
          }
          onChanged();
        } else {
          innodbIoCapacityMaxBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits IO available for InnoDB background tasks.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity_max) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_io_capacity_max = 26 [(.yandex.cloud.value) = "100-100000"];</code>
       */
      public Builder clearInnodbIoCapacityMax() {
        if (innodbIoCapacityMaxBuilder_ == null) {
          innodbIoCapacityMax_ = null;
          onChanged();
        } else {
          innodbIoCapacityMax_ = null;
          innodbIoCapacityMaxBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits IO available for InnoDB background tasks.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity_max) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_io_capacity_max = 26 [(.yandex.cloud.value) = "100-100000"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getInnodbIoCapacityMaxBuilder() {
        
        onChanged();
        return getInnodbIoCapacityMaxFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits IO available for InnoDB background tasks.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity_max) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_io_capacity_max = 26 [(.yandex.cloud.value) = "100-100000"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getInnodbIoCapacityMaxOrBuilder() {
        if (innodbIoCapacityMaxBuilder_ != null) {
          return innodbIoCapacityMaxBuilder_.getMessageOrBuilder();
        } else {
          return innodbIoCapacityMax_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : innodbIoCapacityMax_;
        }
      }
      /**
       * <pre>
       * Limits IO available for InnoDB background tasks.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_io_capacity_max) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_io_capacity_max = 26 [(.yandex.cloud.value) = "100-100000"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getInnodbIoCapacityMaxFieldBuilder() {
        if (innodbIoCapacityMaxBuilder_ == null) {
          innodbIoCapacityMaxBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getInnodbIoCapacityMax(),
                  getParentForChildren(),
                  isClean());
          innodbIoCapacityMax_ = null;
        }
        return innodbIoCapacityMaxBuilder_;
      }

      private com.google.protobuf.Int64Value innodbReadIoThreads_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> innodbReadIoThreadsBuilder_;
      /**
       * <pre>
       * The number of I/O threads for read operations in InnoDB.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_read_io_threads) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_read_io_threads = 27 [(.yandex.cloud.value) = "1-16"];</code>
       * @return Whether the innodbReadIoThreads field is set.
       */
      public boolean hasInnodbReadIoThreads() {
        return innodbReadIoThreadsBuilder_ != null || innodbReadIoThreads_ != null;
      }
      /**
       * <pre>
       * The number of I/O threads for read operations in InnoDB.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_read_io_threads) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_read_io_threads = 27 [(.yandex.cloud.value) = "1-16"];</code>
       * @return The innodbReadIoThreads.
       */
      public com.google.protobuf.Int64Value getInnodbReadIoThreads() {
        if (innodbReadIoThreadsBuilder_ == null) {
          return innodbReadIoThreads_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbReadIoThreads_;
        } else {
          return innodbReadIoThreadsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The number of I/O threads for read operations in InnoDB.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_read_io_threads) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_read_io_threads = 27 [(.yandex.cloud.value) = "1-16"];</code>
       */
      public Builder setInnodbReadIoThreads(com.google.protobuf.Int64Value value) {
        if (innodbReadIoThreadsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbReadIoThreads_ = value;
          onChanged();
        } else {
          innodbReadIoThreadsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of I/O threads for read operations in InnoDB.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_read_io_threads) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_read_io_threads = 27 [(.yandex.cloud.value) = "1-16"];</code>
       */
      public Builder setInnodbReadIoThreads(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (innodbReadIoThreadsBuilder_ == null) {
          innodbReadIoThreads_ = builderForValue.build();
          onChanged();
        } else {
          innodbReadIoThreadsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The number of I/O threads for read operations in InnoDB.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_read_io_threads) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_read_io_threads = 27 [(.yandex.cloud.value) = "1-16"];</code>
       */
      public Builder mergeInnodbReadIoThreads(com.google.protobuf.Int64Value value) {
        if (innodbReadIoThreadsBuilder_ == null) {
          if (innodbReadIoThreads_ != null) {
            innodbReadIoThreads_ =
              com.google.protobuf.Int64Value.newBuilder(innodbReadIoThreads_).mergeFrom(value).buildPartial();
          } else {
            innodbReadIoThreads_ = value;
          }
          onChanged();
        } else {
          innodbReadIoThreadsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of I/O threads for read operations in InnoDB.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_read_io_threads) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_read_io_threads = 27 [(.yandex.cloud.value) = "1-16"];</code>
       */
      public Builder clearInnodbReadIoThreads() {
        if (innodbReadIoThreadsBuilder_ == null) {
          innodbReadIoThreads_ = null;
          onChanged();
        } else {
          innodbReadIoThreads_ = null;
          innodbReadIoThreadsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The number of I/O threads for read operations in InnoDB.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_read_io_threads) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_read_io_threads = 27 [(.yandex.cloud.value) = "1-16"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getInnodbReadIoThreadsBuilder() {
        
        onChanged();
        return getInnodbReadIoThreadsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The number of I/O threads for read operations in InnoDB.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_read_io_threads) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_read_io_threads = 27 [(.yandex.cloud.value) = "1-16"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getInnodbReadIoThreadsOrBuilder() {
        if (innodbReadIoThreadsBuilder_ != null) {
          return innodbReadIoThreadsBuilder_.getMessageOrBuilder();
        } else {
          return innodbReadIoThreads_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : innodbReadIoThreads_;
        }
      }
      /**
       * <pre>
       * The number of I/O threads for read operations in InnoDB.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_read_io_threads) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_read_io_threads = 27 [(.yandex.cloud.value) = "1-16"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getInnodbReadIoThreadsFieldBuilder() {
        if (innodbReadIoThreadsBuilder_ == null) {
          innodbReadIoThreadsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getInnodbReadIoThreads(),
                  getParentForChildren(),
                  isClean());
          innodbReadIoThreads_ = null;
        }
        return innodbReadIoThreadsBuilder_;
      }

      private com.google.protobuf.Int64Value innodbWriteIoThreads_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> innodbWriteIoThreadsBuilder_;
      /**
       * <pre>
       * The number of I/O threads for write operations in InnoDB.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_write_io_threads) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_write_io_threads = 28 [(.yandex.cloud.value) = "1-16"];</code>
       * @return Whether the innodbWriteIoThreads field is set.
       */
      public boolean hasInnodbWriteIoThreads() {
        return innodbWriteIoThreadsBuilder_ != null || innodbWriteIoThreads_ != null;
      }
      /**
       * <pre>
       * The number of I/O threads for write operations in InnoDB.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_write_io_threads) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_write_io_threads = 28 [(.yandex.cloud.value) = "1-16"];</code>
       * @return The innodbWriteIoThreads.
       */
      public com.google.protobuf.Int64Value getInnodbWriteIoThreads() {
        if (innodbWriteIoThreadsBuilder_ == null) {
          return innodbWriteIoThreads_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbWriteIoThreads_;
        } else {
          return innodbWriteIoThreadsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The number of I/O threads for write operations in InnoDB.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_write_io_threads) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_write_io_threads = 28 [(.yandex.cloud.value) = "1-16"];</code>
       */
      public Builder setInnodbWriteIoThreads(com.google.protobuf.Int64Value value) {
        if (innodbWriteIoThreadsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbWriteIoThreads_ = value;
          onChanged();
        } else {
          innodbWriteIoThreadsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of I/O threads for write operations in InnoDB.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_write_io_threads) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_write_io_threads = 28 [(.yandex.cloud.value) = "1-16"];</code>
       */
      public Builder setInnodbWriteIoThreads(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (innodbWriteIoThreadsBuilder_ == null) {
          innodbWriteIoThreads_ = builderForValue.build();
          onChanged();
        } else {
          innodbWriteIoThreadsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The number of I/O threads for write operations in InnoDB.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_write_io_threads) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_write_io_threads = 28 [(.yandex.cloud.value) = "1-16"];</code>
       */
      public Builder mergeInnodbWriteIoThreads(com.google.protobuf.Int64Value value) {
        if (innodbWriteIoThreadsBuilder_ == null) {
          if (innodbWriteIoThreads_ != null) {
            innodbWriteIoThreads_ =
              com.google.protobuf.Int64Value.newBuilder(innodbWriteIoThreads_).mergeFrom(value).buildPartial();
          } else {
            innodbWriteIoThreads_ = value;
          }
          onChanged();
        } else {
          innodbWriteIoThreadsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of I/O threads for write operations in InnoDB.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_write_io_threads) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_write_io_threads = 28 [(.yandex.cloud.value) = "1-16"];</code>
       */
      public Builder clearInnodbWriteIoThreads() {
        if (innodbWriteIoThreadsBuilder_ == null) {
          innodbWriteIoThreads_ = null;
          onChanged();
        } else {
          innodbWriteIoThreads_ = null;
          innodbWriteIoThreadsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The number of I/O threads for write operations in InnoDB.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_write_io_threads) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_write_io_threads = 28 [(.yandex.cloud.value) = "1-16"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getInnodbWriteIoThreadsBuilder() {
        
        onChanged();
        return getInnodbWriteIoThreadsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The number of I/O threads for write operations in InnoDB.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_write_io_threads) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_write_io_threads = 28 [(.yandex.cloud.value) = "1-16"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getInnodbWriteIoThreadsOrBuilder() {
        if (innodbWriteIoThreadsBuilder_ != null) {
          return innodbWriteIoThreadsBuilder_.getMessageOrBuilder();
        } else {
          return innodbWriteIoThreads_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : innodbWriteIoThreads_;
        }
      }
      /**
       * <pre>
       * The number of I/O threads for write operations in InnoDB.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_write_io_threads) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_write_io_threads = 28 [(.yandex.cloud.value) = "1-16"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getInnodbWriteIoThreadsFieldBuilder() {
        if (innodbWriteIoThreadsBuilder_ == null) {
          innodbWriteIoThreadsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getInnodbWriteIoThreads(),
                  getParentForChildren(),
                  isClean());
          innodbWriteIoThreads_ = null;
        }
        return innodbWriteIoThreadsBuilder_;
      }

      private com.google.protobuf.Int64Value innodbPurgeThreads_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> innodbPurgeThreadsBuilder_;
      /**
       * <pre>
       * The number of background threads devoted to the InnoDB purge operation.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_purge_threads) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_purge_threads = 29 [(.yandex.cloud.value) = "1-16"];</code>
       * @return Whether the innodbPurgeThreads field is set.
       */
      public boolean hasInnodbPurgeThreads() {
        return innodbPurgeThreadsBuilder_ != null || innodbPurgeThreads_ != null;
      }
      /**
       * <pre>
       * The number of background threads devoted to the InnoDB purge operation.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_purge_threads) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_purge_threads = 29 [(.yandex.cloud.value) = "1-16"];</code>
       * @return The innodbPurgeThreads.
       */
      public com.google.protobuf.Int64Value getInnodbPurgeThreads() {
        if (innodbPurgeThreadsBuilder_ == null) {
          return innodbPurgeThreads_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbPurgeThreads_;
        } else {
          return innodbPurgeThreadsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The number of background threads devoted to the InnoDB purge operation.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_purge_threads) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_purge_threads = 29 [(.yandex.cloud.value) = "1-16"];</code>
       */
      public Builder setInnodbPurgeThreads(com.google.protobuf.Int64Value value) {
        if (innodbPurgeThreadsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbPurgeThreads_ = value;
          onChanged();
        } else {
          innodbPurgeThreadsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of background threads devoted to the InnoDB purge operation.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_purge_threads) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_purge_threads = 29 [(.yandex.cloud.value) = "1-16"];</code>
       */
      public Builder setInnodbPurgeThreads(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (innodbPurgeThreadsBuilder_ == null) {
          innodbPurgeThreads_ = builderForValue.build();
          onChanged();
        } else {
          innodbPurgeThreadsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The number of background threads devoted to the InnoDB purge operation.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_purge_threads) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_purge_threads = 29 [(.yandex.cloud.value) = "1-16"];</code>
       */
      public Builder mergeInnodbPurgeThreads(com.google.protobuf.Int64Value value) {
        if (innodbPurgeThreadsBuilder_ == null) {
          if (innodbPurgeThreads_ != null) {
            innodbPurgeThreads_ =
              com.google.protobuf.Int64Value.newBuilder(innodbPurgeThreads_).mergeFrom(value).buildPartial();
          } else {
            innodbPurgeThreads_ = value;
          }
          onChanged();
        } else {
          innodbPurgeThreadsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of background threads devoted to the InnoDB purge operation.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_purge_threads) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_purge_threads = 29 [(.yandex.cloud.value) = "1-16"];</code>
       */
      public Builder clearInnodbPurgeThreads() {
        if (innodbPurgeThreadsBuilder_ == null) {
          innodbPurgeThreads_ = null;
          onChanged();
        } else {
          innodbPurgeThreads_ = null;
          innodbPurgeThreadsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The number of background threads devoted to the InnoDB purge operation.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_purge_threads) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_purge_threads = 29 [(.yandex.cloud.value) = "1-16"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getInnodbPurgeThreadsBuilder() {
        
        onChanged();
        return getInnodbPurgeThreadsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The number of background threads devoted to the InnoDB purge operation.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_purge_threads) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_purge_threads = 29 [(.yandex.cloud.value) = "1-16"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getInnodbPurgeThreadsOrBuilder() {
        if (innodbPurgeThreadsBuilder_ != null) {
          return innodbPurgeThreadsBuilder_.getMessageOrBuilder();
        } else {
          return innodbPurgeThreads_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : innodbPurgeThreads_;
        }
      }
      /**
       * <pre>
       * The number of background threads devoted to the InnoDB purge operation.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_purge_threads) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_purge_threads = 29 [(.yandex.cloud.value) = "1-16"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getInnodbPurgeThreadsFieldBuilder() {
        if (innodbPurgeThreadsBuilder_ == null) {
          innodbPurgeThreadsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getInnodbPurgeThreads(),
                  getParentForChildren(),
                  isClean());
          innodbPurgeThreads_ = null;
        }
        return innodbPurgeThreadsBuilder_;
      }

      private com.google.protobuf.Int64Value innodbThreadConcurrency_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> innodbThreadConcurrencyBuilder_;
      /**
       * <pre>
       * Defines the maximum number of threads permitted inside of InnoDB.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_thread_concurrency) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_thread_concurrency = 30 [(.yandex.cloud.value) = "0-1000"];</code>
       * @return Whether the innodbThreadConcurrency field is set.
       */
      public boolean hasInnodbThreadConcurrency() {
        return innodbThreadConcurrencyBuilder_ != null || innodbThreadConcurrency_ != null;
      }
      /**
       * <pre>
       * Defines the maximum number of threads permitted inside of InnoDB.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_thread_concurrency) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_thread_concurrency = 30 [(.yandex.cloud.value) = "0-1000"];</code>
       * @return The innodbThreadConcurrency.
       */
      public com.google.protobuf.Int64Value getInnodbThreadConcurrency() {
        if (innodbThreadConcurrencyBuilder_ == null) {
          return innodbThreadConcurrency_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbThreadConcurrency_;
        } else {
          return innodbThreadConcurrencyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Defines the maximum number of threads permitted inside of InnoDB.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_thread_concurrency) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_thread_concurrency = 30 [(.yandex.cloud.value) = "0-1000"];</code>
       */
      public Builder setInnodbThreadConcurrency(com.google.protobuf.Int64Value value) {
        if (innodbThreadConcurrencyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbThreadConcurrency_ = value;
          onChanged();
        } else {
          innodbThreadConcurrencyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Defines the maximum number of threads permitted inside of InnoDB.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_thread_concurrency) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_thread_concurrency = 30 [(.yandex.cloud.value) = "0-1000"];</code>
       */
      public Builder setInnodbThreadConcurrency(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (innodbThreadConcurrencyBuilder_ == null) {
          innodbThreadConcurrency_ = builderForValue.build();
          onChanged();
        } else {
          innodbThreadConcurrencyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Defines the maximum number of threads permitted inside of InnoDB.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_thread_concurrency) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_thread_concurrency = 30 [(.yandex.cloud.value) = "0-1000"];</code>
       */
      public Builder mergeInnodbThreadConcurrency(com.google.protobuf.Int64Value value) {
        if (innodbThreadConcurrencyBuilder_ == null) {
          if (innodbThreadConcurrency_ != null) {
            innodbThreadConcurrency_ =
              com.google.protobuf.Int64Value.newBuilder(innodbThreadConcurrency_).mergeFrom(value).buildPartial();
          } else {
            innodbThreadConcurrency_ = value;
          }
          onChanged();
        } else {
          innodbThreadConcurrencyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Defines the maximum number of threads permitted inside of InnoDB.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_thread_concurrency) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_thread_concurrency = 30 [(.yandex.cloud.value) = "0-1000"];</code>
       */
      public Builder clearInnodbThreadConcurrency() {
        if (innodbThreadConcurrencyBuilder_ == null) {
          innodbThreadConcurrency_ = null;
          onChanged();
        } else {
          innodbThreadConcurrency_ = null;
          innodbThreadConcurrencyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Defines the maximum number of threads permitted inside of InnoDB.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_thread_concurrency) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_thread_concurrency = 30 [(.yandex.cloud.value) = "0-1000"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getInnodbThreadConcurrencyBuilder() {
        
        onChanged();
        return getInnodbThreadConcurrencyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Defines the maximum number of threads permitted inside of InnoDB.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_thread_concurrency) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_thread_concurrency = 30 [(.yandex.cloud.value) = "0-1000"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getInnodbThreadConcurrencyOrBuilder() {
        if (innodbThreadConcurrencyBuilder_ != null) {
          return innodbThreadConcurrencyBuilder_.getMessageOrBuilder();
        } else {
          return innodbThreadConcurrency_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : innodbThreadConcurrency_;
        }
      }
      /**
       * <pre>
       * Defines the maximum number of threads permitted inside of InnoDB.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_thread_concurrency) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_thread_concurrency = 30 [(.yandex.cloud.value) = "0-1000"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getInnodbThreadConcurrencyFieldBuilder() {
        if (innodbThreadConcurrencyBuilder_ == null) {
          innodbThreadConcurrencyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getInnodbThreadConcurrency(),
                  getParentForChildren(),
                  isClean());
          innodbThreadConcurrency_ = null;
        }
        return innodbThreadConcurrencyBuilder_;
      }

      private com.google.protobuf.Int64Value innodbTempDataFileMaxSize_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> innodbTempDataFileMaxSizeBuilder_;
      /**
       * <pre>
       * Limits the max size of InnoDB temp tablespace.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_temp_data_file_path) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_temp_data_file_max_size = 31 [(.yandex.cloud.value) = "0-107374182400"];</code>
       * @return Whether the innodbTempDataFileMaxSize field is set.
       */
      public boolean hasInnodbTempDataFileMaxSize() {
        return innodbTempDataFileMaxSizeBuilder_ != null || innodbTempDataFileMaxSize_ != null;
      }
      /**
       * <pre>
       * Limits the max size of InnoDB temp tablespace.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_temp_data_file_path) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_temp_data_file_max_size = 31 [(.yandex.cloud.value) = "0-107374182400"];</code>
       * @return The innodbTempDataFileMaxSize.
       */
      public com.google.protobuf.Int64Value getInnodbTempDataFileMaxSize() {
        if (innodbTempDataFileMaxSizeBuilder_ == null) {
          return innodbTempDataFileMaxSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbTempDataFileMaxSize_;
        } else {
          return innodbTempDataFileMaxSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the max size of InnoDB temp tablespace.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_temp_data_file_path) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_temp_data_file_max_size = 31 [(.yandex.cloud.value) = "0-107374182400"];</code>
       */
      public Builder setInnodbTempDataFileMaxSize(com.google.protobuf.Int64Value value) {
        if (innodbTempDataFileMaxSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbTempDataFileMaxSize_ = value;
          onChanged();
        } else {
          innodbTempDataFileMaxSizeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the max size of InnoDB temp tablespace.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_temp_data_file_path) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_temp_data_file_max_size = 31 [(.yandex.cloud.value) = "0-107374182400"];</code>
       */
      public Builder setInnodbTempDataFileMaxSize(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (innodbTempDataFileMaxSizeBuilder_ == null) {
          innodbTempDataFileMaxSize_ = builderForValue.build();
          onChanged();
        } else {
          innodbTempDataFileMaxSizeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the max size of InnoDB temp tablespace.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_temp_data_file_path) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_temp_data_file_max_size = 31 [(.yandex.cloud.value) = "0-107374182400"];</code>
       */
      public Builder mergeInnodbTempDataFileMaxSize(com.google.protobuf.Int64Value value) {
        if (innodbTempDataFileMaxSizeBuilder_ == null) {
          if (innodbTempDataFileMaxSize_ != null) {
            innodbTempDataFileMaxSize_ =
              com.google.protobuf.Int64Value.newBuilder(innodbTempDataFileMaxSize_).mergeFrom(value).buildPartial();
          } else {
            innodbTempDataFileMaxSize_ = value;
          }
          onChanged();
        } else {
          innodbTempDataFileMaxSizeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the max size of InnoDB temp tablespace.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_temp_data_file_path) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_temp_data_file_max_size = 31 [(.yandex.cloud.value) = "0-107374182400"];</code>
       */
      public Builder clearInnodbTempDataFileMaxSize() {
        if (innodbTempDataFileMaxSizeBuilder_ == null) {
          innodbTempDataFileMaxSize_ = null;
          onChanged();
        } else {
          innodbTempDataFileMaxSize_ = null;
          innodbTempDataFileMaxSizeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the max size of InnoDB temp tablespace.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_temp_data_file_path) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_temp_data_file_max_size = 31 [(.yandex.cloud.value) = "0-107374182400"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getInnodbTempDataFileMaxSizeBuilder() {
        
        onChanged();
        return getInnodbTempDataFileMaxSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the max size of InnoDB temp tablespace.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_temp_data_file_path) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_temp_data_file_max_size = 31 [(.yandex.cloud.value) = "0-107374182400"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getInnodbTempDataFileMaxSizeOrBuilder() {
        if (innodbTempDataFileMaxSizeBuilder_ != null) {
          return innodbTempDataFileMaxSizeBuilder_.getMessageOrBuilder();
        } else {
          return innodbTempDataFileMaxSize_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : innodbTempDataFileMaxSize_;
        }
      }
      /**
       * <pre>
       * Limits the max size of InnoDB temp tablespace.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_temp_data_file_path) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_temp_data_file_max_size = 31 [(.yandex.cloud.value) = "0-107374182400"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getInnodbTempDataFileMaxSizeFieldBuilder() {
        if (innodbTempDataFileMaxSizeBuilder_ == null) {
          innodbTempDataFileMaxSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getInnodbTempDataFileMaxSize(),
                  getParentForChildren(),
                  isClean());
          innodbTempDataFileMaxSize_ = null;
        }
        return innodbTempDataFileMaxSizeBuilder_;
      }

      private com.google.protobuf.Int64Value threadCacheSize_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> threadCacheSizeBuilder_;
      /**
       * <pre>
       * How many threads the server should cache for reuse.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_cache_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value thread_cache_size = 32 [(.yandex.cloud.value) = "10-10000"];</code>
       * @return Whether the threadCacheSize field is set.
       */
      public boolean hasThreadCacheSize() {
        return threadCacheSizeBuilder_ != null || threadCacheSize_ != null;
      }
      /**
       * <pre>
       * How many threads the server should cache for reuse.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_cache_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value thread_cache_size = 32 [(.yandex.cloud.value) = "10-10000"];</code>
       * @return The threadCacheSize.
       */
      public com.google.protobuf.Int64Value getThreadCacheSize() {
        if (threadCacheSizeBuilder_ == null) {
          return threadCacheSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : threadCacheSize_;
        } else {
          return threadCacheSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * How many threads the server should cache for reuse.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_cache_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value thread_cache_size = 32 [(.yandex.cloud.value) = "10-10000"];</code>
       */
      public Builder setThreadCacheSize(com.google.protobuf.Int64Value value) {
        if (threadCacheSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          threadCacheSize_ = value;
          onChanged();
        } else {
          threadCacheSizeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * How many threads the server should cache for reuse.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_cache_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value thread_cache_size = 32 [(.yandex.cloud.value) = "10-10000"];</code>
       */
      public Builder setThreadCacheSize(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (threadCacheSizeBuilder_ == null) {
          threadCacheSize_ = builderForValue.build();
          onChanged();
        } else {
          threadCacheSizeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * How many threads the server should cache for reuse.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_cache_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value thread_cache_size = 32 [(.yandex.cloud.value) = "10-10000"];</code>
       */
      public Builder mergeThreadCacheSize(com.google.protobuf.Int64Value value) {
        if (threadCacheSizeBuilder_ == null) {
          if (threadCacheSize_ != null) {
            threadCacheSize_ =
              com.google.protobuf.Int64Value.newBuilder(threadCacheSize_).mergeFrom(value).buildPartial();
          } else {
            threadCacheSize_ = value;
          }
          onChanged();
        } else {
          threadCacheSizeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * How many threads the server should cache for reuse.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_cache_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value thread_cache_size = 32 [(.yandex.cloud.value) = "10-10000"];</code>
       */
      public Builder clearThreadCacheSize() {
        if (threadCacheSizeBuilder_ == null) {
          threadCacheSize_ = null;
          onChanged();
        } else {
          threadCacheSize_ = null;
          threadCacheSizeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * How many threads the server should cache for reuse.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_cache_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value thread_cache_size = 32 [(.yandex.cloud.value) = "10-10000"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getThreadCacheSizeBuilder() {
        
        onChanged();
        return getThreadCacheSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * How many threads the server should cache for reuse.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_cache_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value thread_cache_size = 32 [(.yandex.cloud.value) = "10-10000"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getThreadCacheSizeOrBuilder() {
        if (threadCacheSizeBuilder_ != null) {
          return threadCacheSizeBuilder_.getMessageOrBuilder();
        } else {
          return threadCacheSize_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : threadCacheSize_;
        }
      }
      /**
       * <pre>
       * How many threads the server should cache for reuse.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_cache_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value thread_cache_size = 32 [(.yandex.cloud.value) = "10-10000"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getThreadCacheSizeFieldBuilder() {
        if (threadCacheSizeBuilder_ == null) {
          threadCacheSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getThreadCacheSize(),
                  getParentForChildren(),
                  isClean());
          threadCacheSize_ = null;
        }
        return threadCacheSizeBuilder_;
      }

      private com.google.protobuf.Int64Value threadStack_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> threadStackBuilder_;
      /**
       * <pre>
       * The stack size for each thread. The default is large enough for normal operation.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_stack) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value thread_stack = 33 [(.yandex.cloud.value) = "131072-16777216"];</code>
       * @return Whether the threadStack field is set.
       */
      public boolean hasThreadStack() {
        return threadStackBuilder_ != null || threadStack_ != null;
      }
      /**
       * <pre>
       * The stack size for each thread. The default is large enough for normal operation.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_stack) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value thread_stack = 33 [(.yandex.cloud.value) = "131072-16777216"];</code>
       * @return The threadStack.
       */
      public com.google.protobuf.Int64Value getThreadStack() {
        if (threadStackBuilder_ == null) {
          return threadStack_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : threadStack_;
        } else {
          return threadStackBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The stack size for each thread. The default is large enough for normal operation.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_stack) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value thread_stack = 33 [(.yandex.cloud.value) = "131072-16777216"];</code>
       */
      public Builder setThreadStack(com.google.protobuf.Int64Value value) {
        if (threadStackBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          threadStack_ = value;
          onChanged();
        } else {
          threadStackBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The stack size for each thread. The default is large enough for normal operation.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_stack) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value thread_stack = 33 [(.yandex.cloud.value) = "131072-16777216"];</code>
       */
      public Builder setThreadStack(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (threadStackBuilder_ == null) {
          threadStack_ = builderForValue.build();
          onChanged();
        } else {
          threadStackBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The stack size for each thread. The default is large enough for normal operation.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_stack) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value thread_stack = 33 [(.yandex.cloud.value) = "131072-16777216"];</code>
       */
      public Builder mergeThreadStack(com.google.protobuf.Int64Value value) {
        if (threadStackBuilder_ == null) {
          if (threadStack_ != null) {
            threadStack_ =
              com.google.protobuf.Int64Value.newBuilder(threadStack_).mergeFrom(value).buildPartial();
          } else {
            threadStack_ = value;
          }
          onChanged();
        } else {
          threadStackBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The stack size for each thread. The default is large enough for normal operation.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_stack) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value thread_stack = 33 [(.yandex.cloud.value) = "131072-16777216"];</code>
       */
      public Builder clearThreadStack() {
        if (threadStackBuilder_ == null) {
          threadStack_ = null;
          onChanged();
        } else {
          threadStack_ = null;
          threadStackBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The stack size for each thread. The default is large enough for normal operation.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_stack) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value thread_stack = 33 [(.yandex.cloud.value) = "131072-16777216"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getThreadStackBuilder() {
        
        onChanged();
        return getThreadStackFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The stack size for each thread. The default is large enough for normal operation.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_stack) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value thread_stack = 33 [(.yandex.cloud.value) = "131072-16777216"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getThreadStackOrBuilder() {
        if (threadStackBuilder_ != null) {
          return threadStackBuilder_.getMessageOrBuilder();
        } else {
          return threadStack_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : threadStack_;
        }
      }
      /**
       * <pre>
       * The stack size for each thread. The default is large enough for normal operation.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_thread_stack) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value thread_stack = 33 [(.yandex.cloud.value) = "131072-16777216"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getThreadStackFieldBuilder() {
        if (threadStackBuilder_ == null) {
          threadStackBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getThreadStack(),
                  getParentForChildren(),
                  isClean());
          threadStack_ = null;
        }
        return threadStackBuilder_;
      }

      private com.google.protobuf.Int64Value joinBufferSize_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> joinBufferSizeBuilder_;
      /**
       * <pre>
       * The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_join_buffer_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value join_buffer_size = 34 [(.yandex.cloud.value) = "1024-16777216"];</code>
       * @return Whether the joinBufferSize field is set.
       */
      public boolean hasJoinBufferSize() {
        return joinBufferSizeBuilder_ != null || joinBufferSize_ != null;
      }
      /**
       * <pre>
       * The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_join_buffer_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value join_buffer_size = 34 [(.yandex.cloud.value) = "1024-16777216"];</code>
       * @return The joinBufferSize.
       */
      public com.google.protobuf.Int64Value getJoinBufferSize() {
        if (joinBufferSizeBuilder_ == null) {
          return joinBufferSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : joinBufferSize_;
        } else {
          return joinBufferSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_join_buffer_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value join_buffer_size = 34 [(.yandex.cloud.value) = "1024-16777216"];</code>
       */
      public Builder setJoinBufferSize(com.google.protobuf.Int64Value value) {
        if (joinBufferSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          joinBufferSize_ = value;
          onChanged();
        } else {
          joinBufferSizeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_join_buffer_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value join_buffer_size = 34 [(.yandex.cloud.value) = "1024-16777216"];</code>
       */
      public Builder setJoinBufferSize(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (joinBufferSizeBuilder_ == null) {
          joinBufferSize_ = builderForValue.build();
          onChanged();
        } else {
          joinBufferSizeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_join_buffer_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value join_buffer_size = 34 [(.yandex.cloud.value) = "1024-16777216"];</code>
       */
      public Builder mergeJoinBufferSize(com.google.protobuf.Int64Value value) {
        if (joinBufferSizeBuilder_ == null) {
          if (joinBufferSize_ != null) {
            joinBufferSize_ =
              com.google.protobuf.Int64Value.newBuilder(joinBufferSize_).mergeFrom(value).buildPartial();
          } else {
            joinBufferSize_ = value;
          }
          onChanged();
        } else {
          joinBufferSizeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_join_buffer_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value join_buffer_size = 34 [(.yandex.cloud.value) = "1024-16777216"];</code>
       */
      public Builder clearJoinBufferSize() {
        if (joinBufferSizeBuilder_ == null) {
          joinBufferSize_ = null;
          onChanged();
        } else {
          joinBufferSize_ = null;
          joinBufferSizeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_join_buffer_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value join_buffer_size = 34 [(.yandex.cloud.value) = "1024-16777216"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getJoinBufferSizeBuilder() {
        
        onChanged();
        return getJoinBufferSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_join_buffer_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value join_buffer_size = 34 [(.yandex.cloud.value) = "1024-16777216"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getJoinBufferSizeOrBuilder() {
        if (joinBufferSizeBuilder_ != null) {
          return joinBufferSizeBuilder_.getMessageOrBuilder();
        } else {
          return joinBufferSize_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : joinBufferSize_;
        }
      }
      /**
       * <pre>
       * The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_join_buffer_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value join_buffer_size = 34 [(.yandex.cloud.value) = "1024-16777216"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getJoinBufferSizeFieldBuilder() {
        if (joinBufferSizeBuilder_ == null) {
          joinBufferSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getJoinBufferSize(),
                  getParentForChildren(),
                  isClean());
          joinBufferSize_ = null;
        }
        return joinBufferSizeBuilder_;
      }

      private com.google.protobuf.Int64Value sortBufferSize_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> sortBufferSizeBuilder_;
      /**
       * <pre>
       * Each session that must perform a sort allocates a buffer of this size.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sort_buffer_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value sort_buffer_size = 35 [(.yandex.cloud.value) = "1024-16777216"];</code>
       * @return Whether the sortBufferSize field is set.
       */
      public boolean hasSortBufferSize() {
        return sortBufferSizeBuilder_ != null || sortBufferSize_ != null;
      }
      /**
       * <pre>
       * Each session that must perform a sort allocates a buffer of this size.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sort_buffer_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value sort_buffer_size = 35 [(.yandex.cloud.value) = "1024-16777216"];</code>
       * @return The sortBufferSize.
       */
      public com.google.protobuf.Int64Value getSortBufferSize() {
        if (sortBufferSizeBuilder_ == null) {
          return sortBufferSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : sortBufferSize_;
        } else {
          return sortBufferSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Each session that must perform a sort allocates a buffer of this size.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sort_buffer_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value sort_buffer_size = 35 [(.yandex.cloud.value) = "1024-16777216"];</code>
       */
      public Builder setSortBufferSize(com.google.protobuf.Int64Value value) {
        if (sortBufferSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sortBufferSize_ = value;
          onChanged();
        } else {
          sortBufferSizeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Each session that must perform a sort allocates a buffer of this size.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sort_buffer_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value sort_buffer_size = 35 [(.yandex.cloud.value) = "1024-16777216"];</code>
       */
      public Builder setSortBufferSize(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (sortBufferSizeBuilder_ == null) {
          sortBufferSize_ = builderForValue.build();
          onChanged();
        } else {
          sortBufferSizeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Each session that must perform a sort allocates a buffer of this size.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sort_buffer_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value sort_buffer_size = 35 [(.yandex.cloud.value) = "1024-16777216"];</code>
       */
      public Builder mergeSortBufferSize(com.google.protobuf.Int64Value value) {
        if (sortBufferSizeBuilder_ == null) {
          if (sortBufferSize_ != null) {
            sortBufferSize_ =
              com.google.protobuf.Int64Value.newBuilder(sortBufferSize_).mergeFrom(value).buildPartial();
          } else {
            sortBufferSize_ = value;
          }
          onChanged();
        } else {
          sortBufferSizeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Each session that must perform a sort allocates a buffer of this size.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sort_buffer_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value sort_buffer_size = 35 [(.yandex.cloud.value) = "1024-16777216"];</code>
       */
      public Builder clearSortBufferSize() {
        if (sortBufferSizeBuilder_ == null) {
          sortBufferSize_ = null;
          onChanged();
        } else {
          sortBufferSize_ = null;
          sortBufferSizeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Each session that must perform a sort allocates a buffer of this size.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sort_buffer_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value sort_buffer_size = 35 [(.yandex.cloud.value) = "1024-16777216"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getSortBufferSizeBuilder() {
        
        onChanged();
        return getSortBufferSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Each session that must perform a sort allocates a buffer of this size.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sort_buffer_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value sort_buffer_size = 35 [(.yandex.cloud.value) = "1024-16777216"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getSortBufferSizeOrBuilder() {
        if (sortBufferSizeBuilder_ != null) {
          return sortBufferSizeBuilder_.getMessageOrBuilder();
        } else {
          return sortBufferSize_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : sortBufferSize_;
        }
      }
      /**
       * <pre>
       * Each session that must perform a sort allocates a buffer of this size.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sort_buffer_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value sort_buffer_size = 35 [(.yandex.cloud.value) = "1024-16777216"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getSortBufferSizeFieldBuilder() {
        if (sortBufferSizeBuilder_ == null) {
          sortBufferSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getSortBufferSize(),
                  getParentForChildren(),
                  isClean());
          sortBufferSize_ = null;
        }
        return sortBufferSizeBuilder_;
      }

      private com.google.protobuf.Int64Value tableDefinitionCache_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> tableDefinitionCacheBuilder_;
      /**
       * <pre>
       * The number of table definitions that can be stored in the definition cache.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_definition_cache) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value table_definition_cache = 36 [(.yandex.cloud.value) = "400-524288"];</code>
       * @return Whether the tableDefinitionCache field is set.
       */
      public boolean hasTableDefinitionCache() {
        return tableDefinitionCacheBuilder_ != null || tableDefinitionCache_ != null;
      }
      /**
       * <pre>
       * The number of table definitions that can be stored in the definition cache.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_definition_cache) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value table_definition_cache = 36 [(.yandex.cloud.value) = "400-524288"];</code>
       * @return The tableDefinitionCache.
       */
      public com.google.protobuf.Int64Value getTableDefinitionCache() {
        if (tableDefinitionCacheBuilder_ == null) {
          return tableDefinitionCache_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : tableDefinitionCache_;
        } else {
          return tableDefinitionCacheBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The number of table definitions that can be stored in the definition cache.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_definition_cache) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value table_definition_cache = 36 [(.yandex.cloud.value) = "400-524288"];</code>
       */
      public Builder setTableDefinitionCache(com.google.protobuf.Int64Value value) {
        if (tableDefinitionCacheBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tableDefinitionCache_ = value;
          onChanged();
        } else {
          tableDefinitionCacheBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of table definitions that can be stored in the definition cache.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_definition_cache) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value table_definition_cache = 36 [(.yandex.cloud.value) = "400-524288"];</code>
       */
      public Builder setTableDefinitionCache(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (tableDefinitionCacheBuilder_ == null) {
          tableDefinitionCache_ = builderForValue.build();
          onChanged();
        } else {
          tableDefinitionCacheBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The number of table definitions that can be stored in the definition cache.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_definition_cache) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value table_definition_cache = 36 [(.yandex.cloud.value) = "400-524288"];</code>
       */
      public Builder mergeTableDefinitionCache(com.google.protobuf.Int64Value value) {
        if (tableDefinitionCacheBuilder_ == null) {
          if (tableDefinitionCache_ != null) {
            tableDefinitionCache_ =
              com.google.protobuf.Int64Value.newBuilder(tableDefinitionCache_).mergeFrom(value).buildPartial();
          } else {
            tableDefinitionCache_ = value;
          }
          onChanged();
        } else {
          tableDefinitionCacheBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of table definitions that can be stored in the definition cache.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_definition_cache) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value table_definition_cache = 36 [(.yandex.cloud.value) = "400-524288"];</code>
       */
      public Builder clearTableDefinitionCache() {
        if (tableDefinitionCacheBuilder_ == null) {
          tableDefinitionCache_ = null;
          onChanged();
        } else {
          tableDefinitionCache_ = null;
          tableDefinitionCacheBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The number of table definitions that can be stored in the definition cache.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_definition_cache) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value table_definition_cache = 36 [(.yandex.cloud.value) = "400-524288"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getTableDefinitionCacheBuilder() {
        
        onChanged();
        return getTableDefinitionCacheFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The number of table definitions that can be stored in the definition cache.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_definition_cache) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value table_definition_cache = 36 [(.yandex.cloud.value) = "400-524288"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getTableDefinitionCacheOrBuilder() {
        if (tableDefinitionCacheBuilder_ != null) {
          return tableDefinitionCacheBuilder_.getMessageOrBuilder();
        } else {
          return tableDefinitionCache_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : tableDefinitionCache_;
        }
      }
      /**
       * <pre>
       * The number of table definitions that can be stored in the definition cache.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_definition_cache) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value table_definition_cache = 36 [(.yandex.cloud.value) = "400-524288"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getTableDefinitionCacheFieldBuilder() {
        if (tableDefinitionCacheBuilder_ == null) {
          tableDefinitionCacheBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getTableDefinitionCache(),
                  getParentForChildren(),
                  isClean());
          tableDefinitionCache_ = null;
        }
        return tableDefinitionCacheBuilder_;
      }

      private com.google.protobuf.Int64Value tableOpenCache_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> tableOpenCacheBuilder_;
      /**
       * <pre>
       * The number of open tables for all threads.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value table_open_cache = 37 [(.yandex.cloud.value) = "400-524288"];</code>
       * @return Whether the tableOpenCache field is set.
       */
      public boolean hasTableOpenCache() {
        return tableOpenCacheBuilder_ != null || tableOpenCache_ != null;
      }
      /**
       * <pre>
       * The number of open tables for all threads.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value table_open_cache = 37 [(.yandex.cloud.value) = "400-524288"];</code>
       * @return The tableOpenCache.
       */
      public com.google.protobuf.Int64Value getTableOpenCache() {
        if (tableOpenCacheBuilder_ == null) {
          return tableOpenCache_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : tableOpenCache_;
        } else {
          return tableOpenCacheBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The number of open tables for all threads.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value table_open_cache = 37 [(.yandex.cloud.value) = "400-524288"];</code>
       */
      public Builder setTableOpenCache(com.google.protobuf.Int64Value value) {
        if (tableOpenCacheBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tableOpenCache_ = value;
          onChanged();
        } else {
          tableOpenCacheBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of open tables for all threads.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value table_open_cache = 37 [(.yandex.cloud.value) = "400-524288"];</code>
       */
      public Builder setTableOpenCache(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (tableOpenCacheBuilder_ == null) {
          tableOpenCache_ = builderForValue.build();
          onChanged();
        } else {
          tableOpenCacheBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The number of open tables for all threads.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value table_open_cache = 37 [(.yandex.cloud.value) = "400-524288"];</code>
       */
      public Builder mergeTableOpenCache(com.google.protobuf.Int64Value value) {
        if (tableOpenCacheBuilder_ == null) {
          if (tableOpenCache_ != null) {
            tableOpenCache_ =
              com.google.protobuf.Int64Value.newBuilder(tableOpenCache_).mergeFrom(value).buildPartial();
          } else {
            tableOpenCache_ = value;
          }
          onChanged();
        } else {
          tableOpenCacheBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of open tables for all threads.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value table_open_cache = 37 [(.yandex.cloud.value) = "400-524288"];</code>
       */
      public Builder clearTableOpenCache() {
        if (tableOpenCacheBuilder_ == null) {
          tableOpenCache_ = null;
          onChanged();
        } else {
          tableOpenCache_ = null;
          tableOpenCacheBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The number of open tables for all threads.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value table_open_cache = 37 [(.yandex.cloud.value) = "400-524288"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getTableOpenCacheBuilder() {
        
        onChanged();
        return getTableOpenCacheFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The number of open tables for all threads.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value table_open_cache = 37 [(.yandex.cloud.value) = "400-524288"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getTableOpenCacheOrBuilder() {
        if (tableOpenCacheBuilder_ != null) {
          return tableOpenCacheBuilder_.getMessageOrBuilder();
        } else {
          return tableOpenCache_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : tableOpenCache_;
        }
      }
      /**
       * <pre>
       * The number of open tables for all threads.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value table_open_cache = 37 [(.yandex.cloud.value) = "400-524288"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getTableOpenCacheFieldBuilder() {
        if (tableOpenCacheBuilder_ == null) {
          tableOpenCacheBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getTableOpenCache(),
                  getParentForChildren(),
                  isClean());
          tableOpenCache_ = null;
        }
        return tableOpenCacheBuilder_;
      }

      private com.google.protobuf.Int64Value tableOpenCacheInstances_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> tableOpenCacheInstancesBuilder_;
      /**
       * <pre>
       * The number of open tables cache instances.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache_instances) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value table_open_cache_instances = 38 [(.yandex.cloud.value) = "1-32"];</code>
       * @return Whether the tableOpenCacheInstances field is set.
       */
      public boolean hasTableOpenCacheInstances() {
        return tableOpenCacheInstancesBuilder_ != null || tableOpenCacheInstances_ != null;
      }
      /**
       * <pre>
       * The number of open tables cache instances.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache_instances) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value table_open_cache_instances = 38 [(.yandex.cloud.value) = "1-32"];</code>
       * @return The tableOpenCacheInstances.
       */
      public com.google.protobuf.Int64Value getTableOpenCacheInstances() {
        if (tableOpenCacheInstancesBuilder_ == null) {
          return tableOpenCacheInstances_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : tableOpenCacheInstances_;
        } else {
          return tableOpenCacheInstancesBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The number of open tables cache instances.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache_instances) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value table_open_cache_instances = 38 [(.yandex.cloud.value) = "1-32"];</code>
       */
      public Builder setTableOpenCacheInstances(com.google.protobuf.Int64Value value) {
        if (tableOpenCacheInstancesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tableOpenCacheInstances_ = value;
          onChanged();
        } else {
          tableOpenCacheInstancesBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of open tables cache instances.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache_instances) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value table_open_cache_instances = 38 [(.yandex.cloud.value) = "1-32"];</code>
       */
      public Builder setTableOpenCacheInstances(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (tableOpenCacheInstancesBuilder_ == null) {
          tableOpenCacheInstances_ = builderForValue.build();
          onChanged();
        } else {
          tableOpenCacheInstancesBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The number of open tables cache instances.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache_instances) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value table_open_cache_instances = 38 [(.yandex.cloud.value) = "1-32"];</code>
       */
      public Builder mergeTableOpenCacheInstances(com.google.protobuf.Int64Value value) {
        if (tableOpenCacheInstancesBuilder_ == null) {
          if (tableOpenCacheInstances_ != null) {
            tableOpenCacheInstances_ =
              com.google.protobuf.Int64Value.newBuilder(tableOpenCacheInstances_).mergeFrom(value).buildPartial();
          } else {
            tableOpenCacheInstances_ = value;
          }
          onChanged();
        } else {
          tableOpenCacheInstancesBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of open tables cache instances.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache_instances) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value table_open_cache_instances = 38 [(.yandex.cloud.value) = "1-32"];</code>
       */
      public Builder clearTableOpenCacheInstances() {
        if (tableOpenCacheInstancesBuilder_ == null) {
          tableOpenCacheInstances_ = null;
          onChanged();
        } else {
          tableOpenCacheInstances_ = null;
          tableOpenCacheInstancesBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The number of open tables cache instances.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache_instances) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value table_open_cache_instances = 38 [(.yandex.cloud.value) = "1-32"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getTableOpenCacheInstancesBuilder() {
        
        onChanged();
        return getTableOpenCacheInstancesFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The number of open tables cache instances.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache_instances) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value table_open_cache_instances = 38 [(.yandex.cloud.value) = "1-32"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getTableOpenCacheInstancesOrBuilder() {
        if (tableOpenCacheInstancesBuilder_ != null) {
          return tableOpenCacheInstancesBuilder_.getMessageOrBuilder();
        } else {
          return tableOpenCacheInstances_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : tableOpenCacheInstances_;
        }
      }
      /**
       * <pre>
       * The number of open tables cache instances.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_table_open_cache_instances) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value table_open_cache_instances = 38 [(.yandex.cloud.value) = "1-32"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getTableOpenCacheInstancesFieldBuilder() {
        if (tableOpenCacheInstancesBuilder_ == null) {
          tableOpenCacheInstancesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getTableOpenCacheInstances(),
                  getParentForChildren(),
                  isClean());
          tableOpenCacheInstances_ = null;
        }
        return tableOpenCacheInstancesBuilder_;
      }

      private com.google.protobuf.BoolValue explicitDefaultsForTimestamp_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> explicitDefaultsForTimestampBuilder_;
      /**
       * <pre>
       * Determines whether the server enables certain nonstandard behaviors for default values and NULL-value handling in TIMESTAMP columns.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue explicit_defaults_for_timestamp = 39;</code>
       * @return Whether the explicitDefaultsForTimestamp field is set.
       */
      public boolean hasExplicitDefaultsForTimestamp() {
        return explicitDefaultsForTimestampBuilder_ != null || explicitDefaultsForTimestamp_ != null;
      }
      /**
       * <pre>
       * Determines whether the server enables certain nonstandard behaviors for default values and NULL-value handling in TIMESTAMP columns.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue explicit_defaults_for_timestamp = 39;</code>
       * @return The explicitDefaultsForTimestamp.
       */
      public com.google.protobuf.BoolValue getExplicitDefaultsForTimestamp() {
        if (explicitDefaultsForTimestampBuilder_ == null) {
          return explicitDefaultsForTimestamp_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : explicitDefaultsForTimestamp_;
        } else {
          return explicitDefaultsForTimestampBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Determines whether the server enables certain nonstandard behaviors for default values and NULL-value handling in TIMESTAMP columns.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue explicit_defaults_for_timestamp = 39;</code>
       */
      public Builder setExplicitDefaultsForTimestamp(com.google.protobuf.BoolValue value) {
        if (explicitDefaultsForTimestampBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          explicitDefaultsForTimestamp_ = value;
          onChanged();
        } else {
          explicitDefaultsForTimestampBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Determines whether the server enables certain nonstandard behaviors for default values and NULL-value handling in TIMESTAMP columns.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue explicit_defaults_for_timestamp = 39;</code>
       */
      public Builder setExplicitDefaultsForTimestamp(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (explicitDefaultsForTimestampBuilder_ == null) {
          explicitDefaultsForTimestamp_ = builderForValue.build();
          onChanged();
        } else {
          explicitDefaultsForTimestampBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Determines whether the server enables certain nonstandard behaviors for default values and NULL-value handling in TIMESTAMP columns.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue explicit_defaults_for_timestamp = 39;</code>
       */
      public Builder mergeExplicitDefaultsForTimestamp(com.google.protobuf.BoolValue value) {
        if (explicitDefaultsForTimestampBuilder_ == null) {
          if (explicitDefaultsForTimestamp_ != null) {
            explicitDefaultsForTimestamp_ =
              com.google.protobuf.BoolValue.newBuilder(explicitDefaultsForTimestamp_).mergeFrom(value).buildPartial();
          } else {
            explicitDefaultsForTimestamp_ = value;
          }
          onChanged();
        } else {
          explicitDefaultsForTimestampBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Determines whether the server enables certain nonstandard behaviors for default values and NULL-value handling in TIMESTAMP columns.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue explicit_defaults_for_timestamp = 39;</code>
       */
      public Builder clearExplicitDefaultsForTimestamp() {
        if (explicitDefaultsForTimestampBuilder_ == null) {
          explicitDefaultsForTimestamp_ = null;
          onChanged();
        } else {
          explicitDefaultsForTimestamp_ = null;
          explicitDefaultsForTimestampBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Determines whether the server enables certain nonstandard behaviors for default values and NULL-value handling in TIMESTAMP columns.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue explicit_defaults_for_timestamp = 39;</code>
       */
      public com.google.protobuf.BoolValue.Builder getExplicitDefaultsForTimestampBuilder() {
        
        onChanged();
        return getExplicitDefaultsForTimestampFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Determines whether the server enables certain nonstandard behaviors for default values and NULL-value handling in TIMESTAMP columns.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue explicit_defaults_for_timestamp = 39;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getExplicitDefaultsForTimestampOrBuilder() {
        if (explicitDefaultsForTimestampBuilder_ != null) {
          return explicitDefaultsForTimestampBuilder_.getMessageOrBuilder();
        } else {
          return explicitDefaultsForTimestamp_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : explicitDefaultsForTimestamp_;
        }
      }
      /**
       * <pre>
       * Determines whether the server enables certain nonstandard behaviors for default values and NULL-value handling in TIMESTAMP columns.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue explicit_defaults_for_timestamp = 39;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getExplicitDefaultsForTimestampFieldBuilder() {
        if (explicitDefaultsForTimestampBuilder_ == null) {
          explicitDefaultsForTimestampBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getExplicitDefaultsForTimestamp(),
                  getParentForChildren(),
                  isClean());
          explicitDefaultsForTimestamp_ = null;
        }
        return explicitDefaultsForTimestampBuilder_;
      }

      private com.google.protobuf.Int64Value autoIncrementIncrement_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> autoIncrementIncrementBuilder_;
      /**
       * <pre>
       * Can be used to control the operation of AUTO_INCREMENT columns.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_increment) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value auto_increment_increment = 40 [(.yandex.cloud.value) = "1-65535"];</code>
       * @return Whether the autoIncrementIncrement field is set.
       */
      public boolean hasAutoIncrementIncrement() {
        return autoIncrementIncrementBuilder_ != null || autoIncrementIncrement_ != null;
      }
      /**
       * <pre>
       * Can be used to control the operation of AUTO_INCREMENT columns.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_increment) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value auto_increment_increment = 40 [(.yandex.cloud.value) = "1-65535"];</code>
       * @return The autoIncrementIncrement.
       */
      public com.google.protobuf.Int64Value getAutoIncrementIncrement() {
        if (autoIncrementIncrementBuilder_ == null) {
          return autoIncrementIncrement_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : autoIncrementIncrement_;
        } else {
          return autoIncrementIncrementBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Can be used to control the operation of AUTO_INCREMENT columns.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_increment) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value auto_increment_increment = 40 [(.yandex.cloud.value) = "1-65535"];</code>
       */
      public Builder setAutoIncrementIncrement(com.google.protobuf.Int64Value value) {
        if (autoIncrementIncrementBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          autoIncrementIncrement_ = value;
          onChanged();
        } else {
          autoIncrementIncrementBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Can be used to control the operation of AUTO_INCREMENT columns.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_increment) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value auto_increment_increment = 40 [(.yandex.cloud.value) = "1-65535"];</code>
       */
      public Builder setAutoIncrementIncrement(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (autoIncrementIncrementBuilder_ == null) {
          autoIncrementIncrement_ = builderForValue.build();
          onChanged();
        } else {
          autoIncrementIncrementBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Can be used to control the operation of AUTO_INCREMENT columns.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_increment) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value auto_increment_increment = 40 [(.yandex.cloud.value) = "1-65535"];</code>
       */
      public Builder mergeAutoIncrementIncrement(com.google.protobuf.Int64Value value) {
        if (autoIncrementIncrementBuilder_ == null) {
          if (autoIncrementIncrement_ != null) {
            autoIncrementIncrement_ =
              com.google.protobuf.Int64Value.newBuilder(autoIncrementIncrement_).mergeFrom(value).buildPartial();
          } else {
            autoIncrementIncrement_ = value;
          }
          onChanged();
        } else {
          autoIncrementIncrementBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Can be used to control the operation of AUTO_INCREMENT columns.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_increment) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value auto_increment_increment = 40 [(.yandex.cloud.value) = "1-65535"];</code>
       */
      public Builder clearAutoIncrementIncrement() {
        if (autoIncrementIncrementBuilder_ == null) {
          autoIncrementIncrement_ = null;
          onChanged();
        } else {
          autoIncrementIncrement_ = null;
          autoIncrementIncrementBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Can be used to control the operation of AUTO_INCREMENT columns.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_increment) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value auto_increment_increment = 40 [(.yandex.cloud.value) = "1-65535"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getAutoIncrementIncrementBuilder() {
        
        onChanged();
        return getAutoIncrementIncrementFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Can be used to control the operation of AUTO_INCREMENT columns.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_increment) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value auto_increment_increment = 40 [(.yandex.cloud.value) = "1-65535"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getAutoIncrementIncrementOrBuilder() {
        if (autoIncrementIncrementBuilder_ != null) {
          return autoIncrementIncrementBuilder_.getMessageOrBuilder();
        } else {
          return autoIncrementIncrement_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : autoIncrementIncrement_;
        }
      }
      /**
       * <pre>
       * Can be used to control the operation of AUTO_INCREMENT columns.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_increment) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value auto_increment_increment = 40 [(.yandex.cloud.value) = "1-65535"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getAutoIncrementIncrementFieldBuilder() {
        if (autoIncrementIncrementBuilder_ == null) {
          autoIncrementIncrementBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getAutoIncrementIncrement(),
                  getParentForChildren(),
                  isClean());
          autoIncrementIncrement_ = null;
        }
        return autoIncrementIncrementBuilder_;
      }

      private com.google.protobuf.Int64Value autoIncrementOffset_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> autoIncrementOffsetBuilder_;
      /**
       * <pre>
       * Can be used to control the operation of AUTO_INCREMENT columns.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_offset) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value auto_increment_offset = 41 [(.yandex.cloud.value) = "1-65535"];</code>
       * @return Whether the autoIncrementOffset field is set.
       */
      public boolean hasAutoIncrementOffset() {
        return autoIncrementOffsetBuilder_ != null || autoIncrementOffset_ != null;
      }
      /**
       * <pre>
       * Can be used to control the operation of AUTO_INCREMENT columns.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_offset) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value auto_increment_offset = 41 [(.yandex.cloud.value) = "1-65535"];</code>
       * @return The autoIncrementOffset.
       */
      public com.google.protobuf.Int64Value getAutoIncrementOffset() {
        if (autoIncrementOffsetBuilder_ == null) {
          return autoIncrementOffset_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : autoIncrementOffset_;
        } else {
          return autoIncrementOffsetBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Can be used to control the operation of AUTO_INCREMENT columns.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_offset) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value auto_increment_offset = 41 [(.yandex.cloud.value) = "1-65535"];</code>
       */
      public Builder setAutoIncrementOffset(com.google.protobuf.Int64Value value) {
        if (autoIncrementOffsetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          autoIncrementOffset_ = value;
          onChanged();
        } else {
          autoIncrementOffsetBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Can be used to control the operation of AUTO_INCREMENT columns.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_offset) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value auto_increment_offset = 41 [(.yandex.cloud.value) = "1-65535"];</code>
       */
      public Builder setAutoIncrementOffset(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (autoIncrementOffsetBuilder_ == null) {
          autoIncrementOffset_ = builderForValue.build();
          onChanged();
        } else {
          autoIncrementOffsetBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Can be used to control the operation of AUTO_INCREMENT columns.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_offset) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value auto_increment_offset = 41 [(.yandex.cloud.value) = "1-65535"];</code>
       */
      public Builder mergeAutoIncrementOffset(com.google.protobuf.Int64Value value) {
        if (autoIncrementOffsetBuilder_ == null) {
          if (autoIncrementOffset_ != null) {
            autoIncrementOffset_ =
              com.google.protobuf.Int64Value.newBuilder(autoIncrementOffset_).mergeFrom(value).buildPartial();
          } else {
            autoIncrementOffset_ = value;
          }
          onChanged();
        } else {
          autoIncrementOffsetBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Can be used to control the operation of AUTO_INCREMENT columns.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_offset) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value auto_increment_offset = 41 [(.yandex.cloud.value) = "1-65535"];</code>
       */
      public Builder clearAutoIncrementOffset() {
        if (autoIncrementOffsetBuilder_ == null) {
          autoIncrementOffset_ = null;
          onChanged();
        } else {
          autoIncrementOffset_ = null;
          autoIncrementOffsetBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Can be used to control the operation of AUTO_INCREMENT columns.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_offset) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value auto_increment_offset = 41 [(.yandex.cloud.value) = "1-65535"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getAutoIncrementOffsetBuilder() {
        
        onChanged();
        return getAutoIncrementOffsetFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Can be used to control the operation of AUTO_INCREMENT columns.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_offset) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value auto_increment_offset = 41 [(.yandex.cloud.value) = "1-65535"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getAutoIncrementOffsetOrBuilder() {
        if (autoIncrementOffsetBuilder_ != null) {
          return autoIncrementOffsetBuilder_.getMessageOrBuilder();
        } else {
          return autoIncrementOffset_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : autoIncrementOffset_;
        }
      }
      /**
       * <pre>
       * Can be used to control the operation of AUTO_INCREMENT columns.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_auto_increment_offset) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value auto_increment_offset = 41 [(.yandex.cloud.value) = "1-65535"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getAutoIncrementOffsetFieldBuilder() {
        if (autoIncrementOffsetBuilder_ == null) {
          autoIncrementOffsetBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getAutoIncrementOffset(),
                  getParentForChildren(),
                  isClean());
          autoIncrementOffset_ = null;
        }
        return autoIncrementOffsetBuilder_;
      }

      private com.google.protobuf.Int64Value syncBinlog_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> syncBinlogBuilder_;
      /**
       * <pre>
       * Controls how often the MySQL server synchronizes the binary log to disk.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_sync_binlog) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value sync_binlog = 42 [(.yandex.cloud.value) = "0-4096"];</code>
       * @return Whether the syncBinlog field is set.
       */
      public boolean hasSyncBinlog() {
        return syncBinlogBuilder_ != null || syncBinlog_ != null;
      }
      /**
       * <pre>
       * Controls how often the MySQL server synchronizes the binary log to disk.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_sync_binlog) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value sync_binlog = 42 [(.yandex.cloud.value) = "0-4096"];</code>
       * @return The syncBinlog.
       */
      public com.google.protobuf.Int64Value getSyncBinlog() {
        if (syncBinlogBuilder_ == null) {
          return syncBinlog_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : syncBinlog_;
        } else {
          return syncBinlogBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Controls how often the MySQL server synchronizes the binary log to disk.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_sync_binlog) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value sync_binlog = 42 [(.yandex.cloud.value) = "0-4096"];</code>
       */
      public Builder setSyncBinlog(com.google.protobuf.Int64Value value) {
        if (syncBinlogBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          syncBinlog_ = value;
          onChanged();
        } else {
          syncBinlogBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Controls how often the MySQL server synchronizes the binary log to disk.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_sync_binlog) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value sync_binlog = 42 [(.yandex.cloud.value) = "0-4096"];</code>
       */
      public Builder setSyncBinlog(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (syncBinlogBuilder_ == null) {
          syncBinlog_ = builderForValue.build();
          onChanged();
        } else {
          syncBinlogBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Controls how often the MySQL server synchronizes the binary log to disk.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_sync_binlog) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value sync_binlog = 42 [(.yandex.cloud.value) = "0-4096"];</code>
       */
      public Builder mergeSyncBinlog(com.google.protobuf.Int64Value value) {
        if (syncBinlogBuilder_ == null) {
          if (syncBinlog_ != null) {
            syncBinlog_ =
              com.google.protobuf.Int64Value.newBuilder(syncBinlog_).mergeFrom(value).buildPartial();
          } else {
            syncBinlog_ = value;
          }
          onChanged();
        } else {
          syncBinlogBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Controls how often the MySQL server synchronizes the binary log to disk.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_sync_binlog) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value sync_binlog = 42 [(.yandex.cloud.value) = "0-4096"];</code>
       */
      public Builder clearSyncBinlog() {
        if (syncBinlogBuilder_ == null) {
          syncBinlog_ = null;
          onChanged();
        } else {
          syncBinlog_ = null;
          syncBinlogBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Controls how often the MySQL server synchronizes the binary log to disk.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_sync_binlog) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value sync_binlog = 42 [(.yandex.cloud.value) = "0-4096"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getSyncBinlogBuilder() {
        
        onChanged();
        return getSyncBinlogFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Controls how often the MySQL server synchronizes the binary log to disk.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_sync_binlog) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value sync_binlog = 42 [(.yandex.cloud.value) = "0-4096"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getSyncBinlogOrBuilder() {
        if (syncBinlogBuilder_ != null) {
          return syncBinlogBuilder_.getMessageOrBuilder();
        } else {
          return syncBinlog_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : syncBinlog_;
        }
      }
      /**
       * <pre>
       * Controls how often the MySQL server synchronizes the binary log to disk.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_sync_binlog) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value sync_binlog = 42 [(.yandex.cloud.value) = "0-4096"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getSyncBinlogFieldBuilder() {
        if (syncBinlogBuilder_ == null) {
          syncBinlogBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getSyncBinlog(),
                  getParentForChildren(),
                  isClean());
          syncBinlog_ = null;
        }
        return syncBinlogBuilder_;
      }

      private com.google.protobuf.Int64Value binlogCacheSize_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> binlogCacheSizeBuilder_;
      /**
       * <pre>
       * The size of the cache to hold changes to the binary log during a transaction.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_cache_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value binlog_cache_size = 43 [(.yandex.cloud.value) = "4096-67108864"];</code>
       * @return Whether the binlogCacheSize field is set.
       */
      public boolean hasBinlogCacheSize() {
        return binlogCacheSizeBuilder_ != null || binlogCacheSize_ != null;
      }
      /**
       * <pre>
       * The size of the cache to hold changes to the binary log during a transaction.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_cache_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value binlog_cache_size = 43 [(.yandex.cloud.value) = "4096-67108864"];</code>
       * @return The binlogCacheSize.
       */
      public com.google.protobuf.Int64Value getBinlogCacheSize() {
        if (binlogCacheSizeBuilder_ == null) {
          return binlogCacheSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : binlogCacheSize_;
        } else {
          return binlogCacheSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The size of the cache to hold changes to the binary log during a transaction.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_cache_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value binlog_cache_size = 43 [(.yandex.cloud.value) = "4096-67108864"];</code>
       */
      public Builder setBinlogCacheSize(com.google.protobuf.Int64Value value) {
        if (binlogCacheSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          binlogCacheSize_ = value;
          onChanged();
        } else {
          binlogCacheSizeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The size of the cache to hold changes to the binary log during a transaction.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_cache_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value binlog_cache_size = 43 [(.yandex.cloud.value) = "4096-67108864"];</code>
       */
      public Builder setBinlogCacheSize(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (binlogCacheSizeBuilder_ == null) {
          binlogCacheSize_ = builderForValue.build();
          onChanged();
        } else {
          binlogCacheSizeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The size of the cache to hold changes to the binary log during a transaction.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_cache_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value binlog_cache_size = 43 [(.yandex.cloud.value) = "4096-67108864"];</code>
       */
      public Builder mergeBinlogCacheSize(com.google.protobuf.Int64Value value) {
        if (binlogCacheSizeBuilder_ == null) {
          if (binlogCacheSize_ != null) {
            binlogCacheSize_ =
              com.google.protobuf.Int64Value.newBuilder(binlogCacheSize_).mergeFrom(value).buildPartial();
          } else {
            binlogCacheSize_ = value;
          }
          onChanged();
        } else {
          binlogCacheSizeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The size of the cache to hold changes to the binary log during a transaction.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_cache_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value binlog_cache_size = 43 [(.yandex.cloud.value) = "4096-67108864"];</code>
       */
      public Builder clearBinlogCacheSize() {
        if (binlogCacheSizeBuilder_ == null) {
          binlogCacheSize_ = null;
          onChanged();
        } else {
          binlogCacheSize_ = null;
          binlogCacheSizeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The size of the cache to hold changes to the binary log during a transaction.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_cache_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value binlog_cache_size = 43 [(.yandex.cloud.value) = "4096-67108864"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getBinlogCacheSizeBuilder() {
        
        onChanged();
        return getBinlogCacheSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The size of the cache to hold changes to the binary log during a transaction.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_cache_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value binlog_cache_size = 43 [(.yandex.cloud.value) = "4096-67108864"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getBinlogCacheSizeOrBuilder() {
        if (binlogCacheSizeBuilder_ != null) {
          return binlogCacheSizeBuilder_.getMessageOrBuilder();
        } else {
          return binlogCacheSize_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : binlogCacheSize_;
        }
      }
      /**
       * <pre>
       * The size of the cache to hold changes to the binary log during a transaction.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_cache_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value binlog_cache_size = 43 [(.yandex.cloud.value) = "4096-67108864"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getBinlogCacheSizeFieldBuilder() {
        if (binlogCacheSizeBuilder_ == null) {
          binlogCacheSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getBinlogCacheSize(),
                  getParentForChildren(),
                  isClean());
          binlogCacheSize_ = null;
        }
        return binlogCacheSizeBuilder_;
      }

      private com.google.protobuf.Int64Value binlogGroupCommitSyncDelay_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> binlogGroupCommitSyncDelayBuilder_;
      /**
       * <pre>
       * Controls how many microseconds the binary log commit waits before synchronizing the binary log file to disk.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_group_commit_sync_delay) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value binlog_group_commit_sync_delay = 44 [(.yandex.cloud.value) = "0-50000"];</code>
       * @return Whether the binlogGroupCommitSyncDelay field is set.
       */
      public boolean hasBinlogGroupCommitSyncDelay() {
        return binlogGroupCommitSyncDelayBuilder_ != null || binlogGroupCommitSyncDelay_ != null;
      }
      /**
       * <pre>
       * Controls how many microseconds the binary log commit waits before synchronizing the binary log file to disk.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_group_commit_sync_delay) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value binlog_group_commit_sync_delay = 44 [(.yandex.cloud.value) = "0-50000"];</code>
       * @return The binlogGroupCommitSyncDelay.
       */
      public com.google.protobuf.Int64Value getBinlogGroupCommitSyncDelay() {
        if (binlogGroupCommitSyncDelayBuilder_ == null) {
          return binlogGroupCommitSyncDelay_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : binlogGroupCommitSyncDelay_;
        } else {
          return binlogGroupCommitSyncDelayBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Controls how many microseconds the binary log commit waits before synchronizing the binary log file to disk.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_group_commit_sync_delay) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value binlog_group_commit_sync_delay = 44 [(.yandex.cloud.value) = "0-50000"];</code>
       */
      public Builder setBinlogGroupCommitSyncDelay(com.google.protobuf.Int64Value value) {
        if (binlogGroupCommitSyncDelayBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          binlogGroupCommitSyncDelay_ = value;
          onChanged();
        } else {
          binlogGroupCommitSyncDelayBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Controls how many microseconds the binary log commit waits before synchronizing the binary log file to disk.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_group_commit_sync_delay) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value binlog_group_commit_sync_delay = 44 [(.yandex.cloud.value) = "0-50000"];</code>
       */
      public Builder setBinlogGroupCommitSyncDelay(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (binlogGroupCommitSyncDelayBuilder_ == null) {
          binlogGroupCommitSyncDelay_ = builderForValue.build();
          onChanged();
        } else {
          binlogGroupCommitSyncDelayBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Controls how many microseconds the binary log commit waits before synchronizing the binary log file to disk.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_group_commit_sync_delay) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value binlog_group_commit_sync_delay = 44 [(.yandex.cloud.value) = "0-50000"];</code>
       */
      public Builder mergeBinlogGroupCommitSyncDelay(com.google.protobuf.Int64Value value) {
        if (binlogGroupCommitSyncDelayBuilder_ == null) {
          if (binlogGroupCommitSyncDelay_ != null) {
            binlogGroupCommitSyncDelay_ =
              com.google.protobuf.Int64Value.newBuilder(binlogGroupCommitSyncDelay_).mergeFrom(value).buildPartial();
          } else {
            binlogGroupCommitSyncDelay_ = value;
          }
          onChanged();
        } else {
          binlogGroupCommitSyncDelayBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Controls how many microseconds the binary log commit waits before synchronizing the binary log file to disk.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_group_commit_sync_delay) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value binlog_group_commit_sync_delay = 44 [(.yandex.cloud.value) = "0-50000"];</code>
       */
      public Builder clearBinlogGroupCommitSyncDelay() {
        if (binlogGroupCommitSyncDelayBuilder_ == null) {
          binlogGroupCommitSyncDelay_ = null;
          onChanged();
        } else {
          binlogGroupCommitSyncDelay_ = null;
          binlogGroupCommitSyncDelayBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Controls how many microseconds the binary log commit waits before synchronizing the binary log file to disk.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_group_commit_sync_delay) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value binlog_group_commit_sync_delay = 44 [(.yandex.cloud.value) = "0-50000"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getBinlogGroupCommitSyncDelayBuilder() {
        
        onChanged();
        return getBinlogGroupCommitSyncDelayFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Controls how many microseconds the binary log commit waits before synchronizing the binary log file to disk.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_group_commit_sync_delay) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value binlog_group_commit_sync_delay = 44 [(.yandex.cloud.value) = "0-50000"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getBinlogGroupCommitSyncDelayOrBuilder() {
        if (binlogGroupCommitSyncDelayBuilder_ != null) {
          return binlogGroupCommitSyncDelayBuilder_.getMessageOrBuilder();
        } else {
          return binlogGroupCommitSyncDelay_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : binlogGroupCommitSyncDelay_;
        }
      }
      /**
       * <pre>
       * Controls how many microseconds the binary log commit waits before synchronizing the binary log file to disk.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_group_commit_sync_delay) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value binlog_group_commit_sync_delay = 44 [(.yandex.cloud.value) = "0-50000"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getBinlogGroupCommitSyncDelayFieldBuilder() {
        if (binlogGroupCommitSyncDelayBuilder_ == null) {
          binlogGroupCommitSyncDelayBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getBinlogGroupCommitSyncDelay(),
                  getParentForChildren(),
                  isClean());
          binlogGroupCommitSyncDelay_ = null;
        }
        return binlogGroupCommitSyncDelayBuilder_;
      }

      private int binlogRowImage_ = 0;
      /**
       * <pre>
       * For MySQL row-based replication, this variable determines how row images are written to the binary log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_image) for details.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.BinlogRowImage binlog_row_image = 45;</code>
       * @return The enum numeric value on the wire for binlogRowImage.
       */
      @java.lang.Override public int getBinlogRowImageValue() {
        return binlogRowImage_;
      }
      /**
       * <pre>
       * For MySQL row-based replication, this variable determines how row images are written to the binary log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_image) for details.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.BinlogRowImage binlog_row_image = 45;</code>
       * @param value The enum numeric value on the wire for binlogRowImage to set.
       * @return This builder for chaining.
       */
      public Builder setBinlogRowImageValue(int value) {
        
        binlogRowImage_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For MySQL row-based replication, this variable determines how row images are written to the binary log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_image) for details.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.BinlogRowImage binlog_row_image = 45;</code>
       * @return The binlogRowImage.
       */
      @java.lang.Override
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.BinlogRowImage getBinlogRowImage() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.BinlogRowImage result = yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.BinlogRowImage.valueOf(binlogRowImage_);
        return result == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.BinlogRowImage.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * For MySQL row-based replication, this variable determines how row images are written to the binary log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_image) for details.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.BinlogRowImage binlog_row_image = 45;</code>
       * @param value The binlogRowImage to set.
       * @return This builder for chaining.
       */
      public Builder setBinlogRowImage(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.BinlogRowImage value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        binlogRowImage_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For MySQL row-based replication, this variable determines how row images are written to the binary log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_row_image) for details.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.BinlogRowImage binlog_row_image = 45;</code>
       * @return This builder for chaining.
       */
      public Builder clearBinlogRowImage() {
        
        binlogRowImage_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.BoolValue binlogRowsQueryLogEvents_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> binlogRowsQueryLogEventsBuilder_;
      /**
       * <pre>
       * When enabled, it causes the server to write informational log events such as row query log events into its binary log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_rows_query_log_events) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue binlog_rows_query_log_events = 46;</code>
       * @return Whether the binlogRowsQueryLogEvents field is set.
       */
      public boolean hasBinlogRowsQueryLogEvents() {
        return binlogRowsQueryLogEventsBuilder_ != null || binlogRowsQueryLogEvents_ != null;
      }
      /**
       * <pre>
       * When enabled, it causes the server to write informational log events such as row query log events into its binary log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_rows_query_log_events) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue binlog_rows_query_log_events = 46;</code>
       * @return The binlogRowsQueryLogEvents.
       */
      public com.google.protobuf.BoolValue getBinlogRowsQueryLogEvents() {
        if (binlogRowsQueryLogEventsBuilder_ == null) {
          return binlogRowsQueryLogEvents_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : binlogRowsQueryLogEvents_;
        } else {
          return binlogRowsQueryLogEventsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * When enabled, it causes the server to write informational log events such as row query log events into its binary log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_rows_query_log_events) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue binlog_rows_query_log_events = 46;</code>
       */
      public Builder setBinlogRowsQueryLogEvents(com.google.protobuf.BoolValue value) {
        if (binlogRowsQueryLogEventsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          binlogRowsQueryLogEvents_ = value;
          onChanged();
        } else {
          binlogRowsQueryLogEventsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * When enabled, it causes the server to write informational log events such as row query log events into its binary log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_rows_query_log_events) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue binlog_rows_query_log_events = 46;</code>
       */
      public Builder setBinlogRowsQueryLogEvents(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (binlogRowsQueryLogEventsBuilder_ == null) {
          binlogRowsQueryLogEvents_ = builderForValue.build();
          onChanged();
        } else {
          binlogRowsQueryLogEventsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * When enabled, it causes the server to write informational log events such as row query log events into its binary log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_rows_query_log_events) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue binlog_rows_query_log_events = 46;</code>
       */
      public Builder mergeBinlogRowsQueryLogEvents(com.google.protobuf.BoolValue value) {
        if (binlogRowsQueryLogEventsBuilder_ == null) {
          if (binlogRowsQueryLogEvents_ != null) {
            binlogRowsQueryLogEvents_ =
              com.google.protobuf.BoolValue.newBuilder(binlogRowsQueryLogEvents_).mergeFrom(value).buildPartial();
          } else {
            binlogRowsQueryLogEvents_ = value;
          }
          onChanged();
        } else {
          binlogRowsQueryLogEventsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * When enabled, it causes the server to write informational log events such as row query log events into its binary log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_rows_query_log_events) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue binlog_rows_query_log_events = 46;</code>
       */
      public Builder clearBinlogRowsQueryLogEvents() {
        if (binlogRowsQueryLogEventsBuilder_ == null) {
          binlogRowsQueryLogEvents_ = null;
          onChanged();
        } else {
          binlogRowsQueryLogEvents_ = null;
          binlogRowsQueryLogEventsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * When enabled, it causes the server to write informational log events such as row query log events into its binary log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_rows_query_log_events) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue binlog_rows_query_log_events = 46;</code>
       */
      public com.google.protobuf.BoolValue.Builder getBinlogRowsQueryLogEventsBuilder() {
        
        onChanged();
        return getBinlogRowsQueryLogEventsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * When enabled, it causes the server to write informational log events such as row query log events into its binary log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_rows_query_log_events) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue binlog_rows_query_log_events = 46;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getBinlogRowsQueryLogEventsOrBuilder() {
        if (binlogRowsQueryLogEventsBuilder_ != null) {
          return binlogRowsQueryLogEventsBuilder_.getMessageOrBuilder();
        } else {
          return binlogRowsQueryLogEvents_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : binlogRowsQueryLogEvents_;
        }
      }
      /**
       * <pre>
       * When enabled, it causes the server to write informational log events such as row query log events into its binary log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_rows_query_log_events) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue binlog_rows_query_log_events = 46;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getBinlogRowsQueryLogEventsFieldBuilder() {
        if (binlogRowsQueryLogEventsBuilder_ == null) {
          binlogRowsQueryLogEventsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getBinlogRowsQueryLogEvents(),
                  getParentForChildren(),
                  isClean());
          binlogRowsQueryLogEvents_ = null;
        }
        return binlogRowsQueryLogEventsBuilder_;
      }

      private com.google.protobuf.Int64Value rplSemiSyncMasterWaitForSlaveCount_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> rplSemiSyncMasterWaitForSlaveCountBuilder_;
      /**
       * <pre>
       * The number of replica acknowledgments the source must receive per transaction before proceeding.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_rpl_semi_sync_master_wait_for_slave_count) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value rpl_semi_sync_master_wait_for_slave_count = 47 [(.yandex.cloud.value) = "1-2"];</code>
       * @return Whether the rplSemiSyncMasterWaitForSlaveCount field is set.
       */
      public boolean hasRplSemiSyncMasterWaitForSlaveCount() {
        return rplSemiSyncMasterWaitForSlaveCountBuilder_ != null || rplSemiSyncMasterWaitForSlaveCount_ != null;
      }
      /**
       * <pre>
       * The number of replica acknowledgments the source must receive per transaction before proceeding.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_rpl_semi_sync_master_wait_for_slave_count) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value rpl_semi_sync_master_wait_for_slave_count = 47 [(.yandex.cloud.value) = "1-2"];</code>
       * @return The rplSemiSyncMasterWaitForSlaveCount.
       */
      public com.google.protobuf.Int64Value getRplSemiSyncMasterWaitForSlaveCount() {
        if (rplSemiSyncMasterWaitForSlaveCountBuilder_ == null) {
          return rplSemiSyncMasterWaitForSlaveCount_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : rplSemiSyncMasterWaitForSlaveCount_;
        } else {
          return rplSemiSyncMasterWaitForSlaveCountBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The number of replica acknowledgments the source must receive per transaction before proceeding.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_rpl_semi_sync_master_wait_for_slave_count) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value rpl_semi_sync_master_wait_for_slave_count = 47 [(.yandex.cloud.value) = "1-2"];</code>
       */
      public Builder setRplSemiSyncMasterWaitForSlaveCount(com.google.protobuf.Int64Value value) {
        if (rplSemiSyncMasterWaitForSlaveCountBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          rplSemiSyncMasterWaitForSlaveCount_ = value;
          onChanged();
        } else {
          rplSemiSyncMasterWaitForSlaveCountBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of replica acknowledgments the source must receive per transaction before proceeding.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_rpl_semi_sync_master_wait_for_slave_count) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value rpl_semi_sync_master_wait_for_slave_count = 47 [(.yandex.cloud.value) = "1-2"];</code>
       */
      public Builder setRplSemiSyncMasterWaitForSlaveCount(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (rplSemiSyncMasterWaitForSlaveCountBuilder_ == null) {
          rplSemiSyncMasterWaitForSlaveCount_ = builderForValue.build();
          onChanged();
        } else {
          rplSemiSyncMasterWaitForSlaveCountBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The number of replica acknowledgments the source must receive per transaction before proceeding.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_rpl_semi_sync_master_wait_for_slave_count) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value rpl_semi_sync_master_wait_for_slave_count = 47 [(.yandex.cloud.value) = "1-2"];</code>
       */
      public Builder mergeRplSemiSyncMasterWaitForSlaveCount(com.google.protobuf.Int64Value value) {
        if (rplSemiSyncMasterWaitForSlaveCountBuilder_ == null) {
          if (rplSemiSyncMasterWaitForSlaveCount_ != null) {
            rplSemiSyncMasterWaitForSlaveCount_ =
              com.google.protobuf.Int64Value.newBuilder(rplSemiSyncMasterWaitForSlaveCount_).mergeFrom(value).buildPartial();
          } else {
            rplSemiSyncMasterWaitForSlaveCount_ = value;
          }
          onChanged();
        } else {
          rplSemiSyncMasterWaitForSlaveCountBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of replica acknowledgments the source must receive per transaction before proceeding.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_rpl_semi_sync_master_wait_for_slave_count) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value rpl_semi_sync_master_wait_for_slave_count = 47 [(.yandex.cloud.value) = "1-2"];</code>
       */
      public Builder clearRplSemiSyncMasterWaitForSlaveCount() {
        if (rplSemiSyncMasterWaitForSlaveCountBuilder_ == null) {
          rplSemiSyncMasterWaitForSlaveCount_ = null;
          onChanged();
        } else {
          rplSemiSyncMasterWaitForSlaveCount_ = null;
          rplSemiSyncMasterWaitForSlaveCountBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The number of replica acknowledgments the source must receive per transaction before proceeding.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_rpl_semi_sync_master_wait_for_slave_count) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value rpl_semi_sync_master_wait_for_slave_count = 47 [(.yandex.cloud.value) = "1-2"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getRplSemiSyncMasterWaitForSlaveCountBuilder() {
        
        onChanged();
        return getRplSemiSyncMasterWaitForSlaveCountFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The number of replica acknowledgments the source must receive per transaction before proceeding.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_rpl_semi_sync_master_wait_for_slave_count) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value rpl_semi_sync_master_wait_for_slave_count = 47 [(.yandex.cloud.value) = "1-2"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getRplSemiSyncMasterWaitForSlaveCountOrBuilder() {
        if (rplSemiSyncMasterWaitForSlaveCountBuilder_ != null) {
          return rplSemiSyncMasterWaitForSlaveCountBuilder_.getMessageOrBuilder();
        } else {
          return rplSemiSyncMasterWaitForSlaveCount_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : rplSemiSyncMasterWaitForSlaveCount_;
        }
      }
      /**
       * <pre>
       * The number of replica acknowledgments the source must receive per transaction before proceeding.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-source.html#sysvar_rpl_semi_sync_master_wait_for_slave_count) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value rpl_semi_sync_master_wait_for_slave_count = 47 [(.yandex.cloud.value) = "1-2"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getRplSemiSyncMasterWaitForSlaveCountFieldBuilder() {
        if (rplSemiSyncMasterWaitForSlaveCountBuilder_ == null) {
          rplSemiSyncMasterWaitForSlaveCountBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getRplSemiSyncMasterWaitForSlaveCount(),
                  getParentForChildren(),
                  isClean());
          rplSemiSyncMasterWaitForSlaveCount_ = null;
        }
        return rplSemiSyncMasterWaitForSlaveCountBuilder_;
      }

      private int slaveParallelType_ = 0;
      /**
       * <pre>
       * When using a multi-threaded replica, this variable specifies the policy used to decide which transactions are allowed to execute in parallel on the replica.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_slave_parallel_type) for details.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SlaveParallelType slave_parallel_type = 48;</code>
       * @return The enum numeric value on the wire for slaveParallelType.
       */
      @java.lang.Override public int getSlaveParallelTypeValue() {
        return slaveParallelType_;
      }
      /**
       * <pre>
       * When using a multi-threaded replica, this variable specifies the policy used to decide which transactions are allowed to execute in parallel on the replica.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_slave_parallel_type) for details.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SlaveParallelType slave_parallel_type = 48;</code>
       * @param value The enum numeric value on the wire for slaveParallelType to set.
       * @return This builder for chaining.
       */
      public Builder setSlaveParallelTypeValue(int value) {
        
        slaveParallelType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * When using a multi-threaded replica, this variable specifies the policy used to decide which transactions are allowed to execute in parallel on the replica.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_slave_parallel_type) for details.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SlaveParallelType slave_parallel_type = 48;</code>
       * @return The slaveParallelType.
       */
      @java.lang.Override
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SlaveParallelType getSlaveParallelType() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SlaveParallelType result = yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SlaveParallelType.valueOf(slaveParallelType_);
        return result == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SlaveParallelType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * When using a multi-threaded replica, this variable specifies the policy used to decide which transactions are allowed to execute in parallel on the replica.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_slave_parallel_type) for details.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SlaveParallelType slave_parallel_type = 48;</code>
       * @param value The slaveParallelType to set.
       * @return This builder for chaining.
       */
      public Builder setSlaveParallelType(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.SlaveParallelType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        slaveParallelType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * When using a multi-threaded replica, this variable specifies the policy used to decide which transactions are allowed to execute in parallel on the replica.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_slave_parallel_type) for details.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.SlaveParallelType slave_parallel_type = 48;</code>
       * @return This builder for chaining.
       */
      public Builder clearSlaveParallelType() {
        
        slaveParallelType_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Int64Value slaveParallelWorkers_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> slaveParallelWorkersBuilder_;
      /**
       * <pre>
       * Sets the number of applier threads for executing replication transactions in parallel.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_slave_parallel_workers) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value slave_parallel_workers = 49 [(.yandex.cloud.value) = "0-64"];</code>
       * @return Whether the slaveParallelWorkers field is set.
       */
      public boolean hasSlaveParallelWorkers() {
        return slaveParallelWorkersBuilder_ != null || slaveParallelWorkers_ != null;
      }
      /**
       * <pre>
       * Sets the number of applier threads for executing replication transactions in parallel.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_slave_parallel_workers) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value slave_parallel_workers = 49 [(.yandex.cloud.value) = "0-64"];</code>
       * @return The slaveParallelWorkers.
       */
      public com.google.protobuf.Int64Value getSlaveParallelWorkers() {
        if (slaveParallelWorkersBuilder_ == null) {
          return slaveParallelWorkers_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : slaveParallelWorkers_;
        } else {
          return slaveParallelWorkersBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Sets the number of applier threads for executing replication transactions in parallel.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_slave_parallel_workers) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value slave_parallel_workers = 49 [(.yandex.cloud.value) = "0-64"];</code>
       */
      public Builder setSlaveParallelWorkers(com.google.protobuf.Int64Value value) {
        if (slaveParallelWorkersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          slaveParallelWorkers_ = value;
          onChanged();
        } else {
          slaveParallelWorkersBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Sets the number of applier threads for executing replication transactions in parallel.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_slave_parallel_workers) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value slave_parallel_workers = 49 [(.yandex.cloud.value) = "0-64"];</code>
       */
      public Builder setSlaveParallelWorkers(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (slaveParallelWorkersBuilder_ == null) {
          slaveParallelWorkers_ = builderForValue.build();
          onChanged();
        } else {
          slaveParallelWorkersBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Sets the number of applier threads for executing replication transactions in parallel.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_slave_parallel_workers) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value slave_parallel_workers = 49 [(.yandex.cloud.value) = "0-64"];</code>
       */
      public Builder mergeSlaveParallelWorkers(com.google.protobuf.Int64Value value) {
        if (slaveParallelWorkersBuilder_ == null) {
          if (slaveParallelWorkers_ != null) {
            slaveParallelWorkers_ =
              com.google.protobuf.Int64Value.newBuilder(slaveParallelWorkers_).mergeFrom(value).buildPartial();
          } else {
            slaveParallelWorkers_ = value;
          }
          onChanged();
        } else {
          slaveParallelWorkersBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Sets the number of applier threads for executing replication transactions in parallel.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_slave_parallel_workers) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value slave_parallel_workers = 49 [(.yandex.cloud.value) = "0-64"];</code>
       */
      public Builder clearSlaveParallelWorkers() {
        if (slaveParallelWorkersBuilder_ == null) {
          slaveParallelWorkers_ = null;
          onChanged();
        } else {
          slaveParallelWorkers_ = null;
          slaveParallelWorkersBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Sets the number of applier threads for executing replication transactions in parallel.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_slave_parallel_workers) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value slave_parallel_workers = 49 [(.yandex.cloud.value) = "0-64"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getSlaveParallelWorkersBuilder() {
        
        onChanged();
        return getSlaveParallelWorkersFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Sets the number of applier threads for executing replication transactions in parallel.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_slave_parallel_workers) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value slave_parallel_workers = 49 [(.yandex.cloud.value) = "0-64"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getSlaveParallelWorkersOrBuilder() {
        if (slaveParallelWorkersBuilder_ != null) {
          return slaveParallelWorkersBuilder_.getMessageOrBuilder();
        } else {
          return slaveParallelWorkers_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : slaveParallelWorkers_;
        }
      }
      /**
       * <pre>
       * Sets the number of applier threads for executing replication transactions in parallel.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_slave_parallel_workers) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value slave_parallel_workers = 49 [(.yandex.cloud.value) = "0-64"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getSlaveParallelWorkersFieldBuilder() {
        if (slaveParallelWorkersBuilder_ == null) {
          slaveParallelWorkersBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getSlaveParallelWorkers(),
                  getParentForChildren(),
                  isClean());
          slaveParallelWorkers_ = null;
        }
        return slaveParallelWorkersBuilder_;
      }

      private com.google.protobuf.Int64Value regexpTimeLimit_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> regexpTimeLimitBuilder_;
      /**
       * <pre>
       * The time limit for regular expression matching operations performed by REGEXP_LIKE and similar functions.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_regexp_time_limit) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value regexp_time_limit = 50 [(.yandex.cloud.value) = "0-1048576"];</code>
       * @return Whether the regexpTimeLimit field is set.
       */
      public boolean hasRegexpTimeLimit() {
        return regexpTimeLimitBuilder_ != null || regexpTimeLimit_ != null;
      }
      /**
       * <pre>
       * The time limit for regular expression matching operations performed by REGEXP_LIKE and similar functions.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_regexp_time_limit) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value regexp_time_limit = 50 [(.yandex.cloud.value) = "0-1048576"];</code>
       * @return The regexpTimeLimit.
       */
      public com.google.protobuf.Int64Value getRegexpTimeLimit() {
        if (regexpTimeLimitBuilder_ == null) {
          return regexpTimeLimit_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : regexpTimeLimit_;
        } else {
          return regexpTimeLimitBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The time limit for regular expression matching operations performed by REGEXP_LIKE and similar functions.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_regexp_time_limit) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value regexp_time_limit = 50 [(.yandex.cloud.value) = "0-1048576"];</code>
       */
      public Builder setRegexpTimeLimit(com.google.protobuf.Int64Value value) {
        if (regexpTimeLimitBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          regexpTimeLimit_ = value;
          onChanged();
        } else {
          regexpTimeLimitBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The time limit for regular expression matching operations performed by REGEXP_LIKE and similar functions.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_regexp_time_limit) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value regexp_time_limit = 50 [(.yandex.cloud.value) = "0-1048576"];</code>
       */
      public Builder setRegexpTimeLimit(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (regexpTimeLimitBuilder_ == null) {
          regexpTimeLimit_ = builderForValue.build();
          onChanged();
        } else {
          regexpTimeLimitBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The time limit for regular expression matching operations performed by REGEXP_LIKE and similar functions.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_regexp_time_limit) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value regexp_time_limit = 50 [(.yandex.cloud.value) = "0-1048576"];</code>
       */
      public Builder mergeRegexpTimeLimit(com.google.protobuf.Int64Value value) {
        if (regexpTimeLimitBuilder_ == null) {
          if (regexpTimeLimit_ != null) {
            regexpTimeLimit_ =
              com.google.protobuf.Int64Value.newBuilder(regexpTimeLimit_).mergeFrom(value).buildPartial();
          } else {
            regexpTimeLimit_ = value;
          }
          onChanged();
        } else {
          regexpTimeLimitBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The time limit for regular expression matching operations performed by REGEXP_LIKE and similar functions.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_regexp_time_limit) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value regexp_time_limit = 50 [(.yandex.cloud.value) = "0-1048576"];</code>
       */
      public Builder clearRegexpTimeLimit() {
        if (regexpTimeLimitBuilder_ == null) {
          regexpTimeLimit_ = null;
          onChanged();
        } else {
          regexpTimeLimit_ = null;
          regexpTimeLimitBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The time limit for regular expression matching operations performed by REGEXP_LIKE and similar functions.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_regexp_time_limit) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value regexp_time_limit = 50 [(.yandex.cloud.value) = "0-1048576"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getRegexpTimeLimitBuilder() {
        
        onChanged();
        return getRegexpTimeLimitFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The time limit for regular expression matching operations performed by REGEXP_LIKE and similar functions.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_regexp_time_limit) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value regexp_time_limit = 50 [(.yandex.cloud.value) = "0-1048576"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getRegexpTimeLimitOrBuilder() {
        if (regexpTimeLimitBuilder_ != null) {
          return regexpTimeLimitBuilder_.getMessageOrBuilder();
        } else {
          return regexpTimeLimit_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : regexpTimeLimit_;
        }
      }
      /**
       * <pre>
       * The time limit for regular expression matching operations performed by REGEXP_LIKE and similar functions.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_regexp_time_limit) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value regexp_time_limit = 50 [(.yandex.cloud.value) = "0-1048576"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getRegexpTimeLimitFieldBuilder() {
        if (regexpTimeLimitBuilder_ == null) {
          regexpTimeLimitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getRegexpTimeLimit(),
                  getParentForChildren(),
                  isClean());
          regexpTimeLimit_ = null;
        }
        return regexpTimeLimitBuilder_;
      }

      private com.google.protobuf.Int64Value mdbPreserveBinlogBytes_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> mdbPreserveBinlogBytesBuilder_;
      /**
       * <pre>
       * The size of the binary log to hold.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_preserve_binlog_bytes = 51 [(.yandex.cloud.value) = "1073741824-1099511627776"];</code>
       * @return Whether the mdbPreserveBinlogBytes field is set.
       */
      public boolean hasMdbPreserveBinlogBytes() {
        return mdbPreserveBinlogBytesBuilder_ != null || mdbPreserveBinlogBytes_ != null;
      }
      /**
       * <pre>
       * The size of the binary log to hold.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_preserve_binlog_bytes = 51 [(.yandex.cloud.value) = "1073741824-1099511627776"];</code>
       * @return The mdbPreserveBinlogBytes.
       */
      public com.google.protobuf.Int64Value getMdbPreserveBinlogBytes() {
        if (mdbPreserveBinlogBytesBuilder_ == null) {
          return mdbPreserveBinlogBytes_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : mdbPreserveBinlogBytes_;
        } else {
          return mdbPreserveBinlogBytesBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The size of the binary log to hold.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_preserve_binlog_bytes = 51 [(.yandex.cloud.value) = "1073741824-1099511627776"];</code>
       */
      public Builder setMdbPreserveBinlogBytes(com.google.protobuf.Int64Value value) {
        if (mdbPreserveBinlogBytesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mdbPreserveBinlogBytes_ = value;
          onChanged();
        } else {
          mdbPreserveBinlogBytesBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The size of the binary log to hold.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_preserve_binlog_bytes = 51 [(.yandex.cloud.value) = "1073741824-1099511627776"];</code>
       */
      public Builder setMdbPreserveBinlogBytes(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (mdbPreserveBinlogBytesBuilder_ == null) {
          mdbPreserveBinlogBytes_ = builderForValue.build();
          onChanged();
        } else {
          mdbPreserveBinlogBytesBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The size of the binary log to hold.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_preserve_binlog_bytes = 51 [(.yandex.cloud.value) = "1073741824-1099511627776"];</code>
       */
      public Builder mergeMdbPreserveBinlogBytes(com.google.protobuf.Int64Value value) {
        if (mdbPreserveBinlogBytesBuilder_ == null) {
          if (mdbPreserveBinlogBytes_ != null) {
            mdbPreserveBinlogBytes_ =
              com.google.protobuf.Int64Value.newBuilder(mdbPreserveBinlogBytes_).mergeFrom(value).buildPartial();
          } else {
            mdbPreserveBinlogBytes_ = value;
          }
          onChanged();
        } else {
          mdbPreserveBinlogBytesBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The size of the binary log to hold.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_preserve_binlog_bytes = 51 [(.yandex.cloud.value) = "1073741824-1099511627776"];</code>
       */
      public Builder clearMdbPreserveBinlogBytes() {
        if (mdbPreserveBinlogBytesBuilder_ == null) {
          mdbPreserveBinlogBytes_ = null;
          onChanged();
        } else {
          mdbPreserveBinlogBytes_ = null;
          mdbPreserveBinlogBytesBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The size of the binary log to hold.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_preserve_binlog_bytes = 51 [(.yandex.cloud.value) = "1073741824-1099511627776"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMdbPreserveBinlogBytesBuilder() {
        
        onChanged();
        return getMdbPreserveBinlogBytesFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The size of the binary log to hold.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_preserve_binlog_bytes = 51 [(.yandex.cloud.value) = "1073741824-1099511627776"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMdbPreserveBinlogBytesOrBuilder() {
        if (mdbPreserveBinlogBytesBuilder_ != null) {
          return mdbPreserveBinlogBytesBuilder_.getMessageOrBuilder();
        } else {
          return mdbPreserveBinlogBytes_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : mdbPreserveBinlogBytes_;
        }
      }
      /**
       * <pre>
       * The size of the binary log to hold.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_preserve_binlog_bytes = 51 [(.yandex.cloud.value) = "1073741824-1099511627776"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMdbPreserveBinlogBytesFieldBuilder() {
        if (mdbPreserveBinlogBytesBuilder_ == null) {
          mdbPreserveBinlogBytesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMdbPreserveBinlogBytes(),
                  getParentForChildren(),
                  isClean());
          mdbPreserveBinlogBytes_ = null;
        }
        return mdbPreserveBinlogBytesBuilder_;
      }

      private com.google.protobuf.Int64Value interactiveTimeout_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> interactiveTimeoutBuilder_;
      /**
       * <pre>
       * The number of seconds the server waits for activity on an interactive connection before closing it.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_interactive_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value interactive_timeout = 52 [(.yandex.cloud.value) = "600-86400"];</code>
       * @return Whether the interactiveTimeout field is set.
       */
      public boolean hasInteractiveTimeout() {
        return interactiveTimeoutBuilder_ != null || interactiveTimeout_ != null;
      }
      /**
       * <pre>
       * The number of seconds the server waits for activity on an interactive connection before closing it.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_interactive_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value interactive_timeout = 52 [(.yandex.cloud.value) = "600-86400"];</code>
       * @return The interactiveTimeout.
       */
      public com.google.protobuf.Int64Value getInteractiveTimeout() {
        if (interactiveTimeoutBuilder_ == null) {
          return interactiveTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : interactiveTimeout_;
        } else {
          return interactiveTimeoutBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The number of seconds the server waits for activity on an interactive connection before closing it.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_interactive_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value interactive_timeout = 52 [(.yandex.cloud.value) = "600-86400"];</code>
       */
      public Builder setInteractiveTimeout(com.google.protobuf.Int64Value value) {
        if (interactiveTimeoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          interactiveTimeout_ = value;
          onChanged();
        } else {
          interactiveTimeoutBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of seconds the server waits for activity on an interactive connection before closing it.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_interactive_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value interactive_timeout = 52 [(.yandex.cloud.value) = "600-86400"];</code>
       */
      public Builder setInteractiveTimeout(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (interactiveTimeoutBuilder_ == null) {
          interactiveTimeout_ = builderForValue.build();
          onChanged();
        } else {
          interactiveTimeoutBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The number of seconds the server waits for activity on an interactive connection before closing it.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_interactive_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value interactive_timeout = 52 [(.yandex.cloud.value) = "600-86400"];</code>
       */
      public Builder mergeInteractiveTimeout(com.google.protobuf.Int64Value value) {
        if (interactiveTimeoutBuilder_ == null) {
          if (interactiveTimeout_ != null) {
            interactiveTimeout_ =
              com.google.protobuf.Int64Value.newBuilder(interactiveTimeout_).mergeFrom(value).buildPartial();
          } else {
            interactiveTimeout_ = value;
          }
          onChanged();
        } else {
          interactiveTimeoutBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of seconds the server waits for activity on an interactive connection before closing it.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_interactive_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value interactive_timeout = 52 [(.yandex.cloud.value) = "600-86400"];</code>
       */
      public Builder clearInteractiveTimeout() {
        if (interactiveTimeoutBuilder_ == null) {
          interactiveTimeout_ = null;
          onChanged();
        } else {
          interactiveTimeout_ = null;
          interactiveTimeoutBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The number of seconds the server waits for activity on an interactive connection before closing it.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_interactive_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value interactive_timeout = 52 [(.yandex.cloud.value) = "600-86400"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getInteractiveTimeoutBuilder() {
        
        onChanged();
        return getInteractiveTimeoutFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The number of seconds the server waits for activity on an interactive connection before closing it.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_interactive_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value interactive_timeout = 52 [(.yandex.cloud.value) = "600-86400"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getInteractiveTimeoutOrBuilder() {
        if (interactiveTimeoutBuilder_ != null) {
          return interactiveTimeoutBuilder_.getMessageOrBuilder();
        } else {
          return interactiveTimeout_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : interactiveTimeout_;
        }
      }
      /**
       * <pre>
       * The number of seconds the server waits for activity on an interactive connection before closing it.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_interactive_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value interactive_timeout = 52 [(.yandex.cloud.value) = "600-86400"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getInteractiveTimeoutFieldBuilder() {
        if (interactiveTimeoutBuilder_ == null) {
          interactiveTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getInteractiveTimeout(),
                  getParentForChildren(),
                  isClean());
          interactiveTimeout_ = null;
        }
        return interactiveTimeoutBuilder_;
      }

      private com.google.protobuf.Int64Value waitTimeout_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> waitTimeoutBuilder_;
      /**
       * <pre>
       * The number of seconds the server waits for activity on a noninteractive connection before closing it.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_wait_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value wait_timeout = 53 [(.yandex.cloud.value) = "600-86400"];</code>
       * @return Whether the waitTimeout field is set.
       */
      public boolean hasWaitTimeout() {
        return waitTimeoutBuilder_ != null || waitTimeout_ != null;
      }
      /**
       * <pre>
       * The number of seconds the server waits for activity on a noninteractive connection before closing it.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_wait_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value wait_timeout = 53 [(.yandex.cloud.value) = "600-86400"];</code>
       * @return The waitTimeout.
       */
      public com.google.protobuf.Int64Value getWaitTimeout() {
        if (waitTimeoutBuilder_ == null) {
          return waitTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : waitTimeout_;
        } else {
          return waitTimeoutBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The number of seconds the server waits for activity on a noninteractive connection before closing it.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_wait_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value wait_timeout = 53 [(.yandex.cloud.value) = "600-86400"];</code>
       */
      public Builder setWaitTimeout(com.google.protobuf.Int64Value value) {
        if (waitTimeoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          waitTimeout_ = value;
          onChanged();
        } else {
          waitTimeoutBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of seconds the server waits for activity on a noninteractive connection before closing it.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_wait_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value wait_timeout = 53 [(.yandex.cloud.value) = "600-86400"];</code>
       */
      public Builder setWaitTimeout(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (waitTimeoutBuilder_ == null) {
          waitTimeout_ = builderForValue.build();
          onChanged();
        } else {
          waitTimeoutBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The number of seconds the server waits for activity on a noninteractive connection before closing it.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_wait_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value wait_timeout = 53 [(.yandex.cloud.value) = "600-86400"];</code>
       */
      public Builder mergeWaitTimeout(com.google.protobuf.Int64Value value) {
        if (waitTimeoutBuilder_ == null) {
          if (waitTimeout_ != null) {
            waitTimeout_ =
              com.google.protobuf.Int64Value.newBuilder(waitTimeout_).mergeFrom(value).buildPartial();
          } else {
            waitTimeout_ = value;
          }
          onChanged();
        } else {
          waitTimeoutBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of seconds the server waits for activity on a noninteractive connection before closing it.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_wait_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value wait_timeout = 53 [(.yandex.cloud.value) = "600-86400"];</code>
       */
      public Builder clearWaitTimeout() {
        if (waitTimeoutBuilder_ == null) {
          waitTimeout_ = null;
          onChanged();
        } else {
          waitTimeout_ = null;
          waitTimeoutBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The number of seconds the server waits for activity on a noninteractive connection before closing it.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_wait_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value wait_timeout = 53 [(.yandex.cloud.value) = "600-86400"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getWaitTimeoutBuilder() {
        
        onChanged();
        return getWaitTimeoutFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The number of seconds the server waits for activity on a noninteractive connection before closing it.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_wait_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value wait_timeout = 53 [(.yandex.cloud.value) = "600-86400"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getWaitTimeoutOrBuilder() {
        if (waitTimeoutBuilder_ != null) {
          return waitTimeoutBuilder_.getMessageOrBuilder();
        } else {
          return waitTimeout_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : waitTimeout_;
        }
      }
      /**
       * <pre>
       * The number of seconds the server waits for activity on a noninteractive connection before closing it.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_wait_timeout) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value wait_timeout = 53 [(.yandex.cloud.value) = "600-86400"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getWaitTimeoutFieldBuilder() {
        if (waitTimeoutBuilder_ == null) {
          waitTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getWaitTimeout(),
                  getParentForChildren(),
                  isClean());
          waitTimeout_ = null;
        }
        return waitTimeoutBuilder_;
      }

      private com.google.protobuf.Int64Value mdbOfflineModeEnableLag_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> mdbOfflineModeEnableLagBuilder_;
      /**
       * <pre>
       * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = ON' to prevent users from reading stale data.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_offline_mode_enable_lag = 54 [(.yandex.cloud.value) = "600-432000"];</code>
       * @return Whether the mdbOfflineModeEnableLag field is set.
       */
      public boolean hasMdbOfflineModeEnableLag() {
        return mdbOfflineModeEnableLagBuilder_ != null || mdbOfflineModeEnableLag_ != null;
      }
      /**
       * <pre>
       * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = ON' to prevent users from reading stale data.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_offline_mode_enable_lag = 54 [(.yandex.cloud.value) = "600-432000"];</code>
       * @return The mdbOfflineModeEnableLag.
       */
      public com.google.protobuf.Int64Value getMdbOfflineModeEnableLag() {
        if (mdbOfflineModeEnableLagBuilder_ == null) {
          return mdbOfflineModeEnableLag_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : mdbOfflineModeEnableLag_;
        } else {
          return mdbOfflineModeEnableLagBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = ON' to prevent users from reading stale data.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_offline_mode_enable_lag = 54 [(.yandex.cloud.value) = "600-432000"];</code>
       */
      public Builder setMdbOfflineModeEnableLag(com.google.protobuf.Int64Value value) {
        if (mdbOfflineModeEnableLagBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mdbOfflineModeEnableLag_ = value;
          onChanged();
        } else {
          mdbOfflineModeEnableLagBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = ON' to prevent users from reading stale data.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_offline_mode_enable_lag = 54 [(.yandex.cloud.value) = "600-432000"];</code>
       */
      public Builder setMdbOfflineModeEnableLag(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (mdbOfflineModeEnableLagBuilder_ == null) {
          mdbOfflineModeEnableLag_ = builderForValue.build();
          onChanged();
        } else {
          mdbOfflineModeEnableLagBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = ON' to prevent users from reading stale data.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_offline_mode_enable_lag = 54 [(.yandex.cloud.value) = "600-432000"];</code>
       */
      public Builder mergeMdbOfflineModeEnableLag(com.google.protobuf.Int64Value value) {
        if (mdbOfflineModeEnableLagBuilder_ == null) {
          if (mdbOfflineModeEnableLag_ != null) {
            mdbOfflineModeEnableLag_ =
              com.google.protobuf.Int64Value.newBuilder(mdbOfflineModeEnableLag_).mergeFrom(value).buildPartial();
          } else {
            mdbOfflineModeEnableLag_ = value;
          }
          onChanged();
        } else {
          mdbOfflineModeEnableLagBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = ON' to prevent users from reading stale data.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_offline_mode_enable_lag = 54 [(.yandex.cloud.value) = "600-432000"];</code>
       */
      public Builder clearMdbOfflineModeEnableLag() {
        if (mdbOfflineModeEnableLagBuilder_ == null) {
          mdbOfflineModeEnableLag_ = null;
          onChanged();
        } else {
          mdbOfflineModeEnableLag_ = null;
          mdbOfflineModeEnableLagBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = ON' to prevent users from reading stale data.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_offline_mode_enable_lag = 54 [(.yandex.cloud.value) = "600-432000"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMdbOfflineModeEnableLagBuilder() {
        
        onChanged();
        return getMdbOfflineModeEnableLagFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = ON' to prevent users from reading stale data.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_offline_mode_enable_lag = 54 [(.yandex.cloud.value) = "600-432000"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMdbOfflineModeEnableLagOrBuilder() {
        if (mdbOfflineModeEnableLagBuilder_ != null) {
          return mdbOfflineModeEnableLagBuilder_.getMessageOrBuilder();
        } else {
          return mdbOfflineModeEnableLag_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : mdbOfflineModeEnableLag_;
        }
      }
      /**
       * <pre>
       * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = ON' to prevent users from reading stale data.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_offline_mode_enable_lag = 54 [(.yandex.cloud.value) = "600-432000"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMdbOfflineModeEnableLagFieldBuilder() {
        if (mdbOfflineModeEnableLagBuilder_ == null) {
          mdbOfflineModeEnableLagBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMdbOfflineModeEnableLag(),
                  getParentForChildren(),
                  isClean());
          mdbOfflineModeEnableLag_ = null;
        }
        return mdbOfflineModeEnableLagBuilder_;
      }

      private com.google.protobuf.Int64Value mdbOfflineModeDisableLag_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> mdbOfflineModeDisableLagBuilder_;
      /**
       * <pre>
       * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = OFF'.
       * Should be less than mdb_offline_mode_enable_lag.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_offline_mode_disable_lag = 55 [(.yandex.cloud.value) = "60-86400"];</code>
       * @return Whether the mdbOfflineModeDisableLag field is set.
       */
      public boolean hasMdbOfflineModeDisableLag() {
        return mdbOfflineModeDisableLagBuilder_ != null || mdbOfflineModeDisableLag_ != null;
      }
      /**
       * <pre>
       * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = OFF'.
       * Should be less than mdb_offline_mode_enable_lag.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_offline_mode_disable_lag = 55 [(.yandex.cloud.value) = "60-86400"];</code>
       * @return The mdbOfflineModeDisableLag.
       */
      public com.google.protobuf.Int64Value getMdbOfflineModeDisableLag() {
        if (mdbOfflineModeDisableLagBuilder_ == null) {
          return mdbOfflineModeDisableLag_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : mdbOfflineModeDisableLag_;
        } else {
          return mdbOfflineModeDisableLagBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = OFF'.
       * Should be less than mdb_offline_mode_enable_lag.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_offline_mode_disable_lag = 55 [(.yandex.cloud.value) = "60-86400"];</code>
       */
      public Builder setMdbOfflineModeDisableLag(com.google.protobuf.Int64Value value) {
        if (mdbOfflineModeDisableLagBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mdbOfflineModeDisableLag_ = value;
          onChanged();
        } else {
          mdbOfflineModeDisableLagBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = OFF'.
       * Should be less than mdb_offline_mode_enable_lag.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_offline_mode_disable_lag = 55 [(.yandex.cloud.value) = "60-86400"];</code>
       */
      public Builder setMdbOfflineModeDisableLag(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (mdbOfflineModeDisableLagBuilder_ == null) {
          mdbOfflineModeDisableLag_ = builderForValue.build();
          onChanged();
        } else {
          mdbOfflineModeDisableLagBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = OFF'.
       * Should be less than mdb_offline_mode_enable_lag.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_offline_mode_disable_lag = 55 [(.yandex.cloud.value) = "60-86400"];</code>
       */
      public Builder mergeMdbOfflineModeDisableLag(com.google.protobuf.Int64Value value) {
        if (mdbOfflineModeDisableLagBuilder_ == null) {
          if (mdbOfflineModeDisableLag_ != null) {
            mdbOfflineModeDisableLag_ =
              com.google.protobuf.Int64Value.newBuilder(mdbOfflineModeDisableLag_).mergeFrom(value).buildPartial();
          } else {
            mdbOfflineModeDisableLag_ = value;
          }
          onChanged();
        } else {
          mdbOfflineModeDisableLagBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = OFF'.
       * Should be less than mdb_offline_mode_enable_lag.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_offline_mode_disable_lag = 55 [(.yandex.cloud.value) = "60-86400"];</code>
       */
      public Builder clearMdbOfflineModeDisableLag() {
        if (mdbOfflineModeDisableLagBuilder_ == null) {
          mdbOfflineModeDisableLag_ = null;
          onChanged();
        } else {
          mdbOfflineModeDisableLag_ = null;
          mdbOfflineModeDisableLagBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = OFF'.
       * Should be less than mdb_offline_mode_enable_lag.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_offline_mode_disable_lag = 55 [(.yandex.cloud.value) = "60-86400"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMdbOfflineModeDisableLagBuilder() {
        
        onChanged();
        return getMdbOfflineModeDisableLagFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = OFF'.
       * Should be less than mdb_offline_mode_enable_lag.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_offline_mode_disable_lag = 55 [(.yandex.cloud.value) = "60-86400"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMdbOfflineModeDisableLagOrBuilder() {
        if (mdbOfflineModeDisableLagBuilder_ != null) {
          return mdbOfflineModeDisableLagBuilder_.getMessageOrBuilder();
        } else {
          return mdbOfflineModeDisableLag_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : mdbOfflineModeDisableLag_;
        }
      }
      /**
       * <pre>
       * Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = OFF'.
       * Should be less than mdb_offline_mode_enable_lag.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_offline_mode_disable_lag = 55 [(.yandex.cloud.value) = "60-86400"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMdbOfflineModeDisableLagFieldBuilder() {
        if (mdbOfflineModeDisableLagBuilder_ == null) {
          mdbOfflineModeDisableLagBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMdbOfflineModeDisableLag(),
                  getParentForChildren(),
                  isClean());
          mdbOfflineModeDisableLag_ = null;
        }
        return mdbOfflineModeDisableLagBuilder_;
      }

      private com.google.protobuf.Int64Value rangeOptimizerMaxMemSize_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> rangeOptimizerMaxMemSizeBuilder_;
      /**
       * <pre>
       * The limit on memory consumption for the range optimizer.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_range_optimizer_max_mem_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value range_optimizer_max_mem_size = 56 [(.yandex.cloud.value) = "1048576-268435456"];</code>
       * @return Whether the rangeOptimizerMaxMemSize field is set.
       */
      public boolean hasRangeOptimizerMaxMemSize() {
        return rangeOptimizerMaxMemSizeBuilder_ != null || rangeOptimizerMaxMemSize_ != null;
      }
      /**
       * <pre>
       * The limit on memory consumption for the range optimizer.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_range_optimizer_max_mem_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value range_optimizer_max_mem_size = 56 [(.yandex.cloud.value) = "1048576-268435456"];</code>
       * @return The rangeOptimizerMaxMemSize.
       */
      public com.google.protobuf.Int64Value getRangeOptimizerMaxMemSize() {
        if (rangeOptimizerMaxMemSizeBuilder_ == null) {
          return rangeOptimizerMaxMemSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : rangeOptimizerMaxMemSize_;
        } else {
          return rangeOptimizerMaxMemSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The limit on memory consumption for the range optimizer.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_range_optimizer_max_mem_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value range_optimizer_max_mem_size = 56 [(.yandex.cloud.value) = "1048576-268435456"];</code>
       */
      public Builder setRangeOptimizerMaxMemSize(com.google.protobuf.Int64Value value) {
        if (rangeOptimizerMaxMemSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          rangeOptimizerMaxMemSize_ = value;
          onChanged();
        } else {
          rangeOptimizerMaxMemSizeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The limit on memory consumption for the range optimizer.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_range_optimizer_max_mem_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value range_optimizer_max_mem_size = 56 [(.yandex.cloud.value) = "1048576-268435456"];</code>
       */
      public Builder setRangeOptimizerMaxMemSize(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (rangeOptimizerMaxMemSizeBuilder_ == null) {
          rangeOptimizerMaxMemSize_ = builderForValue.build();
          onChanged();
        } else {
          rangeOptimizerMaxMemSizeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The limit on memory consumption for the range optimizer.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_range_optimizer_max_mem_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value range_optimizer_max_mem_size = 56 [(.yandex.cloud.value) = "1048576-268435456"];</code>
       */
      public Builder mergeRangeOptimizerMaxMemSize(com.google.protobuf.Int64Value value) {
        if (rangeOptimizerMaxMemSizeBuilder_ == null) {
          if (rangeOptimizerMaxMemSize_ != null) {
            rangeOptimizerMaxMemSize_ =
              com.google.protobuf.Int64Value.newBuilder(rangeOptimizerMaxMemSize_).mergeFrom(value).buildPartial();
          } else {
            rangeOptimizerMaxMemSize_ = value;
          }
          onChanged();
        } else {
          rangeOptimizerMaxMemSizeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The limit on memory consumption for the range optimizer.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_range_optimizer_max_mem_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value range_optimizer_max_mem_size = 56 [(.yandex.cloud.value) = "1048576-268435456"];</code>
       */
      public Builder clearRangeOptimizerMaxMemSize() {
        if (rangeOptimizerMaxMemSizeBuilder_ == null) {
          rangeOptimizerMaxMemSize_ = null;
          onChanged();
        } else {
          rangeOptimizerMaxMemSize_ = null;
          rangeOptimizerMaxMemSizeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The limit on memory consumption for the range optimizer.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_range_optimizer_max_mem_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value range_optimizer_max_mem_size = 56 [(.yandex.cloud.value) = "1048576-268435456"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getRangeOptimizerMaxMemSizeBuilder() {
        
        onChanged();
        return getRangeOptimizerMaxMemSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The limit on memory consumption for the range optimizer.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_range_optimizer_max_mem_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value range_optimizer_max_mem_size = 56 [(.yandex.cloud.value) = "1048576-268435456"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getRangeOptimizerMaxMemSizeOrBuilder() {
        if (rangeOptimizerMaxMemSizeBuilder_ != null) {
          return rangeOptimizerMaxMemSizeBuilder_.getMessageOrBuilder();
        } else {
          return rangeOptimizerMaxMemSize_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : rangeOptimizerMaxMemSize_;
        }
      }
      /**
       * <pre>
       * The limit on memory consumption for the range optimizer.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_range_optimizer_max_mem_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value range_optimizer_max_mem_size = 56 [(.yandex.cloud.value) = "1048576-268435456"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getRangeOptimizerMaxMemSizeFieldBuilder() {
        if (rangeOptimizerMaxMemSizeBuilder_ == null) {
          rangeOptimizerMaxMemSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getRangeOptimizerMaxMemSize(),
                  getParentForChildren(),
                  isClean());
          rangeOptimizerMaxMemSize_ = null;
        }
        return rangeOptimizerMaxMemSizeBuilder_;
      }

      private com.google.protobuf.BoolValue slowQueryLog_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> slowQueryLogBuilder_;
      /**
       * <pre>
       * Manages slow query log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_slow_query_log) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue slow_query_log = 57;</code>
       * @return Whether the slowQueryLog field is set.
       */
      public boolean hasSlowQueryLog() {
        return slowQueryLogBuilder_ != null || slowQueryLog_ != null;
      }
      /**
       * <pre>
       * Manages slow query log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_slow_query_log) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue slow_query_log = 57;</code>
       * @return The slowQueryLog.
       */
      public com.google.protobuf.BoolValue getSlowQueryLog() {
        if (slowQueryLogBuilder_ == null) {
          return slowQueryLog_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : slowQueryLog_;
        } else {
          return slowQueryLogBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Manages slow query log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_slow_query_log) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue slow_query_log = 57;</code>
       */
      public Builder setSlowQueryLog(com.google.protobuf.BoolValue value) {
        if (slowQueryLogBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          slowQueryLog_ = value;
          onChanged();
        } else {
          slowQueryLogBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Manages slow query log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_slow_query_log) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue slow_query_log = 57;</code>
       */
      public Builder setSlowQueryLog(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (slowQueryLogBuilder_ == null) {
          slowQueryLog_ = builderForValue.build();
          onChanged();
        } else {
          slowQueryLogBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Manages slow query log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_slow_query_log) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue slow_query_log = 57;</code>
       */
      public Builder mergeSlowQueryLog(com.google.protobuf.BoolValue value) {
        if (slowQueryLogBuilder_ == null) {
          if (slowQueryLog_ != null) {
            slowQueryLog_ =
              com.google.protobuf.BoolValue.newBuilder(slowQueryLog_).mergeFrom(value).buildPartial();
          } else {
            slowQueryLog_ = value;
          }
          onChanged();
        } else {
          slowQueryLogBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Manages slow query log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_slow_query_log) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue slow_query_log = 57;</code>
       */
      public Builder clearSlowQueryLog() {
        if (slowQueryLogBuilder_ == null) {
          slowQueryLog_ = null;
          onChanged();
        } else {
          slowQueryLog_ = null;
          slowQueryLogBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Manages slow query log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_slow_query_log) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue slow_query_log = 57;</code>
       */
      public com.google.protobuf.BoolValue.Builder getSlowQueryLogBuilder() {
        
        onChanged();
        return getSlowQueryLogFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Manages slow query log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_slow_query_log) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue slow_query_log = 57;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getSlowQueryLogOrBuilder() {
        if (slowQueryLogBuilder_ != null) {
          return slowQueryLogBuilder_.getMessageOrBuilder();
        } else {
          return slowQueryLog_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : slowQueryLog_;
        }
      }
      /**
       * <pre>
       * Manages slow query log.
       * See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_slow_query_log) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue slow_query_log = 57;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getSlowQueryLogFieldBuilder() {
        if (slowQueryLogBuilder_ == null) {
          slowQueryLogBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getSlowQueryLog(),
                  getParentForChildren(),
                  isClean());
          slowQueryLog_ = null;
        }
        return slowQueryLogBuilder_;
      }

      private com.google.protobuf.DoubleValue slowQueryLogAlwaysWriteTime_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.DoubleValue, com.google.protobuf.DoubleValue.Builder, com.google.protobuf.DoubleValueOrBuilder> slowQueryLogAlwaysWriteTimeBuilder_;
      /**
       * <pre>
       * Query execution time, after which query to be logged unconditionally, that is, `log_slow_rate_limit` will not apply to it.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#slow_query_log_always_write_time) for details.
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue slow_query_log_always_write_time = 58;</code>
       * @return Whether the slowQueryLogAlwaysWriteTime field is set.
       */
      public boolean hasSlowQueryLogAlwaysWriteTime() {
        return slowQueryLogAlwaysWriteTimeBuilder_ != null || slowQueryLogAlwaysWriteTime_ != null;
      }
      /**
       * <pre>
       * Query execution time, after which query to be logged unconditionally, that is, `log_slow_rate_limit` will not apply to it.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#slow_query_log_always_write_time) for details.
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue slow_query_log_always_write_time = 58;</code>
       * @return The slowQueryLogAlwaysWriteTime.
       */
      public com.google.protobuf.DoubleValue getSlowQueryLogAlwaysWriteTime() {
        if (slowQueryLogAlwaysWriteTimeBuilder_ == null) {
          return slowQueryLogAlwaysWriteTime_ == null ? com.google.protobuf.DoubleValue.getDefaultInstance() : slowQueryLogAlwaysWriteTime_;
        } else {
          return slowQueryLogAlwaysWriteTimeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Query execution time, after which query to be logged unconditionally, that is, `log_slow_rate_limit` will not apply to it.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#slow_query_log_always_write_time) for details.
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue slow_query_log_always_write_time = 58;</code>
       */
      public Builder setSlowQueryLogAlwaysWriteTime(com.google.protobuf.DoubleValue value) {
        if (slowQueryLogAlwaysWriteTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          slowQueryLogAlwaysWriteTime_ = value;
          onChanged();
        } else {
          slowQueryLogAlwaysWriteTimeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Query execution time, after which query to be logged unconditionally, that is, `log_slow_rate_limit` will not apply to it.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#slow_query_log_always_write_time) for details.
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue slow_query_log_always_write_time = 58;</code>
       */
      public Builder setSlowQueryLogAlwaysWriteTime(
          com.google.protobuf.DoubleValue.Builder builderForValue) {
        if (slowQueryLogAlwaysWriteTimeBuilder_ == null) {
          slowQueryLogAlwaysWriteTime_ = builderForValue.build();
          onChanged();
        } else {
          slowQueryLogAlwaysWriteTimeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Query execution time, after which query to be logged unconditionally, that is, `log_slow_rate_limit` will not apply to it.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#slow_query_log_always_write_time) for details.
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue slow_query_log_always_write_time = 58;</code>
       */
      public Builder mergeSlowQueryLogAlwaysWriteTime(com.google.protobuf.DoubleValue value) {
        if (slowQueryLogAlwaysWriteTimeBuilder_ == null) {
          if (slowQueryLogAlwaysWriteTime_ != null) {
            slowQueryLogAlwaysWriteTime_ =
              com.google.protobuf.DoubleValue.newBuilder(slowQueryLogAlwaysWriteTime_).mergeFrom(value).buildPartial();
          } else {
            slowQueryLogAlwaysWriteTime_ = value;
          }
          onChanged();
        } else {
          slowQueryLogAlwaysWriteTimeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Query execution time, after which query to be logged unconditionally, that is, `log_slow_rate_limit` will not apply to it.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#slow_query_log_always_write_time) for details.
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue slow_query_log_always_write_time = 58;</code>
       */
      public Builder clearSlowQueryLogAlwaysWriteTime() {
        if (slowQueryLogAlwaysWriteTimeBuilder_ == null) {
          slowQueryLogAlwaysWriteTime_ = null;
          onChanged();
        } else {
          slowQueryLogAlwaysWriteTime_ = null;
          slowQueryLogAlwaysWriteTimeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Query execution time, after which query to be logged unconditionally, that is, `log_slow_rate_limit` will not apply to it.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#slow_query_log_always_write_time) for details.
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue slow_query_log_always_write_time = 58;</code>
       */
      public com.google.protobuf.DoubleValue.Builder getSlowQueryLogAlwaysWriteTimeBuilder() {
        
        onChanged();
        return getSlowQueryLogAlwaysWriteTimeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Query execution time, after which query to be logged unconditionally, that is, `log_slow_rate_limit` will not apply to it.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#slow_query_log_always_write_time) for details.
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue slow_query_log_always_write_time = 58;</code>
       */
      public com.google.protobuf.DoubleValueOrBuilder getSlowQueryLogAlwaysWriteTimeOrBuilder() {
        if (slowQueryLogAlwaysWriteTimeBuilder_ != null) {
          return slowQueryLogAlwaysWriteTimeBuilder_.getMessageOrBuilder();
        } else {
          return slowQueryLogAlwaysWriteTime_ == null ?
              com.google.protobuf.DoubleValue.getDefaultInstance() : slowQueryLogAlwaysWriteTime_;
        }
      }
      /**
       * <pre>
       * Query execution time, after which query to be logged unconditionally, that is, `log_slow_rate_limit` will not apply to it.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#slow_query_log_always_write_time) for details.
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue slow_query_log_always_write_time = 58;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.DoubleValue, com.google.protobuf.DoubleValue.Builder, com.google.protobuf.DoubleValueOrBuilder> 
          getSlowQueryLogAlwaysWriteTimeFieldBuilder() {
        if (slowQueryLogAlwaysWriteTimeBuilder_ == null) {
          slowQueryLogAlwaysWriteTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.DoubleValue, com.google.protobuf.DoubleValue.Builder, com.google.protobuf.DoubleValueOrBuilder>(
                  getSlowQueryLogAlwaysWriteTime(),
                  getParentForChildren(),
                  isClean());
          slowQueryLogAlwaysWriteTime_ = null;
        }
        return slowQueryLogAlwaysWriteTimeBuilder_;
      }

      private int logSlowRateType_ = 0;
      /**
       * <pre>
       * Specifies slow log granularity for `log_slow_rate_limit` QUERY or SESSION value.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_rate_type) for details.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowRateType log_slow_rate_type = 59;</code>
       * @return The enum numeric value on the wire for logSlowRateType.
       */
      @java.lang.Override public int getLogSlowRateTypeValue() {
        return logSlowRateType_;
      }
      /**
       * <pre>
       * Specifies slow log granularity for `log_slow_rate_limit` QUERY or SESSION value.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_rate_type) for details.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowRateType log_slow_rate_type = 59;</code>
       * @param value The enum numeric value on the wire for logSlowRateType to set.
       * @return This builder for chaining.
       */
      public Builder setLogSlowRateTypeValue(int value) {
        
        logSlowRateType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies slow log granularity for `log_slow_rate_limit` QUERY or SESSION value.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_rate_type) for details.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowRateType log_slow_rate_type = 59;</code>
       * @return The logSlowRateType.
       */
      @java.lang.Override
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowRateType getLogSlowRateType() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowRateType result = yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowRateType.valueOf(logSlowRateType_);
        return result == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowRateType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Specifies slow log granularity for `log_slow_rate_limit` QUERY or SESSION value.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_rate_type) for details.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowRateType log_slow_rate_type = 59;</code>
       * @param value The logSlowRateType to set.
       * @return This builder for chaining.
       */
      public Builder setLogSlowRateType(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowRateType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        logSlowRateType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies slow log granularity for `log_slow_rate_limit` QUERY or SESSION value.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_rate_type) for details.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowRateType log_slow_rate_type = 59;</code>
       * @return This builder for chaining.
       */
      public Builder clearLogSlowRateType() {
        
        logSlowRateType_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Int64Value logSlowRateLimit_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> logSlowRateLimitBuilder_;
      /**
       * <pre>
       * Specifies what fraction of session/query should be logged. Logging is enabled for every nth session/query.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_rate_limit) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value log_slow_rate_limit = 60 [(.yandex.cloud.value) = "1-1000"];</code>
       * @return Whether the logSlowRateLimit field is set.
       */
      public boolean hasLogSlowRateLimit() {
        return logSlowRateLimitBuilder_ != null || logSlowRateLimit_ != null;
      }
      /**
       * <pre>
       * Specifies what fraction of session/query should be logged. Logging is enabled for every nth session/query.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_rate_limit) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value log_slow_rate_limit = 60 [(.yandex.cloud.value) = "1-1000"];</code>
       * @return The logSlowRateLimit.
       */
      public com.google.protobuf.Int64Value getLogSlowRateLimit() {
        if (logSlowRateLimitBuilder_ == null) {
          return logSlowRateLimit_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : logSlowRateLimit_;
        } else {
          return logSlowRateLimitBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Specifies what fraction of session/query should be logged. Logging is enabled for every nth session/query.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_rate_limit) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value log_slow_rate_limit = 60 [(.yandex.cloud.value) = "1-1000"];</code>
       */
      public Builder setLogSlowRateLimit(com.google.protobuf.Int64Value value) {
        if (logSlowRateLimitBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          logSlowRateLimit_ = value;
          onChanged();
        } else {
          logSlowRateLimitBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies what fraction of session/query should be logged. Logging is enabled for every nth session/query.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_rate_limit) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value log_slow_rate_limit = 60 [(.yandex.cloud.value) = "1-1000"];</code>
       */
      public Builder setLogSlowRateLimit(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (logSlowRateLimitBuilder_ == null) {
          logSlowRateLimit_ = builderForValue.build();
          onChanged();
        } else {
          logSlowRateLimitBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Specifies what fraction of session/query should be logged. Logging is enabled for every nth session/query.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_rate_limit) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value log_slow_rate_limit = 60 [(.yandex.cloud.value) = "1-1000"];</code>
       */
      public Builder mergeLogSlowRateLimit(com.google.protobuf.Int64Value value) {
        if (logSlowRateLimitBuilder_ == null) {
          if (logSlowRateLimit_ != null) {
            logSlowRateLimit_ =
              com.google.protobuf.Int64Value.newBuilder(logSlowRateLimit_).mergeFrom(value).buildPartial();
          } else {
            logSlowRateLimit_ = value;
          }
          onChanged();
        } else {
          logSlowRateLimitBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies what fraction of session/query should be logged. Logging is enabled for every nth session/query.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_rate_limit) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value log_slow_rate_limit = 60 [(.yandex.cloud.value) = "1-1000"];</code>
       */
      public Builder clearLogSlowRateLimit() {
        if (logSlowRateLimitBuilder_ == null) {
          logSlowRateLimit_ = null;
          onChanged();
        } else {
          logSlowRateLimit_ = null;
          logSlowRateLimitBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Specifies what fraction of session/query should be logged. Logging is enabled for every nth session/query.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_rate_limit) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value log_slow_rate_limit = 60 [(.yandex.cloud.value) = "1-1000"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getLogSlowRateLimitBuilder() {
        
        onChanged();
        return getLogSlowRateLimitFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies what fraction of session/query should be logged. Logging is enabled for every nth session/query.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_rate_limit) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value log_slow_rate_limit = 60 [(.yandex.cloud.value) = "1-1000"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getLogSlowRateLimitOrBuilder() {
        if (logSlowRateLimitBuilder_ != null) {
          return logSlowRateLimitBuilder_.getMessageOrBuilder();
        } else {
          return logSlowRateLimit_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : logSlowRateLimit_;
        }
      }
      /**
       * <pre>
       * Specifies what fraction of session/query should be logged. Logging is enabled for every nth session/query.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_rate_limit) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value log_slow_rate_limit = 60 [(.yandex.cloud.value) = "1-1000"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getLogSlowRateLimitFieldBuilder() {
        if (logSlowRateLimitBuilder_ == null) {
          logSlowRateLimitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getLogSlowRateLimit(),
                  getParentForChildren(),
                  isClean());
          logSlowRateLimit_ = null;
        }
        return logSlowRateLimitBuilder_;
      }

      private com.google.protobuf.BoolValue logSlowSpStatements_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> logSlowSpStatementsBuilder_;
      /**
       * <pre>
       * When TRUE, statements executed by stored procedures are logged to the slow log.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_sp_statements) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue log_slow_sp_statements = 61;</code>
       * @return Whether the logSlowSpStatements field is set.
       */
      public boolean hasLogSlowSpStatements() {
        return logSlowSpStatementsBuilder_ != null || logSlowSpStatements_ != null;
      }
      /**
       * <pre>
       * When TRUE, statements executed by stored procedures are logged to the slow log.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_sp_statements) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue log_slow_sp_statements = 61;</code>
       * @return The logSlowSpStatements.
       */
      public com.google.protobuf.BoolValue getLogSlowSpStatements() {
        if (logSlowSpStatementsBuilder_ == null) {
          return logSlowSpStatements_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : logSlowSpStatements_;
        } else {
          return logSlowSpStatementsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * When TRUE, statements executed by stored procedures are logged to the slow log.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_sp_statements) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue log_slow_sp_statements = 61;</code>
       */
      public Builder setLogSlowSpStatements(com.google.protobuf.BoolValue value) {
        if (logSlowSpStatementsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          logSlowSpStatements_ = value;
          onChanged();
        } else {
          logSlowSpStatementsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * When TRUE, statements executed by stored procedures are logged to the slow log.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_sp_statements) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue log_slow_sp_statements = 61;</code>
       */
      public Builder setLogSlowSpStatements(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (logSlowSpStatementsBuilder_ == null) {
          logSlowSpStatements_ = builderForValue.build();
          onChanged();
        } else {
          logSlowSpStatementsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * When TRUE, statements executed by stored procedures are logged to the slow log.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_sp_statements) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue log_slow_sp_statements = 61;</code>
       */
      public Builder mergeLogSlowSpStatements(com.google.protobuf.BoolValue value) {
        if (logSlowSpStatementsBuilder_ == null) {
          if (logSlowSpStatements_ != null) {
            logSlowSpStatements_ =
              com.google.protobuf.BoolValue.newBuilder(logSlowSpStatements_).mergeFrom(value).buildPartial();
          } else {
            logSlowSpStatements_ = value;
          }
          onChanged();
        } else {
          logSlowSpStatementsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * When TRUE, statements executed by stored procedures are logged to the slow log.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_sp_statements) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue log_slow_sp_statements = 61;</code>
       */
      public Builder clearLogSlowSpStatements() {
        if (logSlowSpStatementsBuilder_ == null) {
          logSlowSpStatements_ = null;
          onChanged();
        } else {
          logSlowSpStatements_ = null;
          logSlowSpStatementsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * When TRUE, statements executed by stored procedures are logged to the slow log.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_sp_statements) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue log_slow_sp_statements = 61;</code>
       */
      public com.google.protobuf.BoolValue.Builder getLogSlowSpStatementsBuilder() {
        
        onChanged();
        return getLogSlowSpStatementsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * When TRUE, statements executed by stored procedures are logged to the slow log.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_sp_statements) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue log_slow_sp_statements = 61;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getLogSlowSpStatementsOrBuilder() {
        if (logSlowSpStatementsBuilder_ != null) {
          return logSlowSpStatementsBuilder_.getMessageOrBuilder();
        } else {
          return logSlowSpStatements_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : logSlowSpStatements_;
        }
      }
      /**
       * <pre>
       * When TRUE, statements executed by stored procedures are logged to the slow log.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_sp_statements) for details.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue log_slow_sp_statements = 61;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getLogSlowSpStatementsFieldBuilder() {
        if (logSlowSpStatementsBuilder_ == null) {
          logSlowSpStatementsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getLogSlowSpStatements(),
                  getParentForChildren(),
                  isClean());
          logSlowSpStatements_ = null;
        }
        return logSlowSpStatementsBuilder_;
      }

      private java.util.List<java.lang.Integer> logSlowFilter_ =
        java.util.Collections.emptyList();
      private void ensureLogSlowFilterIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          logSlowFilter_ = new java.util.ArrayList<java.lang.Integer>(logSlowFilter_);
          bitField0_ |= 0x00000002;
        }
      }
      /**
       * <pre>
       * Filters the slow log by the query's execution plan.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_filter) for details.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowFilterType log_slow_filter = 62;</code>
       * @return A list containing the logSlowFilter.
       */
      public java.util.List<yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowFilterType> getLogSlowFilterList() {
        return new com.google.protobuf.Internal.ListAdapter<
            java.lang.Integer, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowFilterType>(logSlowFilter_, logSlowFilter_converter_);
      }
      /**
       * <pre>
       * Filters the slow log by the query's execution plan.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_filter) for details.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowFilterType log_slow_filter = 62;</code>
       * @return The count of logSlowFilter.
       */
      public int getLogSlowFilterCount() {
        return logSlowFilter_.size();
      }
      /**
       * <pre>
       * Filters the slow log by the query's execution plan.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_filter) for details.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowFilterType log_slow_filter = 62;</code>
       * @param index The index of the element to return.
       * @return The logSlowFilter at the given index.
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowFilterType getLogSlowFilter(int index) {
        return logSlowFilter_converter_.convert(logSlowFilter_.get(index));
      }
      /**
       * <pre>
       * Filters the slow log by the query's execution plan.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_filter) for details.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowFilterType log_slow_filter = 62;</code>
       * @param index The index to set the value at.
       * @param value The logSlowFilter to set.
       * @return This builder for chaining.
       */
      public Builder setLogSlowFilter(
          int index, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowFilterType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLogSlowFilterIsMutable();
        logSlowFilter_.set(index, value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Filters the slow log by the query's execution plan.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_filter) for details.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowFilterType log_slow_filter = 62;</code>
       * @param value The logSlowFilter to add.
       * @return This builder for chaining.
       */
      public Builder addLogSlowFilter(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowFilterType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLogSlowFilterIsMutable();
        logSlowFilter_.add(value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Filters the slow log by the query's execution plan.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_filter) for details.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowFilterType log_slow_filter = 62;</code>
       * @param values The logSlowFilter to add.
       * @return This builder for chaining.
       */
      public Builder addAllLogSlowFilter(
          java.lang.Iterable<? extends yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowFilterType> values) {
        ensureLogSlowFilterIsMutable();
        for (yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.LogSlowFilterType value : values) {
          logSlowFilter_.add(value.getNumber());
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Filters the slow log by the query's execution plan.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_filter) for details.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowFilterType log_slow_filter = 62;</code>
       * @return This builder for chaining.
       */
      public Builder clearLogSlowFilter() {
        logSlowFilter_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Filters the slow log by the query's execution plan.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_filter) for details.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowFilterType log_slow_filter = 62;</code>
       * @return A list containing the enum numeric values on the wire for logSlowFilter.
       */
      public java.util.List<java.lang.Integer>
      getLogSlowFilterValueList() {
        return java.util.Collections.unmodifiableList(logSlowFilter_);
      }
      /**
       * <pre>
       * Filters the slow log by the query's execution plan.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_filter) for details.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowFilterType log_slow_filter = 62;</code>
       * @param index The index of the value to return.
       * @return The enum numeric value on the wire of logSlowFilter at the given index.
       */
      public int getLogSlowFilterValue(int index) {
        return logSlowFilter_.get(index);
      }
      /**
       * <pre>
       * Filters the slow log by the query's execution plan.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_filter) for details.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowFilterType log_slow_filter = 62;</code>
       * @param index The index of the value to return.
       * @return The enum numeric value on the wire of logSlowFilter at the given index.
       * @return This builder for chaining.
       */
      public Builder setLogSlowFilterValue(
          int index, int value) {
        ensureLogSlowFilterIsMutable();
        logSlowFilter_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Filters the slow log by the query's execution plan.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_filter) for details.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowFilterType log_slow_filter = 62;</code>
       * @param value The enum numeric value on the wire for logSlowFilter to add.
       * @return This builder for chaining.
       */
      public Builder addLogSlowFilterValue(int value) {
        ensureLogSlowFilterIsMutable();
        logSlowFilter_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Filters the slow log by the query's execution plan.
       * See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_filter) for details.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.LogSlowFilterType log_slow_filter = 62;</code>
       * @param values The enum numeric values on the wire for logSlowFilter to add.
       * @return This builder for chaining.
       */
      public Builder addAllLogSlowFilterValue(
          java.lang.Iterable<java.lang.Integer> values) {
        ensureLogSlowFilterIsMutable();
        for (int value : values) {
          logSlowFilter_.add(value);
        }
        onChanged();
        return this;
      }

      private com.google.protobuf.Int64Value mdbPriorityChoiceMaxLag_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> mdbPriorityChoiceMaxLagBuilder_;
      /**
       * <pre>
       * Replication lag threshold (seconds) which allows replica to be promoted to master while executing "switchover from".
       * Should be less than mdb_offline_mode_disable_lag.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_priority_choice_max_lag = 63 [(.yandex.cloud.value) = "0-86400"];</code>
       * @return Whether the mdbPriorityChoiceMaxLag field is set.
       */
      public boolean hasMdbPriorityChoiceMaxLag() {
        return mdbPriorityChoiceMaxLagBuilder_ != null || mdbPriorityChoiceMaxLag_ != null;
      }
      /**
       * <pre>
       * Replication lag threshold (seconds) which allows replica to be promoted to master while executing "switchover from".
       * Should be less than mdb_offline_mode_disable_lag.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_priority_choice_max_lag = 63 [(.yandex.cloud.value) = "0-86400"];</code>
       * @return The mdbPriorityChoiceMaxLag.
       */
      public com.google.protobuf.Int64Value getMdbPriorityChoiceMaxLag() {
        if (mdbPriorityChoiceMaxLagBuilder_ == null) {
          return mdbPriorityChoiceMaxLag_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : mdbPriorityChoiceMaxLag_;
        } else {
          return mdbPriorityChoiceMaxLagBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Replication lag threshold (seconds) which allows replica to be promoted to master while executing "switchover from".
       * Should be less than mdb_offline_mode_disable_lag.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_priority_choice_max_lag = 63 [(.yandex.cloud.value) = "0-86400"];</code>
       */
      public Builder setMdbPriorityChoiceMaxLag(com.google.protobuf.Int64Value value) {
        if (mdbPriorityChoiceMaxLagBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mdbPriorityChoiceMaxLag_ = value;
          onChanged();
        } else {
          mdbPriorityChoiceMaxLagBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Replication lag threshold (seconds) which allows replica to be promoted to master while executing "switchover from".
       * Should be less than mdb_offline_mode_disable_lag.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_priority_choice_max_lag = 63 [(.yandex.cloud.value) = "0-86400"];</code>
       */
      public Builder setMdbPriorityChoiceMaxLag(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (mdbPriorityChoiceMaxLagBuilder_ == null) {
          mdbPriorityChoiceMaxLag_ = builderForValue.build();
          onChanged();
        } else {
          mdbPriorityChoiceMaxLagBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Replication lag threshold (seconds) which allows replica to be promoted to master while executing "switchover from".
       * Should be less than mdb_offline_mode_disable_lag.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_priority_choice_max_lag = 63 [(.yandex.cloud.value) = "0-86400"];</code>
       */
      public Builder mergeMdbPriorityChoiceMaxLag(com.google.protobuf.Int64Value value) {
        if (mdbPriorityChoiceMaxLagBuilder_ == null) {
          if (mdbPriorityChoiceMaxLag_ != null) {
            mdbPriorityChoiceMaxLag_ =
              com.google.protobuf.Int64Value.newBuilder(mdbPriorityChoiceMaxLag_).mergeFrom(value).buildPartial();
          } else {
            mdbPriorityChoiceMaxLag_ = value;
          }
          onChanged();
        } else {
          mdbPriorityChoiceMaxLagBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Replication lag threshold (seconds) which allows replica to be promoted to master while executing "switchover from".
       * Should be less than mdb_offline_mode_disable_lag.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_priority_choice_max_lag = 63 [(.yandex.cloud.value) = "0-86400"];</code>
       */
      public Builder clearMdbPriorityChoiceMaxLag() {
        if (mdbPriorityChoiceMaxLagBuilder_ == null) {
          mdbPriorityChoiceMaxLag_ = null;
          onChanged();
        } else {
          mdbPriorityChoiceMaxLag_ = null;
          mdbPriorityChoiceMaxLagBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Replication lag threshold (seconds) which allows replica to be promoted to master while executing "switchover from".
       * Should be less than mdb_offline_mode_disable_lag.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_priority_choice_max_lag = 63 [(.yandex.cloud.value) = "0-86400"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMdbPriorityChoiceMaxLagBuilder() {
        
        onChanged();
        return getMdbPriorityChoiceMaxLagFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Replication lag threshold (seconds) which allows replica to be promoted to master while executing "switchover from".
       * Should be less than mdb_offline_mode_disable_lag.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_priority_choice_max_lag = 63 [(.yandex.cloud.value) = "0-86400"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMdbPriorityChoiceMaxLagOrBuilder() {
        if (mdbPriorityChoiceMaxLagBuilder_ != null) {
          return mdbPriorityChoiceMaxLagBuilder_.getMessageOrBuilder();
        } else {
          return mdbPriorityChoiceMaxLag_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : mdbPriorityChoiceMaxLag_;
        }
      }
      /**
       * <pre>
       * Replication lag threshold (seconds) which allows replica to be promoted to master while executing "switchover from".
       * Should be less than mdb_offline_mode_disable_lag.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value mdb_priority_choice_max_lag = 63 [(.yandex.cloud.value) = "0-86400"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMdbPriorityChoiceMaxLagFieldBuilder() {
        if (mdbPriorityChoiceMaxLagBuilder_ == null) {
          mdbPriorityChoiceMaxLagBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMdbPriorityChoiceMaxLag(),
                  getParentForChildren(),
                  isClean());
          mdbPriorityChoiceMaxLag_ = null;
        }
        return mdbPriorityChoiceMaxLagBuilder_;
      }

      private com.google.protobuf.Int64Value innodbPageSize_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> innodbPageSizeBuilder_;
      /**
       * <pre>
       * Specifies the page size for InnoDB tablespaces.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_page_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_page_size = 64 [(.yandex.cloud.value) = "4096-65536"];</code>
       * @return Whether the innodbPageSize field is set.
       */
      public boolean hasInnodbPageSize() {
        return innodbPageSizeBuilder_ != null || innodbPageSize_ != null;
      }
      /**
       * <pre>
       * Specifies the page size for InnoDB tablespaces.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_page_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_page_size = 64 [(.yandex.cloud.value) = "4096-65536"];</code>
       * @return The innodbPageSize.
       */
      public com.google.protobuf.Int64Value getInnodbPageSize() {
        if (innodbPageSizeBuilder_ == null) {
          return innodbPageSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbPageSize_;
        } else {
          return innodbPageSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Specifies the page size for InnoDB tablespaces.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_page_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_page_size = 64 [(.yandex.cloud.value) = "4096-65536"];</code>
       */
      public Builder setInnodbPageSize(com.google.protobuf.Int64Value value) {
        if (innodbPageSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbPageSize_ = value;
          onChanged();
        } else {
          innodbPageSizeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the page size for InnoDB tablespaces.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_page_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_page_size = 64 [(.yandex.cloud.value) = "4096-65536"];</code>
       */
      public Builder setInnodbPageSize(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (innodbPageSizeBuilder_ == null) {
          innodbPageSize_ = builderForValue.build();
          onChanged();
        } else {
          innodbPageSizeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the page size for InnoDB tablespaces.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_page_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_page_size = 64 [(.yandex.cloud.value) = "4096-65536"];</code>
       */
      public Builder mergeInnodbPageSize(com.google.protobuf.Int64Value value) {
        if (innodbPageSizeBuilder_ == null) {
          if (innodbPageSize_ != null) {
            innodbPageSize_ =
              com.google.protobuf.Int64Value.newBuilder(innodbPageSize_).mergeFrom(value).buildPartial();
          } else {
            innodbPageSize_ = value;
          }
          onChanged();
        } else {
          innodbPageSizeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the page size for InnoDB tablespaces.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_page_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_page_size = 64 [(.yandex.cloud.value) = "4096-65536"];</code>
       */
      public Builder clearInnodbPageSize() {
        if (innodbPageSizeBuilder_ == null) {
          innodbPageSize_ = null;
          onChanged();
        } else {
          innodbPageSize_ = null;
          innodbPageSizeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the page size for InnoDB tablespaces.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_page_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_page_size = 64 [(.yandex.cloud.value) = "4096-65536"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getInnodbPageSizeBuilder() {
        
        onChanged();
        return getInnodbPageSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies the page size for InnoDB tablespaces.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_page_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_page_size = 64 [(.yandex.cloud.value) = "4096-65536"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getInnodbPageSizeOrBuilder() {
        if (innodbPageSizeBuilder_ != null) {
          return innodbPageSizeBuilder_.getMessageOrBuilder();
        } else {
          return innodbPageSize_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : innodbPageSize_;
        }
      }
      /**
       * <pre>
       * Specifies the page size for InnoDB tablespaces.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_page_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_page_size = 64 [(.yandex.cloud.value) = "4096-65536"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getInnodbPageSizeFieldBuilder() {
        if (innodbPageSizeBuilder_ == null) {
          innodbPageSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getInnodbPageSize(),
                  getParentForChildren(),
                  isClean());
          innodbPageSize_ = null;
        }
        return innodbPageSizeBuilder_;
      }

      private com.google.protobuf.Int64Value innodbOnlineAlterLogMaxSize_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> innodbOnlineAlterLogMaxSizeBuilder_;
      /**
       * <pre>
       * The limit in bytes on the size of the temporary log files used during online DDL operations
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_online_alter_log_max_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_online_alter_log_max_size = 65 [(.yandex.cloud.value) = "65536-107374182400"];</code>
       * @return Whether the innodbOnlineAlterLogMaxSize field is set.
       */
      public boolean hasInnodbOnlineAlterLogMaxSize() {
        return innodbOnlineAlterLogMaxSizeBuilder_ != null || innodbOnlineAlterLogMaxSize_ != null;
      }
      /**
       * <pre>
       * The limit in bytes on the size of the temporary log files used during online DDL operations
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_online_alter_log_max_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_online_alter_log_max_size = 65 [(.yandex.cloud.value) = "65536-107374182400"];</code>
       * @return The innodbOnlineAlterLogMaxSize.
       */
      public com.google.protobuf.Int64Value getInnodbOnlineAlterLogMaxSize() {
        if (innodbOnlineAlterLogMaxSizeBuilder_ == null) {
          return innodbOnlineAlterLogMaxSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbOnlineAlterLogMaxSize_;
        } else {
          return innodbOnlineAlterLogMaxSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The limit in bytes on the size of the temporary log files used during online DDL operations
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_online_alter_log_max_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_online_alter_log_max_size = 65 [(.yandex.cloud.value) = "65536-107374182400"];</code>
       */
      public Builder setInnodbOnlineAlterLogMaxSize(com.google.protobuf.Int64Value value) {
        if (innodbOnlineAlterLogMaxSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbOnlineAlterLogMaxSize_ = value;
          onChanged();
        } else {
          innodbOnlineAlterLogMaxSizeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The limit in bytes on the size of the temporary log files used during online DDL operations
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_online_alter_log_max_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_online_alter_log_max_size = 65 [(.yandex.cloud.value) = "65536-107374182400"];</code>
       */
      public Builder setInnodbOnlineAlterLogMaxSize(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (innodbOnlineAlterLogMaxSizeBuilder_ == null) {
          innodbOnlineAlterLogMaxSize_ = builderForValue.build();
          onChanged();
        } else {
          innodbOnlineAlterLogMaxSizeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The limit in bytes on the size of the temporary log files used during online DDL operations
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_online_alter_log_max_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_online_alter_log_max_size = 65 [(.yandex.cloud.value) = "65536-107374182400"];</code>
       */
      public Builder mergeInnodbOnlineAlterLogMaxSize(com.google.protobuf.Int64Value value) {
        if (innodbOnlineAlterLogMaxSizeBuilder_ == null) {
          if (innodbOnlineAlterLogMaxSize_ != null) {
            innodbOnlineAlterLogMaxSize_ =
              com.google.protobuf.Int64Value.newBuilder(innodbOnlineAlterLogMaxSize_).mergeFrom(value).buildPartial();
          } else {
            innodbOnlineAlterLogMaxSize_ = value;
          }
          onChanged();
        } else {
          innodbOnlineAlterLogMaxSizeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The limit in bytes on the size of the temporary log files used during online DDL operations
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_online_alter_log_max_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_online_alter_log_max_size = 65 [(.yandex.cloud.value) = "65536-107374182400"];</code>
       */
      public Builder clearInnodbOnlineAlterLogMaxSize() {
        if (innodbOnlineAlterLogMaxSizeBuilder_ == null) {
          innodbOnlineAlterLogMaxSize_ = null;
          onChanged();
        } else {
          innodbOnlineAlterLogMaxSize_ = null;
          innodbOnlineAlterLogMaxSizeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The limit in bytes on the size of the temporary log files used during online DDL operations
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_online_alter_log_max_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_online_alter_log_max_size = 65 [(.yandex.cloud.value) = "65536-107374182400"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getInnodbOnlineAlterLogMaxSizeBuilder() {
        
        onChanged();
        return getInnodbOnlineAlterLogMaxSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The limit in bytes on the size of the temporary log files used during online DDL operations
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_online_alter_log_max_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_online_alter_log_max_size = 65 [(.yandex.cloud.value) = "65536-107374182400"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getInnodbOnlineAlterLogMaxSizeOrBuilder() {
        if (innodbOnlineAlterLogMaxSizeBuilder_ != null) {
          return innodbOnlineAlterLogMaxSizeBuilder_.getMessageOrBuilder();
        } else {
          return innodbOnlineAlterLogMaxSize_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : innodbOnlineAlterLogMaxSize_;
        }
      }
      /**
       * <pre>
       * The limit in bytes on the size of the temporary log files used during online DDL operations
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_online_alter_log_max_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_online_alter_log_max_size = 65 [(.yandex.cloud.value) = "65536-107374182400"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getInnodbOnlineAlterLogMaxSizeFieldBuilder() {
        if (innodbOnlineAlterLogMaxSizeBuilder_ == null) {
          innodbOnlineAlterLogMaxSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getInnodbOnlineAlterLogMaxSize(),
                  getParentForChildren(),
                  isClean());
          innodbOnlineAlterLogMaxSize_ = null;
        }
        return innodbOnlineAlterLogMaxSizeBuilder_;
      }

      private com.google.protobuf.Int64Value innodbFtMinTokenSize_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> innodbFtMinTokenSizeBuilder_;
      /**
       * <pre>
       * Minimum length of words that are stored in an InnoDB FULLTEXT index
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_min_token_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_ft_min_token_size = 66 [(.yandex.cloud.value) = "0-16"];</code>
       * @return Whether the innodbFtMinTokenSize field is set.
       */
      public boolean hasInnodbFtMinTokenSize() {
        return innodbFtMinTokenSizeBuilder_ != null || innodbFtMinTokenSize_ != null;
      }
      /**
       * <pre>
       * Minimum length of words that are stored in an InnoDB FULLTEXT index
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_min_token_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_ft_min_token_size = 66 [(.yandex.cloud.value) = "0-16"];</code>
       * @return The innodbFtMinTokenSize.
       */
      public com.google.protobuf.Int64Value getInnodbFtMinTokenSize() {
        if (innodbFtMinTokenSizeBuilder_ == null) {
          return innodbFtMinTokenSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbFtMinTokenSize_;
        } else {
          return innodbFtMinTokenSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Minimum length of words that are stored in an InnoDB FULLTEXT index
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_min_token_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_ft_min_token_size = 66 [(.yandex.cloud.value) = "0-16"];</code>
       */
      public Builder setInnodbFtMinTokenSize(com.google.protobuf.Int64Value value) {
        if (innodbFtMinTokenSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbFtMinTokenSize_ = value;
          onChanged();
        } else {
          innodbFtMinTokenSizeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Minimum length of words that are stored in an InnoDB FULLTEXT index
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_min_token_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_ft_min_token_size = 66 [(.yandex.cloud.value) = "0-16"];</code>
       */
      public Builder setInnodbFtMinTokenSize(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (innodbFtMinTokenSizeBuilder_ == null) {
          innodbFtMinTokenSize_ = builderForValue.build();
          onChanged();
        } else {
          innodbFtMinTokenSizeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Minimum length of words that are stored in an InnoDB FULLTEXT index
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_min_token_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_ft_min_token_size = 66 [(.yandex.cloud.value) = "0-16"];</code>
       */
      public Builder mergeInnodbFtMinTokenSize(com.google.protobuf.Int64Value value) {
        if (innodbFtMinTokenSizeBuilder_ == null) {
          if (innodbFtMinTokenSize_ != null) {
            innodbFtMinTokenSize_ =
              com.google.protobuf.Int64Value.newBuilder(innodbFtMinTokenSize_).mergeFrom(value).buildPartial();
          } else {
            innodbFtMinTokenSize_ = value;
          }
          onChanged();
        } else {
          innodbFtMinTokenSizeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Minimum length of words that are stored in an InnoDB FULLTEXT index
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_min_token_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_ft_min_token_size = 66 [(.yandex.cloud.value) = "0-16"];</code>
       */
      public Builder clearInnodbFtMinTokenSize() {
        if (innodbFtMinTokenSizeBuilder_ == null) {
          innodbFtMinTokenSize_ = null;
          onChanged();
        } else {
          innodbFtMinTokenSize_ = null;
          innodbFtMinTokenSizeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Minimum length of words that are stored in an InnoDB FULLTEXT index
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_min_token_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_ft_min_token_size = 66 [(.yandex.cloud.value) = "0-16"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getInnodbFtMinTokenSizeBuilder() {
        
        onChanged();
        return getInnodbFtMinTokenSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Minimum length of words that are stored in an InnoDB FULLTEXT index
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_min_token_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_ft_min_token_size = 66 [(.yandex.cloud.value) = "0-16"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getInnodbFtMinTokenSizeOrBuilder() {
        if (innodbFtMinTokenSizeBuilder_ != null) {
          return innodbFtMinTokenSizeBuilder_.getMessageOrBuilder();
        } else {
          return innodbFtMinTokenSize_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : innodbFtMinTokenSize_;
        }
      }
      /**
       * <pre>
       * Minimum length of words that are stored in an InnoDB FULLTEXT index
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_min_token_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_ft_min_token_size = 66 [(.yandex.cloud.value) = "0-16"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getInnodbFtMinTokenSizeFieldBuilder() {
        if (innodbFtMinTokenSizeBuilder_ == null) {
          innodbFtMinTokenSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getInnodbFtMinTokenSize(),
                  getParentForChildren(),
                  isClean());
          innodbFtMinTokenSize_ = null;
        }
        return innodbFtMinTokenSizeBuilder_;
      }

      private com.google.protobuf.Int64Value innodbFtMaxTokenSize_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> innodbFtMaxTokenSizeBuilder_;
      /**
       * <pre>
       * Maximum length of words that are stored in an InnoDB FULLTEXT index
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_max_token_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_ft_max_token_size = 67 [(.yandex.cloud.value) = "10-84"];</code>
       * @return Whether the innodbFtMaxTokenSize field is set.
       */
      public boolean hasInnodbFtMaxTokenSize() {
        return innodbFtMaxTokenSizeBuilder_ != null || innodbFtMaxTokenSize_ != null;
      }
      /**
       * <pre>
       * Maximum length of words that are stored in an InnoDB FULLTEXT index
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_max_token_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_ft_max_token_size = 67 [(.yandex.cloud.value) = "10-84"];</code>
       * @return The innodbFtMaxTokenSize.
       */
      public com.google.protobuf.Int64Value getInnodbFtMaxTokenSize() {
        if (innodbFtMaxTokenSizeBuilder_ == null) {
          return innodbFtMaxTokenSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbFtMaxTokenSize_;
        } else {
          return innodbFtMaxTokenSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Maximum length of words that are stored in an InnoDB FULLTEXT index
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_max_token_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_ft_max_token_size = 67 [(.yandex.cloud.value) = "10-84"];</code>
       */
      public Builder setInnodbFtMaxTokenSize(com.google.protobuf.Int64Value value) {
        if (innodbFtMaxTokenSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbFtMaxTokenSize_ = value;
          onChanged();
        } else {
          innodbFtMaxTokenSizeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Maximum length of words that are stored in an InnoDB FULLTEXT index
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_max_token_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_ft_max_token_size = 67 [(.yandex.cloud.value) = "10-84"];</code>
       */
      public Builder setInnodbFtMaxTokenSize(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (innodbFtMaxTokenSizeBuilder_ == null) {
          innodbFtMaxTokenSize_ = builderForValue.build();
          onChanged();
        } else {
          innodbFtMaxTokenSizeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Maximum length of words that are stored in an InnoDB FULLTEXT index
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_max_token_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_ft_max_token_size = 67 [(.yandex.cloud.value) = "10-84"];</code>
       */
      public Builder mergeInnodbFtMaxTokenSize(com.google.protobuf.Int64Value value) {
        if (innodbFtMaxTokenSizeBuilder_ == null) {
          if (innodbFtMaxTokenSize_ != null) {
            innodbFtMaxTokenSize_ =
              com.google.protobuf.Int64Value.newBuilder(innodbFtMaxTokenSize_).mergeFrom(value).buildPartial();
          } else {
            innodbFtMaxTokenSize_ = value;
          }
          onChanged();
        } else {
          innodbFtMaxTokenSizeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Maximum length of words that are stored in an InnoDB FULLTEXT index
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_max_token_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_ft_max_token_size = 67 [(.yandex.cloud.value) = "10-84"];</code>
       */
      public Builder clearInnodbFtMaxTokenSize() {
        if (innodbFtMaxTokenSizeBuilder_ == null) {
          innodbFtMaxTokenSize_ = null;
          onChanged();
        } else {
          innodbFtMaxTokenSize_ = null;
          innodbFtMaxTokenSizeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Maximum length of words that are stored in an InnoDB FULLTEXT index
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_max_token_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_ft_max_token_size = 67 [(.yandex.cloud.value) = "10-84"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getInnodbFtMaxTokenSizeBuilder() {
        
        onChanged();
        return getInnodbFtMaxTokenSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Maximum length of words that are stored in an InnoDB FULLTEXT index
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_max_token_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_ft_max_token_size = 67 [(.yandex.cloud.value) = "10-84"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getInnodbFtMaxTokenSizeOrBuilder() {
        if (innodbFtMaxTokenSizeBuilder_ != null) {
          return innodbFtMaxTokenSizeBuilder_.getMessageOrBuilder();
        } else {
          return innodbFtMaxTokenSize_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : innodbFtMaxTokenSize_;
        }
      }
      /**
       * <pre>
       * Maximum length of words that are stored in an InnoDB FULLTEXT index
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_ft_max_token_size) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_ft_max_token_size = 67 [(.yandex.cloud.value) = "10-84"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getInnodbFtMaxTokenSizeFieldBuilder() {
        if (innodbFtMaxTokenSizeBuilder_ == null) {
          innodbFtMaxTokenSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getInnodbFtMaxTokenSize(),
                  getParentForChildren(),
                  isClean());
          innodbFtMaxTokenSize_ = null;
        }
        return innodbFtMaxTokenSizeBuilder_;
      }

      private com.google.protobuf.Int64Value lowerCaseTableNames_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> lowerCaseTableNamesBuilder_;
      /**
       * <pre>
       * Table names storage and comparison strategy
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lower_case_table_names) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value lower_case_table_names = 68 [(.yandex.cloud.value) = "0-1"];</code>
       * @return Whether the lowerCaseTableNames field is set.
       */
      public boolean hasLowerCaseTableNames() {
        return lowerCaseTableNamesBuilder_ != null || lowerCaseTableNames_ != null;
      }
      /**
       * <pre>
       * Table names storage and comparison strategy
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lower_case_table_names) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value lower_case_table_names = 68 [(.yandex.cloud.value) = "0-1"];</code>
       * @return The lowerCaseTableNames.
       */
      public com.google.protobuf.Int64Value getLowerCaseTableNames() {
        if (lowerCaseTableNamesBuilder_ == null) {
          return lowerCaseTableNames_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : lowerCaseTableNames_;
        } else {
          return lowerCaseTableNamesBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Table names storage and comparison strategy
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lower_case_table_names) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value lower_case_table_names = 68 [(.yandex.cloud.value) = "0-1"];</code>
       */
      public Builder setLowerCaseTableNames(com.google.protobuf.Int64Value value) {
        if (lowerCaseTableNamesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          lowerCaseTableNames_ = value;
          onChanged();
        } else {
          lowerCaseTableNamesBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Table names storage and comparison strategy
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lower_case_table_names) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value lower_case_table_names = 68 [(.yandex.cloud.value) = "0-1"];</code>
       */
      public Builder setLowerCaseTableNames(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (lowerCaseTableNamesBuilder_ == null) {
          lowerCaseTableNames_ = builderForValue.build();
          onChanged();
        } else {
          lowerCaseTableNamesBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Table names storage and comparison strategy
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lower_case_table_names) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value lower_case_table_names = 68 [(.yandex.cloud.value) = "0-1"];</code>
       */
      public Builder mergeLowerCaseTableNames(com.google.protobuf.Int64Value value) {
        if (lowerCaseTableNamesBuilder_ == null) {
          if (lowerCaseTableNames_ != null) {
            lowerCaseTableNames_ =
              com.google.protobuf.Int64Value.newBuilder(lowerCaseTableNames_).mergeFrom(value).buildPartial();
          } else {
            lowerCaseTableNames_ = value;
          }
          onChanged();
        } else {
          lowerCaseTableNamesBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Table names storage and comparison strategy
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lower_case_table_names) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value lower_case_table_names = 68 [(.yandex.cloud.value) = "0-1"];</code>
       */
      public Builder clearLowerCaseTableNames() {
        if (lowerCaseTableNamesBuilder_ == null) {
          lowerCaseTableNames_ = null;
          onChanged();
        } else {
          lowerCaseTableNames_ = null;
          lowerCaseTableNamesBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Table names storage and comparison strategy
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lower_case_table_names) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value lower_case_table_names = 68 [(.yandex.cloud.value) = "0-1"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getLowerCaseTableNamesBuilder() {
        
        onChanged();
        return getLowerCaseTableNamesFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Table names storage and comparison strategy
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lower_case_table_names) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value lower_case_table_names = 68 [(.yandex.cloud.value) = "0-1"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getLowerCaseTableNamesOrBuilder() {
        if (lowerCaseTableNamesBuilder_ != null) {
          return lowerCaseTableNamesBuilder_.getMessageOrBuilder();
        } else {
          return lowerCaseTableNames_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : lowerCaseTableNames_;
        }
      }
      /**
       * <pre>
       * Table names storage and comparison strategy
       * See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lower_case_table_names) for details.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value lower_case_table_names = 68 [(.yandex.cloud.value) = "0-1"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getLowerCaseTableNamesFieldBuilder() {
        if (lowerCaseTableNamesBuilder_ == null) {
          lowerCaseTableNamesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getLowerCaseTableNames(),
                  getParentForChildren(),
                  isClean());
          lowerCaseTableNames_ = null;
        }
        return lowerCaseTableNamesBuilder_;
      }

      private com.google.protobuf.Int64Value maxSpRecursionDepth_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxSpRecursionDepthBuilder_;
      /**
       * <pre>
       * The number of times that any given stored procedure may be called recursively.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_sp_recursion_depth).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_sp_recursion_depth = 69 [(.yandex.cloud.value) = "0-255"];</code>
       * @return Whether the maxSpRecursionDepth field is set.
       */
      public boolean hasMaxSpRecursionDepth() {
        return maxSpRecursionDepthBuilder_ != null || maxSpRecursionDepth_ != null;
      }
      /**
       * <pre>
       * The number of times that any given stored procedure may be called recursively.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_sp_recursion_depth).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_sp_recursion_depth = 69 [(.yandex.cloud.value) = "0-255"];</code>
       * @return The maxSpRecursionDepth.
       */
      public com.google.protobuf.Int64Value getMaxSpRecursionDepth() {
        if (maxSpRecursionDepthBuilder_ == null) {
          return maxSpRecursionDepth_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxSpRecursionDepth_;
        } else {
          return maxSpRecursionDepthBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The number of times that any given stored procedure may be called recursively.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_sp_recursion_depth).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_sp_recursion_depth = 69 [(.yandex.cloud.value) = "0-255"];</code>
       */
      public Builder setMaxSpRecursionDepth(com.google.protobuf.Int64Value value) {
        if (maxSpRecursionDepthBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxSpRecursionDepth_ = value;
          onChanged();
        } else {
          maxSpRecursionDepthBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of times that any given stored procedure may be called recursively.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_sp_recursion_depth).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_sp_recursion_depth = 69 [(.yandex.cloud.value) = "0-255"];</code>
       */
      public Builder setMaxSpRecursionDepth(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxSpRecursionDepthBuilder_ == null) {
          maxSpRecursionDepth_ = builderForValue.build();
          onChanged();
        } else {
          maxSpRecursionDepthBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The number of times that any given stored procedure may be called recursively.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_sp_recursion_depth).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_sp_recursion_depth = 69 [(.yandex.cloud.value) = "0-255"];</code>
       */
      public Builder mergeMaxSpRecursionDepth(com.google.protobuf.Int64Value value) {
        if (maxSpRecursionDepthBuilder_ == null) {
          if (maxSpRecursionDepth_ != null) {
            maxSpRecursionDepth_ =
              com.google.protobuf.Int64Value.newBuilder(maxSpRecursionDepth_).mergeFrom(value).buildPartial();
          } else {
            maxSpRecursionDepth_ = value;
          }
          onChanged();
        } else {
          maxSpRecursionDepthBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of times that any given stored procedure may be called recursively.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_sp_recursion_depth).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_sp_recursion_depth = 69 [(.yandex.cloud.value) = "0-255"];</code>
       */
      public Builder clearMaxSpRecursionDepth() {
        if (maxSpRecursionDepthBuilder_ == null) {
          maxSpRecursionDepth_ = null;
          onChanged();
        } else {
          maxSpRecursionDepth_ = null;
          maxSpRecursionDepthBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The number of times that any given stored procedure may be called recursively.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_sp_recursion_depth).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_sp_recursion_depth = 69 [(.yandex.cloud.value) = "0-255"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxSpRecursionDepthBuilder() {
        
        onChanged();
        return getMaxSpRecursionDepthFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The number of times that any given stored procedure may be called recursively.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_sp_recursion_depth).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_sp_recursion_depth = 69 [(.yandex.cloud.value) = "0-255"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxSpRecursionDepthOrBuilder() {
        if (maxSpRecursionDepthBuilder_ != null) {
          return maxSpRecursionDepthBuilder_.getMessageOrBuilder();
        } else {
          return maxSpRecursionDepth_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxSpRecursionDepth_;
        }
      }
      /**
       * <pre>
       * The number of times that any given stored procedure may be called recursively.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_sp_recursion_depth).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_sp_recursion_depth = 69 [(.yandex.cloud.value) = "0-255"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxSpRecursionDepthFieldBuilder() {
        if (maxSpRecursionDepthBuilder_ == null) {
          maxSpRecursionDepthBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxSpRecursionDepth(),
                  getParentForChildren(),
                  isClean());
          maxSpRecursionDepth_ = null;
        }
        return maxSpRecursionDepthBuilder_;
      }

      private com.google.protobuf.Int64Value innodbCompressionLevel_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> innodbCompressionLevelBuilder_;
      /**
       * <pre>
       * The level of zlib compression to use for InnoDB compressed tables and indexes.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_compression_level).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_compression_level = 70 [(.yandex.cloud.value) = "0-9"];</code>
       * @return Whether the innodbCompressionLevel field is set.
       */
      public boolean hasInnodbCompressionLevel() {
        return innodbCompressionLevelBuilder_ != null || innodbCompressionLevel_ != null;
      }
      /**
       * <pre>
       * The level of zlib compression to use for InnoDB compressed tables and indexes.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_compression_level).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_compression_level = 70 [(.yandex.cloud.value) = "0-9"];</code>
       * @return The innodbCompressionLevel.
       */
      public com.google.protobuf.Int64Value getInnodbCompressionLevel() {
        if (innodbCompressionLevelBuilder_ == null) {
          return innodbCompressionLevel_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbCompressionLevel_;
        } else {
          return innodbCompressionLevelBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The level of zlib compression to use for InnoDB compressed tables and indexes.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_compression_level).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_compression_level = 70 [(.yandex.cloud.value) = "0-9"];</code>
       */
      public Builder setInnodbCompressionLevel(com.google.protobuf.Int64Value value) {
        if (innodbCompressionLevelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbCompressionLevel_ = value;
          onChanged();
        } else {
          innodbCompressionLevelBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The level of zlib compression to use for InnoDB compressed tables and indexes.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_compression_level).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_compression_level = 70 [(.yandex.cloud.value) = "0-9"];</code>
       */
      public Builder setInnodbCompressionLevel(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (innodbCompressionLevelBuilder_ == null) {
          innodbCompressionLevel_ = builderForValue.build();
          onChanged();
        } else {
          innodbCompressionLevelBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The level of zlib compression to use for InnoDB compressed tables and indexes.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_compression_level).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_compression_level = 70 [(.yandex.cloud.value) = "0-9"];</code>
       */
      public Builder mergeInnodbCompressionLevel(com.google.protobuf.Int64Value value) {
        if (innodbCompressionLevelBuilder_ == null) {
          if (innodbCompressionLevel_ != null) {
            innodbCompressionLevel_ =
              com.google.protobuf.Int64Value.newBuilder(innodbCompressionLevel_).mergeFrom(value).buildPartial();
          } else {
            innodbCompressionLevel_ = value;
          }
          onChanged();
        } else {
          innodbCompressionLevelBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The level of zlib compression to use for InnoDB compressed tables and indexes.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_compression_level).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_compression_level = 70 [(.yandex.cloud.value) = "0-9"];</code>
       */
      public Builder clearInnodbCompressionLevel() {
        if (innodbCompressionLevelBuilder_ == null) {
          innodbCompressionLevel_ = null;
          onChanged();
        } else {
          innodbCompressionLevel_ = null;
          innodbCompressionLevelBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The level of zlib compression to use for InnoDB compressed tables and indexes.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_compression_level).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_compression_level = 70 [(.yandex.cloud.value) = "0-9"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getInnodbCompressionLevelBuilder() {
        
        onChanged();
        return getInnodbCompressionLevelFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The level of zlib compression to use for InnoDB compressed tables and indexes.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_compression_level).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_compression_level = 70 [(.yandex.cloud.value) = "0-9"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getInnodbCompressionLevelOrBuilder() {
        if (innodbCompressionLevelBuilder_ != null) {
          return innodbCompressionLevelBuilder_.getMessageOrBuilder();
        } else {
          return innodbCompressionLevel_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : innodbCompressionLevel_;
        }
      }
      /**
       * <pre>
       * The level of zlib compression to use for InnoDB compressed tables and indexes.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_compression_level).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_compression_level = 70 [(.yandex.cloud.value) = "0-9"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getInnodbCompressionLevelFieldBuilder() {
        if (innodbCompressionLevelBuilder_ == null) {
          innodbCompressionLevelBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getInnodbCompressionLevel(),
                  getParentForChildren(),
                  isClean());
          innodbCompressionLevel_ = null;
        }
        return innodbCompressionLevelBuilder_;
      }

      private int binlogTransactionDependencyTracking_ = 0;
      /**
       * <pre>
       * Specifies how the source mysqld generates the dependency information that it writes in the binary log to help replicas determine which transactions can be executed in parallel.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_transaction_dependency_tracking).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.BinlogTransactionDependencyTracking binlog_transaction_dependency_tracking = 71;</code>
       * @return The enum numeric value on the wire for binlogTransactionDependencyTracking.
       */
      @java.lang.Override public int getBinlogTransactionDependencyTrackingValue() {
        return binlogTransactionDependencyTracking_;
      }
      /**
       * <pre>
       * Specifies how the source mysqld generates the dependency information that it writes in the binary log to help replicas determine which transactions can be executed in parallel.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_transaction_dependency_tracking).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.BinlogTransactionDependencyTracking binlog_transaction_dependency_tracking = 71;</code>
       * @param value The enum numeric value on the wire for binlogTransactionDependencyTracking to set.
       * @return This builder for chaining.
       */
      public Builder setBinlogTransactionDependencyTrackingValue(int value) {
        
        binlogTransactionDependencyTracking_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies how the source mysqld generates the dependency information that it writes in the binary log to help replicas determine which transactions can be executed in parallel.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_transaction_dependency_tracking).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.BinlogTransactionDependencyTracking binlog_transaction_dependency_tracking = 71;</code>
       * @return The binlogTransactionDependencyTracking.
       */
      @java.lang.Override
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.BinlogTransactionDependencyTracking getBinlogTransactionDependencyTracking() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.BinlogTransactionDependencyTracking result = yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.BinlogTransactionDependencyTracking.valueOf(binlogTransactionDependencyTracking_);
        return result == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.BinlogTransactionDependencyTracking.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Specifies how the source mysqld generates the dependency information that it writes in the binary log to help replicas determine which transactions can be executed in parallel.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_transaction_dependency_tracking).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.BinlogTransactionDependencyTracking binlog_transaction_dependency_tracking = 71;</code>
       * @param value The binlogTransactionDependencyTracking to set.
       * @return This builder for chaining.
       */
      public Builder setBinlogTransactionDependencyTracking(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.BinlogTransactionDependencyTracking value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        binlogTransactionDependencyTracking_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies how the source mysqld generates the dependency information that it writes in the binary log to help replicas determine which transactions can be executed in parallel.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html#sysvar_binlog_transaction_dependency_tracking).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.BinlogTransactionDependencyTracking binlog_transaction_dependency_tracking = 71;</code>
       * @return This builder for chaining.
       */
      public Builder clearBinlogTransactionDependencyTracking() {
        
        binlogTransactionDependencyTracking_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.BoolValue autocommit_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> autocommitBuilder_;
      /**
       * <pre>
       * Config specific will be all changes to a table take effect immediately or you must use COMMIT to accept a transaction or ROLLBACK to cancel it.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_autocommit).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue autocommit = 72;</code>
       * @return Whether the autocommit field is set.
       */
      public boolean hasAutocommit() {
        return autocommitBuilder_ != null || autocommit_ != null;
      }
      /**
       * <pre>
       * Config specific will be all changes to a table take effect immediately or you must use COMMIT to accept a transaction or ROLLBACK to cancel it.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_autocommit).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue autocommit = 72;</code>
       * @return The autocommit.
       */
      public com.google.protobuf.BoolValue getAutocommit() {
        if (autocommitBuilder_ == null) {
          return autocommit_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : autocommit_;
        } else {
          return autocommitBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Config specific will be all changes to a table take effect immediately or you must use COMMIT to accept a transaction or ROLLBACK to cancel it.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_autocommit).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue autocommit = 72;</code>
       */
      public Builder setAutocommit(com.google.protobuf.BoolValue value) {
        if (autocommitBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          autocommit_ = value;
          onChanged();
        } else {
          autocommitBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Config specific will be all changes to a table take effect immediately or you must use COMMIT to accept a transaction or ROLLBACK to cancel it.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_autocommit).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue autocommit = 72;</code>
       */
      public Builder setAutocommit(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (autocommitBuilder_ == null) {
          autocommit_ = builderForValue.build();
          onChanged();
        } else {
          autocommitBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Config specific will be all changes to a table take effect immediately or you must use COMMIT to accept a transaction or ROLLBACK to cancel it.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_autocommit).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue autocommit = 72;</code>
       */
      public Builder mergeAutocommit(com.google.protobuf.BoolValue value) {
        if (autocommitBuilder_ == null) {
          if (autocommit_ != null) {
            autocommit_ =
              com.google.protobuf.BoolValue.newBuilder(autocommit_).mergeFrom(value).buildPartial();
          } else {
            autocommit_ = value;
          }
          onChanged();
        } else {
          autocommitBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Config specific will be all changes to a table take effect immediately or you must use COMMIT to accept a transaction or ROLLBACK to cancel it.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_autocommit).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue autocommit = 72;</code>
       */
      public Builder clearAutocommit() {
        if (autocommitBuilder_ == null) {
          autocommit_ = null;
          onChanged();
        } else {
          autocommit_ = null;
          autocommitBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Config specific will be all changes to a table take effect immediately or you must use COMMIT to accept a transaction or ROLLBACK to cancel it.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_autocommit).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue autocommit = 72;</code>
       */
      public com.google.protobuf.BoolValue.Builder getAutocommitBuilder() {
        
        onChanged();
        return getAutocommitFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Config specific will be all changes to a table take effect immediately or you must use COMMIT to accept a transaction or ROLLBACK to cancel it.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_autocommit).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue autocommit = 72;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getAutocommitOrBuilder() {
        if (autocommitBuilder_ != null) {
          return autocommitBuilder_.getMessageOrBuilder();
        } else {
          return autocommit_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : autocommit_;
        }
      }
      /**
       * <pre>
       * Config specific will be all changes to a table take effect immediately or you must use COMMIT to accept a transaction or ROLLBACK to cancel it.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_autocommit).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue autocommit = 72;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getAutocommitFieldBuilder() {
        if (autocommitBuilder_ == null) {
          autocommitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getAutocommit(),
                  getParentForChildren(),
                  isClean());
          autocommit_ = null;
        }
        return autocommitBuilder_;
      }

      private com.google.protobuf.BoolValue innodbStatusOutput_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> innodbStatusOutputBuilder_;
      /**
       * <pre>
       * Enables or disables periodic output for the standard InnoDB Monitor.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_status_output).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_status_output = 73;</code>
       * @return Whether the innodbStatusOutput field is set.
       */
      public boolean hasInnodbStatusOutput() {
        return innodbStatusOutputBuilder_ != null || innodbStatusOutput_ != null;
      }
      /**
       * <pre>
       * Enables or disables periodic output for the standard InnoDB Monitor.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_status_output).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_status_output = 73;</code>
       * @return The innodbStatusOutput.
       */
      public com.google.protobuf.BoolValue getInnodbStatusOutput() {
        if (innodbStatusOutputBuilder_ == null) {
          return innodbStatusOutput_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : innodbStatusOutput_;
        } else {
          return innodbStatusOutputBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enables or disables periodic output for the standard InnoDB Monitor.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_status_output).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_status_output = 73;</code>
       */
      public Builder setInnodbStatusOutput(com.google.protobuf.BoolValue value) {
        if (innodbStatusOutputBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbStatusOutput_ = value;
          onChanged();
        } else {
          innodbStatusOutputBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables periodic output for the standard InnoDB Monitor.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_status_output).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_status_output = 73;</code>
       */
      public Builder setInnodbStatusOutput(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (innodbStatusOutputBuilder_ == null) {
          innodbStatusOutput_ = builderForValue.build();
          onChanged();
        } else {
          innodbStatusOutputBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables periodic output for the standard InnoDB Monitor.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_status_output).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_status_output = 73;</code>
       */
      public Builder mergeInnodbStatusOutput(com.google.protobuf.BoolValue value) {
        if (innodbStatusOutputBuilder_ == null) {
          if (innodbStatusOutput_ != null) {
            innodbStatusOutput_ =
              com.google.protobuf.BoolValue.newBuilder(innodbStatusOutput_).mergeFrom(value).buildPartial();
          } else {
            innodbStatusOutput_ = value;
          }
          onChanged();
        } else {
          innodbStatusOutputBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables periodic output for the standard InnoDB Monitor.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_status_output).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_status_output = 73;</code>
       */
      public Builder clearInnodbStatusOutput() {
        if (innodbStatusOutputBuilder_ == null) {
          innodbStatusOutput_ = null;
          onChanged();
        } else {
          innodbStatusOutput_ = null;
          innodbStatusOutputBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables periodic output for the standard InnoDB Monitor.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_status_output).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_status_output = 73;</code>
       */
      public com.google.protobuf.BoolValue.Builder getInnodbStatusOutputBuilder() {
        
        onChanged();
        return getInnodbStatusOutputFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enables or disables periodic output for the standard InnoDB Monitor.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_status_output).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_status_output = 73;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getInnodbStatusOutputOrBuilder() {
        if (innodbStatusOutputBuilder_ != null) {
          return innodbStatusOutputBuilder_.getMessageOrBuilder();
        } else {
          return innodbStatusOutput_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : innodbStatusOutput_;
        }
      }
      /**
       * <pre>
       * Enables or disables periodic output for the standard InnoDB Monitor.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_status_output).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_status_output = 73;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getInnodbStatusOutputFieldBuilder() {
        if (innodbStatusOutputBuilder_ == null) {
          innodbStatusOutputBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getInnodbStatusOutput(),
                  getParentForChildren(),
                  isClean());
          innodbStatusOutput_ = null;
        }
        return innodbStatusOutputBuilder_;
      }

      private com.google.protobuf.BoolValue innodbStrictMode_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> innodbStrictModeBuilder_;
      /**
       * <pre>
       * When innodb_strict_mode is enabled, InnoDB returns errors rather than warnings when checking for invalid or incompatible table options.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_strict_mode).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_strict_mode = 74;</code>
       * @return Whether the innodbStrictMode field is set.
       */
      public boolean hasInnodbStrictMode() {
        return innodbStrictModeBuilder_ != null || innodbStrictMode_ != null;
      }
      /**
       * <pre>
       * When innodb_strict_mode is enabled, InnoDB returns errors rather than warnings when checking for invalid or incompatible table options.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_strict_mode).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_strict_mode = 74;</code>
       * @return The innodbStrictMode.
       */
      public com.google.protobuf.BoolValue getInnodbStrictMode() {
        if (innodbStrictModeBuilder_ == null) {
          return innodbStrictMode_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : innodbStrictMode_;
        } else {
          return innodbStrictModeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * When innodb_strict_mode is enabled, InnoDB returns errors rather than warnings when checking for invalid or incompatible table options.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_strict_mode).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_strict_mode = 74;</code>
       */
      public Builder setInnodbStrictMode(com.google.protobuf.BoolValue value) {
        if (innodbStrictModeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbStrictMode_ = value;
          onChanged();
        } else {
          innodbStrictModeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * When innodb_strict_mode is enabled, InnoDB returns errors rather than warnings when checking for invalid or incompatible table options.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_strict_mode).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_strict_mode = 74;</code>
       */
      public Builder setInnodbStrictMode(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (innodbStrictModeBuilder_ == null) {
          innodbStrictMode_ = builderForValue.build();
          onChanged();
        } else {
          innodbStrictModeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * When innodb_strict_mode is enabled, InnoDB returns errors rather than warnings when checking for invalid or incompatible table options.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_strict_mode).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_strict_mode = 74;</code>
       */
      public Builder mergeInnodbStrictMode(com.google.protobuf.BoolValue value) {
        if (innodbStrictModeBuilder_ == null) {
          if (innodbStrictMode_ != null) {
            innodbStrictMode_ =
              com.google.protobuf.BoolValue.newBuilder(innodbStrictMode_).mergeFrom(value).buildPartial();
          } else {
            innodbStrictMode_ = value;
          }
          onChanged();
        } else {
          innodbStrictModeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * When innodb_strict_mode is enabled, InnoDB returns errors rather than warnings when checking for invalid or incompatible table options.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_strict_mode).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_strict_mode = 74;</code>
       */
      public Builder clearInnodbStrictMode() {
        if (innodbStrictModeBuilder_ == null) {
          innodbStrictMode_ = null;
          onChanged();
        } else {
          innodbStrictMode_ = null;
          innodbStrictModeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * When innodb_strict_mode is enabled, InnoDB returns errors rather than warnings when checking for invalid or incompatible table options.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_strict_mode).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_strict_mode = 74;</code>
       */
      public com.google.protobuf.BoolValue.Builder getInnodbStrictModeBuilder() {
        
        onChanged();
        return getInnodbStrictModeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * When innodb_strict_mode is enabled, InnoDB returns errors rather than warnings when checking for invalid or incompatible table options.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_strict_mode).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_strict_mode = 74;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getInnodbStrictModeOrBuilder() {
        if (innodbStrictModeBuilder_ != null) {
          return innodbStrictModeBuilder_.getMessageOrBuilder();
        } else {
          return innodbStrictMode_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : innodbStrictMode_;
        }
      }
      /**
       * <pre>
       * When innodb_strict_mode is enabled, InnoDB returns errors rather than warnings when checking for invalid or incompatible table options.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_strict_mode).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_strict_mode = 74;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getInnodbStrictModeFieldBuilder() {
        if (innodbStrictModeBuilder_ == null) {
          innodbStrictModeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getInnodbStrictMode(),
                  getParentForChildren(),
                  isClean());
          innodbStrictMode_ = null;
        }
        return innodbStrictModeBuilder_;
      }

      private com.google.protobuf.BoolValue innodbPrintLockWaitTimeoutInfo_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> innodbPrintLockWaitTimeoutInfoBuilder_;
      /**
       * <pre>
       * Makes InnoDB to write information about all lock wait timeout errors into the log file.
       * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/innodb_show_status.html?highlight=innodb_print_lock_wait_timeout_info).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_print_lock_wait_timeout_info = 75;</code>
       * @return Whether the innodbPrintLockWaitTimeoutInfo field is set.
       */
      public boolean hasInnodbPrintLockWaitTimeoutInfo() {
        return innodbPrintLockWaitTimeoutInfoBuilder_ != null || innodbPrintLockWaitTimeoutInfo_ != null;
      }
      /**
       * <pre>
       * Makes InnoDB to write information about all lock wait timeout errors into the log file.
       * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/innodb_show_status.html?highlight=innodb_print_lock_wait_timeout_info).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_print_lock_wait_timeout_info = 75;</code>
       * @return The innodbPrintLockWaitTimeoutInfo.
       */
      public com.google.protobuf.BoolValue getInnodbPrintLockWaitTimeoutInfo() {
        if (innodbPrintLockWaitTimeoutInfoBuilder_ == null) {
          return innodbPrintLockWaitTimeoutInfo_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : innodbPrintLockWaitTimeoutInfo_;
        } else {
          return innodbPrintLockWaitTimeoutInfoBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Makes InnoDB to write information about all lock wait timeout errors into the log file.
       * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/innodb_show_status.html?highlight=innodb_print_lock_wait_timeout_info).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_print_lock_wait_timeout_info = 75;</code>
       */
      public Builder setInnodbPrintLockWaitTimeoutInfo(com.google.protobuf.BoolValue value) {
        if (innodbPrintLockWaitTimeoutInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbPrintLockWaitTimeoutInfo_ = value;
          onChanged();
        } else {
          innodbPrintLockWaitTimeoutInfoBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Makes InnoDB to write information about all lock wait timeout errors into the log file.
       * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/innodb_show_status.html?highlight=innodb_print_lock_wait_timeout_info).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_print_lock_wait_timeout_info = 75;</code>
       */
      public Builder setInnodbPrintLockWaitTimeoutInfo(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (innodbPrintLockWaitTimeoutInfoBuilder_ == null) {
          innodbPrintLockWaitTimeoutInfo_ = builderForValue.build();
          onChanged();
        } else {
          innodbPrintLockWaitTimeoutInfoBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Makes InnoDB to write information about all lock wait timeout errors into the log file.
       * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/innodb_show_status.html?highlight=innodb_print_lock_wait_timeout_info).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_print_lock_wait_timeout_info = 75;</code>
       */
      public Builder mergeInnodbPrintLockWaitTimeoutInfo(com.google.protobuf.BoolValue value) {
        if (innodbPrintLockWaitTimeoutInfoBuilder_ == null) {
          if (innodbPrintLockWaitTimeoutInfo_ != null) {
            innodbPrintLockWaitTimeoutInfo_ =
              com.google.protobuf.BoolValue.newBuilder(innodbPrintLockWaitTimeoutInfo_).mergeFrom(value).buildPartial();
          } else {
            innodbPrintLockWaitTimeoutInfo_ = value;
          }
          onChanged();
        } else {
          innodbPrintLockWaitTimeoutInfoBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Makes InnoDB to write information about all lock wait timeout errors into the log file.
       * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/innodb_show_status.html?highlight=innodb_print_lock_wait_timeout_info).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_print_lock_wait_timeout_info = 75;</code>
       */
      public Builder clearInnodbPrintLockWaitTimeoutInfo() {
        if (innodbPrintLockWaitTimeoutInfoBuilder_ == null) {
          innodbPrintLockWaitTimeoutInfo_ = null;
          onChanged();
        } else {
          innodbPrintLockWaitTimeoutInfo_ = null;
          innodbPrintLockWaitTimeoutInfoBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Makes InnoDB to write information about all lock wait timeout errors into the log file.
       * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/innodb_show_status.html?highlight=innodb_print_lock_wait_timeout_info).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_print_lock_wait_timeout_info = 75;</code>
       */
      public com.google.protobuf.BoolValue.Builder getInnodbPrintLockWaitTimeoutInfoBuilder() {
        
        onChanged();
        return getInnodbPrintLockWaitTimeoutInfoFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Makes InnoDB to write information about all lock wait timeout errors into the log file.
       * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/innodb_show_status.html?highlight=innodb_print_lock_wait_timeout_info).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_print_lock_wait_timeout_info = 75;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getInnodbPrintLockWaitTimeoutInfoOrBuilder() {
        if (innodbPrintLockWaitTimeoutInfoBuilder_ != null) {
          return innodbPrintLockWaitTimeoutInfoBuilder_.getMessageOrBuilder();
        } else {
          return innodbPrintLockWaitTimeoutInfo_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : innodbPrintLockWaitTimeoutInfo_;
        }
      }
      /**
       * <pre>
       * Makes InnoDB to write information about all lock wait timeout errors into the log file.
       * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/innodb_show_status.html?highlight=innodb_print_lock_wait_timeout_info).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue innodb_print_lock_wait_timeout_info = 75;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getInnodbPrintLockWaitTimeoutInfoFieldBuilder() {
        if (innodbPrintLockWaitTimeoutInfoBuilder_ == null) {
          innodbPrintLockWaitTimeoutInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getInnodbPrintLockWaitTimeoutInfo(),
                  getParentForChildren(),
                  isClean());
          innodbPrintLockWaitTimeoutInfo_ = null;
        }
        return innodbPrintLockWaitTimeoutInfoBuilder_;
      }

      private com.google.protobuf.Int64Value logErrorVerbosity_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> logErrorVerbosityBuilder_;
      /**
       * <pre>
       * System variable specifies the verbosity for handling events intended for the error log
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_log_error_verbosity).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value log_error_verbosity = 76 [(.yandex.cloud.value) = "1-3"];</code>
       * @return Whether the logErrorVerbosity field is set.
       */
      public boolean hasLogErrorVerbosity() {
        return logErrorVerbosityBuilder_ != null || logErrorVerbosity_ != null;
      }
      /**
       * <pre>
       * System variable specifies the verbosity for handling events intended for the error log
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_log_error_verbosity).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value log_error_verbosity = 76 [(.yandex.cloud.value) = "1-3"];</code>
       * @return The logErrorVerbosity.
       */
      public com.google.protobuf.Int64Value getLogErrorVerbosity() {
        if (logErrorVerbosityBuilder_ == null) {
          return logErrorVerbosity_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : logErrorVerbosity_;
        } else {
          return logErrorVerbosityBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * System variable specifies the verbosity for handling events intended for the error log
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_log_error_verbosity).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value log_error_verbosity = 76 [(.yandex.cloud.value) = "1-3"];</code>
       */
      public Builder setLogErrorVerbosity(com.google.protobuf.Int64Value value) {
        if (logErrorVerbosityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          logErrorVerbosity_ = value;
          onChanged();
        } else {
          logErrorVerbosityBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * System variable specifies the verbosity for handling events intended for the error log
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_log_error_verbosity).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value log_error_verbosity = 76 [(.yandex.cloud.value) = "1-3"];</code>
       */
      public Builder setLogErrorVerbosity(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (logErrorVerbosityBuilder_ == null) {
          logErrorVerbosity_ = builderForValue.build();
          onChanged();
        } else {
          logErrorVerbosityBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * System variable specifies the verbosity for handling events intended for the error log
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_log_error_verbosity).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value log_error_verbosity = 76 [(.yandex.cloud.value) = "1-3"];</code>
       */
      public Builder mergeLogErrorVerbosity(com.google.protobuf.Int64Value value) {
        if (logErrorVerbosityBuilder_ == null) {
          if (logErrorVerbosity_ != null) {
            logErrorVerbosity_ =
              com.google.protobuf.Int64Value.newBuilder(logErrorVerbosity_).mergeFrom(value).buildPartial();
          } else {
            logErrorVerbosity_ = value;
          }
          onChanged();
        } else {
          logErrorVerbosityBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * System variable specifies the verbosity for handling events intended for the error log
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_log_error_verbosity).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value log_error_verbosity = 76 [(.yandex.cloud.value) = "1-3"];</code>
       */
      public Builder clearLogErrorVerbosity() {
        if (logErrorVerbosityBuilder_ == null) {
          logErrorVerbosity_ = null;
          onChanged();
        } else {
          logErrorVerbosity_ = null;
          logErrorVerbosityBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * System variable specifies the verbosity for handling events intended for the error log
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_log_error_verbosity).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value log_error_verbosity = 76 [(.yandex.cloud.value) = "1-3"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getLogErrorVerbosityBuilder() {
        
        onChanged();
        return getLogErrorVerbosityFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * System variable specifies the verbosity for handling events intended for the error log
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_log_error_verbosity).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value log_error_verbosity = 76 [(.yandex.cloud.value) = "1-3"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getLogErrorVerbosityOrBuilder() {
        if (logErrorVerbosityBuilder_ != null) {
          return logErrorVerbosityBuilder_.getMessageOrBuilder();
        } else {
          return logErrorVerbosity_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : logErrorVerbosity_;
        }
      }
      /**
       * <pre>
       * System variable specifies the verbosity for handling events intended for the error log
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_log_error_verbosity).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value log_error_verbosity = 76 [(.yandex.cloud.value) = "1-3"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getLogErrorVerbosityFieldBuilder() {
        if (logErrorVerbosityBuilder_ == null) {
          logErrorVerbosityBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getLogErrorVerbosity(),
                  getParentForChildren(),
                  isClean());
          logErrorVerbosity_ = null;
        }
        return logErrorVerbosityBuilder_;
      }

      private com.google.protobuf.Int64Value maxDigestLength_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxDigestLengthBuilder_;
      /**
       * <pre>
       * The maximum number of bytes of memory reserved per session for computation of normalized statement digests.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_digest_length).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_digest_length = 77 [(.yandex.cloud.value) = "0-1048576"];</code>
       * @return Whether the maxDigestLength field is set.
       */
      public boolean hasMaxDigestLength() {
        return maxDigestLengthBuilder_ != null || maxDigestLength_ != null;
      }
      /**
       * <pre>
       * The maximum number of bytes of memory reserved per session for computation of normalized statement digests.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_digest_length).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_digest_length = 77 [(.yandex.cloud.value) = "0-1048576"];</code>
       * @return The maxDigestLength.
       */
      public com.google.protobuf.Int64Value getMaxDigestLength() {
        if (maxDigestLengthBuilder_ == null) {
          return maxDigestLength_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxDigestLength_;
        } else {
          return maxDigestLengthBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The maximum number of bytes of memory reserved per session for computation of normalized statement digests.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_digest_length).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_digest_length = 77 [(.yandex.cloud.value) = "0-1048576"];</code>
       */
      public Builder setMaxDigestLength(com.google.protobuf.Int64Value value) {
        if (maxDigestLengthBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxDigestLength_ = value;
          onChanged();
        } else {
          maxDigestLengthBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum number of bytes of memory reserved per session for computation of normalized statement digests.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_digest_length).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_digest_length = 77 [(.yandex.cloud.value) = "0-1048576"];</code>
       */
      public Builder setMaxDigestLength(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxDigestLengthBuilder_ == null) {
          maxDigestLength_ = builderForValue.build();
          onChanged();
        } else {
          maxDigestLengthBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The maximum number of bytes of memory reserved per session for computation of normalized statement digests.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_digest_length).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_digest_length = 77 [(.yandex.cloud.value) = "0-1048576"];</code>
       */
      public Builder mergeMaxDigestLength(com.google.protobuf.Int64Value value) {
        if (maxDigestLengthBuilder_ == null) {
          if (maxDigestLength_ != null) {
            maxDigestLength_ =
              com.google.protobuf.Int64Value.newBuilder(maxDigestLength_).mergeFrom(value).buildPartial();
          } else {
            maxDigestLength_ = value;
          }
          onChanged();
        } else {
          maxDigestLengthBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum number of bytes of memory reserved per session for computation of normalized statement digests.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_digest_length).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_digest_length = 77 [(.yandex.cloud.value) = "0-1048576"];</code>
       */
      public Builder clearMaxDigestLength() {
        if (maxDigestLengthBuilder_ == null) {
          maxDigestLength_ = null;
          onChanged();
        } else {
          maxDigestLength_ = null;
          maxDigestLengthBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The maximum number of bytes of memory reserved per session for computation of normalized statement digests.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_digest_length).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_digest_length = 77 [(.yandex.cloud.value) = "0-1048576"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxDigestLengthBuilder() {
        
        onChanged();
        return getMaxDigestLengthFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The maximum number of bytes of memory reserved per session for computation of normalized statement digests.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_digest_length).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_digest_length = 77 [(.yandex.cloud.value) = "0-1048576"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxDigestLengthOrBuilder() {
        if (maxDigestLengthBuilder_ != null) {
          return maxDigestLengthBuilder_.getMessageOrBuilder();
        } else {
          return maxDigestLength_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxDigestLength_;
        }
      }
      /**
       * <pre>
       * The maximum number of bytes of memory reserved per session for computation of normalized statement digests.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_digest_length).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_digest_length = 77 [(.yandex.cloud.value) = "0-1048576"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxDigestLengthFieldBuilder() {
        if (maxDigestLengthBuilder_ == null) {
          maxDigestLengthBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxDigestLength(),
                  getParentForChildren(),
                  isClean());
          maxDigestLength_ = null;
        }
        return maxDigestLengthBuilder_;
      }

      private com.google.protobuf.Int64Value lockWaitTimeout_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> lockWaitTimeoutBuilder_;
      /**
       * <pre>
       * This variable specifies the timeout in seconds for attempts to acquire metadata locks
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lock_wait_timeout).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value lock_wait_timeout = 78 [(.yandex.cloud.value) = "1-31536000"];</code>
       * @return Whether the lockWaitTimeout field is set.
       */
      public boolean hasLockWaitTimeout() {
        return lockWaitTimeoutBuilder_ != null || lockWaitTimeout_ != null;
      }
      /**
       * <pre>
       * This variable specifies the timeout in seconds for attempts to acquire metadata locks
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lock_wait_timeout).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value lock_wait_timeout = 78 [(.yandex.cloud.value) = "1-31536000"];</code>
       * @return The lockWaitTimeout.
       */
      public com.google.protobuf.Int64Value getLockWaitTimeout() {
        if (lockWaitTimeoutBuilder_ == null) {
          return lockWaitTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : lockWaitTimeout_;
        } else {
          return lockWaitTimeoutBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * This variable specifies the timeout in seconds for attempts to acquire metadata locks
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lock_wait_timeout).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value lock_wait_timeout = 78 [(.yandex.cloud.value) = "1-31536000"];</code>
       */
      public Builder setLockWaitTimeout(com.google.protobuf.Int64Value value) {
        if (lockWaitTimeoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          lockWaitTimeout_ = value;
          onChanged();
        } else {
          lockWaitTimeoutBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * This variable specifies the timeout in seconds for attempts to acquire metadata locks
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lock_wait_timeout).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value lock_wait_timeout = 78 [(.yandex.cloud.value) = "1-31536000"];</code>
       */
      public Builder setLockWaitTimeout(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (lockWaitTimeoutBuilder_ == null) {
          lockWaitTimeout_ = builderForValue.build();
          onChanged();
        } else {
          lockWaitTimeoutBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * This variable specifies the timeout in seconds for attempts to acquire metadata locks
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lock_wait_timeout).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value lock_wait_timeout = 78 [(.yandex.cloud.value) = "1-31536000"];</code>
       */
      public Builder mergeLockWaitTimeout(com.google.protobuf.Int64Value value) {
        if (lockWaitTimeoutBuilder_ == null) {
          if (lockWaitTimeout_ != null) {
            lockWaitTimeout_ =
              com.google.protobuf.Int64Value.newBuilder(lockWaitTimeout_).mergeFrom(value).buildPartial();
          } else {
            lockWaitTimeout_ = value;
          }
          onChanged();
        } else {
          lockWaitTimeoutBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * This variable specifies the timeout in seconds for attempts to acquire metadata locks
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lock_wait_timeout).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value lock_wait_timeout = 78 [(.yandex.cloud.value) = "1-31536000"];</code>
       */
      public Builder clearLockWaitTimeout() {
        if (lockWaitTimeoutBuilder_ == null) {
          lockWaitTimeout_ = null;
          onChanged();
        } else {
          lockWaitTimeout_ = null;
          lockWaitTimeoutBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * This variable specifies the timeout in seconds for attempts to acquire metadata locks
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lock_wait_timeout).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value lock_wait_timeout = 78 [(.yandex.cloud.value) = "1-31536000"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getLockWaitTimeoutBuilder() {
        
        onChanged();
        return getLockWaitTimeoutFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * This variable specifies the timeout in seconds for attempts to acquire metadata locks
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lock_wait_timeout).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value lock_wait_timeout = 78 [(.yandex.cloud.value) = "1-31536000"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getLockWaitTimeoutOrBuilder() {
        if (lockWaitTimeoutBuilder_ != null) {
          return lockWaitTimeoutBuilder_.getMessageOrBuilder();
        } else {
          return lockWaitTimeout_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : lockWaitTimeout_;
        }
      }
      /**
       * <pre>
       * This variable specifies the timeout in seconds for attempts to acquire metadata locks
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lock_wait_timeout).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value lock_wait_timeout = 78 [(.yandex.cloud.value) = "1-31536000"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getLockWaitTimeoutFieldBuilder() {
        if (lockWaitTimeoutBuilder_ == null) {
          lockWaitTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getLockWaitTimeout(),
                  getParentForChildren(),
                  isClean());
          lockWaitTimeout_ = null;
        }
        return lockWaitTimeoutBuilder_;
      }

      private com.google.protobuf.Int64Value maxPreparedStmtCount_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxPreparedStmtCountBuilder_;
      /**
       * <pre>
       * This variable limits the total number of prepared statements in the server.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_prepared_stmt_count).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_prepared_stmt_count = 79 [(.yandex.cloud.value) = "0-4194304"];</code>
       * @return Whether the maxPreparedStmtCount field is set.
       */
      public boolean hasMaxPreparedStmtCount() {
        return maxPreparedStmtCountBuilder_ != null || maxPreparedStmtCount_ != null;
      }
      /**
       * <pre>
       * This variable limits the total number of prepared statements in the server.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_prepared_stmt_count).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_prepared_stmt_count = 79 [(.yandex.cloud.value) = "0-4194304"];</code>
       * @return The maxPreparedStmtCount.
       */
      public com.google.protobuf.Int64Value getMaxPreparedStmtCount() {
        if (maxPreparedStmtCountBuilder_ == null) {
          return maxPreparedStmtCount_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxPreparedStmtCount_;
        } else {
          return maxPreparedStmtCountBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * This variable limits the total number of prepared statements in the server.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_prepared_stmt_count).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_prepared_stmt_count = 79 [(.yandex.cloud.value) = "0-4194304"];</code>
       */
      public Builder setMaxPreparedStmtCount(com.google.protobuf.Int64Value value) {
        if (maxPreparedStmtCountBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxPreparedStmtCount_ = value;
          onChanged();
        } else {
          maxPreparedStmtCountBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * This variable limits the total number of prepared statements in the server.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_prepared_stmt_count).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_prepared_stmt_count = 79 [(.yandex.cloud.value) = "0-4194304"];</code>
       */
      public Builder setMaxPreparedStmtCount(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxPreparedStmtCountBuilder_ == null) {
          maxPreparedStmtCount_ = builderForValue.build();
          onChanged();
        } else {
          maxPreparedStmtCountBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * This variable limits the total number of prepared statements in the server.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_prepared_stmt_count).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_prepared_stmt_count = 79 [(.yandex.cloud.value) = "0-4194304"];</code>
       */
      public Builder mergeMaxPreparedStmtCount(com.google.protobuf.Int64Value value) {
        if (maxPreparedStmtCountBuilder_ == null) {
          if (maxPreparedStmtCount_ != null) {
            maxPreparedStmtCount_ =
              com.google.protobuf.Int64Value.newBuilder(maxPreparedStmtCount_).mergeFrom(value).buildPartial();
          } else {
            maxPreparedStmtCount_ = value;
          }
          onChanged();
        } else {
          maxPreparedStmtCountBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * This variable limits the total number of prepared statements in the server.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_prepared_stmt_count).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_prepared_stmt_count = 79 [(.yandex.cloud.value) = "0-4194304"];</code>
       */
      public Builder clearMaxPreparedStmtCount() {
        if (maxPreparedStmtCountBuilder_ == null) {
          maxPreparedStmtCount_ = null;
          onChanged();
        } else {
          maxPreparedStmtCount_ = null;
          maxPreparedStmtCountBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * This variable limits the total number of prepared statements in the server.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_prepared_stmt_count).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_prepared_stmt_count = 79 [(.yandex.cloud.value) = "0-4194304"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxPreparedStmtCountBuilder() {
        
        onChanged();
        return getMaxPreparedStmtCountFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * This variable limits the total number of prepared statements in the server.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_prepared_stmt_count).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_prepared_stmt_count = 79 [(.yandex.cloud.value) = "0-4194304"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxPreparedStmtCountOrBuilder() {
        if (maxPreparedStmtCountBuilder_ != null) {
          return maxPreparedStmtCountBuilder_.getMessageOrBuilder();
        } else {
          return maxPreparedStmtCount_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxPreparedStmtCount_;
        }
      }
      /**
       * <pre>
       * This variable limits the total number of prepared statements in the server.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_prepared_stmt_count).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_prepared_stmt_count = 79 [(.yandex.cloud.value) = "0-4194304"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxPreparedStmtCountFieldBuilder() {
        if (maxPreparedStmtCountBuilder_ == null) {
          maxPreparedStmtCountBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxPreparedStmtCount(),
                  getParentForChildren(),
                  isClean());
          maxPreparedStmtCount_ = null;
        }
        return maxPreparedStmtCountBuilder_;
      }

      private java.lang.Object optimizerSwitch_ = "";
      /**
       * <pre>
       * The system variable enables control over optimizer behavior.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_optimizer_switch)
       * https://dev.mysql.com/doc/refman/8.0/en/switchable-optimizations.html
       * </pre>
       *
       * <code>string optimizer_switch = 80;</code>
       * @return The optimizerSwitch.
       */
      public java.lang.String getOptimizerSwitch() {
        java.lang.Object ref = optimizerSwitch_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          optimizerSwitch_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The system variable enables control over optimizer behavior.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_optimizer_switch)
       * https://dev.mysql.com/doc/refman/8.0/en/switchable-optimizations.html
       * </pre>
       *
       * <code>string optimizer_switch = 80;</code>
       * @return The bytes for optimizerSwitch.
       */
      public com.google.protobuf.ByteString
          getOptimizerSwitchBytes() {
        java.lang.Object ref = optimizerSwitch_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          optimizerSwitch_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The system variable enables control over optimizer behavior.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_optimizer_switch)
       * https://dev.mysql.com/doc/refman/8.0/en/switchable-optimizations.html
       * </pre>
       *
       * <code>string optimizer_switch = 80;</code>
       * @param value The optimizerSwitch to set.
       * @return This builder for chaining.
       */
      public Builder setOptimizerSwitch(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        optimizerSwitch_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The system variable enables control over optimizer behavior.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_optimizer_switch)
       * https://dev.mysql.com/doc/refman/8.0/en/switchable-optimizations.html
       * </pre>
       *
       * <code>string optimizer_switch = 80;</code>
       * @return This builder for chaining.
       */
      public Builder clearOptimizerSwitch() {
        
        optimizerSwitch_ = getDefaultInstance().getOptimizerSwitch();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The system variable enables control over optimizer behavior.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_optimizer_switch)
       * https://dev.mysql.com/doc/refman/8.0/en/switchable-optimizations.html
       * </pre>
       *
       * <code>string optimizer_switch = 80;</code>
       * @param value The bytes for optimizerSwitch to set.
       * @return This builder for chaining.
       */
      public Builder setOptimizerSwitchBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        optimizerSwitch_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.Int64Value optimizerSearchDepth_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> optimizerSearchDepthBuilder_;
      /**
       * <pre>
       * The maximum depth of search performed by the query optimizer
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value optimizer_search_depth = 81 [(.yandex.cloud.value) = "0-62"];</code>
       * @return Whether the optimizerSearchDepth field is set.
       */
      public boolean hasOptimizerSearchDepth() {
        return optimizerSearchDepthBuilder_ != null || optimizerSearchDepth_ != null;
      }
      /**
       * <pre>
       * The maximum depth of search performed by the query optimizer
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value optimizer_search_depth = 81 [(.yandex.cloud.value) = "0-62"];</code>
       * @return The optimizerSearchDepth.
       */
      public com.google.protobuf.Int64Value getOptimizerSearchDepth() {
        if (optimizerSearchDepthBuilder_ == null) {
          return optimizerSearchDepth_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : optimizerSearchDepth_;
        } else {
          return optimizerSearchDepthBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The maximum depth of search performed by the query optimizer
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value optimizer_search_depth = 81 [(.yandex.cloud.value) = "0-62"];</code>
       */
      public Builder setOptimizerSearchDepth(com.google.protobuf.Int64Value value) {
        if (optimizerSearchDepthBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          optimizerSearchDepth_ = value;
          onChanged();
        } else {
          optimizerSearchDepthBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum depth of search performed by the query optimizer
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value optimizer_search_depth = 81 [(.yandex.cloud.value) = "0-62"];</code>
       */
      public Builder setOptimizerSearchDepth(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (optimizerSearchDepthBuilder_ == null) {
          optimizerSearchDepth_ = builderForValue.build();
          onChanged();
        } else {
          optimizerSearchDepthBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The maximum depth of search performed by the query optimizer
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value optimizer_search_depth = 81 [(.yandex.cloud.value) = "0-62"];</code>
       */
      public Builder mergeOptimizerSearchDepth(com.google.protobuf.Int64Value value) {
        if (optimizerSearchDepthBuilder_ == null) {
          if (optimizerSearchDepth_ != null) {
            optimizerSearchDepth_ =
              com.google.protobuf.Int64Value.newBuilder(optimizerSearchDepth_).mergeFrom(value).buildPartial();
          } else {
            optimizerSearchDepth_ = value;
          }
          onChanged();
        } else {
          optimizerSearchDepthBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum depth of search performed by the query optimizer
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value optimizer_search_depth = 81 [(.yandex.cloud.value) = "0-62"];</code>
       */
      public Builder clearOptimizerSearchDepth() {
        if (optimizerSearchDepthBuilder_ == null) {
          optimizerSearchDepth_ = null;
          onChanged();
        } else {
          optimizerSearchDepth_ = null;
          optimizerSearchDepthBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The maximum depth of search performed by the query optimizer
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value optimizer_search_depth = 81 [(.yandex.cloud.value) = "0-62"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getOptimizerSearchDepthBuilder() {
        
        onChanged();
        return getOptimizerSearchDepthFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The maximum depth of search performed by the query optimizer
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value optimizer_search_depth = 81 [(.yandex.cloud.value) = "0-62"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getOptimizerSearchDepthOrBuilder() {
        if (optimizerSearchDepthBuilder_ != null) {
          return optimizerSearchDepthBuilder_.getMessageOrBuilder();
        } else {
          return optimizerSearchDepth_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : optimizerSearchDepth_;
        }
      }
      /**
       * <pre>
       * The maximum depth of search performed by the query optimizer
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value optimizer_search_depth = 81 [(.yandex.cloud.value) = "0-62"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getOptimizerSearchDepthFieldBuilder() {
        if (optimizerSearchDepthBuilder_ == null) {
          optimizerSearchDepthBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getOptimizerSearchDepth(),
                  getParentForChildren(),
                  isClean());
          optimizerSearchDepth_ = null;
        }
        return optimizerSearchDepthBuilder_;
      }

      private com.google.protobuf.BoolValue userstat_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> userstatBuilder_;
      /**
       * <pre>
       * Enables or disables collection of statistics
       * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/user_stats.html#userstat).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue userstat = 82;</code>
       * @return Whether the userstat field is set.
       */
      public boolean hasUserstat() {
        return userstatBuilder_ != null || userstat_ != null;
      }
      /**
       * <pre>
       * Enables or disables collection of statistics
       * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/user_stats.html#userstat).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue userstat = 82;</code>
       * @return The userstat.
       */
      public com.google.protobuf.BoolValue getUserstat() {
        if (userstatBuilder_ == null) {
          return userstat_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : userstat_;
        } else {
          return userstatBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enables or disables collection of statistics
       * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/user_stats.html#userstat).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue userstat = 82;</code>
       */
      public Builder setUserstat(com.google.protobuf.BoolValue value) {
        if (userstatBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          userstat_ = value;
          onChanged();
        } else {
          userstatBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables collection of statistics
       * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/user_stats.html#userstat).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue userstat = 82;</code>
       */
      public Builder setUserstat(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (userstatBuilder_ == null) {
          userstat_ = builderForValue.build();
          onChanged();
        } else {
          userstatBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables collection of statistics
       * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/user_stats.html#userstat).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue userstat = 82;</code>
       */
      public Builder mergeUserstat(com.google.protobuf.BoolValue value) {
        if (userstatBuilder_ == null) {
          if (userstat_ != null) {
            userstat_ =
              com.google.protobuf.BoolValue.newBuilder(userstat_).mergeFrom(value).buildPartial();
          } else {
            userstat_ = value;
          }
          onChanged();
        } else {
          userstatBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables collection of statistics
       * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/user_stats.html#userstat).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue userstat = 82;</code>
       */
      public Builder clearUserstat() {
        if (userstatBuilder_ == null) {
          userstat_ = null;
          onChanged();
        } else {
          userstat_ = null;
          userstatBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables collection of statistics
       * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/user_stats.html#userstat).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue userstat = 82;</code>
       */
      public com.google.protobuf.BoolValue.Builder getUserstatBuilder() {
        
        onChanged();
        return getUserstatFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enables or disables collection of statistics
       * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/user_stats.html#userstat).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue userstat = 82;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getUserstatOrBuilder() {
        if (userstatBuilder_ != null) {
          return userstatBuilder_.getMessageOrBuilder();
        } else {
          return userstat_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : userstat_;
        }
      }
      /**
       * <pre>
       * Enables or disables collection of statistics
       * For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.0/diagnostics/user_stats.html#userstat).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue userstat = 82;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getUserstatFieldBuilder() {
        if (userstatBuilder_ == null) {
          userstatBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getUserstat(),
                  getParentForChildren(),
                  isClean());
          userstat_ = null;
        }
        return userstatBuilder_;
      }

      private com.google.protobuf.Int64Value maxExecutionTime_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxExecutionTimeBuilder_;
      /**
       * <pre>
       * The execution timeout for SELECT statements, in milliseconds. If the value is 0, timeouts are not enabled.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_execution_time)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_execution_time = 83 [(.yandex.cloud.value) = "0-4294967295"];</code>
       * @return Whether the maxExecutionTime field is set.
       */
      public boolean hasMaxExecutionTime() {
        return maxExecutionTimeBuilder_ != null || maxExecutionTime_ != null;
      }
      /**
       * <pre>
       * The execution timeout for SELECT statements, in milliseconds. If the value is 0, timeouts are not enabled.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_execution_time)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_execution_time = 83 [(.yandex.cloud.value) = "0-4294967295"];</code>
       * @return The maxExecutionTime.
       */
      public com.google.protobuf.Int64Value getMaxExecutionTime() {
        if (maxExecutionTimeBuilder_ == null) {
          return maxExecutionTime_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxExecutionTime_;
        } else {
          return maxExecutionTimeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The execution timeout for SELECT statements, in milliseconds. If the value is 0, timeouts are not enabled.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_execution_time)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_execution_time = 83 [(.yandex.cloud.value) = "0-4294967295"];</code>
       */
      public Builder setMaxExecutionTime(com.google.protobuf.Int64Value value) {
        if (maxExecutionTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxExecutionTime_ = value;
          onChanged();
        } else {
          maxExecutionTimeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The execution timeout for SELECT statements, in milliseconds. If the value is 0, timeouts are not enabled.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_execution_time)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_execution_time = 83 [(.yandex.cloud.value) = "0-4294967295"];</code>
       */
      public Builder setMaxExecutionTime(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxExecutionTimeBuilder_ == null) {
          maxExecutionTime_ = builderForValue.build();
          onChanged();
        } else {
          maxExecutionTimeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The execution timeout for SELECT statements, in milliseconds. If the value is 0, timeouts are not enabled.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_execution_time)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_execution_time = 83 [(.yandex.cloud.value) = "0-4294967295"];</code>
       */
      public Builder mergeMaxExecutionTime(com.google.protobuf.Int64Value value) {
        if (maxExecutionTimeBuilder_ == null) {
          if (maxExecutionTime_ != null) {
            maxExecutionTime_ =
              com.google.protobuf.Int64Value.newBuilder(maxExecutionTime_).mergeFrom(value).buildPartial();
          } else {
            maxExecutionTime_ = value;
          }
          onChanged();
        } else {
          maxExecutionTimeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The execution timeout for SELECT statements, in milliseconds. If the value is 0, timeouts are not enabled.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_execution_time)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_execution_time = 83 [(.yandex.cloud.value) = "0-4294967295"];</code>
       */
      public Builder clearMaxExecutionTime() {
        if (maxExecutionTimeBuilder_ == null) {
          maxExecutionTime_ = null;
          onChanged();
        } else {
          maxExecutionTime_ = null;
          maxExecutionTimeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The execution timeout for SELECT statements, in milliseconds. If the value is 0, timeouts are not enabled.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_execution_time)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_execution_time = 83 [(.yandex.cloud.value) = "0-4294967295"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxExecutionTimeBuilder() {
        
        onChanged();
        return getMaxExecutionTimeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The execution timeout for SELECT statements, in milliseconds. If the value is 0, timeouts are not enabled.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_execution_time)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_execution_time = 83 [(.yandex.cloud.value) = "0-4294967295"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxExecutionTimeOrBuilder() {
        if (maxExecutionTimeBuilder_ != null) {
          return maxExecutionTimeBuilder_.getMessageOrBuilder();
        } else {
          return maxExecutionTime_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxExecutionTime_;
        }
      }
      /**
       * <pre>
       * The execution timeout for SELECT statements, in milliseconds. If the value is 0, timeouts are not enabled.
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_execution_time)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_execution_time = 83 [(.yandex.cloud.value) = "0-4294967295"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxExecutionTimeFieldBuilder() {
        if (maxExecutionTimeBuilder_ == null) {
          maxExecutionTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxExecutionTime(),
                  getParentForChildren(),
                  isClean());
          maxExecutionTime_ = null;
        }
        return maxExecutionTimeBuilder_;
      }

      private int auditLogPolicy_ = 0;
      /**
       * <pre>
       * The policy controlling how the audit log plugin writes events to its log file
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#sysvar_audit_log_policy)
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuditLogPolicy audit_log_policy = 84;</code>
       * @return The enum numeric value on the wire for auditLogPolicy.
       */
      @java.lang.Override public int getAuditLogPolicyValue() {
        return auditLogPolicy_;
      }
      /**
       * <pre>
       * The policy controlling how the audit log plugin writes events to its log file
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#sysvar_audit_log_policy)
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuditLogPolicy audit_log_policy = 84;</code>
       * @param value The enum numeric value on the wire for auditLogPolicy to set.
       * @return This builder for chaining.
       */
      public Builder setAuditLogPolicyValue(int value) {
        
        auditLogPolicy_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The policy controlling how the audit log plugin writes events to its log file
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#sysvar_audit_log_policy)
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuditLogPolicy audit_log_policy = 84;</code>
       * @return The auditLogPolicy.
       */
      @java.lang.Override
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuditLogPolicy getAuditLogPolicy() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuditLogPolicy result = yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuditLogPolicy.valueOf(auditLogPolicy_);
        return result == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuditLogPolicy.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * The policy controlling how the audit log plugin writes events to its log file
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#sysvar_audit_log_policy)
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuditLogPolicy audit_log_policy = 84;</code>
       * @param value The auditLogPolicy to set.
       * @return This builder for chaining.
       */
      public Builder setAuditLogPolicy(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.AuditLogPolicy value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        auditLogPolicy_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The policy controlling how the audit log plugin writes events to its log file
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/audit-log-reference.html#sysvar_audit_log_policy)
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.AuditLogPolicy audit_log_policy = 84;</code>
       * @return This builder for chaining.
       */
      public Builder clearAuditLogPolicy() {
        
        auditLogPolicy_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.BoolValue replicationSenderObserveCommitOnly_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> replicationSenderObserveCommitOnlyBuilder_;
      /**
       * <pre>
       * Limit callbacks to improve performance for semisynchronous replication
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_sender_observe_commit_only).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue replication_sender_observe_commit_only = 85;</code>
       * @return Whether the replicationSenderObserveCommitOnly field is set.
       */
      public boolean hasReplicationSenderObserveCommitOnly() {
        return replicationSenderObserveCommitOnlyBuilder_ != null || replicationSenderObserveCommitOnly_ != null;
      }
      /**
       * <pre>
       * Limit callbacks to improve performance for semisynchronous replication
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_sender_observe_commit_only).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue replication_sender_observe_commit_only = 85;</code>
       * @return The replicationSenderObserveCommitOnly.
       */
      public com.google.protobuf.BoolValue getReplicationSenderObserveCommitOnly() {
        if (replicationSenderObserveCommitOnlyBuilder_ == null) {
          return replicationSenderObserveCommitOnly_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : replicationSenderObserveCommitOnly_;
        } else {
          return replicationSenderObserveCommitOnlyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limit callbacks to improve performance for semisynchronous replication
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_sender_observe_commit_only).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue replication_sender_observe_commit_only = 85;</code>
       */
      public Builder setReplicationSenderObserveCommitOnly(com.google.protobuf.BoolValue value) {
        if (replicationSenderObserveCommitOnlyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          replicationSenderObserveCommitOnly_ = value;
          onChanged();
        } else {
          replicationSenderObserveCommitOnlyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limit callbacks to improve performance for semisynchronous replication
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_sender_observe_commit_only).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue replication_sender_observe_commit_only = 85;</code>
       */
      public Builder setReplicationSenderObserveCommitOnly(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (replicationSenderObserveCommitOnlyBuilder_ == null) {
          replicationSenderObserveCommitOnly_ = builderForValue.build();
          onChanged();
        } else {
          replicationSenderObserveCommitOnlyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limit callbacks to improve performance for semisynchronous replication
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_sender_observe_commit_only).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue replication_sender_observe_commit_only = 85;</code>
       */
      public Builder mergeReplicationSenderObserveCommitOnly(com.google.protobuf.BoolValue value) {
        if (replicationSenderObserveCommitOnlyBuilder_ == null) {
          if (replicationSenderObserveCommitOnly_ != null) {
            replicationSenderObserveCommitOnly_ =
              com.google.protobuf.BoolValue.newBuilder(replicationSenderObserveCommitOnly_).mergeFrom(value).buildPartial();
          } else {
            replicationSenderObserveCommitOnly_ = value;
          }
          onChanged();
        } else {
          replicationSenderObserveCommitOnlyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limit callbacks to improve performance for semisynchronous replication
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_sender_observe_commit_only).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue replication_sender_observe_commit_only = 85;</code>
       */
      public Builder clearReplicationSenderObserveCommitOnly() {
        if (replicationSenderObserveCommitOnlyBuilder_ == null) {
          replicationSenderObserveCommitOnly_ = null;
          onChanged();
        } else {
          replicationSenderObserveCommitOnly_ = null;
          replicationSenderObserveCommitOnlyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limit callbacks to improve performance for semisynchronous replication
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_sender_observe_commit_only).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue replication_sender_observe_commit_only = 85;</code>
       */
      public com.google.protobuf.BoolValue.Builder getReplicationSenderObserveCommitOnlyBuilder() {
        
        onChanged();
        return getReplicationSenderObserveCommitOnlyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limit callbacks to improve performance for semisynchronous replication
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_sender_observe_commit_only).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue replication_sender_observe_commit_only = 85;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getReplicationSenderObserveCommitOnlyOrBuilder() {
        if (replicationSenderObserveCommitOnlyBuilder_ != null) {
          return replicationSenderObserveCommitOnlyBuilder_.getMessageOrBuilder();
        } else {
          return replicationSenderObserveCommitOnly_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : replicationSenderObserveCommitOnly_;
        }
      }
      /**
       * <pre>
       * Limit callbacks to improve performance for semisynchronous replication
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_sender_observe_commit_only).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue replication_sender_observe_commit_only = 85;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getReplicationSenderObserveCommitOnlyFieldBuilder() {
        if (replicationSenderObserveCommitOnlyBuilder_ == null) {
          replicationSenderObserveCommitOnlyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getReplicationSenderObserveCommitOnly(),
                  getParentForChildren(),
                  isClean());
          replicationSenderObserveCommitOnly_ = null;
        }
        return replicationSenderObserveCommitOnlyBuilder_;
      }

      private com.google.protobuf.BoolValue replicationOptimizeForStaticPluginConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> replicationOptimizeForStaticPluginConfigBuilder_;
      /**
       * <pre>
       * Use shared locks, and avoid unnecessary lock acquisitions, to improve performance for semisynchronous replication
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_optimize_for_static_plugin_config).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue replication_optimize_for_static_plugin_config = 86;</code>
       * @return Whether the replicationOptimizeForStaticPluginConfig field is set.
       */
      public boolean hasReplicationOptimizeForStaticPluginConfig() {
        return replicationOptimizeForStaticPluginConfigBuilder_ != null || replicationOptimizeForStaticPluginConfig_ != null;
      }
      /**
       * <pre>
       * Use shared locks, and avoid unnecessary lock acquisitions, to improve performance for semisynchronous replication
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_optimize_for_static_plugin_config).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue replication_optimize_for_static_plugin_config = 86;</code>
       * @return The replicationOptimizeForStaticPluginConfig.
       */
      public com.google.protobuf.BoolValue getReplicationOptimizeForStaticPluginConfig() {
        if (replicationOptimizeForStaticPluginConfigBuilder_ == null) {
          return replicationOptimizeForStaticPluginConfig_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : replicationOptimizeForStaticPluginConfig_;
        } else {
          return replicationOptimizeForStaticPluginConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Use shared locks, and avoid unnecessary lock acquisitions, to improve performance for semisynchronous replication
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_optimize_for_static_plugin_config).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue replication_optimize_for_static_plugin_config = 86;</code>
       */
      public Builder setReplicationOptimizeForStaticPluginConfig(com.google.protobuf.BoolValue value) {
        if (replicationOptimizeForStaticPluginConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          replicationOptimizeForStaticPluginConfig_ = value;
          onChanged();
        } else {
          replicationOptimizeForStaticPluginConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Use shared locks, and avoid unnecessary lock acquisitions, to improve performance for semisynchronous replication
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_optimize_for_static_plugin_config).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue replication_optimize_for_static_plugin_config = 86;</code>
       */
      public Builder setReplicationOptimizeForStaticPluginConfig(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (replicationOptimizeForStaticPluginConfigBuilder_ == null) {
          replicationOptimizeForStaticPluginConfig_ = builderForValue.build();
          onChanged();
        } else {
          replicationOptimizeForStaticPluginConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Use shared locks, and avoid unnecessary lock acquisitions, to improve performance for semisynchronous replication
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_optimize_for_static_plugin_config).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue replication_optimize_for_static_plugin_config = 86;</code>
       */
      public Builder mergeReplicationOptimizeForStaticPluginConfig(com.google.protobuf.BoolValue value) {
        if (replicationOptimizeForStaticPluginConfigBuilder_ == null) {
          if (replicationOptimizeForStaticPluginConfig_ != null) {
            replicationOptimizeForStaticPluginConfig_ =
              com.google.protobuf.BoolValue.newBuilder(replicationOptimizeForStaticPluginConfig_).mergeFrom(value).buildPartial();
          } else {
            replicationOptimizeForStaticPluginConfig_ = value;
          }
          onChanged();
        } else {
          replicationOptimizeForStaticPluginConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Use shared locks, and avoid unnecessary lock acquisitions, to improve performance for semisynchronous replication
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_optimize_for_static_plugin_config).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue replication_optimize_for_static_plugin_config = 86;</code>
       */
      public Builder clearReplicationOptimizeForStaticPluginConfig() {
        if (replicationOptimizeForStaticPluginConfigBuilder_ == null) {
          replicationOptimizeForStaticPluginConfig_ = null;
          onChanged();
        } else {
          replicationOptimizeForStaticPluginConfig_ = null;
          replicationOptimizeForStaticPluginConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Use shared locks, and avoid unnecessary lock acquisitions, to improve performance for semisynchronous replication
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_optimize_for_static_plugin_config).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue replication_optimize_for_static_plugin_config = 86;</code>
       */
      public com.google.protobuf.BoolValue.Builder getReplicationOptimizeForStaticPluginConfigBuilder() {
        
        onChanged();
        return getReplicationOptimizeForStaticPluginConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Use shared locks, and avoid unnecessary lock acquisitions, to improve performance for semisynchronous replication
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_optimize_for_static_plugin_config).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue replication_optimize_for_static_plugin_config = 86;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getReplicationOptimizeForStaticPluginConfigOrBuilder() {
        if (replicationOptimizeForStaticPluginConfigBuilder_ != null) {
          return replicationOptimizeForStaticPluginConfigBuilder_.getMessageOrBuilder();
        } else {
          return replicationOptimizeForStaticPluginConfig_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : replicationOptimizeForStaticPluginConfig_;
        }
      }
      /**
       * <pre>
       * Use shared locks, and avoid unnecessary lock acquisitions, to improve performance for semisynchronous replication
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html#sysvar_replication_optimize_for_static_plugin_config).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue replication_optimize_for_static_plugin_config = 86;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getReplicationOptimizeForStaticPluginConfigFieldBuilder() {
        if (replicationOptimizeForStaticPluginConfigBuilder_ == null) {
          replicationOptimizeForStaticPluginConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getReplicationOptimizeForStaticPluginConfig(),
                  getParentForChildren(),
                  isClean());
          replicationOptimizeForStaticPluginConfig_ = null;
        }
        return replicationOptimizeForStaticPluginConfigBuilder_;
      }

      private com.google.protobuf.Int64Value innodbLruScanDepth_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> innodbLruScanDepthBuilder_;
      /**
       * <pre>
       * A parameter that influences the algorithms and heuristics for the flush operation for the InnoDB buffer pool
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lru_scan_depth)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_lru_scan_depth = 87 [(.yandex.cloud.value) = "100-4294967295"];</code>
       * @return Whether the innodbLruScanDepth field is set.
       */
      public boolean hasInnodbLruScanDepth() {
        return innodbLruScanDepthBuilder_ != null || innodbLruScanDepth_ != null;
      }
      /**
       * <pre>
       * A parameter that influences the algorithms and heuristics for the flush operation for the InnoDB buffer pool
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lru_scan_depth)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_lru_scan_depth = 87 [(.yandex.cloud.value) = "100-4294967295"];</code>
       * @return The innodbLruScanDepth.
       */
      public com.google.protobuf.Int64Value getInnodbLruScanDepth() {
        if (innodbLruScanDepthBuilder_ == null) {
          return innodbLruScanDepth_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : innodbLruScanDepth_;
        } else {
          return innodbLruScanDepthBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * A parameter that influences the algorithms and heuristics for the flush operation for the InnoDB buffer pool
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lru_scan_depth)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_lru_scan_depth = 87 [(.yandex.cloud.value) = "100-4294967295"];</code>
       */
      public Builder setInnodbLruScanDepth(com.google.protobuf.Int64Value value) {
        if (innodbLruScanDepthBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innodbLruScanDepth_ = value;
          onChanged();
        } else {
          innodbLruScanDepthBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * A parameter that influences the algorithms and heuristics for the flush operation for the InnoDB buffer pool
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lru_scan_depth)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_lru_scan_depth = 87 [(.yandex.cloud.value) = "100-4294967295"];</code>
       */
      public Builder setInnodbLruScanDepth(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (innodbLruScanDepthBuilder_ == null) {
          innodbLruScanDepth_ = builderForValue.build();
          onChanged();
        } else {
          innodbLruScanDepthBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * A parameter that influences the algorithms and heuristics for the flush operation for the InnoDB buffer pool
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lru_scan_depth)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_lru_scan_depth = 87 [(.yandex.cloud.value) = "100-4294967295"];</code>
       */
      public Builder mergeInnodbLruScanDepth(com.google.protobuf.Int64Value value) {
        if (innodbLruScanDepthBuilder_ == null) {
          if (innodbLruScanDepth_ != null) {
            innodbLruScanDepth_ =
              com.google.protobuf.Int64Value.newBuilder(innodbLruScanDepth_).mergeFrom(value).buildPartial();
          } else {
            innodbLruScanDepth_ = value;
          }
          onChanged();
        } else {
          innodbLruScanDepthBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * A parameter that influences the algorithms and heuristics for the flush operation for the InnoDB buffer pool
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lru_scan_depth)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_lru_scan_depth = 87 [(.yandex.cloud.value) = "100-4294967295"];</code>
       */
      public Builder clearInnodbLruScanDepth() {
        if (innodbLruScanDepthBuilder_ == null) {
          innodbLruScanDepth_ = null;
          onChanged();
        } else {
          innodbLruScanDepth_ = null;
          innodbLruScanDepthBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * A parameter that influences the algorithms and heuristics for the flush operation for the InnoDB buffer pool
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lru_scan_depth)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_lru_scan_depth = 87 [(.yandex.cloud.value) = "100-4294967295"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getInnodbLruScanDepthBuilder() {
        
        onChanged();
        return getInnodbLruScanDepthFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * A parameter that influences the algorithms and heuristics for the flush operation for the InnoDB buffer pool
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lru_scan_depth)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_lru_scan_depth = 87 [(.yandex.cloud.value) = "100-4294967295"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getInnodbLruScanDepthOrBuilder() {
        if (innodbLruScanDepthBuilder_ != null) {
          return innodbLruScanDepthBuilder_.getMessageOrBuilder();
        } else {
          return innodbLruScanDepth_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : innodbLruScanDepth_;
        }
      }
      /**
       * <pre>
       * A parameter that influences the algorithms and heuristics for the flush operation for the InnoDB buffer pool
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_lru_scan_depth)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value innodb_lru_scan_depth = 87 [(.yandex.cloud.value) = "100-4294967295"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getInnodbLruScanDepthFieldBuilder() {
        if (innodbLruScanDepthBuilder_ == null) {
          innodbLruScanDepthBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getInnodbLruScanDepth(),
                  getParentForChildren(),
                  isClean());
          innodbLruScanDepth_ = null;
        }
        return innodbLruScanDepthBuilder_;
      }

      private com.google.protobuf.BoolValue sqlRequirePrimaryKey_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> sqlRequirePrimaryKeyBuilder_;
      /**
       * <pre>
       * Whether statements that create new tables or alter the structure of existing tables enforce the requirement that tables have a primary key
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sql_require_primary_key).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue sql_require_primary_key = 88;</code>
       * @return Whether the sqlRequirePrimaryKey field is set.
       */
      public boolean hasSqlRequirePrimaryKey() {
        return sqlRequirePrimaryKeyBuilder_ != null || sqlRequirePrimaryKey_ != null;
      }
      /**
       * <pre>
       * Whether statements that create new tables or alter the structure of existing tables enforce the requirement that tables have a primary key
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sql_require_primary_key).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue sql_require_primary_key = 88;</code>
       * @return The sqlRequirePrimaryKey.
       */
      public com.google.protobuf.BoolValue getSqlRequirePrimaryKey() {
        if (sqlRequirePrimaryKeyBuilder_ == null) {
          return sqlRequirePrimaryKey_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : sqlRequirePrimaryKey_;
        } else {
          return sqlRequirePrimaryKeyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Whether statements that create new tables or alter the structure of existing tables enforce the requirement that tables have a primary key
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sql_require_primary_key).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue sql_require_primary_key = 88;</code>
       */
      public Builder setSqlRequirePrimaryKey(com.google.protobuf.BoolValue value) {
        if (sqlRequirePrimaryKeyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sqlRequirePrimaryKey_ = value;
          onChanged();
        } else {
          sqlRequirePrimaryKeyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Whether statements that create new tables or alter the structure of existing tables enforce the requirement that tables have a primary key
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sql_require_primary_key).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue sql_require_primary_key = 88;</code>
       */
      public Builder setSqlRequirePrimaryKey(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (sqlRequirePrimaryKeyBuilder_ == null) {
          sqlRequirePrimaryKey_ = builderForValue.build();
          onChanged();
        } else {
          sqlRequirePrimaryKeyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Whether statements that create new tables or alter the structure of existing tables enforce the requirement that tables have a primary key
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sql_require_primary_key).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue sql_require_primary_key = 88;</code>
       */
      public Builder mergeSqlRequirePrimaryKey(com.google.protobuf.BoolValue value) {
        if (sqlRequirePrimaryKeyBuilder_ == null) {
          if (sqlRequirePrimaryKey_ != null) {
            sqlRequirePrimaryKey_ =
              com.google.protobuf.BoolValue.newBuilder(sqlRequirePrimaryKey_).mergeFrom(value).buildPartial();
          } else {
            sqlRequirePrimaryKey_ = value;
          }
          onChanged();
        } else {
          sqlRequirePrimaryKeyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Whether statements that create new tables or alter the structure of existing tables enforce the requirement that tables have a primary key
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sql_require_primary_key).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue sql_require_primary_key = 88;</code>
       */
      public Builder clearSqlRequirePrimaryKey() {
        if (sqlRequirePrimaryKeyBuilder_ == null) {
          sqlRequirePrimaryKey_ = null;
          onChanged();
        } else {
          sqlRequirePrimaryKey_ = null;
          sqlRequirePrimaryKeyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Whether statements that create new tables or alter the structure of existing tables enforce the requirement that tables have a primary key
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sql_require_primary_key).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue sql_require_primary_key = 88;</code>
       */
      public com.google.protobuf.BoolValue.Builder getSqlRequirePrimaryKeyBuilder() {
        
        onChanged();
        return getSqlRequirePrimaryKeyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Whether statements that create new tables or alter the structure of existing tables enforce the requirement that tables have a primary key
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sql_require_primary_key).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue sql_require_primary_key = 88;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getSqlRequirePrimaryKeyOrBuilder() {
        if (sqlRequirePrimaryKeyBuilder_ != null) {
          return sqlRequirePrimaryKeyBuilder_.getMessageOrBuilder();
        } else {
          return sqlRequirePrimaryKey_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : sqlRequirePrimaryKey_;
        }
      }
      /**
       * <pre>
       * Whether statements that create new tables or alter the structure of existing tables enforce the requirement that tables have a primary key
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sql_require_primary_key).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue sql_require_primary_key = 88;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getSqlRequirePrimaryKeyFieldBuilder() {
        if (sqlRequirePrimaryKeyBuilder_ == null) {
          sqlRequirePrimaryKeyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getSqlRequirePrimaryKey(),
                  getParentForChildren(),
                  isClean());
          sqlRequirePrimaryKey_ = null;
        }
        return sqlRequirePrimaryKeyBuilder_;
      }

      private com.google.protobuf.BoolValue mdbForceSsl_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> mdbForceSslBuilder_;
      /**
       * <pre>
       * Force ssl on all hosts (require_secure_transport)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue mdb_force_ssl = 89;</code>
       * @return Whether the mdbForceSsl field is set.
       */
      public boolean hasMdbForceSsl() {
        return mdbForceSslBuilder_ != null || mdbForceSsl_ != null;
      }
      /**
       * <pre>
       * Force ssl on all hosts (require_secure_transport)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue mdb_force_ssl = 89;</code>
       * @return The mdbForceSsl.
       */
      public com.google.protobuf.BoolValue getMdbForceSsl() {
        if (mdbForceSslBuilder_ == null) {
          return mdbForceSsl_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : mdbForceSsl_;
        } else {
          return mdbForceSslBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Force ssl on all hosts (require_secure_transport)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue mdb_force_ssl = 89;</code>
       */
      public Builder setMdbForceSsl(com.google.protobuf.BoolValue value) {
        if (mdbForceSslBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mdbForceSsl_ = value;
          onChanged();
        } else {
          mdbForceSslBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Force ssl on all hosts (require_secure_transport)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue mdb_force_ssl = 89;</code>
       */
      public Builder setMdbForceSsl(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (mdbForceSslBuilder_ == null) {
          mdbForceSsl_ = builderForValue.build();
          onChanged();
        } else {
          mdbForceSslBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Force ssl on all hosts (require_secure_transport)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue mdb_force_ssl = 89;</code>
       */
      public Builder mergeMdbForceSsl(com.google.protobuf.BoolValue value) {
        if (mdbForceSslBuilder_ == null) {
          if (mdbForceSsl_ != null) {
            mdbForceSsl_ =
              com.google.protobuf.BoolValue.newBuilder(mdbForceSsl_).mergeFrom(value).buildPartial();
          } else {
            mdbForceSsl_ = value;
          }
          onChanged();
        } else {
          mdbForceSslBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Force ssl on all hosts (require_secure_transport)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue mdb_force_ssl = 89;</code>
       */
      public Builder clearMdbForceSsl() {
        if (mdbForceSslBuilder_ == null) {
          mdbForceSsl_ = null;
          onChanged();
        } else {
          mdbForceSsl_ = null;
          mdbForceSslBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Force ssl on all hosts (require_secure_transport)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue mdb_force_ssl = 89;</code>
       */
      public com.google.protobuf.BoolValue.Builder getMdbForceSslBuilder() {
        
        onChanged();
        return getMdbForceSslFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Force ssl on all hosts (require_secure_transport)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue mdb_force_ssl = 89;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getMdbForceSslOrBuilder() {
        if (mdbForceSslBuilder_ != null) {
          return mdbForceSslBuilder_.getMessageOrBuilder();
        } else {
          return mdbForceSsl_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : mdbForceSsl_;
        }
      }
      /**
       * <pre>
       * Force ssl on all hosts (require_secure_transport)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue mdb_force_ssl = 89;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getMdbForceSslFieldBuilder() {
        if (mdbForceSslBuilder_ == null) {
          mdbForceSslBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getMdbForceSsl(),
                  getParentForChildren(),
                  isClean());
          mdbForceSsl_ = null;
        }
        return mdbForceSslBuilder_;
      }

      private int innodbChangeBuffering_ = 0;
      /**
       * <pre>
       * An optimization for change buffering
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_change_buffering).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.InnodbChangeBuffering innodb_change_buffering = 90;</code>
       * @return The enum numeric value on the wire for innodbChangeBuffering.
       */
      @java.lang.Override public int getInnodbChangeBufferingValue() {
        return innodbChangeBuffering_;
      }
      /**
       * <pre>
       * An optimization for change buffering
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_change_buffering).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.InnodbChangeBuffering innodb_change_buffering = 90;</code>
       * @param value The enum numeric value on the wire for innodbChangeBuffering to set.
       * @return This builder for chaining.
       */
      public Builder setInnodbChangeBufferingValue(int value) {
        
        innodbChangeBuffering_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * An optimization for change buffering
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_change_buffering).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.InnodbChangeBuffering innodb_change_buffering = 90;</code>
       * @return The innodbChangeBuffering.
       */
      @java.lang.Override
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.InnodbChangeBuffering getInnodbChangeBuffering() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.InnodbChangeBuffering result = yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.InnodbChangeBuffering.valueOf(innodbChangeBuffering_);
        return result == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.InnodbChangeBuffering.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * An optimization for change buffering
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_change_buffering).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.InnodbChangeBuffering innodb_change_buffering = 90;</code>
       * @param value The innodbChangeBuffering to set.
       * @return This builder for chaining.
       */
      public Builder setInnodbChangeBuffering(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.InnodbChangeBuffering value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        innodbChangeBuffering_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * An optimization for change buffering
       * For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_change_buffering).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0.InnodbChangeBuffering innodb_change_buffering = 90;</code>
       * @return This builder for chaining.
       */
      public Builder clearInnodbChangeBuffering() {
        
        innodbChangeBuffering_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Int64Value maxWriteLockCount_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxWriteLockCountBuilder_;
      /**
       * <pre>
       * Permit some pending read lock requests interval
       * P.S. Should be UInt64, but java fails to handle UInt64 limits
       * For details, see [Percona documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_write_lock_count).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_write_lock_count = 91 [(.yandex.cloud.value) = "&gt;=1"];</code>
       * @return Whether the maxWriteLockCount field is set.
       */
      public boolean hasMaxWriteLockCount() {
        return maxWriteLockCountBuilder_ != null || maxWriteLockCount_ != null;
      }
      /**
       * <pre>
       * Permit some pending read lock requests interval
       * P.S. Should be UInt64, but java fails to handle UInt64 limits
       * For details, see [Percona documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_write_lock_count).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_write_lock_count = 91 [(.yandex.cloud.value) = "&gt;=1"];</code>
       * @return The maxWriteLockCount.
       */
      public com.google.protobuf.Int64Value getMaxWriteLockCount() {
        if (maxWriteLockCountBuilder_ == null) {
          return maxWriteLockCount_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxWriteLockCount_;
        } else {
          return maxWriteLockCountBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Permit some pending read lock requests interval
       * P.S. Should be UInt64, but java fails to handle UInt64 limits
       * For details, see [Percona documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_write_lock_count).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_write_lock_count = 91 [(.yandex.cloud.value) = "&gt;=1"];</code>
       */
      public Builder setMaxWriteLockCount(com.google.protobuf.Int64Value value) {
        if (maxWriteLockCountBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxWriteLockCount_ = value;
          onChanged();
        } else {
          maxWriteLockCountBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Permit some pending read lock requests interval
       * P.S. Should be UInt64, but java fails to handle UInt64 limits
       * For details, see [Percona documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_write_lock_count).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_write_lock_count = 91 [(.yandex.cloud.value) = "&gt;=1"];</code>
       */
      public Builder setMaxWriteLockCount(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxWriteLockCountBuilder_ == null) {
          maxWriteLockCount_ = builderForValue.build();
          onChanged();
        } else {
          maxWriteLockCountBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Permit some pending read lock requests interval
       * P.S. Should be UInt64, but java fails to handle UInt64 limits
       * For details, see [Percona documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_write_lock_count).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_write_lock_count = 91 [(.yandex.cloud.value) = "&gt;=1"];</code>
       */
      public Builder mergeMaxWriteLockCount(com.google.protobuf.Int64Value value) {
        if (maxWriteLockCountBuilder_ == null) {
          if (maxWriteLockCount_ != null) {
            maxWriteLockCount_ =
              com.google.protobuf.Int64Value.newBuilder(maxWriteLockCount_).mergeFrom(value).buildPartial();
          } else {
            maxWriteLockCount_ = value;
          }
          onChanged();
        } else {
          maxWriteLockCountBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Permit some pending read lock requests interval
       * P.S. Should be UInt64, but java fails to handle UInt64 limits
       * For details, see [Percona documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_write_lock_count).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_write_lock_count = 91 [(.yandex.cloud.value) = "&gt;=1"];</code>
       */
      public Builder clearMaxWriteLockCount() {
        if (maxWriteLockCountBuilder_ == null) {
          maxWriteLockCount_ = null;
          onChanged();
        } else {
          maxWriteLockCount_ = null;
          maxWriteLockCountBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Permit some pending read lock requests interval
       * P.S. Should be UInt64, but java fails to handle UInt64 limits
       * For details, see [Percona documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_write_lock_count).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_write_lock_count = 91 [(.yandex.cloud.value) = "&gt;=1"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxWriteLockCountBuilder() {
        
        onChanged();
        return getMaxWriteLockCountFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Permit some pending read lock requests interval
       * P.S. Should be UInt64, but java fails to handle UInt64 limits
       * For details, see [Percona documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_write_lock_count).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_write_lock_count = 91 [(.yandex.cloud.value) = "&gt;=1"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxWriteLockCountOrBuilder() {
        if (maxWriteLockCountBuilder_ != null) {
          return maxWriteLockCountBuilder_.getMessageOrBuilder();
        } else {
          return maxWriteLockCount_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxWriteLockCount_;
        }
      }
      /**
       * <pre>
       * Permit some pending read lock requests interval
       * P.S. Should be UInt64, but java fails to handle UInt64 limits
       * For details, see [Percona documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_write_lock_count).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_write_lock_count = 91 [(.yandex.cloud.value) = "&gt;=1"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxWriteLockCountFieldBuilder() {
        if (maxWriteLockCountBuilder_ == null) {
          maxWriteLockCountBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxWriteLockCount(),
                  getParentForChildren(),
                  isClean());
          maxWriteLockCount_ = null;
        }
        return maxWriteLockCountBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0)
    }

    // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0)
    private static final yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0();
    }

    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MysqlConfig8_0>
        PARSER = new com.google.protobuf.AbstractParser<MysqlConfig8_0>() {
      @java.lang.Override
      public MysqlConfig8_0 parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MysqlConfig8_0(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MysqlConfig8_0> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MysqlConfig8_0> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MysqlConfigSet8_0OrBuilder extends
      // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet8_0)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
     * in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
     * @return Whether the effectiveConfig field is set.
     */
    boolean hasEffectiveConfig();
    /**
     * <pre>
     * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
     * in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
     * @return The effectiveConfig.
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 getEffectiveConfig();
    /**
     * <pre>
     * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
     * in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder getEffectiveConfigOrBuilder();

    /**
     * <pre>
     * User-defined settings for a MySQL 8.0 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
     * @return Whether the userConfig field is set.
     */
    boolean hasUserConfig();
    /**
     * <pre>
     * User-defined settings for a MySQL 8.0 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
     * @return The userConfig.
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 getUserConfig();
    /**
     * <pre>
     * User-defined settings for a MySQL 8.0 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder getUserConfigOrBuilder();

    /**
     * <pre>
     * Default configuration for a MySQL 8.0 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
     * @return Whether the defaultConfig field is set.
     */
    boolean hasDefaultConfig();
    /**
     * <pre>
     * Default configuration for a MySQL 8.0 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
     * @return The defaultConfig.
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 getDefaultConfig();
    /**
     * <pre>
     * Default configuration for a MySQL 8.0 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
     */
    yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder getDefaultConfigOrBuilder();
  }
  /**
   * Protobuf type {@code yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet8_0}
   */
  public static final class MysqlConfigSet8_0 extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet8_0)
      MysqlConfigSet8_0OrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MysqlConfigSet8_0.newBuilder() to construct.
    private MysqlConfigSet8_0(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MysqlConfigSet8_0() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new MysqlConfigSet8_0();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MysqlConfigSet8_0(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder subBuilder = null;
              if (effectiveConfig_ != null) {
                subBuilder = effectiveConfig_.toBuilder();
              }
              effectiveConfig_ = input.readMessage(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(effectiveConfig_);
                effectiveConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder subBuilder = null;
              if (userConfig_ != null) {
                subBuilder = userConfig_.toBuilder();
              }
              userConfig_ = input.readMessage(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(userConfig_);
                userConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder subBuilder = null;
              if (defaultConfig_ != null) {
                subBuilder = defaultConfig_.toBuilder();
              }
              defaultConfig_ = input.readMessage(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(defaultConfig_);
                defaultConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet8_0_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet8_0_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0.class, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0.Builder.class);
    }

    public static final int EFFECTIVE_CONFIG_FIELD_NUMBER = 1;
    private yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 effectiveConfig_;
    /**
     * <pre>
     * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
     * in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
     * @return Whether the effectiveConfig field is set.
     */
    @java.lang.Override
    public boolean hasEffectiveConfig() {
      return effectiveConfig_ != null;
    }
    /**
     * <pre>
     * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
     * in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
     * @return The effectiveConfig.
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 getEffectiveConfig() {
      return effectiveConfig_ == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDefaultInstance() : effectiveConfig_;
    }
    /**
     * <pre>
     * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
     * in [user_config] and [default_config]).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder getEffectiveConfigOrBuilder() {
      return getEffectiveConfig();
    }

    public static final int USER_CONFIG_FIELD_NUMBER = 2;
    private yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 userConfig_;
    /**
     * <pre>
     * User-defined settings for a MySQL 8.0 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
     * @return Whether the userConfig field is set.
     */
    @java.lang.Override
    public boolean hasUserConfig() {
      return userConfig_ != null;
    }
    /**
     * <pre>
     * User-defined settings for a MySQL 8.0 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
     * @return The userConfig.
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 getUserConfig() {
      return userConfig_ == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDefaultInstance() : userConfig_;
    }
    /**
     * <pre>
     * User-defined settings for a MySQL 8.0 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder getUserConfigOrBuilder() {
      return getUserConfig();
    }

    public static final int DEFAULT_CONFIG_FIELD_NUMBER = 3;
    private yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 defaultConfig_;
    /**
     * <pre>
     * Default configuration for a MySQL 8.0 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
     * @return Whether the defaultConfig field is set.
     */
    @java.lang.Override
    public boolean hasDefaultConfig() {
      return defaultConfig_ != null;
    }
    /**
     * <pre>
     * Default configuration for a MySQL 8.0 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
     * @return The defaultConfig.
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 getDefaultConfig() {
      return defaultConfig_ == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDefaultInstance() : defaultConfig_;
    }
    /**
     * <pre>
     * Default configuration for a MySQL 8.0 cluster.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder getDefaultConfigOrBuilder() {
      return getDefaultConfig();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (effectiveConfig_ != null) {
        output.writeMessage(1, getEffectiveConfig());
      }
      if (userConfig_ != null) {
        output.writeMessage(2, getUserConfig());
      }
      if (defaultConfig_ != null) {
        output.writeMessage(3, getDefaultConfig());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (effectiveConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getEffectiveConfig());
      }
      if (userConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getUserConfig());
      }
      if (defaultConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getDefaultConfig());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0)) {
        return super.equals(obj);
      }
      yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 other = (yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0) obj;

      if (hasEffectiveConfig() != other.hasEffectiveConfig()) return false;
      if (hasEffectiveConfig()) {
        if (!getEffectiveConfig()
            .equals(other.getEffectiveConfig())) return false;
      }
      if (hasUserConfig() != other.hasUserConfig()) return false;
      if (hasUserConfig()) {
        if (!getUserConfig()
            .equals(other.getUserConfig())) return false;
      }
      if (hasDefaultConfig() != other.hasDefaultConfig()) return false;
      if (hasDefaultConfig()) {
        if (!getDefaultConfig()
            .equals(other.getDefaultConfig())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasEffectiveConfig()) {
        hash = (37 * hash) + EFFECTIVE_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getEffectiveConfig().hashCode();
      }
      if (hasUserConfig()) {
        hash = (37 * hash) + USER_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getUserConfig().hashCode();
      }
      if (hasDefaultConfig()) {
        hash = (37 * hash) + DEFAULT_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getDefaultConfig().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet8_0}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet8_0)
        yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0OrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet8_0_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet8_0_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0.class, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0.Builder.class);
      }

      // Construct using yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (effectiveConfigBuilder_ == null) {
          effectiveConfig_ = null;
        } else {
          effectiveConfig_ = null;
          effectiveConfigBuilder_ = null;
        }
        if (userConfigBuilder_ == null) {
          userConfig_ = null;
        } else {
          userConfig_ = null;
          userConfigBuilder_ = null;
        }
        if (defaultConfigBuilder_ == null) {
          defaultConfig_ = null;
        } else {
          defaultConfig_ = null;
          defaultConfigBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet8_0_descriptor;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 getDefaultInstanceForType() {
        return yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0.getDefaultInstance();
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 build() {
        yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 buildPartial() {
        yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 result = new yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0(this);
        if (effectiveConfigBuilder_ == null) {
          result.effectiveConfig_ = effectiveConfig_;
        } else {
          result.effectiveConfig_ = effectiveConfigBuilder_.build();
        }
        if (userConfigBuilder_ == null) {
          result.userConfig_ = userConfig_;
        } else {
          result.userConfig_ = userConfigBuilder_.build();
        }
        if (defaultConfigBuilder_ == null) {
          result.defaultConfig_ = defaultConfig_;
        } else {
          result.defaultConfig_ = defaultConfigBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0) {
          return mergeFrom((yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 other) {
        if (other == yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0.getDefaultInstance()) return this;
        if (other.hasEffectiveConfig()) {
          mergeEffectiveConfig(other.getEffectiveConfig());
        }
        if (other.hasUserConfig()) {
          mergeUserConfig(other.getUserConfig());
        }
        if (other.hasDefaultConfig()) {
          mergeDefaultConfig(other.getDefaultConfig());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 effectiveConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder> effectiveConfigBuilder_;
      /**
       * <pre>
       * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
       * @return Whether the effectiveConfig field is set.
       */
      public boolean hasEffectiveConfig() {
        return effectiveConfigBuilder_ != null || effectiveConfig_ != null;
      }
      /**
       * <pre>
       * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
       * @return The effectiveConfig.
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 getEffectiveConfig() {
        if (effectiveConfigBuilder_ == null) {
          return effectiveConfig_ == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDefaultInstance() : effectiveConfig_;
        } else {
          return effectiveConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
       */
      public Builder setEffectiveConfig(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 value) {
        if (effectiveConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          effectiveConfig_ = value;
          onChanged();
        } else {
          effectiveConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
       */
      public Builder setEffectiveConfig(
          yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder builderForValue) {
        if (effectiveConfigBuilder_ == null) {
          effectiveConfig_ = builderForValue.build();
          onChanged();
        } else {
          effectiveConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
       */
      public Builder mergeEffectiveConfig(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 value) {
        if (effectiveConfigBuilder_ == null) {
          if (effectiveConfig_ != null) {
            effectiveConfig_ =
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.newBuilder(effectiveConfig_).mergeFrom(value).buildPartial();
          } else {
            effectiveConfig_ = value;
          }
          onChanged();
        } else {
          effectiveConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
       */
      public Builder clearEffectiveConfig() {
        if (effectiveConfigBuilder_ == null) {
          effectiveConfig_ = null;
          onChanged();
        } else {
          effectiveConfig_ = null;
          effectiveConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder getEffectiveConfigBuilder() {
        
        onChanged();
        return getEffectiveConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder getEffectiveConfigOrBuilder() {
        if (effectiveConfigBuilder_ != null) {
          return effectiveConfigBuilder_.getMessageOrBuilder();
        } else {
          return effectiveConfig_ == null ?
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDefaultInstance() : effectiveConfig_;
        }
      }
      /**
       * <pre>
       * Effective settings for a MySQL 8.0 cluster (a combination of settings defined
       * in [user_config] and [default_config]).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 effective_config = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder> 
          getEffectiveConfigFieldBuilder() {
        if (effectiveConfigBuilder_ == null) {
          effectiveConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder>(
                  getEffectiveConfig(),
                  getParentForChildren(),
                  isClean());
          effectiveConfig_ = null;
        }
        return effectiveConfigBuilder_;
      }

      private yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 userConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder> userConfigBuilder_;
      /**
       * <pre>
       * User-defined settings for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
       * @return Whether the userConfig field is set.
       */
      public boolean hasUserConfig() {
        return userConfigBuilder_ != null || userConfig_ != null;
      }
      /**
       * <pre>
       * User-defined settings for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
       * @return The userConfig.
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 getUserConfig() {
        if (userConfigBuilder_ == null) {
          return userConfig_ == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDefaultInstance() : userConfig_;
        } else {
          return userConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * User-defined settings for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
       */
      public Builder setUserConfig(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 value) {
        if (userConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          userConfig_ = value;
          onChanged();
        } else {
          userConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * User-defined settings for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
       */
      public Builder setUserConfig(
          yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder builderForValue) {
        if (userConfigBuilder_ == null) {
          userConfig_ = builderForValue.build();
          onChanged();
        } else {
          userConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * User-defined settings for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
       */
      public Builder mergeUserConfig(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 value) {
        if (userConfigBuilder_ == null) {
          if (userConfig_ != null) {
            userConfig_ =
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.newBuilder(userConfig_).mergeFrom(value).buildPartial();
          } else {
            userConfig_ = value;
          }
          onChanged();
        } else {
          userConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * User-defined settings for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
       */
      public Builder clearUserConfig() {
        if (userConfigBuilder_ == null) {
          userConfig_ = null;
          onChanged();
        } else {
          userConfig_ = null;
          userConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * User-defined settings for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder getUserConfigBuilder() {
        
        onChanged();
        return getUserConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * User-defined settings for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder getUserConfigOrBuilder() {
        if (userConfigBuilder_ != null) {
          return userConfigBuilder_.getMessageOrBuilder();
        } else {
          return userConfig_ == null ?
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDefaultInstance() : userConfig_;
        }
      }
      /**
       * <pre>
       * User-defined settings for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 user_config = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder> 
          getUserConfigFieldBuilder() {
        if (userConfigBuilder_ == null) {
          userConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder>(
                  getUserConfig(),
                  getParentForChildren(),
                  isClean());
          userConfig_ = null;
        }
        return userConfigBuilder_;
      }

      private yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 defaultConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder> defaultConfigBuilder_;
      /**
       * <pre>
       * Default configuration for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
       * @return Whether the defaultConfig field is set.
       */
      public boolean hasDefaultConfig() {
        return defaultConfigBuilder_ != null || defaultConfig_ != null;
      }
      /**
       * <pre>
       * Default configuration for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
       * @return The defaultConfig.
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 getDefaultConfig() {
        if (defaultConfigBuilder_ == null) {
          return defaultConfig_ == null ? yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDefaultInstance() : defaultConfig_;
        } else {
          return defaultConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Default configuration for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
       */
      public Builder setDefaultConfig(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 value) {
        if (defaultConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          defaultConfig_ = value;
          onChanged();
        } else {
          defaultConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Default configuration for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
       */
      public Builder setDefaultConfig(
          yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder builderForValue) {
        if (defaultConfigBuilder_ == null) {
          defaultConfig_ = builderForValue.build();
          onChanged();
        } else {
          defaultConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Default configuration for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
       */
      public Builder mergeDefaultConfig(yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0 value) {
        if (defaultConfigBuilder_ == null) {
          if (defaultConfig_ != null) {
            defaultConfig_ =
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.newBuilder(defaultConfig_).mergeFrom(value).buildPartial();
          } else {
            defaultConfig_ = value;
          }
          onChanged();
        } else {
          defaultConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Default configuration for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
       */
      public Builder clearDefaultConfig() {
        if (defaultConfigBuilder_ == null) {
          defaultConfig_ = null;
          onChanged();
        } else {
          defaultConfig_ = null;
          defaultConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Default configuration for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder getDefaultConfigBuilder() {
        
        onChanged();
        return getDefaultConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Default configuration for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
       */
      public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder getDefaultConfigOrBuilder() {
        if (defaultConfigBuilder_ != null) {
          return defaultConfigBuilder_.getMessageOrBuilder();
        } else {
          return defaultConfig_ == null ?
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.getDefaultInstance() : defaultConfig_;
        }
      }
      /**
       * <pre>
       * Default configuration for a MySQL 8.0 cluster.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_0 default_config = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder> 
          getDefaultConfigFieldBuilder() {
        if (defaultConfigBuilder_ == null) {
          defaultConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0.Builder, yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfig8_0OrBuilder>(
                  getDefaultConfig(),
                  getParentForChildren(),
                  isClean());
          defaultConfig_ = null;
        }
        return defaultConfigBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet8_0)
    }

    // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet8_0)
    private static final yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0();
    }

    public static yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MysqlConfigSet8_0>
        PARSER = new com.google.protobuf.AbstractParser<MysqlConfigSet8_0>() {
      @java.lang.Override
      public MysqlConfigSet8_0 parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MysqlConfigSet8_0(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MysqlConfigSet8_0> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MysqlConfigSet8_0> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public yandex.cloud.api.mdb.mysql.v1.config.Mysql80.MysqlConfigSet8_0 getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig8_0_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig8_0_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet8_0_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet8_0_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n/yandex/cloud/mdb/mysql/v1/config/mysql" +
      "8_0.proto\022 yandex.cloud.mdb.mysql.v1.con" +
      "fig\032\036google/protobuf/wrappers.proto\032\035yan" +
      "dex/cloud/validation.proto\"\254A\n\016MysqlConf" +
      "ig8_0\022K\n\027innodb_buffer_pool_size\030\001 \001(\0132\033" +
      ".google.protobuf.Int64ValueB\r\372\3071\t>=52428" +
      "80\022B\n\017max_connections\030\002 \001(\0132\033.google.pro" +
      "tobuf.Int64ValueB\014\372\3071\01010-16384\0225\n\017long_q" +
      "uery_time\030\003 \001(\0132\034.google.protobuf.Double" +
      "Value\022/\n\013general_log\030\004 \001(\0132\032.google.prot" +
      "obuf.BoolValue\022-\n\taudit_log\030\005 \001(\0132\032.goog" +
      "le.protobuf.BoolValue\022J\n\010sql_mode\030\006 \003(\0162" +
      "8.yandex.cloud.mdb.mysql.v1.config.Mysql" +
      "Config8_0.SQLMode\022L\n\022max_allowed_packet\030" +
      "\007 \001(\0132\033.google.protobuf.Int64ValueB\023\372\3071\017" +
      "1024-1073741824\022b\n\035default_authenticatio" +
      "n_plugin\030\010 \001(\0162;.yandex.cloud.mdb.mysql." +
      "v1.config.MysqlConfig8_0.AuthPlugin\022L\n\036i" +
      "nnodb_flush_log_at_trx_commit\030\t \001(\0132\033.go" +
      "ogle.protobuf.Int64ValueB\007\372\3071\0031-2\022J\n\030inn" +
      "odb_lock_wait_timeout\030\n \001(\0132\033.google.pro" +
      "tobuf.Int64ValueB\013\372\3071\0071-28800\022d\n\025transac" +
      "tion_isolation\030\013 \001(\0162E.yandex.cloud.mdb." +
      "mysql.v1.config.MysqlConfig8_0.Transacti" +
      "onIsolation\022>\n\032innodb_print_all_deadlock" +
      "s\030\014 \001(\0132\032.google.protobuf.BoolValue\022A\n\020n" +
      "et_read_timeout\030\r \001(\0132\033.google.protobuf." +
      "Int64ValueB\n\372\3071\0061-1200\022B\n\021net_write_time" +
      "out\030\016 \001(\0132\033.google.protobuf.Int64ValueB\n" +
      "\372\3071\0061-1200\022I\n\024group_concat_max_len\030\017 \001(\013" +
      "2\033.google.protobuf.Int64ValueB\016\372\3071\n4-335" +
      "54432\022G\n\016tmp_table_size\030\020 \001(\0132\033.google.p" +
      "rotobuf.Int64ValueB\022\372\3071\0161024-536870912\022M" +
      "\n\023max_heap_table_size\030\021 \001(\0132\033.google.pro" +
      "tobuf.Int64ValueB\023\372\3071\01716384-536870912\022\031\n" +
      "\021default_time_zone\030\022 \001(\t\022\034\n\024character_se" +
      "t_server\030\023 \001(\t\022\030\n\020collation_server\030\024 \001(\t" +
      "\022>\n\032innodb_adaptive_hash_index\030\025 \001(\0132\032.g" +
      "oogle.protobuf.BoolValue\022:\n\026innodb_numa_" +
      "interleave\030\026 \001(\0132\032.google.protobuf.BoolV" +
      "alue\022R\n\026innodb_log_buffer_size\030\027 \001(\0132\033.g" +
      "oogle.protobuf.Int64ValueB\025\372\3071\0211048576-2" +
      "68435456\022S\n\024innodb_log_file_size\030\030 \001(\0132\033" +
      ".google.protobuf.Int64ValueB\030\372\3071\0242684354" +
      "56-4294967296\022G\n\022innodb_io_capacity\030\031 \001(" +
      "\0132\033.google.protobuf.Int64ValueB\016\372\3071\n100-" +
      "100000\022K\n\026innodb_io_capacity_max\030\032 \001(\0132\033" +
      ".google.protobuf.Int64ValueB\016\372\3071\n100-100" +
      "000\022E\n\026innodb_read_io_threads\030\033 \001(\0132\033.go" +
      "ogle.protobuf.Int64ValueB\010\372\3071\0041-16\022F\n\027in" +
      "nodb_write_io_threads\030\034 \001(\0132\033.google.pro" +
      "tobuf.Int64ValueB\010\372\3071\0041-16\022C\n\024innodb_pur" +
      "ge_threads\030\035 \001(\0132\033.google.protobuf.Int64" +
      "ValueB\010\372\3071\0041-16\022J\n\031innodb_thread_concurr" +
      "ency\030\036 \001(\0132\033.google.protobuf.Int64ValueB" +
      "\n\372\3071\0060-1000\022W\n\036innodb_temp_data_file_max" +
      "_size\030\037 \001(\0132\033.google.protobuf.Int64Value" +
      "B\022\372\3071\0160-107374182400\022D\n\021thread_cache_siz" +
      "e\030  \001(\0132\033.google.protobuf.Int64ValueB\014\372\307" +
      "1\01010-10000\022F\n\014thread_stack\030! \001(\0132\033.googl" +
      "e.protobuf.Int64ValueB\023\372\3071\017131072-167772" +
      "16\022H\n\020join_buffer_size\030\" \001(\0132\033.google.pr" +
      "otobuf.Int64ValueB\021\372\3071\r1024-16777216\022H\n\020" +
      "sort_buffer_size\030# \001(\0132\033.google.protobuf" +
      ".Int64ValueB\021\372\3071\r1024-16777216\022K\n\026table_" +
      "definition_cache\030$ \001(\0132\033.google.protobuf" +
      ".Int64ValueB\016\372\3071\n400-524288\022E\n\020table_ope" +
      "n_cache\030% \001(\0132\033.google.protobuf.Int64Val" +
      "ueB\016\372\3071\n400-524288\022I\n\032table_open_cache_i" +
      "nstances\030& \001(\0132\033.google.protobuf.Int64Va" +
      "lueB\010\372\3071\0041-32\022C\n\037explicit_defaults_for_t" +
      "imestamp\030\' \001(\0132\032.google.protobuf.BoolVal" +
      "ue\022J\n\030auto_increment_increment\030( \001(\0132\033.g" +
      "oogle.protobuf.Int64ValueB\013\372\3071\0071-65535\022G" +
      "\n\025auto_increment_offset\030) \001(\0132\033.google.p" +
      "rotobuf.Int64ValueB\013\372\3071\0071-65535\022<\n\013sync_" +
      "binlog\030* \001(\0132\033.google.protobuf.Int64Valu" +
      "eB\n\372\3071\0060-4096\022I\n\021binlog_cache_size\030+ \001(\013" +
      "2\033.google.protobuf.Int64ValueB\021\372\3071\r4096-" +
      "67108864\022P\n\036binlog_group_commit_sync_del" +
      "ay\030, \001(\0132\033.google.protobuf.Int64ValueB\013\372" +
      "\3071\0070-50000\022Y\n\020binlog_row_image\030- \001(\0162?.y" +
      "andex.cloud.mdb.mysql.v1.config.MysqlCon" +
      "fig8_0.BinlogRowImage\022@\n\034binlog_rows_que" +
      "ry_log_events\030. \001(\0132\032.google.protobuf.Bo" +
      "olValue\022W\n)rpl_semi_sync_master_wait_for" +
      "_slave_count\030/ \001(\0132\033.google.protobuf.Int" +
      "64ValueB\007\372\3071\0031-2\022_\n\023slave_parallel_type\030" +
      "0 \001(\0162B.yandex.cloud.mdb.mysql.v1.config" +
      ".MysqlConfig8_0.SlaveParallelType\022E\n\026sla" +
      "ve_parallel_workers\0301 \001(\0132\033.google.proto" +
      "buf.Int64ValueB\010\372\3071\0040-64\022E\n\021regexp_time_" +
      "limit\0302 \001(\0132\033.google.protobuf.Int64Value" +
      "B\r\372\3071\t0-1048576\022\\\n\031mdb_preserve_binlog_b" +
      "ytes\0303 \001(\0132\033.google.protobuf.Int64ValueB" +
      "\034\372\3071\0301073741824-1099511627776\022G\n\023interac" +
      "tive_timeout\0304 \001(\0132\033.google.protobuf.Int" +
      "64ValueB\r\372\3071\t600-86400\022@\n\014wait_timeout\0305" +
      " \001(\0132\033.google.protobuf.Int64ValueB\r\372\3071\t6" +
      "00-86400\022P\n\033mdb_offline_mode_enable_lag\030" +
      "6 \001(\0132\033.google.protobuf.Int64ValueB\016\372\3071\n" +
      "600-432000\022O\n\034mdb_offline_mode_disable_l" +
      "ag\0307 \001(\0132\033.google.protobuf.Int64ValueB\014\372" +
      "\3071\01060-86400\022X\n\034range_optimizer_max_mem_s" +
      "ize\0308 \001(\0132\033.google.protobuf.Int64ValueB\025" +
      "\372\3071\0211048576-268435456\0222\n\016slow_query_log\030" +
      "9 \001(\0132\032.google.protobuf.BoolValue\022F\n slo" +
      "w_query_log_always_write_time\030: \001(\0132\034.go" +
      "ogle.protobuf.DoubleValue\022\\\n\022log_slow_ra" +
      "te_type\030; \001(\0162@.yandex.cloud.mdb.mysql.v" +
      "1.config.MysqlConfig8_0.LogSlowRateType\022" +
      "D\n\023log_slow_rate_limit\030< \001(\0132\033.google.pr" +
      "otobuf.Int64ValueB\n\372\3071\0061-1000\022:\n\026log_slo" +
      "w_sp_statements\030= \001(\0132\032.google.protobuf." +
      "BoolValue\022[\n\017log_slow_filter\030> \003(\0162B.yan" +
      "dex.cloud.mdb.mysql.v1.config.MysqlConfi" +
      "g8_0.LogSlowFilterType\022M\n\033mdb_priority_c" +
      "hoice_max_lag\030? \001(\0132\033.google.protobuf.In" +
      "t64ValueB\013\372\3071\0070-86400\022E\n\020innodb_page_siz" +
      "e\030@ \001(\0132\033.google.protobuf.Int64ValueB\016\372\307" +
      "1\n4096-65536\022]\n innodb_online_alter_log_" +
      "max_size\030A \001(\0132\033.google.protobuf.Int64Va" +
      "lueB\026\372\3071\02265536-107374182400\022G\n\030innodb_ft" +
      "_min_token_size\030B \001(\0132\033.google.protobuf." +
      "Int64ValueB\010\372\3071\0040-16\022H\n\030innodb_ft_max_to" +
      "ken_size\030C \001(\0132\033.google.protobuf.Int64Va" +
      "lueB\t\372\3071\00510-84\022D\n\026lower_case_table_names" +
      "\030D \001(\0132\033.google.protobuf.Int64ValueB\007\372\3071" +
      "\0030-1\022F\n\026max_sp_recursion_depth\030E \001(\0132\033.g" +
      "oogle.protobuf.Int64ValueB\t\372\3071\0050-255\022F\n\030" +
      "innodb_compression_level\030F \001(\0132\033.google." +
      "protobuf.Int64ValueB\007\372\3071\0030-9\022\204\001\n&binlog_" +
      "transaction_dependency_tracking\030G \001(\0162T." +
      "yandex.cloud.mdb.mysql.v1.config.MysqlCo" +
      "nfig8_0.BinlogTransactionDependencyTrack" +
      "ing\022.\n\nautocommit\030H \001(\0132\032.google.protobu" +
      "f.BoolValue\0228\n\024innodb_status_output\030I \001(" +
      "\0132\032.google.protobuf.BoolValue\0226\n\022innodb_" +
      "strict_mode\030J \001(\0132\032.google.protobuf.Bool" +
      "Value\022G\n#innodb_print_lock_wait_timeout_" +
      "info\030K \001(\0132\032.google.protobuf.BoolValue\022A" +
      "\n\023log_error_verbosity\030L \001(\0132\033.google.pro" +
      "tobuf.Int64ValueB\007\372\3071\0031-3\022E\n\021max_digest_" +
      "length\030M \001(\0132\033.google.protobuf.Int64Valu" +
      "eB\r\372\3071\t0-1048576\022F\n\021lock_wait_timeout\030N " +
      "\001(\0132\033.google.protobuf.Int64ValueB\016\372\3071\n1-" +
      "31536000\022K\n\027max_prepared_stmt_count\030O \001(" +
      "\0132\033.google.protobuf.Int64ValueB\r\372\3071\t0-41" +
      "94304\022\030\n\020optimizer_switch\030P \001(\t\022E\n\026optim" +
      "izer_search_depth\030Q \001(\0132\033.google.protobu" +
      "f.Int64ValueB\010\372\3071\0040-62\022,\n\010userstat\030R \001(\013" +
      "2\032.google.protobuf.BoolValue\022I\n\022max_exec" +
      "ution_time\030S \001(\0132\033.google.protobuf.Int64" +
      "ValueB\020\372\3071\0140-4294967295\022Y\n\020audit_log_pol" +
      "icy\030T \001(\0162?.yandex.cloud.mdb.mysql.v1.co" +
      "nfig.MysqlConfig8_0.AuditLogPolicy\022J\n&re" +
      "plication_sender_observe_commit_only\030U \001" +
      "(\0132\032.google.protobuf.BoolValue\022Q\n-replic" +
      "ation_optimize_for_static_plugin_config\030" +
      "V \001(\0132\032.google.protobuf.BoolValue\022N\n\025inn" +
      "odb_lru_scan_depth\030W \001(\0132\033.google.protob" +
      "uf.Int64ValueB\022\372\3071\016100-4294967295\022;\n\027sql" +
      "_require_primary_key\030X \001(\0132\032.google.prot" +
      "obuf.BoolValue\0221\n\rmdb_force_ssl\030Y \001(\0132\032." +
      "google.protobuf.BoolValue\022g\n\027innodb_chan" +
      "ge_buffering\030Z \001(\0162F.yandex.cloud.mdb.my" +
      "sql.v1.config.MysqlConfig8_0.InnodbChang" +
      "eBuffering\022B\n\024max_write_lock_count\030[ \001(\013" +
      "2\033.google.protobuf.Int64ValueB\007\372\3071\003>=1\"\210" +
      "\004\n\007SQLMode\022\027\n\023SQLMODE_UNSPECIFIED\020\000\022\027\n\023A" +
      "LLOW_INVALID_DATES\020\001\022\017\n\013ANSI_QUOTES\020\002\022\036\n" +
      "\032ERROR_FOR_DIVISION_BY_ZERO\020\003\022\027\n\023HIGH_NO" +
      "T_PRECEDENCE\020\004\022\020\n\014IGNORE_SPACE\020\005\022\031\n\025NO_A" +
      "UTO_VALUE_ON_ZERO\020\006\022\030\n\024NO_BACKSLASH_ESCA" +
      "PES\020\007\022\032\n\026NO_ENGINE_SUBSTITUTION\020\010\022\033\n\027NO_" +
      "UNSIGNED_SUBTRACTION\020\t\022\020\n\014NO_ZERO_DATE\020\n" +
      "\022\023\n\017NO_ZERO_IN_DATE\020\013\022\026\n\022ONLY_FULL_GROUP" +
      "_BY\020\017\022\033\n\027PAD_CHAR_TO_FULL_LENGTH\020\020\022\023\n\017PI" +
      "PES_AS_CONCAT\020\021\022\021\n\rREAL_AS_FLOAT\020\022\022\025\n\021ST" +
      "RICT_ALL_TABLES\020\023\022\027\n\023STRICT_TRANS_TABLES" +
      "\020\024\022\034\n\030TIME_TRUNCATE_FRACTIONAL\020\025\022\010\n\004ANSI" +
      "\020\026\022\017\n\013TRADITIONAL\020\027\022\024\n\020NO_DIR_IN_CREATE\020" +
      "\030\"\237\001\n\nAuthPlugin\022\033\n\027AUTH_PLUGIN_UNSPECIF" +
      "IED\020\000\022\031\n\025MYSQL_NATIVE_PASSWORD\020\001\022\031\n\025CACH" +
      "ING_SHA2_PASSWORD\020\002\022\023\n\017SHA256_PASSWORD\020\003" +
      "\022\022\n\016MYSQL_NO_LOGIN\020\004\022\025\n\021MDB_IAMPROXY_AUT" +
      "H\020\005\"x\n\024TransactionIsolation\022%\n!TRANSACTI" +
      "ON_ISOLATION_UNSPECIFIED\020\000\022\022\n\016READ_COMMI" +
      "TTED\020\001\022\023\n\017REPEATABLE_READ\020\002\022\020\n\014SERIALIZA" +
      "BLE\020\003\"U\n\016BinlogRowImage\022 \n\034BINLOG_ROW_IM" +
      "AGE_UNSPECIFIED\020\000\022\010\n\004FULL\020\001\022\013\n\007MINIMAL\020\002" +
      "\022\n\n\006NOBLOB\020\003\"Y\n\021SlaveParallelType\022#\n\037SLA" +
      "VE_PARALLEL_TYPE_UNSPECIFIED\020\000\022\014\n\010DATABA" +
      "SE\020\001\022\021\n\rLOGICAL_CLOCK\020\002\"M\n\017LogSlowRateTy" +
      "pe\022\"\n\036LOG_SLOW_RATE_TYPE_UNSPECIFIED\020\000\022\013" +
      "\n\007SESSION\020\001\022\t\n\005QUERY\020\002\"\241\001\n\021LogSlowFilter" +
      "Type\022$\n LOG_SLOW_FILTER_TYPE_UNSPECIFIED" +
      "\020\000\022\r\n\tFULL_SCAN\020\001\022\r\n\tFULL_JOIN\020\002\022\r\n\tTMP_" +
      "TABLE\020\003\022\025\n\021TMP_TABLE_ON_DISK\020\004\022\014\n\010FILESO" +
      "RT\020\005\022\024\n\020FILESORT_ON_DISK\020\006\"\223\001\n#BinlogTra" +
      "nsactionDependencyTracking\0226\n2BINLOG_TRA" +
      "NSACTION_DEPENDENCY_TRACKING_UNSPECIFIED" +
      "\020\000\022\020\n\014COMMIT_ORDER\020\001\022\014\n\010WRITESET\020\002\022\024\n\020WR" +
      "ITESET_SESSION\020\003\"^\n\016AuditLogPolicy\022 \n\034AU" +
      "DIT_LOG_POLICY_UNSPECIFIED\020\000\022\007\n\003ALL\020\001\022\n\n" +
      "\006LOGINS\020\002\022\013\n\007QUERIES\020\003\022\010\n\004NONE\020\004\"\226\002\n\025Inn" +
      "odbChangeBuffering\022\'\n#INNODB_CHANGE_BUFF" +
      "ERING_UNSPECIFIED\020\000\022 \n\034INNODB_CHANGE_BUF" +
      "FERING_NONE\020\001\022#\n\037INNODB_CHANGE_BUFFERING" +
      "_INSERTS\020\002\022#\n\037INNODB_CHANGE_BUFFERING_DE" +
      "LETES\020\003\022#\n\037INNODB_CHANGE_BUFFERING_CHANG" +
      "ES\020\004\022\"\n\036INNODB_CHANGE_BUFFERING_PURGES\020\005" +
      "\022\037\n\033INNODB_CHANGE_BUFFERING_ALL\020\006\"\360\001\n\021My" +
      "sqlConfigSet8_0\022J\n\020effective_config\030\001 \001(" +
      "\01320.yandex.cloud.mdb.mysql.v1.config.Mys" +
      "qlConfig8_0\022E\n\013user_config\030\002 \001(\01320.yande" +
      "x.cloud.mdb.mysql.v1.config.MysqlConfig8" +
      "_0\022H\n\016default_config\030\003 \001(\01320.yandex.clou" +
      "d.mdb.mysql.v1.config.MysqlConfig8_0Br\n$" +
      "yandex.cloud.api.mdb.mysql.v1.configZJgi" +
      "thub.com/yandex-cloud/go-genproto/yandex" +
      "/cloud/mdb/mysql/v1/config;mysqlb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.WrappersProto.getDescriptor(),
          yandex.cloud.api.Validation.getDescriptor(),
        });
    internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig8_0_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig8_0_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfig8_0_descriptor,
        new java.lang.String[] { "InnodbBufferPoolSize", "MaxConnections", "LongQueryTime", "GeneralLog", "AuditLog", "SqlMode", "MaxAllowedPacket", "DefaultAuthenticationPlugin", "InnodbFlushLogAtTrxCommit", "InnodbLockWaitTimeout", "TransactionIsolation", "InnodbPrintAllDeadlocks", "NetReadTimeout", "NetWriteTimeout", "GroupConcatMaxLen", "TmpTableSize", "MaxHeapTableSize", "DefaultTimeZone", "CharacterSetServer", "CollationServer", "InnodbAdaptiveHashIndex", "InnodbNumaInterleave", "InnodbLogBufferSize", "InnodbLogFileSize", "InnodbIoCapacity", "InnodbIoCapacityMax", "InnodbReadIoThreads", "InnodbWriteIoThreads", "InnodbPurgeThreads", "InnodbThreadConcurrency", "InnodbTempDataFileMaxSize", "ThreadCacheSize", "ThreadStack", "JoinBufferSize", "SortBufferSize", "TableDefinitionCache", "TableOpenCache", "TableOpenCacheInstances", "ExplicitDefaultsForTimestamp", "AutoIncrementIncrement", "AutoIncrementOffset", "SyncBinlog", "BinlogCacheSize", "BinlogGroupCommitSyncDelay", "BinlogRowImage", "BinlogRowsQueryLogEvents", "RplSemiSyncMasterWaitForSlaveCount", "SlaveParallelType", "SlaveParallelWorkers", "RegexpTimeLimit", "MdbPreserveBinlogBytes", "InteractiveTimeout", "WaitTimeout", "MdbOfflineModeEnableLag", "MdbOfflineModeDisableLag", "RangeOptimizerMaxMemSize", "SlowQueryLog", "SlowQueryLogAlwaysWriteTime", "LogSlowRateType", "LogSlowRateLimit", "LogSlowSpStatements", "LogSlowFilter", "MdbPriorityChoiceMaxLag", "InnodbPageSize", "InnodbOnlineAlterLogMaxSize", "InnodbFtMinTokenSize", "InnodbFtMaxTokenSize", "LowerCaseTableNames", "MaxSpRecursionDepth", "InnodbCompressionLevel", "BinlogTransactionDependencyTracking", "Autocommit", "InnodbStatusOutput", "InnodbStrictMode", "InnodbPrintLockWaitTimeoutInfo", "LogErrorVerbosity", "MaxDigestLength", "LockWaitTimeout", "MaxPreparedStmtCount", "OptimizerSwitch", "OptimizerSearchDepth", "Userstat", "MaxExecutionTime", "AuditLogPolicy", "ReplicationSenderObserveCommitOnly", "ReplicationOptimizeForStaticPluginConfig", "InnodbLruScanDepth", "SqlRequirePrimaryKey", "MdbForceSsl", "InnodbChangeBuffering", "MaxWriteLockCount", });
    internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet8_0_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet8_0_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_mysql_v1_config_MysqlConfigSet8_0_descriptor,
        new java.lang.String[] { "EffectiveConfig", "UserConfig", "DefaultConfig", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(yandex.cloud.api.Validation.value);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.google.protobuf.WrappersProto.getDescriptor();
    yandex.cloud.api.Validation.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
