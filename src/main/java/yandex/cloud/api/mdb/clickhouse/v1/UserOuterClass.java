// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yandex/cloud/mdb/clickhouse/v1/user.proto

package yandex.cloud.api.mdb.clickhouse.v1;

public final class UserOuterClass {
  private UserOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface UserOrBuilder extends
      // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.clickhouse.v1.User)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Name of the ClickHouse user.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * Name of the ClickHouse user.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * ID of the ClickHouse cluster the user belongs to.
     * </pre>
     *
     * <code>string cluster_id = 2;</code>
     * @return The clusterId.
     */
    java.lang.String getClusterId();
    /**
     * <pre>
     * ID of the ClickHouse cluster the user belongs to.
     * </pre>
     *
     * <code>string cluster_id = 2;</code>
     * @return The bytes for clusterId.
     */
    com.google.protobuf.ByteString
        getClusterIdBytes();

    /**
     * <pre>
     * Set of permissions granted to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
     */
    java.util.List<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission> 
        getPermissionsList();
    /**
     * <pre>
     * Set of permissions granted to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission getPermissions(int index);
    /**
     * <pre>
     * Set of permissions granted to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
     */
    int getPermissionsCount();
    /**
     * <pre>
     * Set of permissions granted to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
     */
    java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.PermissionOrBuilder> 
        getPermissionsOrBuilderList();
    /**
     * <pre>
     * Set of permissions granted to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.PermissionOrBuilder getPermissionsOrBuilder(
        int index);

    /**
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
     * @return Whether the settings field is set.
     */
    boolean hasSettings();
    /**
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
     * @return The settings.
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings getSettings();
    /**
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettingsOrBuilder getSettingsOrBuilder();

    /**
     * <pre>
     * Set of quotas assigned to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
     */
    java.util.List<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota> 
        getQuotasList();
    /**
     * <pre>
     * Set of quotas assigned to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota getQuotas(int index);
    /**
     * <pre>
     * Set of quotas assigned to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
     */
    int getQuotasCount();
    /**
     * <pre>
     * Set of quotas assigned to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
     */
    java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuotaOrBuilder> 
        getQuotasOrBuilderList();
    /**
     * <pre>
     * Set of quotas assigned to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuotaOrBuilder getQuotasOrBuilder(
        int index);
  }
  /**
   * <pre>
   * A ClickHouse User resource. For more information, see
   * the [Developer's guide](/docs/managed-clickhouse/concepts).
   * </pre>
   *
   * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.User}
   */
  public static final class User extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.clickhouse.v1.User)
      UserOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use User.newBuilder() to construct.
    private User(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private User() {
      name_ = "";
      clusterId_ = "";
      permissions_ = java.util.Collections.emptyList();
      quotas_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new User();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private User(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              clusterId_ = s;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                permissions_ = new java.util.ArrayList<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission>();
                mutable_bitField0_ |= 0x00000001;
              }
              permissions_.add(
                  input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.parser(), extensionRegistry));
              break;
            }
            case 34: {
              yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.Builder subBuilder = null;
              if (settings_ != null) {
                subBuilder = settings_.toBuilder();
              }
              settings_ = input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(settings_);
                settings_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                quotas_ = new java.util.ArrayList<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota>();
                mutable_bitField0_ |= 0x00000002;
              }
              quotas_.add(
                  input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          permissions_ = java.util.Collections.unmodifiableList(permissions_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          quotas_ = java.util.Collections.unmodifiableList(quotas_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.internal_static_yandex_cloud_mdb_clickhouse_v1_User_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.internal_static_yandex_cloud_mdb_clickhouse_v1_User_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User.class, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User.Builder.class);
    }

    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * Name of the ClickHouse user.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Name of the ClickHouse user.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CLUSTER_ID_FIELD_NUMBER = 2;
    private volatile java.lang.Object clusterId_;
    /**
     * <pre>
     * ID of the ClickHouse cluster the user belongs to.
     * </pre>
     *
     * <code>string cluster_id = 2;</code>
     * @return The clusterId.
     */
    @java.lang.Override
    public java.lang.String getClusterId() {
      java.lang.Object ref = clusterId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        clusterId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * ID of the ClickHouse cluster the user belongs to.
     * </pre>
     *
     * <code>string cluster_id = 2;</code>
     * @return The bytes for clusterId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getClusterIdBytes() {
      java.lang.Object ref = clusterId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        clusterId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PERMISSIONS_FIELD_NUMBER = 3;
    private java.util.List<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission> permissions_;
    /**
     * <pre>
     * Set of permissions granted to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
     */
    @java.lang.Override
    public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission> getPermissionsList() {
      return permissions_;
    }
    /**
     * <pre>
     * Set of permissions granted to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.PermissionOrBuilder> 
        getPermissionsOrBuilderList() {
      return permissions_;
    }
    /**
     * <pre>
     * Set of permissions granted to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
     */
    @java.lang.Override
    public int getPermissionsCount() {
      return permissions_.size();
    }
    /**
     * <pre>
     * Set of permissions granted to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission getPermissions(int index) {
      return permissions_.get(index);
    }
    /**
     * <pre>
     * Set of permissions granted to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.PermissionOrBuilder getPermissionsOrBuilder(
        int index) {
      return permissions_.get(index);
    }

    public static final int SETTINGS_FIELD_NUMBER = 4;
    private yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings settings_;
    /**
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
     * @return Whether the settings field is set.
     */
    @java.lang.Override
    public boolean hasSettings() {
      return settings_ != null;
    }
    /**
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
     * @return The settings.
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings getSettings() {
      return settings_ == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.getDefaultInstance() : settings_;
    }
    /**
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettingsOrBuilder getSettingsOrBuilder() {
      return getSettings();
    }

    public static final int QUOTAS_FIELD_NUMBER = 5;
    private java.util.List<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota> quotas_;
    /**
     * <pre>
     * Set of quotas assigned to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
     */
    @java.lang.Override
    public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota> getQuotasList() {
      return quotas_;
    }
    /**
     * <pre>
     * Set of quotas assigned to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
     */
    @java.lang.Override
    public java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuotaOrBuilder> 
        getQuotasOrBuilderList() {
      return quotas_;
    }
    /**
     * <pre>
     * Set of quotas assigned to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
     */
    @java.lang.Override
    public int getQuotasCount() {
      return quotas_.size();
    }
    /**
     * <pre>
     * Set of quotas assigned to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota getQuotas(int index) {
      return quotas_.get(index);
    }
    /**
     * <pre>
     * Set of quotas assigned to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuotaOrBuilder getQuotasOrBuilder(
        int index) {
      return quotas_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(clusterId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, clusterId_);
      }
      for (int i = 0; i < permissions_.size(); i++) {
        output.writeMessage(3, permissions_.get(i));
      }
      if (settings_ != null) {
        output.writeMessage(4, getSettings());
      }
      for (int i = 0; i < quotas_.size(); i++) {
        output.writeMessage(5, quotas_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(clusterId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, clusterId_);
      }
      for (int i = 0; i < permissions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, permissions_.get(i));
      }
      if (settings_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getSettings());
      }
      for (int i = 0; i < quotas_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, quotas_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User)) {
        return super.equals(obj);
      }
      yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User other = (yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User) obj;

      if (!getName()
          .equals(other.getName())) return false;
      if (!getClusterId()
          .equals(other.getClusterId())) return false;
      if (!getPermissionsList()
          .equals(other.getPermissionsList())) return false;
      if (hasSettings() != other.hasSettings()) return false;
      if (hasSettings()) {
        if (!getSettings()
            .equals(other.getSettings())) return false;
      }
      if (!getQuotasList()
          .equals(other.getQuotasList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + CLUSTER_ID_FIELD_NUMBER;
      hash = (53 * hash) + getClusterId().hashCode();
      if (getPermissionsCount() > 0) {
        hash = (37 * hash) + PERMISSIONS_FIELD_NUMBER;
        hash = (53 * hash) + getPermissionsList().hashCode();
      }
      if (hasSettings()) {
        hash = (37 * hash) + SETTINGS_FIELD_NUMBER;
        hash = (53 * hash) + getSettings().hashCode();
      }
      if (getQuotasCount() > 0) {
        hash = (37 * hash) + QUOTAS_FIELD_NUMBER;
        hash = (53 * hash) + getQuotasList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A ClickHouse User resource. For more information, see
     * the [Developer's guide](/docs/managed-clickhouse/concepts).
     * </pre>
     *
     * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.User}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.clickhouse.v1.User)
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.internal_static_yandex_cloud_mdb_clickhouse_v1_User_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.internal_static_yandex_cloud_mdb_clickhouse_v1_User_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User.class, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User.Builder.class);
      }

      // Construct using yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getPermissionsFieldBuilder();
          getQuotasFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        name_ = "";

        clusterId_ = "";

        if (permissionsBuilder_ == null) {
          permissions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          permissionsBuilder_.clear();
        }
        if (settingsBuilder_ == null) {
          settings_ = null;
        } else {
          settings_ = null;
          settingsBuilder_ = null;
        }
        if (quotasBuilder_ == null) {
          quotas_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          quotasBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.internal_static_yandex_cloud_mdb_clickhouse_v1_User_descriptor;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User getDefaultInstanceForType() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User.getDefaultInstance();
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User build() {
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User buildPartial() {
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User result = new yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User(this);
        int from_bitField0_ = bitField0_;
        result.name_ = name_;
        result.clusterId_ = clusterId_;
        if (permissionsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            permissions_ = java.util.Collections.unmodifiableList(permissions_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.permissions_ = permissions_;
        } else {
          result.permissions_ = permissionsBuilder_.build();
        }
        if (settingsBuilder_ == null) {
          result.settings_ = settings_;
        } else {
          result.settings_ = settingsBuilder_.build();
        }
        if (quotasBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            quotas_ = java.util.Collections.unmodifiableList(quotas_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.quotas_ = quotas_;
        } else {
          result.quotas_ = quotasBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User) {
          return mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User other) {
        if (other == yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (!other.getClusterId().isEmpty()) {
          clusterId_ = other.clusterId_;
          onChanged();
        }
        if (permissionsBuilder_ == null) {
          if (!other.permissions_.isEmpty()) {
            if (permissions_.isEmpty()) {
              permissions_ = other.permissions_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensurePermissionsIsMutable();
              permissions_.addAll(other.permissions_);
            }
            onChanged();
          }
        } else {
          if (!other.permissions_.isEmpty()) {
            if (permissionsBuilder_.isEmpty()) {
              permissionsBuilder_.dispose();
              permissionsBuilder_ = null;
              permissions_ = other.permissions_;
              bitField0_ = (bitField0_ & ~0x00000001);
              permissionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getPermissionsFieldBuilder() : null;
            } else {
              permissionsBuilder_.addAllMessages(other.permissions_);
            }
          }
        }
        if (other.hasSettings()) {
          mergeSettings(other.getSettings());
        }
        if (quotasBuilder_ == null) {
          if (!other.quotas_.isEmpty()) {
            if (quotas_.isEmpty()) {
              quotas_ = other.quotas_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureQuotasIsMutable();
              quotas_.addAll(other.quotas_);
            }
            onChanged();
          }
        } else {
          if (!other.quotas_.isEmpty()) {
            if (quotasBuilder_.isEmpty()) {
              quotasBuilder_.dispose();
              quotasBuilder_ = null;
              quotas_ = other.quotas_;
              bitField0_ = (bitField0_ & ~0x00000002);
              quotasBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getQuotasFieldBuilder() : null;
            } else {
              quotasBuilder_.addAllMessages(other.quotas_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * Name of the ClickHouse user.
       * </pre>
       *
       * <code>string name = 1;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Name of the ClickHouse user.
       * </pre>
       *
       * <code>string name = 1;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Name of the ClickHouse user.
       * </pre>
       *
       * <code>string name = 1;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the ClickHouse user.
       * </pre>
       *
       * <code>string name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the ClickHouse user.
       * </pre>
       *
       * <code>string name = 1;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object clusterId_ = "";
      /**
       * <pre>
       * ID of the ClickHouse cluster the user belongs to.
       * </pre>
       *
       * <code>string cluster_id = 2;</code>
       * @return The clusterId.
       */
      public java.lang.String getClusterId() {
        java.lang.Object ref = clusterId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          clusterId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * ID of the ClickHouse cluster the user belongs to.
       * </pre>
       *
       * <code>string cluster_id = 2;</code>
       * @return The bytes for clusterId.
       */
      public com.google.protobuf.ByteString
          getClusterIdBytes() {
        java.lang.Object ref = clusterId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clusterId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * ID of the ClickHouse cluster the user belongs to.
       * </pre>
       *
       * <code>string cluster_id = 2;</code>
       * @param value The clusterId to set.
       * @return This builder for chaining.
       */
      public Builder setClusterId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        clusterId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ID of the ClickHouse cluster the user belongs to.
       * </pre>
       *
       * <code>string cluster_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearClusterId() {
        
        clusterId_ = getDefaultInstance().getClusterId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ID of the ClickHouse cluster the user belongs to.
       * </pre>
       *
       * <code>string cluster_id = 2;</code>
       * @param value The bytes for clusterId to set.
       * @return This builder for chaining.
       */
      public Builder setClusterIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        clusterId_ = value;
        onChanged();
        return this;
      }

      private java.util.List<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission> permissions_ =
        java.util.Collections.emptyList();
      private void ensurePermissionsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          permissions_ = new java.util.ArrayList<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission>(permissions_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.Builder, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.PermissionOrBuilder> permissionsBuilder_;

      /**
       * <pre>
       * Set of permissions granted to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission> getPermissionsList() {
        if (permissionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(permissions_);
        } else {
          return permissionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Set of permissions granted to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public int getPermissionsCount() {
        if (permissionsBuilder_ == null) {
          return permissions_.size();
        } else {
          return permissionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Set of permissions granted to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission getPermissions(int index) {
        if (permissionsBuilder_ == null) {
          return permissions_.get(index);
        } else {
          return permissionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Set of permissions granted to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public Builder setPermissions(
          int index, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission value) {
        if (permissionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePermissionsIsMutable();
          permissions_.set(index, value);
          onChanged();
        } else {
          permissionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Set of permissions granted to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public Builder setPermissions(
          int index, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.Builder builderForValue) {
        if (permissionsBuilder_ == null) {
          ensurePermissionsIsMutable();
          permissions_.set(index, builderForValue.build());
          onChanged();
        } else {
          permissionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Set of permissions granted to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public Builder addPermissions(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission value) {
        if (permissionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePermissionsIsMutable();
          permissions_.add(value);
          onChanged();
        } else {
          permissionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Set of permissions granted to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public Builder addPermissions(
          int index, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission value) {
        if (permissionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePermissionsIsMutable();
          permissions_.add(index, value);
          onChanged();
        } else {
          permissionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Set of permissions granted to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public Builder addPermissions(
          yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.Builder builderForValue) {
        if (permissionsBuilder_ == null) {
          ensurePermissionsIsMutable();
          permissions_.add(builderForValue.build());
          onChanged();
        } else {
          permissionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Set of permissions granted to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public Builder addPermissions(
          int index, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.Builder builderForValue) {
        if (permissionsBuilder_ == null) {
          ensurePermissionsIsMutable();
          permissions_.add(index, builderForValue.build());
          onChanged();
        } else {
          permissionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Set of permissions granted to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public Builder addAllPermissions(
          java.lang.Iterable<? extends yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission> values) {
        if (permissionsBuilder_ == null) {
          ensurePermissionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, permissions_);
          onChanged();
        } else {
          permissionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Set of permissions granted to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public Builder clearPermissions() {
        if (permissionsBuilder_ == null) {
          permissions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          permissionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Set of permissions granted to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public Builder removePermissions(int index) {
        if (permissionsBuilder_ == null) {
          ensurePermissionsIsMutable();
          permissions_.remove(index);
          onChanged();
        } else {
          permissionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Set of permissions granted to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.Builder getPermissionsBuilder(
          int index) {
        return getPermissionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Set of permissions granted to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.PermissionOrBuilder getPermissionsOrBuilder(
          int index) {
        if (permissionsBuilder_ == null) {
          return permissions_.get(index);  } else {
          return permissionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Set of permissions granted to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.PermissionOrBuilder> 
           getPermissionsOrBuilderList() {
        if (permissionsBuilder_ != null) {
          return permissionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(permissions_);
        }
      }
      /**
       * <pre>
       * Set of permissions granted to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.Builder addPermissionsBuilder() {
        return getPermissionsFieldBuilder().addBuilder(
            yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.getDefaultInstance());
      }
      /**
       * <pre>
       * Set of permissions granted to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.Builder addPermissionsBuilder(
          int index) {
        return getPermissionsFieldBuilder().addBuilder(
            index, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.getDefaultInstance());
      }
      /**
       * <pre>
       * Set of permissions granted to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.Builder> 
           getPermissionsBuilderList() {
        return getPermissionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.Builder, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.PermissionOrBuilder> 
          getPermissionsFieldBuilder() {
        if (permissionsBuilder_ == null) {
          permissionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.Builder, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.PermissionOrBuilder>(
                  permissions_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          permissions_ = null;
        }
        return permissionsBuilder_;
      }

      private yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings settings_;
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.Builder, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettingsOrBuilder> settingsBuilder_;
      /**
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
       * @return Whether the settings field is set.
       */
      public boolean hasSettings() {
        return settingsBuilder_ != null || settings_ != null;
      }
      /**
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
       * @return The settings.
       */
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings getSettings() {
        if (settingsBuilder_ == null) {
          return settings_ == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.getDefaultInstance() : settings_;
        } else {
          return settingsBuilder_.getMessage();
        }
      }
      /**
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
       */
      public Builder setSettings(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings value) {
        if (settingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          settings_ = value;
          onChanged();
        } else {
          settingsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
       */
      public Builder setSettings(
          yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.Builder builderForValue) {
        if (settingsBuilder_ == null) {
          settings_ = builderForValue.build();
          onChanged();
        } else {
          settingsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
       */
      public Builder mergeSettings(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings value) {
        if (settingsBuilder_ == null) {
          if (settings_ != null) {
            settings_ =
              yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.newBuilder(settings_).mergeFrom(value).buildPartial();
          } else {
            settings_ = value;
          }
          onChanged();
        } else {
          settingsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
       */
      public Builder clearSettings() {
        if (settingsBuilder_ == null) {
          settings_ = null;
          onChanged();
        } else {
          settings_ = null;
          settingsBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.Builder getSettingsBuilder() {
        
        onChanged();
        return getSettingsFieldBuilder().getBuilder();
      }
      /**
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettingsOrBuilder getSettingsOrBuilder() {
        if (settingsBuilder_ != null) {
          return settingsBuilder_.getMessageOrBuilder();
        } else {
          return settings_ == null ?
              yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.getDefaultInstance() : settings_;
        }
      }
      /**
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.Builder, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettingsOrBuilder> 
          getSettingsFieldBuilder() {
        if (settingsBuilder_ == null) {
          settingsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.Builder, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettingsOrBuilder>(
                  getSettings(),
                  getParentForChildren(),
                  isClean());
          settings_ = null;
        }
        return settingsBuilder_;
      }

      private java.util.List<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota> quotas_ =
        java.util.Collections.emptyList();
      private void ensureQuotasIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          quotas_ = new java.util.ArrayList<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota>(quotas_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.Builder, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuotaOrBuilder> quotasBuilder_;

      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota> getQuotasList() {
        if (quotasBuilder_ == null) {
          return java.util.Collections.unmodifiableList(quotas_);
        } else {
          return quotasBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public int getQuotasCount() {
        if (quotasBuilder_ == null) {
          return quotas_.size();
        } else {
          return quotasBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota getQuotas(int index) {
        if (quotasBuilder_ == null) {
          return quotas_.get(index);
        } else {
          return quotasBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public Builder setQuotas(
          int index, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota value) {
        if (quotasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureQuotasIsMutable();
          quotas_.set(index, value);
          onChanged();
        } else {
          quotasBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public Builder setQuotas(
          int index, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.Builder builderForValue) {
        if (quotasBuilder_ == null) {
          ensureQuotasIsMutable();
          quotas_.set(index, builderForValue.build());
          onChanged();
        } else {
          quotasBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public Builder addQuotas(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota value) {
        if (quotasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureQuotasIsMutable();
          quotas_.add(value);
          onChanged();
        } else {
          quotasBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public Builder addQuotas(
          int index, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota value) {
        if (quotasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureQuotasIsMutable();
          quotas_.add(index, value);
          onChanged();
        } else {
          quotasBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public Builder addQuotas(
          yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.Builder builderForValue) {
        if (quotasBuilder_ == null) {
          ensureQuotasIsMutable();
          quotas_.add(builderForValue.build());
          onChanged();
        } else {
          quotasBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public Builder addQuotas(
          int index, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.Builder builderForValue) {
        if (quotasBuilder_ == null) {
          ensureQuotasIsMutable();
          quotas_.add(index, builderForValue.build());
          onChanged();
        } else {
          quotasBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public Builder addAllQuotas(
          java.lang.Iterable<? extends yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota> values) {
        if (quotasBuilder_ == null) {
          ensureQuotasIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, quotas_);
          onChanged();
        } else {
          quotasBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public Builder clearQuotas() {
        if (quotasBuilder_ == null) {
          quotas_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          quotasBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public Builder removeQuotas(int index) {
        if (quotasBuilder_ == null) {
          ensureQuotasIsMutable();
          quotas_.remove(index);
          onChanged();
        } else {
          quotasBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.Builder getQuotasBuilder(
          int index) {
        return getQuotasFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuotaOrBuilder getQuotasOrBuilder(
          int index) {
        if (quotasBuilder_ == null) {
          return quotas_.get(index);  } else {
          return quotasBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuotaOrBuilder> 
           getQuotasOrBuilderList() {
        if (quotasBuilder_ != null) {
          return quotasBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(quotas_);
        }
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.Builder addQuotasBuilder() {
        return getQuotasFieldBuilder().addBuilder(
            yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.getDefaultInstance());
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.Builder addQuotasBuilder(
          int index) {
        return getQuotasFieldBuilder().addBuilder(
            index, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.getDefaultInstance());
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.Builder> 
           getQuotasBuilderList() {
        return getQuotasFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.Builder, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuotaOrBuilder> 
          getQuotasFieldBuilder() {
        if (quotasBuilder_ == null) {
          quotasBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.Builder, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuotaOrBuilder>(
                  quotas_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          quotas_ = null;
        }
        return quotasBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.clickhouse.v1.User)
    }

    // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.clickhouse.v1.User)
    private static final yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User();
    }

    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<User>
        PARSER = new com.google.protobuf.AbstractParser<User>() {
      @java.lang.Override
      public User parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new User(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<User> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<User> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.User getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PermissionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.clickhouse.v1.Permission)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Name of the database that the permission grants access to.
     * </pre>
     *
     * <code>string database_name = 1;</code>
     * @return The databaseName.
     */
    java.lang.String getDatabaseName();
    /**
     * <pre>
     * Name of the database that the permission grants access to.
     * </pre>
     *
     * <code>string database_name = 1;</code>
     * @return The bytes for databaseName.
     */
    com.google.protobuf.ByteString
        getDatabaseNameBytes();
  }
  /**
   * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.Permission}
   */
  public static final class Permission extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.clickhouse.v1.Permission)
      PermissionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Permission.newBuilder() to construct.
    private Permission(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Permission() {
      databaseName_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Permission();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Permission(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              databaseName_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.internal_static_yandex_cloud_mdb_clickhouse_v1_Permission_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.internal_static_yandex_cloud_mdb_clickhouse_v1_Permission_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.class, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.Builder.class);
    }

    public static final int DATABASE_NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object databaseName_;
    /**
     * <pre>
     * Name of the database that the permission grants access to.
     * </pre>
     *
     * <code>string database_name = 1;</code>
     * @return The databaseName.
     */
    @java.lang.Override
    public java.lang.String getDatabaseName() {
      java.lang.Object ref = databaseName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        databaseName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Name of the database that the permission grants access to.
     * </pre>
     *
     * <code>string database_name = 1;</code>
     * @return The bytes for databaseName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDatabaseNameBytes() {
      java.lang.Object ref = databaseName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        databaseName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(databaseName_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, databaseName_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(databaseName_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, databaseName_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission)) {
        return super.equals(obj);
      }
      yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission other = (yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission) obj;

      if (!getDatabaseName()
          .equals(other.getDatabaseName())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + DATABASE_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getDatabaseName().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.Permission}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.clickhouse.v1.Permission)
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.PermissionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.internal_static_yandex_cloud_mdb_clickhouse_v1_Permission_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.internal_static_yandex_cloud_mdb_clickhouse_v1_Permission_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.class, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.Builder.class);
      }

      // Construct using yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        databaseName_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.internal_static_yandex_cloud_mdb_clickhouse_v1_Permission_descriptor;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission getDefaultInstanceForType() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.getDefaultInstance();
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission build() {
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission buildPartial() {
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission result = new yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission(this);
        result.databaseName_ = databaseName_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission) {
          return mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission other) {
        if (other == yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.getDefaultInstance()) return this;
        if (!other.getDatabaseName().isEmpty()) {
          databaseName_ = other.databaseName_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object databaseName_ = "";
      /**
       * <pre>
       * Name of the database that the permission grants access to.
       * </pre>
       *
       * <code>string database_name = 1;</code>
       * @return The databaseName.
       */
      public java.lang.String getDatabaseName() {
        java.lang.Object ref = databaseName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          databaseName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Name of the database that the permission grants access to.
       * </pre>
       *
       * <code>string database_name = 1;</code>
       * @return The bytes for databaseName.
       */
      public com.google.protobuf.ByteString
          getDatabaseNameBytes() {
        java.lang.Object ref = databaseName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          databaseName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Name of the database that the permission grants access to.
       * </pre>
       *
       * <code>string database_name = 1;</code>
       * @param value The databaseName to set.
       * @return This builder for chaining.
       */
      public Builder setDatabaseName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        databaseName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the database that the permission grants access to.
       * </pre>
       *
       * <code>string database_name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDatabaseName() {
        
        databaseName_ = getDefaultInstance().getDatabaseName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the database that the permission grants access to.
       * </pre>
       *
       * <code>string database_name = 1;</code>
       * @param value The bytes for databaseName to set.
       * @return This builder for chaining.
       */
      public Builder setDatabaseNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        databaseName_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.clickhouse.v1.Permission)
    }

    // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.clickhouse.v1.Permission)
    private static final yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission();
    }

    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Permission>
        PARSER = new com.google.protobuf.AbstractParser<Permission>() {
      @java.lang.Override
      public Permission parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Permission(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Permission> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Permission> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UserSpecOrBuilder extends
      // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.clickhouse.v1.UserSpec)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Name of the ClickHouse user.
     * </pre>
     *
     * <code>string name = 1 [(.yandex.cloud.required) = true, (.yandex.cloud.pattern) = "[a-zA-Z0-9_][a-zA-Z0-9_-]*", (.yandex.cloud.length) = "&lt;=63"];</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * Name of the ClickHouse user.
     * </pre>
     *
     * <code>string name = 1 [(.yandex.cloud.required) = true, (.yandex.cloud.pattern) = "[a-zA-Z0-9_][a-zA-Z0-9_-]*", (.yandex.cloud.length) = "&lt;=63"];</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Password of the ClickHouse user.
     * </pre>
     *
     * <code>string password = 2 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "8-128"];</code>
     * @return The password.
     */
    java.lang.String getPassword();
    /**
     * <pre>
     * Password of the ClickHouse user.
     * </pre>
     *
     * <code>string password = 2 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "8-128"];</code>
     * @return The bytes for password.
     */
    com.google.protobuf.ByteString
        getPasswordBytes();

    /**
     * <pre>
     * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
     */
    java.util.List<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission> 
        getPermissionsList();
    /**
     * <pre>
     * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission getPermissions(int index);
    /**
     * <pre>
     * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
     */
    int getPermissionsCount();
    /**
     * <pre>
     * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
     */
    java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.PermissionOrBuilder> 
        getPermissionsOrBuilderList();
    /**
     * <pre>
     * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.PermissionOrBuilder getPermissionsOrBuilder(
        int index);

    /**
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
     * @return Whether the settings field is set.
     */
    boolean hasSettings();
    /**
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
     * @return The settings.
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings getSettings();
    /**
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettingsOrBuilder getSettingsOrBuilder();

    /**
     * <pre>
     * Set of quotas assigned to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
     */
    java.util.List<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota> 
        getQuotasList();
    /**
     * <pre>
     * Set of quotas assigned to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota getQuotas(int index);
    /**
     * <pre>
     * Set of quotas assigned to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
     */
    int getQuotasCount();
    /**
     * <pre>
     * Set of quotas assigned to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
     */
    java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuotaOrBuilder> 
        getQuotasOrBuilderList();
    /**
     * <pre>
     * Set of quotas assigned to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuotaOrBuilder getQuotasOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.UserSpec}
   */
  public static final class UserSpec extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.clickhouse.v1.UserSpec)
      UserSpecOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UserSpec.newBuilder() to construct.
    private UserSpec(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UserSpec() {
      name_ = "";
      password_ = "";
      permissions_ = java.util.Collections.emptyList();
      quotas_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new UserSpec();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private UserSpec(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              password_ = s;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                permissions_ = new java.util.ArrayList<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission>();
                mutable_bitField0_ |= 0x00000001;
              }
              permissions_.add(
                  input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.parser(), extensionRegistry));
              break;
            }
            case 34: {
              yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.Builder subBuilder = null;
              if (settings_ != null) {
                subBuilder = settings_.toBuilder();
              }
              settings_ = input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(settings_);
                settings_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                quotas_ = new java.util.ArrayList<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota>();
                mutable_bitField0_ |= 0x00000002;
              }
              quotas_.add(
                  input.readMessage(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          permissions_ = java.util.Collections.unmodifiableList(permissions_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          quotas_ = java.util.Collections.unmodifiableList(quotas_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.internal_static_yandex_cloud_mdb_clickhouse_v1_UserSpec_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.internal_static_yandex_cloud_mdb_clickhouse_v1_UserSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec.class, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec.Builder.class);
    }

    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * Name of the ClickHouse user.
     * </pre>
     *
     * <code>string name = 1 [(.yandex.cloud.required) = true, (.yandex.cloud.pattern) = "[a-zA-Z0-9_][a-zA-Z0-9_-]*", (.yandex.cloud.length) = "&lt;=63"];</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Name of the ClickHouse user.
     * </pre>
     *
     * <code>string name = 1 [(.yandex.cloud.required) = true, (.yandex.cloud.pattern) = "[a-zA-Z0-9_][a-zA-Z0-9_-]*", (.yandex.cloud.length) = "&lt;=63"];</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PASSWORD_FIELD_NUMBER = 2;
    private volatile java.lang.Object password_;
    /**
     * <pre>
     * Password of the ClickHouse user.
     * </pre>
     *
     * <code>string password = 2 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "8-128"];</code>
     * @return The password.
     */
    @java.lang.Override
    public java.lang.String getPassword() {
      java.lang.Object ref = password_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        password_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Password of the ClickHouse user.
     * </pre>
     *
     * <code>string password = 2 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "8-128"];</code>
     * @return The bytes for password.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPasswordBytes() {
      java.lang.Object ref = password_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        password_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PERMISSIONS_FIELD_NUMBER = 3;
    private java.util.List<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission> permissions_;
    /**
     * <pre>
     * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
     */
    @java.lang.Override
    public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission> getPermissionsList() {
      return permissions_;
    }
    /**
     * <pre>
     * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.PermissionOrBuilder> 
        getPermissionsOrBuilderList() {
      return permissions_;
    }
    /**
     * <pre>
     * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
     */
    @java.lang.Override
    public int getPermissionsCount() {
      return permissions_.size();
    }
    /**
     * <pre>
     * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission getPermissions(int index) {
      return permissions_.get(index);
    }
    /**
     * <pre>
     * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.PermissionOrBuilder getPermissionsOrBuilder(
        int index) {
      return permissions_.get(index);
    }

    public static final int SETTINGS_FIELD_NUMBER = 4;
    private yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings settings_;
    /**
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
     * @return Whether the settings field is set.
     */
    @java.lang.Override
    public boolean hasSettings() {
      return settings_ != null;
    }
    /**
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
     * @return The settings.
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings getSettings() {
      return settings_ == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.getDefaultInstance() : settings_;
    }
    /**
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettingsOrBuilder getSettingsOrBuilder() {
      return getSettings();
    }

    public static final int QUOTAS_FIELD_NUMBER = 5;
    private java.util.List<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota> quotas_;
    /**
     * <pre>
     * Set of quotas assigned to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
     */
    @java.lang.Override
    public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota> getQuotasList() {
      return quotas_;
    }
    /**
     * <pre>
     * Set of quotas assigned to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
     */
    @java.lang.Override
    public java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuotaOrBuilder> 
        getQuotasOrBuilderList() {
      return quotas_;
    }
    /**
     * <pre>
     * Set of quotas assigned to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
     */
    @java.lang.Override
    public int getQuotasCount() {
      return quotas_.size();
    }
    /**
     * <pre>
     * Set of quotas assigned to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota getQuotas(int index) {
      return quotas_.get(index);
    }
    /**
     * <pre>
     * Set of quotas assigned to the user.
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuotaOrBuilder getQuotasOrBuilder(
        int index) {
      return quotas_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(password_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, password_);
      }
      for (int i = 0; i < permissions_.size(); i++) {
        output.writeMessage(3, permissions_.get(i));
      }
      if (settings_ != null) {
        output.writeMessage(4, getSettings());
      }
      for (int i = 0; i < quotas_.size(); i++) {
        output.writeMessage(5, quotas_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(password_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, password_);
      }
      for (int i = 0; i < permissions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, permissions_.get(i));
      }
      if (settings_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getSettings());
      }
      for (int i = 0; i < quotas_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, quotas_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec)) {
        return super.equals(obj);
      }
      yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec other = (yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec) obj;

      if (!getName()
          .equals(other.getName())) return false;
      if (!getPassword()
          .equals(other.getPassword())) return false;
      if (!getPermissionsList()
          .equals(other.getPermissionsList())) return false;
      if (hasSettings() != other.hasSettings()) return false;
      if (hasSettings()) {
        if (!getSettings()
            .equals(other.getSettings())) return false;
      }
      if (!getQuotasList()
          .equals(other.getQuotasList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + PASSWORD_FIELD_NUMBER;
      hash = (53 * hash) + getPassword().hashCode();
      if (getPermissionsCount() > 0) {
        hash = (37 * hash) + PERMISSIONS_FIELD_NUMBER;
        hash = (53 * hash) + getPermissionsList().hashCode();
      }
      if (hasSettings()) {
        hash = (37 * hash) + SETTINGS_FIELD_NUMBER;
        hash = (53 * hash) + getSettings().hashCode();
      }
      if (getQuotasCount() > 0) {
        hash = (37 * hash) + QUOTAS_FIELD_NUMBER;
        hash = (53 * hash) + getQuotasList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.UserSpec}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.clickhouse.v1.UserSpec)
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpecOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.internal_static_yandex_cloud_mdb_clickhouse_v1_UserSpec_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.internal_static_yandex_cloud_mdb_clickhouse_v1_UserSpec_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec.class, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec.Builder.class);
      }

      // Construct using yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getPermissionsFieldBuilder();
          getQuotasFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        name_ = "";

        password_ = "";

        if (permissionsBuilder_ == null) {
          permissions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          permissionsBuilder_.clear();
        }
        if (settingsBuilder_ == null) {
          settings_ = null;
        } else {
          settings_ = null;
          settingsBuilder_ = null;
        }
        if (quotasBuilder_ == null) {
          quotas_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          quotasBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.internal_static_yandex_cloud_mdb_clickhouse_v1_UserSpec_descriptor;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec getDefaultInstanceForType() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec.getDefaultInstance();
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec build() {
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec buildPartial() {
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec result = new yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec(this);
        int from_bitField0_ = bitField0_;
        result.name_ = name_;
        result.password_ = password_;
        if (permissionsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            permissions_ = java.util.Collections.unmodifiableList(permissions_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.permissions_ = permissions_;
        } else {
          result.permissions_ = permissionsBuilder_.build();
        }
        if (settingsBuilder_ == null) {
          result.settings_ = settings_;
        } else {
          result.settings_ = settingsBuilder_.build();
        }
        if (quotasBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            quotas_ = java.util.Collections.unmodifiableList(quotas_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.quotas_ = quotas_;
        } else {
          result.quotas_ = quotasBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec) {
          return mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec other) {
        if (other == yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (!other.getPassword().isEmpty()) {
          password_ = other.password_;
          onChanged();
        }
        if (permissionsBuilder_ == null) {
          if (!other.permissions_.isEmpty()) {
            if (permissions_.isEmpty()) {
              permissions_ = other.permissions_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensurePermissionsIsMutable();
              permissions_.addAll(other.permissions_);
            }
            onChanged();
          }
        } else {
          if (!other.permissions_.isEmpty()) {
            if (permissionsBuilder_.isEmpty()) {
              permissionsBuilder_.dispose();
              permissionsBuilder_ = null;
              permissions_ = other.permissions_;
              bitField0_ = (bitField0_ & ~0x00000001);
              permissionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getPermissionsFieldBuilder() : null;
            } else {
              permissionsBuilder_.addAllMessages(other.permissions_);
            }
          }
        }
        if (other.hasSettings()) {
          mergeSettings(other.getSettings());
        }
        if (quotasBuilder_ == null) {
          if (!other.quotas_.isEmpty()) {
            if (quotas_.isEmpty()) {
              quotas_ = other.quotas_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureQuotasIsMutable();
              quotas_.addAll(other.quotas_);
            }
            onChanged();
          }
        } else {
          if (!other.quotas_.isEmpty()) {
            if (quotasBuilder_.isEmpty()) {
              quotasBuilder_.dispose();
              quotasBuilder_ = null;
              quotas_ = other.quotas_;
              bitField0_ = (bitField0_ & ~0x00000002);
              quotasBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getQuotasFieldBuilder() : null;
            } else {
              quotasBuilder_.addAllMessages(other.quotas_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * Name of the ClickHouse user.
       * </pre>
       *
       * <code>string name = 1 [(.yandex.cloud.required) = true, (.yandex.cloud.pattern) = "[a-zA-Z0-9_][a-zA-Z0-9_-]*", (.yandex.cloud.length) = "&lt;=63"];</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Name of the ClickHouse user.
       * </pre>
       *
       * <code>string name = 1 [(.yandex.cloud.required) = true, (.yandex.cloud.pattern) = "[a-zA-Z0-9_][a-zA-Z0-9_-]*", (.yandex.cloud.length) = "&lt;=63"];</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Name of the ClickHouse user.
       * </pre>
       *
       * <code>string name = 1 [(.yandex.cloud.required) = true, (.yandex.cloud.pattern) = "[a-zA-Z0-9_][a-zA-Z0-9_-]*", (.yandex.cloud.length) = "&lt;=63"];</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the ClickHouse user.
       * </pre>
       *
       * <code>string name = 1 [(.yandex.cloud.required) = true, (.yandex.cloud.pattern) = "[a-zA-Z0-9_][a-zA-Z0-9_-]*", (.yandex.cloud.length) = "&lt;=63"];</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the ClickHouse user.
       * </pre>
       *
       * <code>string name = 1 [(.yandex.cloud.required) = true, (.yandex.cloud.pattern) = "[a-zA-Z0-9_][a-zA-Z0-9_-]*", (.yandex.cloud.length) = "&lt;=63"];</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object password_ = "";
      /**
       * <pre>
       * Password of the ClickHouse user.
       * </pre>
       *
       * <code>string password = 2 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "8-128"];</code>
       * @return The password.
       */
      public java.lang.String getPassword() {
        java.lang.Object ref = password_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          password_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Password of the ClickHouse user.
       * </pre>
       *
       * <code>string password = 2 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "8-128"];</code>
       * @return The bytes for password.
       */
      public com.google.protobuf.ByteString
          getPasswordBytes() {
        java.lang.Object ref = password_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          password_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Password of the ClickHouse user.
       * </pre>
       *
       * <code>string password = 2 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "8-128"];</code>
       * @param value The password to set.
       * @return This builder for chaining.
       */
      public Builder setPassword(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        password_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Password of the ClickHouse user.
       * </pre>
       *
       * <code>string password = 2 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "8-128"];</code>
       * @return This builder for chaining.
       */
      public Builder clearPassword() {
        
        password_ = getDefaultInstance().getPassword();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Password of the ClickHouse user.
       * </pre>
       *
       * <code>string password = 2 [(.yandex.cloud.required) = true, (.yandex.cloud.length) = "8-128"];</code>
       * @param value The bytes for password to set.
       * @return This builder for chaining.
       */
      public Builder setPasswordBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        password_ = value;
        onChanged();
        return this;
      }

      private java.util.List<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission> permissions_ =
        java.util.Collections.emptyList();
      private void ensurePermissionsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          permissions_ = new java.util.ArrayList<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission>(permissions_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.Builder, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.PermissionOrBuilder> permissionsBuilder_;

      /**
       * <pre>
       * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission> getPermissionsList() {
        if (permissionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(permissions_);
        } else {
          return permissionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public int getPermissionsCount() {
        if (permissionsBuilder_ == null) {
          return permissions_.size();
        } else {
          return permissionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission getPermissions(int index) {
        if (permissionsBuilder_ == null) {
          return permissions_.get(index);
        } else {
          return permissionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public Builder setPermissions(
          int index, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission value) {
        if (permissionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePermissionsIsMutable();
          permissions_.set(index, value);
          onChanged();
        } else {
          permissionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public Builder setPermissions(
          int index, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.Builder builderForValue) {
        if (permissionsBuilder_ == null) {
          ensurePermissionsIsMutable();
          permissions_.set(index, builderForValue.build());
          onChanged();
        } else {
          permissionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public Builder addPermissions(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission value) {
        if (permissionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePermissionsIsMutable();
          permissions_.add(value);
          onChanged();
        } else {
          permissionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public Builder addPermissions(
          int index, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission value) {
        if (permissionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePermissionsIsMutable();
          permissions_.add(index, value);
          onChanged();
        } else {
          permissionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public Builder addPermissions(
          yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.Builder builderForValue) {
        if (permissionsBuilder_ == null) {
          ensurePermissionsIsMutable();
          permissions_.add(builderForValue.build());
          onChanged();
        } else {
          permissionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public Builder addPermissions(
          int index, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.Builder builderForValue) {
        if (permissionsBuilder_ == null) {
          ensurePermissionsIsMutable();
          permissions_.add(index, builderForValue.build());
          onChanged();
        } else {
          permissionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public Builder addAllPermissions(
          java.lang.Iterable<? extends yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission> values) {
        if (permissionsBuilder_ == null) {
          ensurePermissionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, permissions_);
          onChanged();
        } else {
          permissionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public Builder clearPermissions() {
        if (permissionsBuilder_ == null) {
          permissions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          permissionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public Builder removePermissions(int index) {
        if (permissionsBuilder_ == null) {
          ensurePermissionsIsMutable();
          permissions_.remove(index);
          onChanged();
        } else {
          permissionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.Builder getPermissionsBuilder(
          int index) {
        return getPermissionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.PermissionOrBuilder getPermissionsOrBuilder(
          int index) {
        if (permissionsBuilder_ == null) {
          return permissions_.get(index);  } else {
          return permissionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.PermissionOrBuilder> 
           getPermissionsOrBuilderList() {
        if (permissionsBuilder_ != null) {
          return permissionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(permissions_);
        }
      }
      /**
       * <pre>
       * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.Builder addPermissionsBuilder() {
        return getPermissionsFieldBuilder().addBuilder(
            yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.getDefaultInstance());
      }
      /**
       * <pre>
       * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.Builder addPermissionsBuilder(
          int index) {
        return getPermissionsFieldBuilder().addBuilder(
            index, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.getDefaultInstance());
      }
      /**
       * <pre>
       * Set of permissions to grant to the user. If not set, it's granted permissions to access all databases.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.Permission permissions = 3;</code>
       */
      public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.Builder> 
           getPermissionsBuilderList() {
        return getPermissionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.Builder, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.PermissionOrBuilder> 
          getPermissionsFieldBuilder() {
        if (permissionsBuilder_ == null) {
          permissionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.Permission.Builder, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.PermissionOrBuilder>(
                  permissions_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          permissions_ = null;
        }
        return permissionsBuilder_;
      }

      private yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings settings_;
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.Builder, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettingsOrBuilder> settingsBuilder_;
      /**
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
       * @return Whether the settings field is set.
       */
      public boolean hasSettings() {
        return settingsBuilder_ != null || settings_ != null;
      }
      /**
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
       * @return The settings.
       */
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings getSettings() {
        if (settingsBuilder_ == null) {
          return settings_ == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.getDefaultInstance() : settings_;
        } else {
          return settingsBuilder_.getMessage();
        }
      }
      /**
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
       */
      public Builder setSettings(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings value) {
        if (settingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          settings_ = value;
          onChanged();
        } else {
          settingsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
       */
      public Builder setSettings(
          yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.Builder builderForValue) {
        if (settingsBuilder_ == null) {
          settings_ = builderForValue.build();
          onChanged();
        } else {
          settingsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
       */
      public Builder mergeSettings(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings value) {
        if (settingsBuilder_ == null) {
          if (settings_ != null) {
            settings_ =
              yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.newBuilder(settings_).mergeFrom(value).buildPartial();
          } else {
            settings_ = value;
          }
          onChanged();
        } else {
          settingsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
       */
      public Builder clearSettings() {
        if (settingsBuilder_ == null) {
          settings_ = null;
          onChanged();
        } else {
          settings_ = null;
          settingsBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.Builder getSettingsBuilder() {
        
        onChanged();
        return getSettingsFieldBuilder().getBuilder();
      }
      /**
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettingsOrBuilder getSettingsOrBuilder() {
        if (settingsBuilder_ != null) {
          return settingsBuilder_.getMessageOrBuilder();
        } else {
          return settings_ == null ?
              yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.getDefaultInstance() : settings_;
        }
      }
      /**
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings settings = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.Builder, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettingsOrBuilder> 
          getSettingsFieldBuilder() {
        if (settingsBuilder_ == null) {
          settingsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.Builder, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettingsOrBuilder>(
                  getSettings(),
                  getParentForChildren(),
                  isClean());
          settings_ = null;
        }
        return settingsBuilder_;
      }

      private java.util.List<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota> quotas_ =
        java.util.Collections.emptyList();
      private void ensureQuotasIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          quotas_ = new java.util.ArrayList<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota>(quotas_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.Builder, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuotaOrBuilder> quotasBuilder_;

      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota> getQuotasList() {
        if (quotasBuilder_ == null) {
          return java.util.Collections.unmodifiableList(quotas_);
        } else {
          return quotasBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public int getQuotasCount() {
        if (quotasBuilder_ == null) {
          return quotas_.size();
        } else {
          return quotasBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota getQuotas(int index) {
        if (quotasBuilder_ == null) {
          return quotas_.get(index);
        } else {
          return quotasBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public Builder setQuotas(
          int index, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota value) {
        if (quotasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureQuotasIsMutable();
          quotas_.set(index, value);
          onChanged();
        } else {
          quotasBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public Builder setQuotas(
          int index, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.Builder builderForValue) {
        if (quotasBuilder_ == null) {
          ensureQuotasIsMutable();
          quotas_.set(index, builderForValue.build());
          onChanged();
        } else {
          quotasBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public Builder addQuotas(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota value) {
        if (quotasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureQuotasIsMutable();
          quotas_.add(value);
          onChanged();
        } else {
          quotasBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public Builder addQuotas(
          int index, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota value) {
        if (quotasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureQuotasIsMutable();
          quotas_.add(index, value);
          onChanged();
        } else {
          quotasBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public Builder addQuotas(
          yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.Builder builderForValue) {
        if (quotasBuilder_ == null) {
          ensureQuotasIsMutable();
          quotas_.add(builderForValue.build());
          onChanged();
        } else {
          quotasBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public Builder addQuotas(
          int index, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.Builder builderForValue) {
        if (quotasBuilder_ == null) {
          ensureQuotasIsMutable();
          quotas_.add(index, builderForValue.build());
          onChanged();
        } else {
          quotasBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public Builder addAllQuotas(
          java.lang.Iterable<? extends yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota> values) {
        if (quotasBuilder_ == null) {
          ensureQuotasIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, quotas_);
          onChanged();
        } else {
          quotasBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public Builder clearQuotas() {
        if (quotasBuilder_ == null) {
          quotas_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          quotasBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public Builder removeQuotas(int index) {
        if (quotasBuilder_ == null) {
          ensureQuotasIsMutable();
          quotas_.remove(index);
          onChanged();
        } else {
          quotasBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.Builder getQuotasBuilder(
          int index) {
        return getQuotasFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuotaOrBuilder getQuotasOrBuilder(
          int index) {
        if (quotasBuilder_ == null) {
          return quotas_.get(index);  } else {
          return quotasBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public java.util.List<? extends yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuotaOrBuilder> 
           getQuotasOrBuilderList() {
        if (quotasBuilder_ != null) {
          return quotasBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(quotas_);
        }
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.Builder addQuotasBuilder() {
        return getQuotasFieldBuilder().addBuilder(
            yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.getDefaultInstance());
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.Builder addQuotasBuilder(
          int index) {
        return getQuotasFieldBuilder().addBuilder(
            index, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.getDefaultInstance());
      }
      /**
       * <pre>
       * Set of quotas assigned to the user.
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserQuota quotas = 5;</code>
       */
      public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.Builder> 
           getQuotasBuilderList() {
        return getQuotasFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.Builder, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuotaOrBuilder> 
          getQuotasFieldBuilder() {
        if (quotasBuilder_ == null) {
          quotasBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.Builder, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuotaOrBuilder>(
                  quotas_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          quotas_ = null;
        }
        return quotasBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.clickhouse.v1.UserSpec)
    }

    // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.clickhouse.v1.UserSpec)
    private static final yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec();
    }

    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UserSpec>
        PARSER = new com.google.protobuf.AbstractParser<UserSpec>() {
      @java.lang.Override
      public UserSpec parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new UserSpec(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<UserSpec> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UserSpec> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSpec getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UserSettingsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.clickhouse.v1.UserSettings)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Restricts permissions for non-DDL queries. To restrict permissions for DDL queries, use [allow_ddl] instead.
     * * **0** (default)-no restrictions.
     * * **1**-only read data queries are allowed.
     * * **2**-read data and change settings queries are allowed.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_readonly).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value readonly = 1 [(.yandex.cloud.value) = "0-2"];</code>
     * @return Whether the readonly field is set.
     */
    boolean hasReadonly();
    /**
     * <pre>
     * Restricts permissions for non-DDL queries. To restrict permissions for DDL queries, use [allow_ddl] instead.
     * * **0** (default)-no restrictions.
     * * **1**-only read data queries are allowed.
     * * **2**-read data and change settings queries are allowed.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_readonly).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value readonly = 1 [(.yandex.cloud.value) = "0-2"];</code>
     * @return The readonly.
     */
    com.google.protobuf.Int64Value getReadonly();
    /**
     * <pre>
     * Restricts permissions for non-DDL queries. To restrict permissions for DDL queries, use [allow_ddl] instead.
     * * **0** (default)-no restrictions.
     * * **1**-only read data queries are allowed.
     * * **2**-read data and change settings queries are allowed.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_readonly).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value readonly = 1 [(.yandex.cloud.value) = "0-2"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getReadonlyOrBuilder();

    /**
     * <pre>
     * Determines whether DDL queries are allowed (e.g., **CREATE**, **ALTER**, **RENAME**, etc).
     * Default value: **true**.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_allow_ddl).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue allow_ddl = 2;</code>
     * @return Whether the allowDdl field is set.
     */
    boolean hasAllowDdl();
    /**
     * <pre>
     * Determines whether DDL queries are allowed (e.g., **CREATE**, **ALTER**, **RENAME**, etc).
     * Default value: **true**.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_allow_ddl).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue allow_ddl = 2;</code>
     * @return The allowDdl.
     */
    com.google.protobuf.BoolValue getAllowDdl();
    /**
     * <pre>
     * Determines whether DDL queries are allowed (e.g., **CREATE**, **ALTER**, **RENAME**, etc).
     * Default value: **true**.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_allow_ddl).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue allow_ddl = 2;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getAllowDdlOrBuilder();

    /**
     * <pre>
     * Enables [introspections functions](https://clickhouse.com/docs/en/sql-reference/functions/introspection) for query profiling.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-allow_introspection_functions).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue allow_introspection_functions = 96;</code>
     * @return Whether the allowIntrospectionFunctions field is set.
     */
    boolean hasAllowIntrospectionFunctions();
    /**
     * <pre>
     * Enables [introspections functions](https://clickhouse.com/docs/en/sql-reference/functions/introspection) for query profiling.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-allow_introspection_functions).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue allow_introspection_functions = 96;</code>
     * @return The allowIntrospectionFunctions.
     */
    com.google.protobuf.BoolValue getAllowIntrospectionFunctions();
    /**
     * <pre>
     * Enables [introspections functions](https://clickhouse.com/docs/en/sql-reference/functions/introspection) for query profiling.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-allow_introspection_functions).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue allow_introspection_functions = 96;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getAllowIntrospectionFunctionsOrBuilder();

    /**
     * <pre>
     * Connection timeout in milliseconds.
     * Value must be greater than **0** (default: **10000**, 10 seconds).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value connect_timeout = 39 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the connectTimeout field is set.
     */
    boolean hasConnectTimeout();
    /**
     * <pre>
     * Connection timeout in milliseconds.
     * Value must be greater than **0** (default: **10000**, 10 seconds).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value connect_timeout = 39 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The connectTimeout.
     */
    com.google.protobuf.Int64Value getConnectTimeout();
    /**
     * <pre>
     * Connection timeout in milliseconds.
     * Value must be greater than **0** (default: **10000**, 10 seconds).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value connect_timeout = 39 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getConnectTimeoutOrBuilder();

    /**
     * <pre>
     * The timeout in milliseconds for connecting to a remote server for a Distributed table engine. Applies only if the cluster uses sharding and replication. If unsuccessful, several attempts are made to connect to various replicas.
     * Default value: **50**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#connect-timeout-with-failover-ms).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value connect_timeout_with_failover = 97 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the connectTimeoutWithFailover field is set.
     */
    boolean hasConnectTimeoutWithFailover();
    /**
     * <pre>
     * The timeout in milliseconds for connecting to a remote server for a Distributed table engine. Applies only if the cluster uses sharding and replication. If unsuccessful, several attempts are made to connect to various replicas.
     * Default value: **50**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#connect-timeout-with-failover-ms).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value connect_timeout_with_failover = 97 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The connectTimeoutWithFailover.
     */
    com.google.protobuf.Int64Value getConnectTimeoutWithFailover();
    /**
     * <pre>
     * The timeout in milliseconds for connecting to a remote server for a Distributed table engine. Applies only if the cluster uses sharding and replication. If unsuccessful, several attempts are made to connect to various replicas.
     * Default value: **50**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#connect-timeout-with-failover-ms).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value connect_timeout_with_failover = 97 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getConnectTimeoutWithFailoverOrBuilder();

    /**
     * <pre>
     * Receive timeout in milliseconds.
     * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value receive_timeout = 40 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the receiveTimeout field is set.
     */
    boolean hasReceiveTimeout();
    /**
     * <pre>
     * Receive timeout in milliseconds.
     * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value receive_timeout = 40 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The receiveTimeout.
     */
    com.google.protobuf.Int64Value getReceiveTimeout();
    /**
     * <pre>
     * Receive timeout in milliseconds.
     * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value receive_timeout = 40 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getReceiveTimeoutOrBuilder();

    /**
     * <pre>
     * Send timeout in milliseconds.
     * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value send_timeout = 41 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the sendTimeout field is set.
     */
    boolean hasSendTimeout();
    /**
     * <pre>
     * Send timeout in milliseconds.
     * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value send_timeout = 41 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The sendTimeout.
     */
    com.google.protobuf.Int64Value getSendTimeout();
    /**
     * <pre>
     * Send timeout in milliseconds.
     * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value send_timeout = 41 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getSendTimeoutOrBuilder();

    /**
     * <pre>
     * Timeout (in seconds) between checks of execution speed. It is checked that execution speed is not less that specified in [min_execution_speed] parameter.
     * Default value: **10**.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value timeout_before_checking_execution_speed = 98;</code>
     * @return Whether the timeoutBeforeCheckingExecutionSpeed field is set.
     */
    boolean hasTimeoutBeforeCheckingExecutionSpeed();
    /**
     * <pre>
     * Timeout (in seconds) between checks of execution speed. It is checked that execution speed is not less that specified in [min_execution_speed] parameter.
     * Default value: **10**.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value timeout_before_checking_execution_speed = 98;</code>
     * @return The timeoutBeforeCheckingExecutionSpeed.
     */
    com.google.protobuf.Int64Value getTimeoutBeforeCheckingExecutionSpeed();
    /**
     * <pre>
     * Timeout (in seconds) between checks of execution speed. It is checked that execution speed is not less that specified in [min_execution_speed] parameter.
     * Default value: **10**.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value timeout_before_checking_execution_speed = 98;</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getTimeoutBeforeCheckingExecutionSpeedOrBuilder();

    /**
     * <pre>
     * Enables or disables write quorum for ClickHouse cluster.
     * If the value is less than **2**, then write quorum is disabled, otherwise it is enabled.
     * When used, write quorum guarantees that ClickHouse has written data to the quorum of **insert_quorum** replicas with no errors until the [insert_quorum_timeout] expires.
     * All replicas in the quorum are in the consistent state, meaning that they contain linearized data from the previous **INSERT** queries.
     * Employ write quorum, if you need the guarantees that the written data would not be lost in case of one or more replicas failure.
     * You can use [select_sequential_consistency] setting to read the data written with write quorum.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value insert_quorum = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the insertQuorum field is set.
     */
    boolean hasInsertQuorum();
    /**
     * <pre>
     * Enables or disables write quorum for ClickHouse cluster.
     * If the value is less than **2**, then write quorum is disabled, otherwise it is enabled.
     * When used, write quorum guarantees that ClickHouse has written data to the quorum of **insert_quorum** replicas with no errors until the [insert_quorum_timeout] expires.
     * All replicas in the quorum are in the consistent state, meaning that they contain linearized data from the previous **INSERT** queries.
     * Employ write quorum, if you need the guarantees that the written data would not be lost in case of one or more replicas failure.
     * You can use [select_sequential_consistency] setting to read the data written with write quorum.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value insert_quorum = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The insertQuorum.
     */
    com.google.protobuf.Int64Value getInsertQuorum();
    /**
     * <pre>
     * Enables or disables write quorum for ClickHouse cluster.
     * If the value is less than **2**, then write quorum is disabled, otherwise it is enabled.
     * When used, write quorum guarantees that ClickHouse has written data to the quorum of **insert_quorum** replicas with no errors until the [insert_quorum_timeout] expires.
     * All replicas in the quorum are in the consistent state, meaning that they contain linearized data from the previous **INSERT** queries.
     * Employ write quorum, if you need the guarantees that the written data would not be lost in case of one or more replicas failure.
     * You can use [select_sequential_consistency] setting to read the data written with write quorum.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value insert_quorum = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getInsertQuorumOrBuilder();

    /**
     * <pre>
     * Quorum write timeout in milliseconds.
     * If the write quorum is enabled in the cluster, this timeout expires and some data is not written to the [insert_quorum] replicas, then ClickHouse will abort the execution of **INSERT** query and return an error.
     * In this case, the client must send the query again to write the data block into the same or another replica.
     * Minimum value: **1000**, 1 second (default: **60000**, 1 minute).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value insert_quorum_timeout = 4 [(.yandex.cloud.value) = "&gt;=1000"];</code>
     * @return Whether the insertQuorumTimeout field is set.
     */
    boolean hasInsertQuorumTimeout();
    /**
     * <pre>
     * Quorum write timeout in milliseconds.
     * If the write quorum is enabled in the cluster, this timeout expires and some data is not written to the [insert_quorum] replicas, then ClickHouse will abort the execution of **INSERT** query and return an error.
     * In this case, the client must send the query again to write the data block into the same or another replica.
     * Minimum value: **1000**, 1 second (default: **60000**, 1 minute).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value insert_quorum_timeout = 4 [(.yandex.cloud.value) = "&gt;=1000"];</code>
     * @return The insertQuorumTimeout.
     */
    com.google.protobuf.Int64Value getInsertQuorumTimeout();
    /**
     * <pre>
     * Quorum write timeout in milliseconds.
     * If the write quorum is enabled in the cluster, this timeout expires and some data is not written to the [insert_quorum] replicas, then ClickHouse will abort the execution of **INSERT** query and return an error.
     * In this case, the client must send the query again to write the data block into the same or another replica.
     * Minimum value: **1000**, 1 second (default: **60000**, 1 minute).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value insert_quorum_timeout = 4 [(.yandex.cloud.value) = "&gt;=1000"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getInsertQuorumTimeoutOrBuilder();

    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum_parallel).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue insert_quorum_parallel = 99;</code>
     * @return Whether the insertQuorumParallel field is set.
     */
    boolean hasInsertQuorumParallel();
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum_parallel).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue insert_quorum_parallel = 99;</code>
     * @return The insertQuorumParallel.
     */
    com.google.protobuf.BoolValue getInsertQuorumParallel();
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum_parallel).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue insert_quorum_parallel = 99;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getInsertQuorumParallelOrBuilder();

    /**
     * <pre>
     * Enables the insertion of default values instead of NULL into columns with not nullable data type.
     * Default value: **true**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#insert_null_as_default).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue insert_null_as_default = 100;</code>
     * @return Whether the insertNullAsDefault field is set.
     */
    boolean hasInsertNullAsDefault();
    /**
     * <pre>
     * Enables the insertion of default values instead of NULL into columns with not nullable data type.
     * Default value: **true**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#insert_null_as_default).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue insert_null_as_default = 100;</code>
     * @return The insertNullAsDefault.
     */
    com.google.protobuf.BoolValue getInsertNullAsDefault();
    /**
     * <pre>
     * Enables the insertion of default values instead of NULL into columns with not nullable data type.
     * Default value: **true**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#insert_null_as_default).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue insert_null_as_default = 100;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getInsertNullAsDefaultOrBuilder();

    /**
     * <pre>
     * Determines the behavior of **SELECT** queries from the replicated table: if enabled, ClickHouse will terminate a query with error message in case the replica does not have a chunk written with the quorum and will not read the parts that have not yet been written with the quorum.
     * Default value: **false** (sequential consistency is disabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue select_sequential_consistency = 5;</code>
     * @return Whether the selectSequentialConsistency field is set.
     */
    boolean hasSelectSequentialConsistency();
    /**
     * <pre>
     * Determines the behavior of **SELECT** queries from the replicated table: if enabled, ClickHouse will terminate a query with error message in case the replica does not have a chunk written with the quorum and will not read the parts that have not yet been written with the quorum.
     * Default value: **false** (sequential consistency is disabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue select_sequential_consistency = 5;</code>
     * @return The selectSequentialConsistency.
     */
    com.google.protobuf.BoolValue getSelectSequentialConsistency();
    /**
     * <pre>
     * Determines the behavior of **SELECT** queries from the replicated table: if enabled, ClickHouse will terminate a query with error message in case the replica does not have a chunk written with the quorum and will not read the parts that have not yet been written with the quorum.
     * Default value: **false** (sequential consistency is disabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue select_sequential_consistency = 5;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getSelectSequentialConsistencyOrBuilder();

    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-deduplicate-blocks-in-dependent-materialized-views).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue deduplicate_blocks_in_dependent_materialized_views = 101;</code>
     * @return Whether the deduplicateBlocksInDependentMaterializedViews field is set.
     */
    boolean hasDeduplicateBlocksInDependentMaterializedViews();
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-deduplicate-blocks-in-dependent-materialized-views).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue deduplicate_blocks_in_dependent_materialized_views = 101;</code>
     * @return The deduplicateBlocksInDependentMaterializedViews.
     */
    com.google.protobuf.BoolValue getDeduplicateBlocksInDependentMaterializedViews();
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-deduplicate-blocks-in-dependent-materialized-views).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue deduplicate_blocks_in_dependent_materialized_views = 101;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getDeduplicateBlocksInDependentMaterializedViewsOrBuilder();

    /**
     * <pre>
     * Wait mode for asynchronous actions in **ALTER** queries on replicated tables:
     * * **0**-do not wait for replicas.
     * * **1**-only wait for own execution (default).
     * * **2**-wait for all replicas.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/alter/#synchronicity-of-alter-queries).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value replication_alter_partitions_sync = 42 [(.yandex.cloud.value) = "0-2"];</code>
     * @return Whether the replicationAlterPartitionsSync field is set.
     */
    boolean hasReplicationAlterPartitionsSync();
    /**
     * <pre>
     * Wait mode for asynchronous actions in **ALTER** queries on replicated tables:
     * * **0**-do not wait for replicas.
     * * **1**-only wait for own execution (default).
     * * **2**-wait for all replicas.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/alter/#synchronicity-of-alter-queries).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value replication_alter_partitions_sync = 42 [(.yandex.cloud.value) = "0-2"];</code>
     * @return The replicationAlterPartitionsSync.
     */
    com.google.protobuf.Int64Value getReplicationAlterPartitionsSync();
    /**
     * <pre>
     * Wait mode for asynchronous actions in **ALTER** queries on replicated tables:
     * * **0**-do not wait for replicas.
     * * **1**-only wait for own execution (default).
     * * **2**-wait for all replicas.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/alter/#synchronicity-of-alter-queries).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value replication_alter_partitions_sync = 42 [(.yandex.cloud.value) = "0-2"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getReplicationAlterPartitionsSyncOrBuilder();

    /**
     * <pre>
     * Max replica delay in milliseconds. If a replica lags more than the set value, this replica is not used and becomes a stale one.
     * Minimum value: **1000**, 1 second (default: **300000**, 300 seconds or 5 minutes).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_replica_delay_for_distributed_queries).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_replica_delay_for_distributed_queries = 6 [(.yandex.cloud.value) = "&gt;=1000"];</code>
     * @return Whether the maxReplicaDelayForDistributedQueries field is set.
     */
    boolean hasMaxReplicaDelayForDistributedQueries();
    /**
     * <pre>
     * Max replica delay in milliseconds. If a replica lags more than the set value, this replica is not used and becomes a stale one.
     * Minimum value: **1000**, 1 second (default: **300000**, 300 seconds or 5 minutes).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_replica_delay_for_distributed_queries).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_replica_delay_for_distributed_queries = 6 [(.yandex.cloud.value) = "&gt;=1000"];</code>
     * @return The maxReplicaDelayForDistributedQueries.
     */
    com.google.protobuf.Int64Value getMaxReplicaDelayForDistributedQueries();
    /**
     * <pre>
     * Max replica delay in milliseconds. If a replica lags more than the set value, this replica is not used and becomes a stale one.
     * Minimum value: **1000**, 1 second (default: **300000**, 300 seconds or 5 minutes).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_replica_delay_for_distributed_queries).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_replica_delay_for_distributed_queries = 6 [(.yandex.cloud.value) = "&gt;=1000"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxReplicaDelayForDistributedQueriesOrBuilder();

    /**
     * <pre>
     * Enables or disables query forcing to a stale replica in case the actual data is unavailable.
     * If enabled, ClickHouse will choose the most up-to-date replica and force the query to use the data in this replica.
     * This setting can be used when doing **SELECT** query from a distributed table that points to replicated tables.
     * Default value: **true** (query forcing is enabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-fallback_to_stale_replicas_for_distributed_queries).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue fallback_to_stale_replicas_for_distributed_queries = 7;</code>
     * @return Whether the fallbackToStaleReplicasForDistributedQueries field is set.
     */
    boolean hasFallbackToStaleReplicasForDistributedQueries();
    /**
     * <pre>
     * Enables or disables query forcing to a stale replica in case the actual data is unavailable.
     * If enabled, ClickHouse will choose the most up-to-date replica and force the query to use the data in this replica.
     * This setting can be used when doing **SELECT** query from a distributed table that points to replicated tables.
     * Default value: **true** (query forcing is enabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-fallback_to_stale_replicas_for_distributed_queries).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue fallback_to_stale_replicas_for_distributed_queries = 7;</code>
     * @return The fallbackToStaleReplicasForDistributedQueries.
     */
    com.google.protobuf.BoolValue getFallbackToStaleReplicasForDistributedQueries();
    /**
     * <pre>
     * Enables or disables query forcing to a stale replica in case the actual data is unavailable.
     * If enabled, ClickHouse will choose the most up-to-date replica and force the query to use the data in this replica.
     * This setting can be used when doing **SELECT** query from a distributed table that points to replicated tables.
     * Default value: **true** (query forcing is enabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-fallback_to_stale_replicas_for_distributed_queries).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue fallback_to_stale_replicas_for_distributed_queries = 7;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getFallbackToStaleReplicasForDistributedQueriesOrBuilder();

    /**
     * <pre>
     * Determine the behavior of distributed subqueries.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#distributed-product-mode).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.DistributedProductMode distributed_product_mode = 43;</code>
     * @return The enum numeric value on the wire for distributedProductMode.
     */
    int getDistributedProductModeValue();
    /**
     * <pre>
     * Determine the behavior of distributed subqueries.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#distributed-product-mode).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.DistributedProductMode distributed_product_mode = 43;</code>
     * @return The distributedProductMode.
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DistributedProductMode getDistributedProductMode();

    /**
     * <pre>
     * Enables of disables memory saving mode when doing distributed aggregation.
     * When ClickHouse works with a distributed query, external aggregation is done on remote servers.
     * Enable this setting to achieve a smaller memory footprint on the server that sourced such a distributed query.
     * Default value: **false** (memory saving mode is disabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue distributed_aggregation_memory_efficient = 72;</code>
     * @return Whether the distributedAggregationMemoryEfficient field is set.
     */
    boolean hasDistributedAggregationMemoryEfficient();
    /**
     * <pre>
     * Enables of disables memory saving mode when doing distributed aggregation.
     * When ClickHouse works with a distributed query, external aggregation is done on remote servers.
     * Enable this setting to achieve a smaller memory footprint on the server that sourced such a distributed query.
     * Default value: **false** (memory saving mode is disabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue distributed_aggregation_memory_efficient = 72;</code>
     * @return The distributedAggregationMemoryEfficient.
     */
    com.google.protobuf.BoolValue getDistributedAggregationMemoryEfficient();
    /**
     * <pre>
     * Enables of disables memory saving mode when doing distributed aggregation.
     * When ClickHouse works with a distributed query, external aggregation is done on remote servers.
     * Enable this setting to achieve a smaller memory footprint on the server that sourced such a distributed query.
     * Default value: **false** (memory saving mode is disabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue distributed_aggregation_memory_efficient = 72;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getDistributedAggregationMemoryEfficientOrBuilder();

    /**
     * <pre>
     * Timeout for DDL queries, in milliseconds.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value distributed_ddl_task_timeout = 73;</code>
     * @return Whether the distributedDdlTaskTimeout field is set.
     */
    boolean hasDistributedDdlTaskTimeout();
    /**
     * <pre>
     * Timeout for DDL queries, in milliseconds.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value distributed_ddl_task_timeout = 73;</code>
     * @return The distributedDdlTaskTimeout.
     */
    com.google.protobuf.Int64Value getDistributedDdlTaskTimeout();
    /**
     * <pre>
     * Timeout for DDL queries, in milliseconds.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value distributed_ddl_task_timeout = 73;</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getDistributedDdlTaskTimeoutOrBuilder();

    /**
     * <pre>
     * Enables or disables silent skipping of unavailable shards.
     * A shard is considered unavailable if all its replicas are also unavailable.
     * Default value: **false** (silent skipping is disabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-skip_unavailable_shards).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue skip_unavailable_shards = 81;</code>
     * @return Whether the skipUnavailableShards field is set.
     */
    boolean hasSkipUnavailableShards();
    /**
     * <pre>
     * Enables or disables silent skipping of unavailable shards.
     * A shard is considered unavailable if all its replicas are also unavailable.
     * Default value: **false** (silent skipping is disabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-skip_unavailable_shards).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue skip_unavailable_shards = 81;</code>
     * @return The skipUnavailableShards.
     */
    com.google.protobuf.BoolValue getSkipUnavailableShards();
    /**
     * <pre>
     * Enables or disables silent skipping of unavailable shards.
     * A shard is considered unavailable if all its replicas are also unavailable.
     * Default value: **false** (silent skipping is disabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-skip_unavailable_shards).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue skip_unavailable_shards = 81;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getSkipUnavailableShardsOrBuilder();

    /**
     * <pre>
     * Enables or disables expression compilation.
     * If you execute a lot of queries that contain identical expressions, then enable this setting.
     * As a result, such queries may be executed faster due to use of compiled expressions.
     * Use this setting in combination with [min_count_to_compile_expression] setting.
     * Default value: **false** (expression compilation is disabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue compile_expressions = 46;</code>
     * @return Whether the compileExpressions field is set.
     */
    boolean hasCompileExpressions();
    /**
     * <pre>
     * Enables or disables expression compilation.
     * If you execute a lot of queries that contain identical expressions, then enable this setting.
     * As a result, such queries may be executed faster due to use of compiled expressions.
     * Use this setting in combination with [min_count_to_compile_expression] setting.
     * Default value: **false** (expression compilation is disabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue compile_expressions = 46;</code>
     * @return The compileExpressions.
     */
    com.google.protobuf.BoolValue getCompileExpressions();
    /**
     * <pre>
     * Enables or disables expression compilation.
     * If you execute a lot of queries that contain identical expressions, then enable this setting.
     * As a result, such queries may be executed faster due to use of compiled expressions.
     * Use this setting in combination with [min_count_to_compile_expression] setting.
     * Default value: **false** (expression compilation is disabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue compile_expressions = 46;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getCompileExpressionsOrBuilder();

    /**
     * <pre>
     * How many identical expressions ClickHouse has to encounter before they are compiled.
     * Minimum value: **0** (default: **3**).
     * For the **0** value compilation is synchronous: a query waits for expression compilation process to complete prior to continuing execution.
     * It is recommended to set this value only for testing purposes.
     * For all other values, compilation is asynchronous: the compilation process executes in a separate thread.
     * When a compiled expression is ready, it will be used by ClickHouse for eligible queries, including the ones that are currently running.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_count_to_compile_expression = 47 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the minCountToCompileExpression field is set.
     */
    boolean hasMinCountToCompileExpression();
    /**
     * <pre>
     * How many identical expressions ClickHouse has to encounter before they are compiled.
     * Minimum value: **0** (default: **3**).
     * For the **0** value compilation is synchronous: a query waits for expression compilation process to complete prior to continuing execution.
     * It is recommended to set this value only for testing purposes.
     * For all other values, compilation is asynchronous: the compilation process executes in a separate thread.
     * When a compiled expression is ready, it will be used by ClickHouse for eligible queries, including the ones that are currently running.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_count_to_compile_expression = 47 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The minCountToCompileExpression.
     */
    com.google.protobuf.Int64Value getMinCountToCompileExpression();
    /**
     * <pre>
     * How many identical expressions ClickHouse has to encounter before they are compiled.
     * Minimum value: **0** (default: **3**).
     * For the **0** value compilation is synchronous: a query waits for expression compilation process to complete prior to continuing execution.
     * It is recommended to set this value only for testing purposes.
     * For all other values, compilation is asynchronous: the compilation process executes in a separate thread.
     * When a compiled expression is ready, it will be used by ClickHouse for eligible queries, including the ones that are currently running.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_count_to_compile_expression = 47 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMinCountToCompileExpressionOrBuilder();

    /**
     * <pre>
     * The maximum block size for reading.
     * Data in ClickHouse is organized and processed by blocks (block is a set of columns' parts).
     * The internal processing cycles for a single block are efficient enough, but there are noticeable expenditures on each block.
     * This setting is a recommendation for size of block (in a count of rows) that should be loaded from tables.
     * Value must be greater than **0** (default: **65536**).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_block_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_block_size = 9 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the maxBlockSize field is set.
     */
    boolean hasMaxBlockSize();
    /**
     * <pre>
     * The maximum block size for reading.
     * Data in ClickHouse is organized and processed by blocks (block is a set of columns' parts).
     * The internal processing cycles for a single block are efficient enough, but there are noticeable expenditures on each block.
     * This setting is a recommendation for size of block (in a count of rows) that should be loaded from tables.
     * Value must be greater than **0** (default: **65536**).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_block_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_block_size = 9 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The maxBlockSize.
     */
    com.google.protobuf.Int64Value getMaxBlockSize();
    /**
     * <pre>
     * The maximum block size for reading.
     * Data in ClickHouse is organized and processed by blocks (block is a set of columns' parts).
     * The internal processing cycles for a single block are efficient enough, but there are noticeable expenditures on each block.
     * This setting is a recommendation for size of block (in a count of rows) that should be loaded from tables.
     * Value must be greater than **0** (default: **65536**).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_block_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_block_size = 9 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxBlockSizeOrBuilder();

    /**
     * <pre>
     * Limits the minimum number of rows in a block to be inserted in a table by **INSERT** query.
     * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
     * Minimal value: **0**, block squashing is disabled (default: **1048576**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_insert_block_size_rows = 48 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the minInsertBlockSizeRows field is set.
     */
    boolean hasMinInsertBlockSizeRows();
    /**
     * <pre>
     * Limits the minimum number of rows in a block to be inserted in a table by **INSERT** query.
     * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
     * Minimal value: **0**, block squashing is disabled (default: **1048576**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_insert_block_size_rows = 48 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The minInsertBlockSizeRows.
     */
    com.google.protobuf.Int64Value getMinInsertBlockSizeRows();
    /**
     * <pre>
     * Limits the minimum number of rows in a block to be inserted in a table by **INSERT** query.
     * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
     * Minimal value: **0**, block squashing is disabled (default: **1048576**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_insert_block_size_rows = 48 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMinInsertBlockSizeRowsOrBuilder();

    /**
     * <pre>
     * Limits the minimum number of bytes in a block to be inserted in a table by **INSERT** query.
     * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
     * Minimal value: **0**, block squashing is disabled (default: **268435456**, 256 MB).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_insert_block_size_bytes = 49 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the minInsertBlockSizeBytes field is set.
     */
    boolean hasMinInsertBlockSizeBytes();
    /**
     * <pre>
     * Limits the minimum number of bytes in a block to be inserted in a table by **INSERT** query.
     * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
     * Minimal value: **0**, block squashing is disabled (default: **268435456**, 256 MB).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_insert_block_size_bytes = 49 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The minInsertBlockSizeBytes.
     */
    com.google.protobuf.Int64Value getMinInsertBlockSizeBytes();
    /**
     * <pre>
     * Limits the minimum number of bytes in a block to be inserted in a table by **INSERT** query.
     * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
     * Minimal value: **0**, block squashing is disabled (default: **268435456**, 256 MB).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_insert_block_size_bytes = 49 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMinInsertBlockSizeBytesOrBuilder();

    /**
     * <pre>
     * Allows to form blocks of the specified size (in bytes) when inserting data in a table.
     * This setting has effect only if server is creating such blocks by itself.
     * Value must be greater than **0** (default: **1048576**).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_insert_block_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_insert_block_size = 10 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the maxInsertBlockSize field is set.
     */
    boolean hasMaxInsertBlockSize();
    /**
     * <pre>
     * Allows to form blocks of the specified size (in bytes) when inserting data in a table.
     * This setting has effect only if server is creating such blocks by itself.
     * Value must be greater than **0** (default: **1048576**).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_insert_block_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_insert_block_size = 10 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The maxInsertBlockSize.
     */
    com.google.protobuf.Int64Value getMaxInsertBlockSize();
    /**
     * <pre>
     * Allows to form blocks of the specified size (in bytes) when inserting data in a table.
     * This setting has effect only if server is creating such blocks by itself.
     * Value must be greater than **0** (default: **1048576**).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_insert_block_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_insert_block_size = 10 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxInsertBlockSizeOrBuilder();

    /**
     * <pre>
     * Limits the minimum number of bytes to enable unbuffered direct reads from disk (Direct I/O).
     * By default, ClickHouse does not read data directly from disk, but relies on the filesystem and its cache instead.
     * Such reading strategy is effective when the data volume is small.
     * If the amount of the data to read is huge, it is more effective to read directly from the disk, bypassing the filesystem cache.
     * If the total amount of the data to read is greater than the value of this setting, then ClickHouse will fetch this data directly from the disk.
     * Minimal value and default value: **0**, Direct I/O is disabled.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_bytes_to_use_direct_io = 50 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the minBytesToUseDirectIo field is set.
     */
    boolean hasMinBytesToUseDirectIo();
    /**
     * <pre>
     * Limits the minimum number of bytes to enable unbuffered direct reads from disk (Direct I/O).
     * By default, ClickHouse does not read data directly from disk, but relies on the filesystem and its cache instead.
     * Such reading strategy is effective when the data volume is small.
     * If the amount of the data to read is huge, it is more effective to read directly from the disk, bypassing the filesystem cache.
     * If the total amount of the data to read is greater than the value of this setting, then ClickHouse will fetch this data directly from the disk.
     * Minimal value and default value: **0**, Direct I/O is disabled.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_bytes_to_use_direct_io = 50 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The minBytesToUseDirectIo.
     */
    com.google.protobuf.Int64Value getMinBytesToUseDirectIo();
    /**
     * <pre>
     * Limits the minimum number of bytes to enable unbuffered direct reads from disk (Direct I/O).
     * By default, ClickHouse does not read data directly from disk, but relies on the filesystem and its cache instead.
     * Such reading strategy is effective when the data volume is small.
     * If the amount of the data to read is huge, it is more effective to read directly from the disk, bypassing the filesystem cache.
     * If the total amount of the data to read is greater than the value of this setting, then ClickHouse will fetch this data directly from the disk.
     * Minimal value and default value: **0**, Direct I/O is disabled.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_bytes_to_use_direct_io = 50 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMinBytesToUseDirectIoOrBuilder();

    /**
     * <pre>
     * Determines whether to use the cache of uncompressed blocks, or not.
     * Using this cache can significantly reduce latency and increase the throughput when a huge amount of small queries is to be processed.
     * Enable this setting for the users who instantiates small queries frequently.
     * This setting has effect only for tables of the MergeTree family.
     * Default value: **false** (uncompressed cache is disabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-use_uncompressed_cache).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue use_uncompressed_cache = 51;</code>
     * @return Whether the useUncompressedCache field is set.
     */
    boolean hasUseUncompressedCache();
    /**
     * <pre>
     * Determines whether to use the cache of uncompressed blocks, or not.
     * Using this cache can significantly reduce latency and increase the throughput when a huge amount of small queries is to be processed.
     * Enable this setting for the users who instantiates small queries frequently.
     * This setting has effect only for tables of the MergeTree family.
     * Default value: **false** (uncompressed cache is disabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-use_uncompressed_cache).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue use_uncompressed_cache = 51;</code>
     * @return The useUncompressedCache.
     */
    com.google.protobuf.BoolValue getUseUncompressedCache();
    /**
     * <pre>
     * Determines whether to use the cache of uncompressed blocks, or not.
     * Using this cache can significantly reduce latency and increase the throughput when a huge amount of small queries is to be processed.
     * Enable this setting for the users who instantiates small queries frequently.
     * This setting has effect only for tables of the MergeTree family.
     * Default value: **false** (uncompressed cache is disabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-use_uncompressed_cache).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue use_uncompressed_cache = 51;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getUseUncompressedCacheOrBuilder();

    /**
     * <pre>
     * Limits the maximum size in rows of the request that can use the cache of uncompressed data. The cache is not used for requests larger
     * than the specified value.
     * Use this setting in combination with [use_uncompressed_cache] setting.
     * Value must be greater than **0** (default: **128x8192**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value merge_tree_max_rows_to_use_cache = 52 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the mergeTreeMaxRowsToUseCache field is set.
     */
    boolean hasMergeTreeMaxRowsToUseCache();
    /**
     * <pre>
     * Limits the maximum size in rows of the request that can use the cache of uncompressed data. The cache is not used for requests larger
     * than the specified value.
     * Use this setting in combination with [use_uncompressed_cache] setting.
     * Value must be greater than **0** (default: **128x8192**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value merge_tree_max_rows_to_use_cache = 52 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The mergeTreeMaxRowsToUseCache.
     */
    com.google.protobuf.Int64Value getMergeTreeMaxRowsToUseCache();
    /**
     * <pre>
     * Limits the maximum size in rows of the request that can use the cache of uncompressed data. The cache is not used for requests larger
     * than the specified value.
     * Use this setting in combination with [use_uncompressed_cache] setting.
     * Value must be greater than **0** (default: **128x8192**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value merge_tree_max_rows_to_use_cache = 52 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMergeTreeMaxRowsToUseCacheOrBuilder();

    /**
     * <pre>
     * Limits the maximum size in bytes of the request that can use the cache of uncompressed data. The cache is not used for requests larger
     * than the specified value.
     * Use this setting in combination with [use_uncompressed_cache] setting.
     * Value must be greater than **0** (default: **192x10x1024x1024**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value merge_tree_max_bytes_to_use_cache = 53 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the mergeTreeMaxBytesToUseCache field is set.
     */
    boolean hasMergeTreeMaxBytesToUseCache();
    /**
     * <pre>
     * Limits the maximum size in bytes of the request that can use the cache of uncompressed data. The cache is not used for requests larger
     * than the specified value.
     * Use this setting in combination with [use_uncompressed_cache] setting.
     * Value must be greater than **0** (default: **192x10x1024x1024**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value merge_tree_max_bytes_to_use_cache = 53 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The mergeTreeMaxBytesToUseCache.
     */
    com.google.protobuf.Int64Value getMergeTreeMaxBytesToUseCache();
    /**
     * <pre>
     * Limits the maximum size in bytes of the request that can use the cache of uncompressed data. The cache is not used for requests larger
     * than the specified value.
     * Use this setting in combination with [use_uncompressed_cache] setting.
     * Value must be greater than **0** (default: **192x10x1024x1024**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value merge_tree_max_bytes_to_use_cache = 53 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMergeTreeMaxBytesToUseCacheOrBuilder();

    /**
     * <pre>
     * Limits the minimum number of rows to be read from a file to enable concurrent read.
     * If the number of rows to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
     * This setting has effect only for tables of the MergeTree family.
     * Value must be greater than **0** (default: **20x8192**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value merge_tree_min_rows_for_concurrent_read = 54 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the mergeTreeMinRowsForConcurrentRead field is set.
     */
    boolean hasMergeTreeMinRowsForConcurrentRead();
    /**
     * <pre>
     * Limits the minimum number of rows to be read from a file to enable concurrent read.
     * If the number of rows to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
     * This setting has effect only for tables of the MergeTree family.
     * Value must be greater than **0** (default: **20x8192**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value merge_tree_min_rows_for_concurrent_read = 54 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The mergeTreeMinRowsForConcurrentRead.
     */
    com.google.protobuf.Int64Value getMergeTreeMinRowsForConcurrentRead();
    /**
     * <pre>
     * Limits the minimum number of rows to be read from a file to enable concurrent read.
     * If the number of rows to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
     * This setting has effect only for tables of the MergeTree family.
     * Value must be greater than **0** (default: **20x8192**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value merge_tree_min_rows_for_concurrent_read = 54 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMergeTreeMinRowsForConcurrentReadOrBuilder();

    /**
     * <pre>
     * Limits the number of bytes to be read from a file to enable concurrent read.
     * If the number of bytes to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
     * This setting has effect only for tables of the MergeTree family.
     * Value must be greater than **0** (default: **24x10x1024x1024**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value merge_tree_min_bytes_for_concurrent_read = 55 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the mergeTreeMinBytesForConcurrentRead field is set.
     */
    boolean hasMergeTreeMinBytesForConcurrentRead();
    /**
     * <pre>
     * Limits the number of bytes to be read from a file to enable concurrent read.
     * If the number of bytes to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
     * This setting has effect only for tables of the MergeTree family.
     * Value must be greater than **0** (default: **24x10x1024x1024**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value merge_tree_min_bytes_for_concurrent_read = 55 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The mergeTreeMinBytesForConcurrentRead.
     */
    com.google.protobuf.Int64Value getMergeTreeMinBytesForConcurrentRead();
    /**
     * <pre>
     * Limits the number of bytes to be read from a file to enable concurrent read.
     * If the number of bytes to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
     * This setting has effect only for tables of the MergeTree family.
     * Value must be greater than **0** (default: **24x10x1024x1024**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value merge_tree_min_bytes_for_concurrent_read = 55 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMergeTreeMinBytesForConcurrentReadOrBuilder();

    /**
     * <pre>
     * Sets the threshold of RAM consumption (in bytes) after that the temporary data, collected during the **GROUP BY** operation, should be flushed to disk to limit the RAM comsumption.
     * By default, aggregation is done by employing hash table that resides in RAM.
     * A query can result in aggregation of huge data volumes that can lead to memory exhaustion and abortion of the query (see the [max_memory_usage] setting).
     * For such queries, you can use this setting to force ClickHouse to do flushing and complete aggregation successfully.
     * Minimal value and default value: **0**, **GROUP BY** in the external memory is disabled.
     * When using aggregation in external memory, it is recommended to set the value of this setting twice as low as the [max_memory_usage] setting value (by default, the maximum memory usage is limited to ten gigabytes).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
     * See also: the [distributed_aggregation_memory_efficient] setting.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_before_external_group_by = 74;</code>
     * @return Whether the maxBytesBeforeExternalGroupBy field is set.
     */
    boolean hasMaxBytesBeforeExternalGroupBy();
    /**
     * <pre>
     * Sets the threshold of RAM consumption (in bytes) after that the temporary data, collected during the **GROUP BY** operation, should be flushed to disk to limit the RAM comsumption.
     * By default, aggregation is done by employing hash table that resides in RAM.
     * A query can result in aggregation of huge data volumes that can lead to memory exhaustion and abortion of the query (see the [max_memory_usage] setting).
     * For such queries, you can use this setting to force ClickHouse to do flushing and complete aggregation successfully.
     * Minimal value and default value: **0**, **GROUP BY** in the external memory is disabled.
     * When using aggregation in external memory, it is recommended to set the value of this setting twice as low as the [max_memory_usage] setting value (by default, the maximum memory usage is limited to ten gigabytes).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
     * See also: the [distributed_aggregation_memory_efficient] setting.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_before_external_group_by = 74;</code>
     * @return The maxBytesBeforeExternalGroupBy.
     */
    com.google.protobuf.Int64Value getMaxBytesBeforeExternalGroupBy();
    /**
     * <pre>
     * Sets the threshold of RAM consumption (in bytes) after that the temporary data, collected during the **GROUP BY** operation, should be flushed to disk to limit the RAM comsumption.
     * By default, aggregation is done by employing hash table that resides in RAM.
     * A query can result in aggregation of huge data volumes that can lead to memory exhaustion and abortion of the query (see the [max_memory_usage] setting).
     * For such queries, you can use this setting to force ClickHouse to do flushing and complete aggregation successfully.
     * Minimal value and default value: **0**, **GROUP BY** in the external memory is disabled.
     * When using aggregation in external memory, it is recommended to set the value of this setting twice as low as the [max_memory_usage] setting value (by default, the maximum memory usage is limited to ten gigabytes).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
     * See also: the [distributed_aggregation_memory_efficient] setting.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_before_external_group_by = 74;</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxBytesBeforeExternalGroupByOrBuilder();

    /**
     * <pre>
     * This setting is equivalent of the [max_bytes_before_external_group_by] setting, except for it is for sort operation (**ORDER BY**), not aggregation.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_before_external_sort = 75;</code>
     * @return Whether the maxBytesBeforeExternalSort field is set.
     */
    boolean hasMaxBytesBeforeExternalSort();
    /**
     * <pre>
     * This setting is equivalent of the [max_bytes_before_external_group_by] setting, except for it is for sort operation (**ORDER BY**), not aggregation.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_before_external_sort = 75;</code>
     * @return The maxBytesBeforeExternalSort.
     */
    com.google.protobuf.Int64Value getMaxBytesBeforeExternalSort();
    /**
     * <pre>
     * This setting is equivalent of the [max_bytes_before_external_group_by] setting, except for it is for sort operation (**ORDER BY**), not aggregation.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_before_external_sort = 75;</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxBytesBeforeExternalSortOrBuilder();

    /**
     * <pre>
     * Sets the threshold of the number of keys, after that the two-level aggregation should be used.
     * Minimal value: **0**, threshold is not set (default: **10000**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value group_by_two_level_threshold = 76;</code>
     * @return Whether the groupByTwoLevelThreshold field is set.
     */
    boolean hasGroupByTwoLevelThreshold();
    /**
     * <pre>
     * Sets the threshold of the number of keys, after that the two-level aggregation should be used.
     * Minimal value: **0**, threshold is not set (default: **10000**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value group_by_two_level_threshold = 76;</code>
     * @return The groupByTwoLevelThreshold.
     */
    com.google.protobuf.Int64Value getGroupByTwoLevelThreshold();
    /**
     * <pre>
     * Sets the threshold of the number of keys, after that the two-level aggregation should be used.
     * Minimal value: **0**, threshold is not set (default: **10000**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value group_by_two_level_threshold = 76;</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getGroupByTwoLevelThresholdOrBuilder();

    /**
     * <pre>
     * Sets the threshold of the number of bytes, after that the two-level aggregation should be used.
     * Minimal value: **0**, threshold is not set (default: **100000000**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value group_by_two_level_threshold_bytes = 77;</code>
     * @return Whether the groupByTwoLevelThresholdBytes field is set.
     */
    boolean hasGroupByTwoLevelThresholdBytes();
    /**
     * <pre>
     * Sets the threshold of the number of bytes, after that the two-level aggregation should be used.
     * Minimal value: **0**, threshold is not set (default: **100000000**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value group_by_two_level_threshold_bytes = 77;</code>
     * @return The groupByTwoLevelThresholdBytes.
     */
    com.google.protobuf.Int64Value getGroupByTwoLevelThresholdBytes();
    /**
     * <pre>
     * Sets the threshold of the number of bytes, after that the two-level aggregation should be used.
     * Minimal value: **0**, threshold is not set (default: **100000000**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value group_by_two_level_threshold_bytes = 77;</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getGroupByTwoLevelThresholdBytesOrBuilder();

    /**
     * <pre>
     * Sets the priority of a query.
     * * **0**-priority is not used.
     * * **1**-the highest priority.
     * * and so on. The higher the number, the lower a query's priority.
     * This setting should be set up for each query individually.
     * If ClickHouse is working with the high-priority queries, and a low-priority query enters, then the low-priority query is paused until higher-priority queries are completed.
     * Minimal value and default value: **0**, priority is not used.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value priority = 56 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the priority field is set.
     */
    boolean hasPriority();
    /**
     * <pre>
     * Sets the priority of a query.
     * * **0**-priority is not used.
     * * **1**-the highest priority.
     * * and so on. The higher the number, the lower a query's priority.
     * This setting should be set up for each query individually.
     * If ClickHouse is working with the high-priority queries, and a low-priority query enters, then the low-priority query is paused until higher-priority queries are completed.
     * Minimal value and default value: **0**, priority is not used.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value priority = 56 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The priority.
     */
    com.google.protobuf.Int64Value getPriority();
    /**
     * <pre>
     * Sets the priority of a query.
     * * **0**-priority is not used.
     * * **1**-the highest priority.
     * * and so on. The higher the number, the lower a query's priority.
     * This setting should be set up for each query individually.
     * If ClickHouse is working with the high-priority queries, and a low-priority query enters, then the low-priority query is paused until higher-priority queries are completed.
     * Minimal value and default value: **0**, priority is not used.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value priority = 56 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getPriorityOrBuilder();

    /**
     * <pre>
     * Limits the maximum number of threads to process the request (setting does not take threads that read data from remote servers into account).
     * This setting applies to threads that perform the same stages of the query processing pipeline in parallel.
     * Minimal value and default value: **0** (the thread number is calculated automatically based on the number of physical CPU cores, no HyperThreading cores are taken into account).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_threads).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_threads = 8 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the maxThreads field is set.
     */
    boolean hasMaxThreads();
    /**
     * <pre>
     * Limits the maximum number of threads to process the request (setting does not take threads that read data from remote servers into account).
     * This setting applies to threads that perform the same stages of the query processing pipeline in parallel.
     * Minimal value and default value: **0** (the thread number is calculated automatically based on the number of physical CPU cores, no HyperThreading cores are taken into account).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_threads).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_threads = 8 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The maxThreads.
     */
    com.google.protobuf.Int64Value getMaxThreads();
    /**
     * <pre>
     * Limits the maximum number of threads to process the request (setting does not take threads that read data from remote servers into account).
     * This setting applies to threads that perform the same stages of the query processing pipeline in parallel.
     * Minimal value and default value: **0** (the thread number is calculated automatically based on the number of physical CPU cores, no HyperThreading cores are taken into account).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_threads).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_threads = 8 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxThreadsOrBuilder();

    /**
     * <pre>
     * Limits the maximum memory usage (in bytes) for processing of a single user's query on a single server.
     * This setting does not take server's free RAM amount or total RAM amount into account.
     * This limitation is enforced for any user's single query on a single server.
     * Minimal value: **0**, no limitation is set.
     * Value that is set in the ClickHouse default config file: **10737418240** (10 GB).
     * If you use [max_bytes_before_external_group_by] or [max_bytes_before_external_sort] setting, then it is recommended to set their values twice as low as [max_memory_usage] setting value.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#settings_max_memory_usage).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_memory_usage = 11 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxMemoryUsage field is set.
     */
    boolean hasMaxMemoryUsage();
    /**
     * <pre>
     * Limits the maximum memory usage (in bytes) for processing of a single user's query on a single server.
     * This setting does not take server's free RAM amount or total RAM amount into account.
     * This limitation is enforced for any user's single query on a single server.
     * Minimal value: **0**, no limitation is set.
     * Value that is set in the ClickHouse default config file: **10737418240** (10 GB).
     * If you use [max_bytes_before_external_group_by] or [max_bytes_before_external_sort] setting, then it is recommended to set their values twice as low as [max_memory_usage] setting value.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#settings_max_memory_usage).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_memory_usage = 11 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxMemoryUsage.
     */
    com.google.protobuf.Int64Value getMaxMemoryUsage();
    /**
     * <pre>
     * Limits the maximum memory usage (in bytes) for processing of a single user's query on a single server.
     * This setting does not take server's free RAM amount or total RAM amount into account.
     * This limitation is enforced for any user's single query on a single server.
     * Minimal value: **0**, no limitation is set.
     * Value that is set in the ClickHouse default config file: **10737418240** (10 GB).
     * If you use [max_bytes_before_external_group_by] or [max_bytes_before_external_sort] setting, then it is recommended to set their values twice as low as [max_memory_usage] setting value.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#settings_max_memory_usage).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_memory_usage = 11 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxMemoryUsageOrBuilder();

    /**
     * <pre>
     * Limits the maximum memory usage (in bytes) for processing of user's queries on a single server.
     * This setting does not take server's free RAM amount or total RAM amount into account.
     * This limitation is enforced for all queries that belong to one user and run simultaneously on a single server.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_memory_usage_for_user = 12 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxMemoryUsageForUser field is set.
     */
    boolean hasMaxMemoryUsageForUser();
    /**
     * <pre>
     * Limits the maximum memory usage (in bytes) for processing of user's queries on a single server.
     * This setting does not take server's free RAM amount or total RAM amount into account.
     * This limitation is enforced for all queries that belong to one user and run simultaneously on a single server.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_memory_usage_for_user = 12 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxMemoryUsageForUser.
     */
    com.google.protobuf.Int64Value getMaxMemoryUsageForUser();
    /**
     * <pre>
     * Limits the maximum memory usage (in bytes) for processing of user's queries on a single server.
     * This setting does not take server's free RAM amount or total RAM amount into account.
     * This limitation is enforced for all queries that belong to one user and run simultaneously on a single server.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_memory_usage_for_user = 12 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxMemoryUsageForUserOrBuilder();

    /**
     * <pre>
     * The maximum speed of data exchange over the network in bytes per second for a query.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_network_bandwidth = 57;</code>
     * @return Whether the maxNetworkBandwidth field is set.
     */
    boolean hasMaxNetworkBandwidth();
    /**
     * <pre>
     * The maximum speed of data exchange over the network in bytes per second for a query.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_network_bandwidth = 57;</code>
     * @return The maxNetworkBandwidth.
     */
    com.google.protobuf.Int64Value getMaxNetworkBandwidth();
    /**
     * <pre>
     * The maximum speed of data exchange over the network in bytes per second for a query.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_network_bandwidth = 57;</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxNetworkBandwidthOrBuilder();

    /**
     * <pre>
     * The maximum speed of data exchange over the network in bytes per second for all concurrently running user queries.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_network_bandwidth_for_user = 58;</code>
     * @return Whether the maxNetworkBandwidthForUser field is set.
     */
    boolean hasMaxNetworkBandwidthForUser();
    /**
     * <pre>
     * The maximum speed of data exchange over the network in bytes per second for all concurrently running user queries.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_network_bandwidth_for_user = 58;</code>
     * @return The maxNetworkBandwidthForUser.
     */
    com.google.protobuf.Int64Value getMaxNetworkBandwidthForUser();
    /**
     * <pre>
     * The maximum speed of data exchange over the network in bytes per second for all concurrently running user queries.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_network_bandwidth_for_user = 58;</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxNetworkBandwidthForUserOrBuilder();

    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/ru/operations/settings/query-complexity/#max-partitions-per-insert-block).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_partitions_per_insert_block = 102;</code>
     * @return Whether the maxPartitionsPerInsertBlock field is set.
     */
    boolean hasMaxPartitionsPerInsertBlock();
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/ru/operations/settings/query-complexity/#max-partitions-per-insert-block).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_partitions_per_insert_block = 102;</code>
     * @return The maxPartitionsPerInsertBlock.
     */
    com.google.protobuf.Int64Value getMaxPartitionsPerInsertBlock();
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/ru/operations/settings/query-complexity/#max-partitions-per-insert-block).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_partitions_per_insert_block = 102;</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxPartitionsPerInsertBlockOrBuilder();

    /**
     * <pre>
     * The maximum number of concurrent requests per user.
     * Default value: 0 (no limit).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_concurrent_queries_for_user = 103;</code>
     * @return Whether the maxConcurrentQueriesForUser field is set.
     */
    boolean hasMaxConcurrentQueriesForUser();
    /**
     * <pre>
     * The maximum number of concurrent requests per user.
     * Default value: 0 (no limit).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_concurrent_queries_for_user = 103;</code>
     * @return The maxConcurrentQueriesForUser.
     */
    com.google.protobuf.Int64Value getMaxConcurrentQueriesForUser();
    /**
     * <pre>
     * The maximum number of concurrent requests per user.
     * Default value: 0 (no limit).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_concurrent_queries_for_user = 103;</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxConcurrentQueriesForUserOrBuilder();

    /**
     * <pre>
     * If enabled, query is not executed if the ClickHouse can't use index by date.
     * This setting has effect only for tables of the MergeTree family.
     * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by date).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-force_index_by_date).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue force_index_by_date = 59;</code>
     * @return Whether the forceIndexByDate field is set.
     */
    boolean hasForceIndexByDate();
    /**
     * <pre>
     * If enabled, query is not executed if the ClickHouse can't use index by date.
     * This setting has effect only for tables of the MergeTree family.
     * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by date).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-force_index_by_date).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue force_index_by_date = 59;</code>
     * @return The forceIndexByDate.
     */
    com.google.protobuf.BoolValue getForceIndexByDate();
    /**
     * <pre>
     * If enabled, query is not executed if the ClickHouse can't use index by date.
     * This setting has effect only for tables of the MergeTree family.
     * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by date).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-force_index_by_date).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue force_index_by_date = 59;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getForceIndexByDateOrBuilder();

    /**
     * <pre>
     * If enabled, query is not executed if the ClickHouse can't use index by primary key.
     * This setting has effect only for tables of the MergeTree family.
     * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by primary key).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#force-primary-key).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue force_primary_key = 60;</code>
     * @return Whether the forcePrimaryKey field is set.
     */
    boolean hasForcePrimaryKey();
    /**
     * <pre>
     * If enabled, query is not executed if the ClickHouse can't use index by primary key.
     * This setting has effect only for tables of the MergeTree family.
     * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by primary key).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#force-primary-key).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue force_primary_key = 60;</code>
     * @return The forcePrimaryKey.
     */
    com.google.protobuf.BoolValue getForcePrimaryKey();
    /**
     * <pre>
     * If enabled, query is not executed if the ClickHouse can't use index by primary key.
     * This setting has effect only for tables of the MergeTree family.
     * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by primary key).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#force-primary-key).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue force_primary_key = 60;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getForcePrimaryKeyOrBuilder();

    /**
     * <pre>
     * Limits the maximum number of rows that can be read from a table when running a query.
     * Minimal value and default value: **0**, no limitation is set.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-rows-to-read).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_to_read = 13 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxRowsToRead field is set.
     */
    boolean hasMaxRowsToRead();
    /**
     * <pre>
     * Limits the maximum number of rows that can be read from a table when running a query.
     * Minimal value and default value: **0**, no limitation is set.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-rows-to-read).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_to_read = 13 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxRowsToRead.
     */
    com.google.protobuf.Int64Value getMaxRowsToRead();
    /**
     * <pre>
     * Limits the maximum number of rows that can be read from a table when running a query.
     * Minimal value and default value: **0**, no limitation is set.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-rows-to-read).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_to_read = 13 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxRowsToReadOrBuilder();

    /**
     * <pre>
     * Limits the maximum number of bytes (uncompressed data) that can be read from a table when running a query.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_to_read = 14 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxBytesToRead field is set.
     */
    boolean hasMaxBytesToRead();
    /**
     * <pre>
     * Limits the maximum number of bytes (uncompressed data) that can be read from a table when running a query.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_to_read = 14 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxBytesToRead.
     */
    com.google.protobuf.Int64Value getMaxBytesToRead();
    /**
     * <pre>
     * Limits the maximum number of bytes (uncompressed data) that can be read from a table when running a query.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_to_read = 14 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxBytesToReadOrBuilder();

    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while reading the data.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode read_overflow_mode = 15;</code>
     * @return The enum numeric value on the wire for readOverflowMode.
     */
    int getReadOverflowModeValue();
    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while reading the data.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode read_overflow_mode = 15;</code>
     * @return The readOverflowMode.
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode getReadOverflowMode();

    /**
     * <pre>
     * Limits the maximum number of unique keys received from aggregation function.
     * This setting helps to reduce RAM consumption while doing aggregation.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_to_group_by = 16 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxRowsToGroupBy field is set.
     */
    boolean hasMaxRowsToGroupBy();
    /**
     * <pre>
     * Limits the maximum number of unique keys received from aggregation function.
     * This setting helps to reduce RAM consumption while doing aggregation.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_to_group_by = 16 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxRowsToGroupBy.
     */
    com.google.protobuf.Int64Value getMaxRowsToGroupBy();
    /**
     * <pre>
     * Limits the maximum number of unique keys received from aggregation function.
     * This setting helps to reduce RAM consumption while doing aggregation.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_to_group_by = 16 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxRowsToGroupByOrBuilder();

    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing aggregation.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * * **any**-perform approximate **GROUP BY** operation by continuing aggregation for the keys that got into the set, but don't add new keys to the set.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.GroupByOverflowMode group_by_overflow_mode = 17;</code>
     * @return The enum numeric value on the wire for groupByOverflowMode.
     */
    int getGroupByOverflowModeValue();
    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing aggregation.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * * **any**-perform approximate **GROUP BY** operation by continuing aggregation for the keys that got into the set, but don't add new keys to the set.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.GroupByOverflowMode group_by_overflow_mode = 17;</code>
     * @return The groupByOverflowMode.
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.GroupByOverflowMode getGroupByOverflowMode();

    /**
     * <pre>
     * Limits the maximum number of rows that can be read from a table for sorting.
     * This setting helps to reduce RAM consumption.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_to_sort = 18 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxRowsToSort field is set.
     */
    boolean hasMaxRowsToSort();
    /**
     * <pre>
     * Limits the maximum number of rows that can be read from a table for sorting.
     * This setting helps to reduce RAM consumption.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_to_sort = 18 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxRowsToSort.
     */
    com.google.protobuf.Int64Value getMaxRowsToSort();
    /**
     * <pre>
     * Limits the maximum number of rows that can be read from a table for sorting.
     * This setting helps to reduce RAM consumption.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_to_sort = 18 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxRowsToSortOrBuilder();

    /**
     * <pre>
     * Limits the maximum number of bytes (uncompressed data) that can be read from a table for sorting.
     * This setting helps to reduce RAM consumption.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_to_sort = 19 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxBytesToSort field is set.
     */
    boolean hasMaxBytesToSort();
    /**
     * <pre>
     * Limits the maximum number of bytes (uncompressed data) that can be read from a table for sorting.
     * This setting helps to reduce RAM consumption.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_to_sort = 19 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxBytesToSort.
     */
    com.google.protobuf.Int64Value getMaxBytesToSort();
    /**
     * <pre>
     * Limits the maximum number of bytes (uncompressed data) that can be read from a table for sorting.
     * This setting helps to reduce RAM consumption.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_to_sort = 19 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxBytesToSortOrBuilder();

    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while sorting.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode sort_overflow_mode = 20;</code>
     * @return The enum numeric value on the wire for sortOverflowMode.
     */
    int getSortOverflowModeValue();
    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while sorting.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode sort_overflow_mode = 20;</code>
     * @return The sortOverflowMode.
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode getSortOverflowMode();

    /**
     * <pre>
     * Limits the number of rows in the result.
     * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_result_rows = 21 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxResultRows field is set.
     */
    boolean hasMaxResultRows();
    /**
     * <pre>
     * Limits the number of rows in the result.
     * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_result_rows = 21 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxResultRows.
     */
    com.google.protobuf.Int64Value getMaxResultRows();
    /**
     * <pre>
     * Limits the number of rows in the result.
     * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_result_rows = 21 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxResultRowsOrBuilder();

    /**
     * <pre>
     * Limits the number of bytes in the result.
     * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_result_bytes = 22 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxResultBytes field is set.
     */
    boolean hasMaxResultBytes();
    /**
     * <pre>
     * Limits the number of bytes in the result.
     * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_result_bytes = 22 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxResultBytes.
     */
    com.google.protobuf.Int64Value getMaxResultBytes();
    /**
     * <pre>
     * Limits the number of bytes in the result.
     * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_result_bytes = 22 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxResultBytesOrBuilder();

    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while forming result.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode result_overflow_mode = 23;</code>
     * @return The enum numeric value on the wire for resultOverflowMode.
     */
    int getResultOverflowModeValue();
    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while forming result.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode result_overflow_mode = 23;</code>
     * @return The resultOverflowMode.
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode getResultOverflowMode();

    /**
     * <pre>
     * Limits the maximum number of different rows when using **DISTINCT**.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_in_distinct = 24 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxRowsInDistinct field is set.
     */
    boolean hasMaxRowsInDistinct();
    /**
     * <pre>
     * Limits the maximum number of different rows when using **DISTINCT**.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_in_distinct = 24 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxRowsInDistinct.
     */
    com.google.protobuf.Int64Value getMaxRowsInDistinct();
    /**
     * <pre>
     * Limits the maximum number of different rows when using **DISTINCT**.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_in_distinct = 24 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxRowsInDistinctOrBuilder();

    /**
     * <pre>
     * Limits the maximum size of a hash table in bytes (uncompressed data) when using **DISTINCT**.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_in_distinct = 25 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxBytesInDistinct field is set.
     */
    boolean hasMaxBytesInDistinct();
    /**
     * <pre>
     * Limits the maximum size of a hash table in bytes (uncompressed data) when using **DISTINCT**.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_in_distinct = 25 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxBytesInDistinct.
     */
    com.google.protobuf.Int64Value getMaxBytesInDistinct();
    /**
     * <pre>
     * Limits the maximum size of a hash table in bytes (uncompressed data) when using **DISTINCT**.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_in_distinct = 25 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxBytesInDistinctOrBuilder();

    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing **DISCTINCT**.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode distinct_overflow_mode = 26;</code>
     * @return The enum numeric value on the wire for distinctOverflowMode.
     */
    int getDistinctOverflowModeValue();
    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing **DISCTINCT**.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode distinct_overflow_mode = 26;</code>
     * @return The distinctOverflowMode.
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode getDistinctOverflowMode();

    /**
     * <pre>
     * Limits the maximum number of rows that can be passed to a remote server or saved in a temporary table when using **GLOBAL IN**.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_to_transfer = 27 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxRowsToTransfer field is set.
     */
    boolean hasMaxRowsToTransfer();
    /**
     * <pre>
     * Limits the maximum number of rows that can be passed to a remote server or saved in a temporary table when using **GLOBAL IN**.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_to_transfer = 27 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxRowsToTransfer.
     */
    com.google.protobuf.Int64Value getMaxRowsToTransfer();
    /**
     * <pre>
     * Limits the maximum number of rows that can be passed to a remote server or saved in a temporary table when using **GLOBAL IN**.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_to_transfer = 27 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxRowsToTransferOrBuilder();

    /**
     * <pre>
     * Limits the maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary
     * table when using **GLOBAL IN**.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_to_transfer = 28 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxBytesToTransfer field is set.
     */
    boolean hasMaxBytesToTransfer();
    /**
     * <pre>
     * Limits the maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary
     * table when using **GLOBAL IN**.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_to_transfer = 28 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxBytesToTransfer.
     */
    com.google.protobuf.Int64Value getMaxBytesToTransfer();
    /**
     * <pre>
     * Limits the maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary
     * table when using **GLOBAL IN**.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_to_transfer = 28 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxBytesToTransferOrBuilder();

    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing transfers.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode transfer_overflow_mode = 29;</code>
     * @return The enum numeric value on the wire for transferOverflowMode.
     */
    int getTransferOverflowModeValue();
    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing transfers.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode transfer_overflow_mode = 29;</code>
     * @return The transferOverflowMode.
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode getTransferOverflowMode();

    /**
     * <pre>
     * Limits the maximum query execution time in milliseconds.
     * At this moment, this limitation is not checked when passing one of the sorting stages, as well as merging and finalizing aggregation funictions.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_execution_time = 30 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxExecutionTime field is set.
     */
    boolean hasMaxExecutionTime();
    /**
     * <pre>
     * Limits the maximum query execution time in milliseconds.
     * At this moment, this limitation is not checked when passing one of the sorting stages, as well as merging and finalizing aggregation funictions.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_execution_time = 30 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxExecutionTime.
     */
    com.google.protobuf.Int64Value getMaxExecutionTime();
    /**
     * <pre>
     * Limits the maximum query execution time in milliseconds.
     * At this moment, this limitation is not checked when passing one of the sorting stages, as well as merging and finalizing aggregation funictions.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_execution_time = 30 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxExecutionTimeOrBuilder();

    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) of execution time.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode timeout_overflow_mode = 31;</code>
     * @return The enum numeric value on the wire for timeoutOverflowMode.
     */
    int getTimeoutOverflowModeValue();
    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) of execution time.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode timeout_overflow_mode = 31;</code>
     * @return The timeoutOverflowMode.
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode getTimeoutOverflowMode();

    /**
     * <pre>
     * Limit on the number of rows in the set resulting from the execution of the IN section.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_in_set = 87 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxRowsInSet field is set.
     */
    boolean hasMaxRowsInSet();
    /**
     * <pre>
     * Limit on the number of rows in the set resulting from the execution of the IN section.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_in_set = 87 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxRowsInSet.
     */
    com.google.protobuf.Int64Value getMaxRowsInSet();
    /**
     * <pre>
     * Limit on the number of rows in the set resulting from the execution of the IN section.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_in_set = 87 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxRowsInSetOrBuilder();

    /**
     * <pre>
     * Limit on the number of bytes in the set resulting from the execution of the IN section.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_in_set = 88 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxBytesInSet field is set.
     */
    boolean hasMaxBytesInSet();
    /**
     * <pre>
     * Limit on the number of bytes in the set resulting from the execution of the IN section.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_in_set = 88 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxBytesInSet.
     */
    com.google.protobuf.Int64Value getMaxBytesInSet();
    /**
     * <pre>
     * Limit on the number of bytes in the set resulting from the execution of the IN section.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_in_set = 88 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxBytesInSetOrBuilder();

    /**
     * <pre>
     * Determine the behavior on exceeding max_rows_in_set or max_bytes_in_set limit.
     * Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode set_overflow_mode = 89;</code>
     * @return The enum numeric value on the wire for setOverflowMode.
     */
    int getSetOverflowModeValue();
    /**
     * <pre>
     * Determine the behavior on exceeding max_rows_in_set or max_bytes_in_set limit.
     * Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode set_overflow_mode = 89;</code>
     * @return The setOverflowMode.
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode getSetOverflowMode();

    /**
     * <pre>
     * Limit on maximum size of the hash table for JOIN, in rows.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_in_join = 90 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxRowsInJoin field is set.
     */
    boolean hasMaxRowsInJoin();
    /**
     * <pre>
     * Limit on maximum size of the hash table for JOIN, in rows.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_in_join = 90 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxRowsInJoin.
     */
    com.google.protobuf.Int64Value getMaxRowsInJoin();
    /**
     * <pre>
     * Limit on maximum size of the hash table for JOIN, in rows.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_in_join = 90 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxRowsInJoinOrBuilder();

    /**
     * <pre>
     * Limit on maximum size of the hash table for JOIN, in bytes.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_in_join = 91 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxBytesInJoin field is set.
     */
    boolean hasMaxBytesInJoin();
    /**
     * <pre>
     * Limit on maximum size of the hash table for JOIN, in bytes.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_in_join = 91 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxBytesInJoin.
     */
    com.google.protobuf.Int64Value getMaxBytesInJoin();
    /**
     * <pre>
     * Limit on maximum size of the hash table for JOIN, in bytes.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_in_join = 91 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxBytesInJoinOrBuilder();

    /**
     * <pre>
     * Determine the behavior on exceeding max_rows_in_join or max_bytes_in_join limit.
     * Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode join_overflow_mode = 92;</code>
     * @return The enum numeric value on the wire for joinOverflowMode.
     */
    int getJoinOverflowModeValue();
    /**
     * <pre>
     * Determine the behavior on exceeding max_rows_in_join or max_bytes_in_join limit.
     * Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode join_overflow_mode = 92;</code>
     * @return The joinOverflowMode.
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode getJoinOverflowMode();

    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-join_algorithm).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserSettings.JoinAlgorithm join_algorithm = 104;</code>
     * @return A list containing the joinAlgorithm.
     */
    java.util.List<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.JoinAlgorithm> getJoinAlgorithmList();
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-join_algorithm).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserSettings.JoinAlgorithm join_algorithm = 104;</code>
     * @return The count of joinAlgorithm.
     */
    int getJoinAlgorithmCount();
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-join_algorithm).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserSettings.JoinAlgorithm join_algorithm = 104;</code>
     * @param index The index of the element to return.
     * @return The joinAlgorithm at the given index.
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.JoinAlgorithm getJoinAlgorithm(int index);
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-join_algorithm).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserSettings.JoinAlgorithm join_algorithm = 104;</code>
     * @return A list containing the enum numeric values on the wire for joinAlgorithm.
     */
    java.util.List<java.lang.Integer>
    getJoinAlgorithmValueList();
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-join_algorithm).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserSettings.JoinAlgorithm join_algorithm = 104;</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of joinAlgorithm at the given index.
     */
    int getJoinAlgorithmValue(int index);

    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#any_join_distinct_right_table_keys).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue any_join_distinct_right_table_keys = 105;</code>
     * @return Whether the anyJoinDistinctRightTableKeys field is set.
     */
    boolean hasAnyJoinDistinctRightTableKeys();
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#any_join_distinct_right_table_keys).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue any_join_distinct_right_table_keys = 105;</code>
     * @return The anyJoinDistinctRightTableKeys.
     */
    com.google.protobuf.BoolValue getAnyJoinDistinctRightTableKeys();
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#any_join_distinct_right_table_keys).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue any_join_distinct_right_table_keys = 105;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getAnyJoinDistinctRightTableKeysOrBuilder();

    /**
     * <pre>
     * Limits the maximum number of columns that can be read from a table in a single query.
     * If the query requires to read more columns to complete, then it will be aborted.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_columns_to_read = 32 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxColumnsToRead field is set.
     */
    boolean hasMaxColumnsToRead();
    /**
     * <pre>
     * Limits the maximum number of columns that can be read from a table in a single query.
     * If the query requires to read more columns to complete, then it will be aborted.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_columns_to_read = 32 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxColumnsToRead.
     */
    com.google.protobuf.Int64Value getMaxColumnsToRead();
    /**
     * <pre>
     * Limits the maximum number of columns that can be read from a table in a single query.
     * If the query requires to read more columns to complete, then it will be aborted.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_columns_to_read = 32 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxColumnsToReadOrBuilder();

    /**
     * <pre>
     * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_temporary_columns = 33 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxTemporaryColumns field is set.
     */
    boolean hasMaxTemporaryColumns();
    /**
     * <pre>
     * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_temporary_columns = 33 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxTemporaryColumns.
     */
    com.google.protobuf.Int64Value getMaxTemporaryColumns();
    /**
     * <pre>
     * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_temporary_columns = 33 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxTemporaryColumnsOrBuilder();

    /**
     * <pre>
     * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_temporary_non_const_columns = 34 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxTemporaryNonConstColumns field is set.
     */
    boolean hasMaxTemporaryNonConstColumns();
    /**
     * <pre>
     * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_temporary_non_const_columns = 34 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxTemporaryNonConstColumns.
     */
    com.google.protobuf.Int64Value getMaxTemporaryNonConstColumns();
    /**
     * <pre>
     * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_temporary_non_const_columns = 34 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxTemporaryNonConstColumnsOrBuilder();

    /**
     * <pre>
     * Limits the size of the part of a query that can be transferred to RAM for parsing with the SQL parser, in bytes.
     * Value must be greater than **0** (default: **262144**).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_query_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_query_size = 35 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the maxQuerySize field is set.
     */
    boolean hasMaxQuerySize();
    /**
     * <pre>
     * Limits the size of the part of a query that can be transferred to RAM for parsing with the SQL parser, in bytes.
     * Value must be greater than **0** (default: **262144**).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_query_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_query_size = 35 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The maxQuerySize.
     */
    com.google.protobuf.Int64Value getMaxQuerySize();
    /**
     * <pre>
     * Limits the size of the part of a query that can be transferred to RAM for parsing with the SQL parser, in bytes.
     * Value must be greater than **0** (default: **262144**).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_query_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_query_size = 35 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxQuerySizeOrBuilder();

    /**
     * <pre>
     * Limits the maximum depth of query syntax tree.
     * Executing a big and complex query may result in building a syntax tree of enormous depth.
     * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
     * For example, the **SELECT *** query may result in more complex and deeper syntax tree, compared to the **SELECT ... WHERE ...** query, containing constraints and conditions, in the most cases.
     * A user can be forced to construct more optimized queries, if this setting is used.
     * Value must be greater than **0** (default: **1000**).
     * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-depth).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_ast_depth = 36 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the maxAstDepth field is set.
     */
    boolean hasMaxAstDepth();
    /**
     * <pre>
     * Limits the maximum depth of query syntax tree.
     * Executing a big and complex query may result in building a syntax tree of enormous depth.
     * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
     * For example, the **SELECT *** query may result in more complex and deeper syntax tree, compared to the **SELECT ... WHERE ...** query, containing constraints and conditions, in the most cases.
     * A user can be forced to construct more optimized queries, if this setting is used.
     * Value must be greater than **0** (default: **1000**).
     * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-depth).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_ast_depth = 36 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The maxAstDepth.
     */
    com.google.protobuf.Int64Value getMaxAstDepth();
    /**
     * <pre>
     * Limits the maximum depth of query syntax tree.
     * Executing a big and complex query may result in building a syntax tree of enormous depth.
     * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
     * For example, the **SELECT *** query may result in more complex and deeper syntax tree, compared to the **SELECT ... WHERE ...** query, containing constraints and conditions, in the most cases.
     * A user can be forced to construct more optimized queries, if this setting is used.
     * Value must be greater than **0** (default: **1000**).
     * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-depth).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_ast_depth = 36 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxAstDepthOrBuilder();

    /**
     * <pre>
     * Limits the maximum size of query syntax tree in number of nodes.
     * Executing a big and complex query may result in building a syntax tree of enormous size.
     * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
     * Value must be greater than **0** (default: **50000**).
     * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-elements).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_ast_elements = 37 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the maxAstElements field is set.
     */
    boolean hasMaxAstElements();
    /**
     * <pre>
     * Limits the maximum size of query syntax tree in number of nodes.
     * Executing a big and complex query may result in building a syntax tree of enormous size.
     * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
     * Value must be greater than **0** (default: **50000**).
     * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-elements).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_ast_elements = 37 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The maxAstElements.
     */
    com.google.protobuf.Int64Value getMaxAstElements();
    /**
     * <pre>
     * Limits the maximum size of query syntax tree in number of nodes.
     * Executing a big and complex query may result in building a syntax tree of enormous size.
     * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
     * Value must be greater than **0** (default: **50000**).
     * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-elements).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_ast_elements = 37 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxAstElementsOrBuilder();

    /**
     * <pre>
     * Limits the maximum size of query syntax tree in number of nodes after expansion of aliases and the asterisk values.
     * Executing a big and complex query may result in building a syntax tree of enormous size.
     * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
     * Value must be greater than **0** (default: **500000**).
     * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_expanded_ast_elements = 38 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the maxExpandedAstElements field is set.
     */
    boolean hasMaxExpandedAstElements();
    /**
     * <pre>
     * Limits the maximum size of query syntax tree in number of nodes after expansion of aliases and the asterisk values.
     * Executing a big and complex query may result in building a syntax tree of enormous size.
     * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
     * Value must be greater than **0** (default: **500000**).
     * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_expanded_ast_elements = 38 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The maxExpandedAstElements.
     */
    com.google.protobuf.Int64Value getMaxExpandedAstElements();
    /**
     * <pre>
     * Limits the maximum size of query syntax tree in number of nodes after expansion of aliases and the asterisk values.
     * Executing a big and complex query may result in building a syntax tree of enormous size.
     * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
     * Value must be greater than **0** (default: **500000**).
     * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_expanded_ast_elements = 38 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxExpandedAstElementsOrBuilder();

    /**
     * <pre>
     * Minimal execution speed in rows per second.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_execution_speed = 84 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the minExecutionSpeed field is set.
     */
    boolean hasMinExecutionSpeed();
    /**
     * <pre>
     * Minimal execution speed in rows per second.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_execution_speed = 84 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The minExecutionSpeed.
     */
    com.google.protobuf.Int64Value getMinExecutionSpeed();
    /**
     * <pre>
     * Minimal execution speed in rows per second.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_execution_speed = 84 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMinExecutionSpeedOrBuilder();

    /**
     * <pre>
     * Minimal execution speed in bytes per second.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_execution_speed_bytes = 85 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the minExecutionSpeedBytes field is set.
     */
    boolean hasMinExecutionSpeedBytes();
    /**
     * <pre>
     * Minimal execution speed in bytes per second.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_execution_speed_bytes = 85 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The minExecutionSpeedBytes.
     */
    com.google.protobuf.Int64Value getMinExecutionSpeedBytes();
    /**
     * <pre>
     * Minimal execution speed in bytes per second.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_execution_speed_bytes = 85 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMinExecutionSpeedBytesOrBuilder();

    /**
     * <pre>
     * Aggregate function to use for implementation of count(DISTINCT ...).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.CountDistinctImplementation count_distinct_implementation = 86;</code>
     * @return The enum numeric value on the wire for countDistinctImplementation.
     */
    int getCountDistinctImplementationValue();
    /**
     * <pre>
     * Aggregate function to use for implementation of count(DISTINCT ...).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.CountDistinctImplementation count_distinct_implementation = 86;</code>
     * @return The countDistinctImplementation.
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.CountDistinctImplementation getCountDistinctImplementation();

    /**
     * <pre>
     * Enables or disables SQL parser if the fast stream parser cannot parse the data.
     * Enable this setting, if the data that you want to insert into a table contains SQL expressions.
     * For example, the stream parser is unable to parse a value that contains **now()** expression; therefore an **INSERT** query for this value will fail and no data will be inserted into a table.
     * With enabled SQL parser, this expression is parsed correctly: the **now()** expression will be parsed as SQL function, interpreted, and the current date and time will be inserted into the table as a result.
     * This setting has effect only if you use [Values](https://clickhouse.com/docs/en/interfaces/formats/#data-format-values) format when inserting data.
     * Default value: **true** (SQL parser is enabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-input_format_values_interpret_expressions).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_values_interpret_expressions = 61;</code>
     * @return Whether the inputFormatValuesInterpretExpressions field is set.
     */
    boolean hasInputFormatValuesInterpretExpressions();
    /**
     * <pre>
     * Enables or disables SQL parser if the fast stream parser cannot parse the data.
     * Enable this setting, if the data that you want to insert into a table contains SQL expressions.
     * For example, the stream parser is unable to parse a value that contains **now()** expression; therefore an **INSERT** query for this value will fail and no data will be inserted into a table.
     * With enabled SQL parser, this expression is parsed correctly: the **now()** expression will be parsed as SQL function, interpreted, and the current date and time will be inserted into the table as a result.
     * This setting has effect only if you use [Values](https://clickhouse.com/docs/en/interfaces/formats/#data-format-values) format when inserting data.
     * Default value: **true** (SQL parser is enabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-input_format_values_interpret_expressions).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_values_interpret_expressions = 61;</code>
     * @return The inputFormatValuesInterpretExpressions.
     */
    com.google.protobuf.BoolValue getInputFormatValuesInterpretExpressions();
    /**
     * <pre>
     * Enables or disables SQL parser if the fast stream parser cannot parse the data.
     * Enable this setting, if the data that you want to insert into a table contains SQL expressions.
     * For example, the stream parser is unable to parse a value that contains **now()** expression; therefore an **INSERT** query for this value will fail and no data will be inserted into a table.
     * With enabled SQL parser, this expression is parsed correctly: the **now()** expression will be parsed as SQL function, interpreted, and the current date and time will be inserted into the table as a result.
     * This setting has effect only if you use [Values](https://clickhouse.com/docs/en/interfaces/formats/#data-format-values) format when inserting data.
     * Default value: **true** (SQL parser is enabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-input_format_values_interpret_expressions).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_values_interpret_expressions = 61;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getInputFormatValuesInterpretExpressionsOrBuilder();

    /**
     * <pre>
     * Enables or disables replacing omitted input values with default values of the respective columns when performing **INSERT** queries.
     * Default value: **true** (replacing is enabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_defaults_for_omitted_fields = 62;</code>
     * @return Whether the inputFormatDefaultsForOmittedFields field is set.
     */
    boolean hasInputFormatDefaultsForOmittedFields();
    /**
     * <pre>
     * Enables or disables replacing omitted input values with default values of the respective columns when performing **INSERT** queries.
     * Default value: **true** (replacing is enabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_defaults_for_omitted_fields = 62;</code>
     * @return The inputFormatDefaultsForOmittedFields.
     */
    com.google.protobuf.BoolValue getInputFormatDefaultsForOmittedFields();
    /**
     * <pre>
     * Enables or disables replacing omitted input values with default values of the respective columns when performing **INSERT** queries.
     * Default value: **true** (replacing is enabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_defaults_for_omitted_fields = 62;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getInputFormatDefaultsForOmittedFieldsOrBuilder();

    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_null_as_default).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_null_as_default = 106;</code>
     * @return Whether the inputFormatNullAsDefault field is set.
     */
    boolean hasInputFormatNullAsDefault();
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_null_as_default).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_null_as_default = 106;</code>
     * @return The inputFormatNullAsDefault.
     */
    com.google.protobuf.BoolValue getInputFormatNullAsDefault();
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_null_as_default).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_null_as_default = 106;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getInputFormatNullAsDefaultOrBuilder();

    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#date_time_input_format).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.DateTimeInputFormat date_time_input_format = 107;</code>
     * @return The enum numeric value on the wire for dateTimeInputFormat.
     */
    int getDateTimeInputFormatValue();
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#date_time_input_format).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.DateTimeInputFormat date_time_input_format = 107;</code>
     * @return The dateTimeInputFormat.
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DateTimeInputFormat getDateTimeInputFormat();

    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_with_names_use_header).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_with_names_use_header = 108;</code>
     * @return Whether the inputFormatWithNamesUseHeader field is set.
     */
    boolean hasInputFormatWithNamesUseHeader();
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_with_names_use_header).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_with_names_use_header = 108;</code>
     * @return The inputFormatWithNamesUseHeader.
     */
    com.google.protobuf.BoolValue getInputFormatWithNamesUseHeader();
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_with_names_use_header).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_with_names_use_header = 108;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getInputFormatWithNamesUseHeaderOrBuilder();

    /**
     * <pre>
     * Enables quoting of 64-bit integers in JSON output format.
     * If this setting is enabled, then 64-bit integers (**UInt64** and **Int64**) will be quoted when written to JSON output in order to maintain compatibility with the most of the JavaScript engines.
     * Otherwise, such integers will not be quoted.
     * Default value: **false** (quoting 64-bit integers is disabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue output_format_json_quote_64bit_integers = 63 [json_name = "outputFormatJsonQuote_64bitIntegers"];</code>
     * @return Whether the outputFormatJsonQuote64bitIntegers field is set.
     */
    boolean hasOutputFormatJsonQuote64BitIntegers();
    /**
     * <pre>
     * Enables quoting of 64-bit integers in JSON output format.
     * If this setting is enabled, then 64-bit integers (**UInt64** and **Int64**) will be quoted when written to JSON output in order to maintain compatibility with the most of the JavaScript engines.
     * Otherwise, such integers will not be quoted.
     * Default value: **false** (quoting 64-bit integers is disabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue output_format_json_quote_64bit_integers = 63 [json_name = "outputFormatJsonQuote_64bitIntegers"];</code>
     * @return The outputFormatJsonQuote64bitIntegers.
     */
    com.google.protobuf.BoolValue getOutputFormatJsonQuote64BitIntegers();
    /**
     * <pre>
     * Enables quoting of 64-bit integers in JSON output format.
     * If this setting is enabled, then 64-bit integers (**UInt64** and **Int64**) will be quoted when written to JSON output in order to maintain compatibility with the most of the JavaScript engines.
     * Otherwise, such integers will not be quoted.
     * Default value: **false** (quoting 64-bit integers is disabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue output_format_json_quote_64bit_integers = 63 [json_name = "outputFormatJsonQuote_64bitIntegers"];</code>
     */
    com.google.protobuf.BoolValueOrBuilder getOutputFormatJsonQuote64BitIntegersOrBuilder();

    /**
     * <pre>
     * Enables special floating-point values (**+nan**, **-nan**, **+inf** and **-inf**) in JSON output format.
     * Default value: **false** (special values do not present in output).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue output_format_json_quote_denormals = 64;</code>
     * @return Whether the outputFormatJsonQuoteDenormals field is set.
     */
    boolean hasOutputFormatJsonQuoteDenormals();
    /**
     * <pre>
     * Enables special floating-point values (**+nan**, **-nan**, **+inf** and **-inf**) in JSON output format.
     * Default value: **false** (special values do not present in output).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue output_format_json_quote_denormals = 64;</code>
     * @return The outputFormatJsonQuoteDenormals.
     */
    com.google.protobuf.BoolValue getOutputFormatJsonQuoteDenormals();
    /**
     * <pre>
     * Enables special floating-point values (**+nan**, **-nan**, **+inf** and **-inf**) in JSON output format.
     * Default value: **false** (special values do not present in output).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue output_format_json_quote_denormals = 64;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getOutputFormatJsonQuoteDenormalsOrBuilder();

    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#date_time_output_format).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.DateTimeOutputFormat date_time_output_format = 109;</code>
     * @return The enum numeric value on the wire for dateTimeOutputFormat.
     */
    int getDateTimeOutputFormatValue();
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#date_time_output_format).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.DateTimeOutputFormat date_time_output_format = 109;</code>
     * @return The dateTimeOutputFormat.
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DateTimeOutputFormat getDateTimeOutputFormat();

    /**
     * <pre>
     * Determines whether to use LowCardinality type in Native format.
     * * **true** (default)-yes, use.
     * * **false**-convert LowCardinality columns to regular columns when doing **SELECT**, and convert regular columns to LowCardinality when doing **INSERT**.
     * LowCardinality columns (aka sparse columns) store data in more effective way, compared to regular columns, by using hash tables.
     * If data to insert suits this storage format, ClickHouse will place them into LowCardinality column.
     * If you use a third-party ClickHouse client that can't work with LowCardinality columns, then this client will not be able to correctly interpret the result of the query that asks for data stored in LowCardinality column.
     * Disable this setting to convert LowCardinality column to regular column when creating the result, so such clients will be able to process the result.
     * Official ClickHouse client works with LowCardinality columns out-of-the-box.
     * Default value: **true** (LowCardinality columns are used in Native format).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue low_cardinality_allow_in_native_format = 78;</code>
     * @return Whether the lowCardinalityAllowInNativeFormat field is set.
     */
    boolean hasLowCardinalityAllowInNativeFormat();
    /**
     * <pre>
     * Determines whether to use LowCardinality type in Native format.
     * * **true** (default)-yes, use.
     * * **false**-convert LowCardinality columns to regular columns when doing **SELECT**, and convert regular columns to LowCardinality when doing **INSERT**.
     * LowCardinality columns (aka sparse columns) store data in more effective way, compared to regular columns, by using hash tables.
     * If data to insert suits this storage format, ClickHouse will place them into LowCardinality column.
     * If you use a third-party ClickHouse client that can't work with LowCardinality columns, then this client will not be able to correctly interpret the result of the query that asks for data stored in LowCardinality column.
     * Disable this setting to convert LowCardinality column to regular column when creating the result, so such clients will be able to process the result.
     * Official ClickHouse client works with LowCardinality columns out-of-the-box.
     * Default value: **true** (LowCardinality columns are used in Native format).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue low_cardinality_allow_in_native_format = 78;</code>
     * @return The lowCardinalityAllowInNativeFormat.
     */
    com.google.protobuf.BoolValue getLowCardinalityAllowInNativeFormat();
    /**
     * <pre>
     * Determines whether to use LowCardinality type in Native format.
     * * **true** (default)-yes, use.
     * * **false**-convert LowCardinality columns to regular columns when doing **SELECT**, and convert regular columns to LowCardinality when doing **INSERT**.
     * LowCardinality columns (aka sparse columns) store data in more effective way, compared to regular columns, by using hash tables.
     * If data to insert suits this storage format, ClickHouse will place them into LowCardinality column.
     * If you use a third-party ClickHouse client that can't work with LowCardinality columns, then this client will not be able to correctly interpret the result of the query that asks for data stored in LowCardinality column.
     * Disable this setting to convert LowCardinality column to regular column when creating the result, so such clients will be able to process the result.
     * Official ClickHouse client works with LowCardinality columns out-of-the-box.
     * Default value: **true** (LowCardinality columns are used in Native format).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue low_cardinality_allow_in_native_format = 78;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getLowCardinalityAllowInNativeFormatOrBuilder();

    /**
     * <pre>
     * Allows specifying **LowCardinality** modifier for types of small fixed size (8 or less) in CREATE TABLE statements. Enabling this may increase merge times and memory consumption.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#allow_suspicious_low_cardinality_types).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue allow_suspicious_low_cardinality_types = 110;</code>
     * @return Whether the allowSuspiciousLowCardinalityTypes field is set.
     */
    boolean hasAllowSuspiciousLowCardinalityTypes();
    /**
     * <pre>
     * Allows specifying **LowCardinality** modifier for types of small fixed size (8 or less) in CREATE TABLE statements. Enabling this may increase merge times and memory consumption.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#allow_suspicious_low_cardinality_types).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue allow_suspicious_low_cardinality_types = 110;</code>
     * @return The allowSuspiciousLowCardinalityTypes.
     */
    com.google.protobuf.BoolValue getAllowSuspiciousLowCardinalityTypes();
    /**
     * <pre>
     * Allows specifying **LowCardinality** modifier for types of small fixed size (8 or less) in CREATE TABLE statements. Enabling this may increase merge times and memory consumption.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#allow_suspicious_low_cardinality_types).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue allow_suspicious_low_cardinality_types = 110;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getAllowSuspiciousLowCardinalityTypesOrBuilder();

    /**
     * <pre>
     * Enables returning of empty result when aggregating without keys (with **GROUP BY** operation absent) on empty set (e.g., **SELECT count(*) FROM table WHERE 0**).
     * * **true**-ClickHouse will return an empty result for such queries.
     * * **false** (default)-ClickHouse will return a single-line result consisting of **NULL** values for aggregation functions, in accordance with SQL standard.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue empty_result_for_aggregation_by_empty_set = 79;</code>
     * @return Whether the emptyResultForAggregationByEmptySet field is set.
     */
    boolean hasEmptyResultForAggregationByEmptySet();
    /**
     * <pre>
     * Enables returning of empty result when aggregating without keys (with **GROUP BY** operation absent) on empty set (e.g., **SELECT count(*) FROM table WHERE 0**).
     * * **true**-ClickHouse will return an empty result for such queries.
     * * **false** (default)-ClickHouse will return a single-line result consisting of **NULL** values for aggregation functions, in accordance with SQL standard.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue empty_result_for_aggregation_by_empty_set = 79;</code>
     * @return The emptyResultForAggregationByEmptySet.
     */
    com.google.protobuf.BoolValue getEmptyResultForAggregationByEmptySet();
    /**
     * <pre>
     * Enables returning of empty result when aggregating without keys (with **GROUP BY** operation absent) on empty set (e.g., **SELECT count(*) FROM table WHERE 0**).
     * * **true**-ClickHouse will return an empty result for such queries.
     * * **false** (default)-ClickHouse will return a single-line result consisting of **NULL** values for aggregation functions, in accordance with SQL standard.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue empty_result_for_aggregation_by_empty_set = 79;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getEmptyResultForAggregationByEmptySetOrBuilder();

    /**
     * <pre>
     * HTTP connection timeout, in milliseconds.
     * Value must be greater than **0** (default: **1000**, 1 second).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value http_connection_timeout = 65;</code>
     * @return Whether the httpConnectionTimeout field is set.
     */
    boolean hasHttpConnectionTimeout();
    /**
     * <pre>
     * HTTP connection timeout, in milliseconds.
     * Value must be greater than **0** (default: **1000**, 1 second).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value http_connection_timeout = 65;</code>
     * @return The httpConnectionTimeout.
     */
    com.google.protobuf.Int64Value getHttpConnectionTimeout();
    /**
     * <pre>
     * HTTP connection timeout, in milliseconds.
     * Value must be greater than **0** (default: **1000**, 1 second).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value http_connection_timeout = 65;</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getHttpConnectionTimeoutOrBuilder();

    /**
     * <pre>
     * HTTP receive timeout, in milliseconds.
     * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value http_receive_timeout = 66;</code>
     * @return Whether the httpReceiveTimeout field is set.
     */
    boolean hasHttpReceiveTimeout();
    /**
     * <pre>
     * HTTP receive timeout, in milliseconds.
     * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value http_receive_timeout = 66;</code>
     * @return The httpReceiveTimeout.
     */
    com.google.protobuf.Int64Value getHttpReceiveTimeout();
    /**
     * <pre>
     * HTTP receive timeout, in milliseconds.
     * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value http_receive_timeout = 66;</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getHttpReceiveTimeoutOrBuilder();

    /**
     * <pre>
     * HTTP send timeout, in milliseconds.
     * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value http_send_timeout = 67;</code>
     * @return Whether the httpSendTimeout field is set.
     */
    boolean hasHttpSendTimeout();
    /**
     * <pre>
     * HTTP send timeout, in milliseconds.
     * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value http_send_timeout = 67;</code>
     * @return The httpSendTimeout.
     */
    com.google.protobuf.Int64Value getHttpSendTimeout();
    /**
     * <pre>
     * HTTP send timeout, in milliseconds.
     * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value http_send_timeout = 67;</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getHttpSendTimeoutOrBuilder();

    /**
     * <pre>
     * Enables or disables data compression in HTTP responses.
     * By default, ClickHouse stores data compressed. When executing a query, its result is uncompressed.
     * Use this setting to command ClickHouse to compress the result when sending it via HTTP.
     * Enable this setting and add the **Accept-Encoding: &lt;compression method&gt;** HTTP header in a HTTP request to force compression of HTTP response from ClickHouse.
     * ClickHouse support the following compression methods: **gzip**, **br** and **deflate**.
     * Default value: **false** (compression is disabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/interfaces/http/).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue enable_http_compression = 68;</code>
     * @return Whether the enableHttpCompression field is set.
     */
    boolean hasEnableHttpCompression();
    /**
     * <pre>
     * Enables or disables data compression in HTTP responses.
     * By default, ClickHouse stores data compressed. When executing a query, its result is uncompressed.
     * Use this setting to command ClickHouse to compress the result when sending it via HTTP.
     * Enable this setting and add the **Accept-Encoding: &lt;compression method&gt;** HTTP header in a HTTP request to force compression of HTTP response from ClickHouse.
     * ClickHouse support the following compression methods: **gzip**, **br** and **deflate**.
     * Default value: **false** (compression is disabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/interfaces/http/).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue enable_http_compression = 68;</code>
     * @return The enableHttpCompression.
     */
    com.google.protobuf.BoolValue getEnableHttpCompression();
    /**
     * <pre>
     * Enables or disables data compression in HTTP responses.
     * By default, ClickHouse stores data compressed. When executing a query, its result is uncompressed.
     * Use this setting to command ClickHouse to compress the result when sending it via HTTP.
     * Enable this setting and add the **Accept-Encoding: &lt;compression method&gt;** HTTP header in a HTTP request to force compression of HTTP response from ClickHouse.
     * ClickHouse support the following compression methods: **gzip**, **br** and **deflate**.
     * Default value: **false** (compression is disabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/interfaces/http/).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue enable_http_compression = 68;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getEnableHttpCompressionOrBuilder();

    /**
     * <pre>
     * Enables progress notifications using **X-ClickHouse-Progress** HTTP header.
     * Default value: **false** (notifications disabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue send_progress_in_http_headers = 69;</code>
     * @return Whether the sendProgressInHttpHeaders field is set.
     */
    boolean hasSendProgressInHttpHeaders();
    /**
     * <pre>
     * Enables progress notifications using **X-ClickHouse-Progress** HTTP header.
     * Default value: **false** (notifications disabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue send_progress_in_http_headers = 69;</code>
     * @return The sendProgressInHttpHeaders.
     */
    com.google.protobuf.BoolValue getSendProgressInHttpHeaders();
    /**
     * <pre>
     * Enables progress notifications using **X-ClickHouse-Progress** HTTP header.
     * Default value: **false** (notifications disabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue send_progress_in_http_headers = 69;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getSendProgressInHttpHeadersOrBuilder();

    /**
     * <pre>
     * Minimum interval between progress notifications with **X-ClickHouse-Progress** HTTP header, in milliseconds.
     * Value must be greater than **0** (default: **100**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value http_headers_progress_interval = 70;</code>
     * @return Whether the httpHeadersProgressInterval field is set.
     */
    boolean hasHttpHeadersProgressInterval();
    /**
     * <pre>
     * Minimum interval between progress notifications with **X-ClickHouse-Progress** HTTP header, in milliseconds.
     * Value must be greater than **0** (default: **100**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value http_headers_progress_interval = 70;</code>
     * @return The httpHeadersProgressInterval.
     */
    com.google.protobuf.Int64Value getHttpHeadersProgressInterval();
    /**
     * <pre>
     * Minimum interval between progress notifications with **X-ClickHouse-Progress** HTTP header, in milliseconds.
     * Value must be greater than **0** (default: **100**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value http_headers_progress_interval = 70;</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getHttpHeadersProgressIntervalOrBuilder();

    /**
     * <pre>
     * Adds CORS header in HTTP responses.
     * Default value: **false** (header is not added).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue add_http_cors_header = 71;</code>
     * @return Whether the addHttpCorsHeader field is set.
     */
    boolean hasAddHttpCorsHeader();
    /**
     * <pre>
     * Adds CORS header in HTTP responses.
     * Default value: **false** (header is not added).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue add_http_cors_header = 71;</code>
     * @return The addHttpCorsHeader.
     */
    com.google.protobuf.BoolValue getAddHttpCorsHeader();
    /**
     * <pre>
     * Adds CORS header in HTTP responses.
     * Default value: **false** (header is not added).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue add_http_cors_header = 71;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getAddHttpCorsHeaderOrBuilder();

    /**
     * <pre>
     * Cancels HTTP read-only queries (e.g. SELECT) when a client closes the connection without waiting for the response.
     * Default value: **false**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#cancel-http-readonly-queries-on-client-close).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue cancel_http_readonly_queries_on_client_close = 111;</code>
     * @return Whether the cancelHttpReadonlyQueriesOnClientClose field is set.
     */
    boolean hasCancelHttpReadonlyQueriesOnClientClose();
    /**
     * <pre>
     * Cancels HTTP read-only queries (e.g. SELECT) when a client closes the connection without waiting for the response.
     * Default value: **false**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#cancel-http-readonly-queries-on-client-close).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue cancel_http_readonly_queries_on_client_close = 111;</code>
     * @return The cancelHttpReadonlyQueriesOnClientClose.
     */
    com.google.protobuf.BoolValue getCancelHttpReadonlyQueriesOnClientClose();
    /**
     * <pre>
     * Cancels HTTP read-only queries (e.g. SELECT) when a client closes the connection without waiting for the response.
     * Default value: **false**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#cancel-http-readonly-queries-on-client-close).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue cancel_http_readonly_queries_on_client_close = 111;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getCancelHttpReadonlyQueriesOnClientCloseOrBuilder();

    /**
     * <pre>
     * Limits the maximum number of HTTP GET redirect hops for [URL-engine](https://clickhouse.com/docs/en/engines/table-engines/special/url) tables.
     * If the parameter is set to **0** (default), no hops is allowed.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_http_get_redirects).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_http_get_redirects = 112;</code>
     * @return Whether the maxHttpGetRedirects field is set.
     */
    boolean hasMaxHttpGetRedirects();
    /**
     * <pre>
     * Limits the maximum number of HTTP GET redirect hops for [URL-engine](https://clickhouse.com/docs/en/engines/table-engines/special/url) tables.
     * If the parameter is set to **0** (default), no hops is allowed.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_http_get_redirects).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_http_get_redirects = 112;</code>
     * @return The maxHttpGetRedirects.
     */
    com.google.protobuf.Int64Value getMaxHttpGetRedirects();
    /**
     * <pre>
     * Limits the maximum number of HTTP GET redirect hops for [URL-engine](https://clickhouse.com/docs/en/engines/table-engines/special/url) tables.
     * If the parameter is set to **0** (default), no hops is allowed.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_http_get_redirects).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_http_get_redirects = 112;</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxHttpGetRedirectsOrBuilder();

    /**
     * <code>.google.protobuf.BoolValue joined_subquery_requires_alias = 93;</code>
     * @return Whether the joinedSubqueryRequiresAlias field is set.
     */
    boolean hasJoinedSubqueryRequiresAlias();
    /**
     * <code>.google.protobuf.BoolValue joined_subquery_requires_alias = 93;</code>
     * @return The joinedSubqueryRequiresAlias.
     */
    com.google.protobuf.BoolValue getJoinedSubqueryRequiresAlias();
    /**
     * <code>.google.protobuf.BoolValue joined_subquery_requires_alias = 93;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getJoinedSubqueryRequiresAliasOrBuilder();

    /**
     * <code>.google.protobuf.BoolValue join_use_nulls = 94;</code>
     * @return Whether the joinUseNulls field is set.
     */
    boolean hasJoinUseNulls();
    /**
     * <code>.google.protobuf.BoolValue join_use_nulls = 94;</code>
     * @return The joinUseNulls.
     */
    com.google.protobuf.BoolValue getJoinUseNulls();
    /**
     * <code>.google.protobuf.BoolValue join_use_nulls = 94;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getJoinUseNullsOrBuilder();

    /**
     * <code>.google.protobuf.BoolValue transform_null_in = 95;</code>
     * @return Whether the transformNullIn field is set.
     */
    boolean hasTransformNullIn();
    /**
     * <code>.google.protobuf.BoolValue transform_null_in = 95;</code>
     * @return The transformNullIn.
     */
    com.google.protobuf.BoolValue getTransformNullIn();
    /**
     * <code>.google.protobuf.BoolValue transform_null_in = 95;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getTransformNullInOrBuilder();

    /**
     * <pre>
     * Quota accounting mode. Possible values: QUOTA_MODE_DEFAULT, QUOTA_MODE_KEYED and QUOTA_MODE_KEYED_BY_IP.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.QuotaMode quota_mode = 80;</code>
     * @return The enum numeric value on the wire for quotaMode.
     */
    int getQuotaModeValue();
    /**
     * <pre>
     * Quota accounting mode. Possible values: QUOTA_MODE_DEFAULT, QUOTA_MODE_KEYED and QUOTA_MODE_KEYED_BY_IP.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.QuotaMode quota_mode = 80;</code>
     * @return The quotaMode.
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.QuotaMode getQuotaMode();

    /**
     * <pre>
     * Sets the data format of a [nested](https://clickhouse.com/docs/en/sql-reference/data-types/nested-data-structures/nested) columns.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#flatten-nested).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue flatten_nested = 113;</code>
     * @return Whether the flattenNested field is set.
     */
    boolean hasFlattenNested();
    /**
     * <pre>
     * Sets the data format of a [nested](https://clickhouse.com/docs/en/sql-reference/data-types/nested-data-structures/nested) columns.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#flatten-nested).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue flatten_nested = 113;</code>
     * @return The flattenNested.
     */
    com.google.protobuf.BoolValue getFlattenNested();
    /**
     * <pre>
     * Sets the data format of a [nested](https://clickhouse.com/docs/en/sql-reference/data-types/nested-data-structures/nested) columns.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#flatten-nested).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue flatten_nested = 113;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getFlattenNestedOrBuilder();

    /**
     * <pre>
     * Regular expression (for Regexp format)
     * </pre>
     *
     * <code>string format_regexp = 114;</code>
     * @return The formatRegexp.
     */
    java.lang.String getFormatRegexp();
    /**
     * <pre>
     * Regular expression (for Regexp format)
     * </pre>
     *
     * <code>string format_regexp = 114;</code>
     * @return The bytes for formatRegexp.
     */
    com.google.protobuf.ByteString
        getFormatRegexpBytes();

    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#format_regexp_escaping_rule).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.FormatRegexpEscapingRule format_regexp_escaping_rule = 115;</code>
     * @return The enum numeric value on the wire for formatRegexpEscapingRule.
     */
    int getFormatRegexpEscapingRuleValue();
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#format_regexp_escaping_rule).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.FormatRegexpEscapingRule format_regexp_escaping_rule = 115;</code>
     * @return The formatRegexpEscapingRule.
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.FormatRegexpEscapingRule getFormatRegexpEscapingRule();

    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#format_regexp_skip_unmatched).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue format_regexp_skip_unmatched = 116;</code>
     * @return Whether the formatRegexpSkipUnmatched field is set.
     */
    boolean hasFormatRegexpSkipUnmatched();
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#format_regexp_skip_unmatched).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue format_regexp_skip_unmatched = 116;</code>
     * @return The formatRegexpSkipUnmatched.
     */
    com.google.protobuf.BoolValue getFormatRegexpSkipUnmatched();
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#format_regexp_skip_unmatched).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue format_regexp_skip_unmatched = 116;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getFormatRegexpSkipUnmatchedOrBuilder();

    /**
     * <pre>
     * Enables asynchronous inserts.
     * Disabled by default.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue async_insert = 117;</code>
     * @return Whether the asyncInsert field is set.
     */
    boolean hasAsyncInsert();
    /**
     * <pre>
     * Enables asynchronous inserts.
     * Disabled by default.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue async_insert = 117;</code>
     * @return The asyncInsert.
     */
    com.google.protobuf.BoolValue getAsyncInsert();
    /**
     * <pre>
     * Enables asynchronous inserts.
     * Disabled by default.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue async_insert = 117;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getAsyncInsertOrBuilder();

    /**
     * <pre>
     * The maximum number of threads for background data parsing and insertion.
     * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **16**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-threads).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value async_insert_threads = 118;</code>
     * @return Whether the asyncInsertThreads field is set.
     */
    boolean hasAsyncInsertThreads();
    /**
     * <pre>
     * The maximum number of threads for background data parsing and insertion.
     * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **16**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-threads).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value async_insert_threads = 118;</code>
     * @return The asyncInsertThreads.
     */
    com.google.protobuf.Int64Value getAsyncInsertThreads();
    /**
     * <pre>
     * The maximum number of threads for background data parsing and insertion.
     * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **16**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-threads).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value async_insert_threads = 118;</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getAsyncInsertThreadsOrBuilder();

    /**
     * <pre>
     * Enables waiting for processing of asynchronous insertion. If enabled, server returns OK only after the data is inserted.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue wait_for_async_insert = 119;</code>
     * @return Whether the waitForAsyncInsert field is set.
     */
    boolean hasWaitForAsyncInsert();
    /**
     * <pre>
     * Enables waiting for processing of asynchronous insertion. If enabled, server returns OK only after the data is inserted.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue wait_for_async_insert = 119;</code>
     * @return The waitForAsyncInsert.
     */
    com.google.protobuf.BoolValue getWaitForAsyncInsert();
    /**
     * <pre>
     * Enables waiting for processing of asynchronous insertion. If enabled, server returns OK only after the data is inserted.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue wait_for_async_insert = 119;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getWaitForAsyncInsertOrBuilder();

    /**
     * <pre>
     * The timeout (in seconds) for waiting for processing of asynchronous insertion.
     * Default value: **120**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert-timeout).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value wait_for_async_insert_timeout = 120;</code>
     * @return Whether the waitForAsyncInsertTimeout field is set.
     */
    boolean hasWaitForAsyncInsertTimeout();
    /**
     * <pre>
     * The timeout (in seconds) for waiting for processing of asynchronous insertion.
     * Default value: **120**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert-timeout).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value wait_for_async_insert_timeout = 120;</code>
     * @return The waitForAsyncInsertTimeout.
     */
    com.google.protobuf.Int64Value getWaitForAsyncInsertTimeout();
    /**
     * <pre>
     * The timeout (in seconds) for waiting for processing of asynchronous insertion.
     * Default value: **120**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert-timeout).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value wait_for_async_insert_timeout = 120;</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getWaitForAsyncInsertTimeoutOrBuilder();

    /**
     * <pre>
     * The maximum size of the unparsed data in bytes collected per query before being inserted.
     * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **100000**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-max-data-size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value async_insert_max_data_size = 121;</code>
     * @return Whether the asyncInsertMaxDataSize field is set.
     */
    boolean hasAsyncInsertMaxDataSize();
    /**
     * <pre>
     * The maximum size of the unparsed data in bytes collected per query before being inserted.
     * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **100000**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-max-data-size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value async_insert_max_data_size = 121;</code>
     * @return The asyncInsertMaxDataSize.
     */
    com.google.protobuf.Int64Value getAsyncInsertMaxDataSize();
    /**
     * <pre>
     * The maximum size of the unparsed data in bytes collected per query before being inserted.
     * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **100000**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-max-data-size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value async_insert_max_data_size = 121;</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getAsyncInsertMaxDataSizeOrBuilder();

    /**
     * <pre>
     * The maximum timeout in milliseconds since the first INSERT query before inserting collected data.
     * If the parameter is set to **0**, the timeout is disabled. Default value: **200**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-busy-timeout-ms).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value async_insert_busy_timeout = 122;</code>
     * @return Whether the asyncInsertBusyTimeout field is set.
     */
    boolean hasAsyncInsertBusyTimeout();
    /**
     * <pre>
     * The maximum timeout in milliseconds since the first INSERT query before inserting collected data.
     * If the parameter is set to **0**, the timeout is disabled. Default value: **200**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-busy-timeout-ms).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value async_insert_busy_timeout = 122;</code>
     * @return The asyncInsertBusyTimeout.
     */
    com.google.protobuf.Int64Value getAsyncInsertBusyTimeout();
    /**
     * <pre>
     * The maximum timeout in milliseconds since the first INSERT query before inserting collected data.
     * If the parameter is set to **0**, the timeout is disabled. Default value: **200**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-busy-timeout-ms).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value async_insert_busy_timeout = 122;</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getAsyncInsertBusyTimeoutOrBuilder();

    /**
     * <pre>
     * The maximum timeout in milliseconds since the last INSERT query before dumping collected data. If enabled, the settings prolongs the [async_insert_busy_timeout] with every INSERT query as long as [async_insert_max_data_size] is not exceeded.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-stale-timeout-ms).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value async_insert_stale_timeout = 123;</code>
     * @return Whether the asyncInsertStaleTimeout field is set.
     */
    boolean hasAsyncInsertStaleTimeout();
    /**
     * <pre>
     * The maximum timeout in milliseconds since the last INSERT query before dumping collected data. If enabled, the settings prolongs the [async_insert_busy_timeout] with every INSERT query as long as [async_insert_max_data_size] is not exceeded.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-stale-timeout-ms).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value async_insert_stale_timeout = 123;</code>
     * @return The asyncInsertStaleTimeout.
     */
    com.google.protobuf.Int64Value getAsyncInsertStaleTimeout();
    /**
     * <pre>
     * The maximum timeout in milliseconds since the last INSERT query before dumping collected data. If enabled, the settings prolongs the [async_insert_busy_timeout] with every INSERT query as long as [async_insert_max_data_size] is not exceeded.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-stale-timeout-ms).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value async_insert_stale_timeout = 123;</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getAsyncInsertStaleTimeoutOrBuilder();

    /**
     * <pre>
     * Memory profiler step (in bytes).
     * If the next query step requires more memory than this parameter specifies, the memory profiler collects the allocating stack trace. Values lower than a few megabytes slow down query processing.
     * Default value: **4194304** (4 MB). Zero means disabled memory profiler.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value memory_profiler_step = 124;</code>
     * @return Whether the memoryProfilerStep field is set.
     */
    boolean hasMemoryProfilerStep();
    /**
     * <pre>
     * Memory profiler step (in bytes).
     * If the next query step requires more memory than this parameter specifies, the memory profiler collects the allocating stack trace. Values lower than a few megabytes slow down query processing.
     * Default value: **4194304** (4 MB). Zero means disabled memory profiler.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value memory_profiler_step = 124;</code>
     * @return The memoryProfilerStep.
     */
    com.google.protobuf.Int64Value getMemoryProfilerStep();
    /**
     * <pre>
     * Memory profiler step (in bytes).
     * If the next query step requires more memory than this parameter specifies, the memory profiler collects the allocating stack trace. Values lower than a few megabytes slow down query processing.
     * Default value: **4194304** (4 MB). Zero means disabled memory profiler.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value memory_profiler_step = 124;</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMemoryProfilerStepOrBuilder();

    /**
     * <pre>
     * Collect random allocations and deallocations and write them into system.trace_log with 'MemorySample' trace_type. The probability is for every alloc/free regardless to the size of the allocation.
     * Possible values: from **0** to **1**. Default: **0**.
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue memory_profiler_sample_probability = 125;</code>
     * @return Whether the memoryProfilerSampleProbability field is set.
     */
    boolean hasMemoryProfilerSampleProbability();
    /**
     * <pre>
     * Collect random allocations and deallocations and write them into system.trace_log with 'MemorySample' trace_type. The probability is for every alloc/free regardless to the size of the allocation.
     * Possible values: from **0** to **1**. Default: **0**.
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue memory_profiler_sample_probability = 125;</code>
     * @return The memoryProfilerSampleProbability.
     */
    com.google.protobuf.DoubleValue getMemoryProfilerSampleProbability();
    /**
     * <pre>
     * Collect random allocations and deallocations and write them into system.trace_log with 'MemorySample' trace_type. The probability is for every alloc/free regardless to the size of the allocation.
     * Possible values: from **0** to **1**. Default: **0**.
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue memory_profiler_sample_probability = 125;</code>
     */
    com.google.protobuf.DoubleValueOrBuilder getMemoryProfilerSampleProbabilityOrBuilder();

    /**
     * <pre>
     * Sets the maximum number of parallel threads for the SELECT query data read phase with the FINAL modifier.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max-final-threads).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_final_threads = 126 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxFinalThreads field is set.
     */
    boolean hasMaxFinalThreads();
    /**
     * <pre>
     * Sets the maximum number of parallel threads for the SELECT query data read phase with the FINAL modifier.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max-final-threads).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_final_threads = 126 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxFinalThreads.
     */
    com.google.protobuf.Int64Value getMaxFinalThreads();
    /**
     * <pre>
     * Sets the maximum number of parallel threads for the SELECT query data read phase with the FINAL modifier.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max-final-threads).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_final_threads = 126 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxFinalThreadsOrBuilder();

    /**
     * <pre>
     * Enables or disables order-preserving parallel parsing of data formats. Supported only for [TSV](https://clickhouse.com/docs/en/interfaces/formats#tabseparated), [TKSV](https://clickhouse.com/docs/en/interfaces/formats#tskv), [CSV](https://clickhouse.com/docs/en/interfaces/formats#csv) and [JSONEachRow](https://clickhouse.com/docs/en/interfaces/formats#jsoneachrow) formats.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_parallel_parsing = 127;</code>
     * @return Whether the inputFormatParallelParsing field is set.
     */
    boolean hasInputFormatParallelParsing();
    /**
     * <pre>
     * Enables or disables order-preserving parallel parsing of data formats. Supported only for [TSV](https://clickhouse.com/docs/en/interfaces/formats#tabseparated), [TKSV](https://clickhouse.com/docs/en/interfaces/formats#tskv), [CSV](https://clickhouse.com/docs/en/interfaces/formats#csv) and [JSONEachRow](https://clickhouse.com/docs/en/interfaces/formats#jsoneachrow) formats.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_parallel_parsing = 127;</code>
     * @return The inputFormatParallelParsing.
     */
    com.google.protobuf.BoolValue getInputFormatParallelParsing();
    /**
     * <pre>
     * Enables or disables order-preserving parallel parsing of data formats. Supported only for [TSV](https://clickhouse.com/docs/en/interfaces/formats#tabseparated), [TKSV](https://clickhouse.com/docs/en/interfaces/formats#tskv), [CSV](https://clickhouse.com/docs/en/interfaces/formats#csv) and [JSONEachRow](https://clickhouse.com/docs/en/interfaces/formats#jsoneachrow) formats.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_parallel_parsing = 127;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getInputFormatParallelParsingOrBuilder();

    /**
     * <pre>
     * Enables or disables the insertion of JSON data with nested objects.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_import_nested_json = 128;</code>
     * @return Whether the inputFormatImportNestedJson field is set.
     */
    boolean hasInputFormatImportNestedJson();
    /**
     * <pre>
     * Enables or disables the insertion of JSON data with nested objects.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_import_nested_json = 128;</code>
     * @return The inputFormatImportNestedJson.
     */
    com.google.protobuf.BoolValue getInputFormatImportNestedJson();
    /**
     * <pre>
     * Enables or disables the insertion of JSON data with nested objects.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_import_nested_json = 128;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getInputFormatImportNestedJsonOrBuilder();

    /**
     * <pre>
     * Method of reading data from local filesystem, one of: read, pread, mmap, io_uring, pread_threadpool. The 'io_uring' method is experimental and does not work for Log, TinyLog, StripeLog, File, Set and Join, and other tables with append-able files in presence of concurrent reads and writes.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.LocalFilesystemReadMethod local_filesystem_read_method = 129;</code>
     * @return The enum numeric value on the wire for localFilesystemReadMethod.
     */
    int getLocalFilesystemReadMethodValue();
    /**
     * <pre>
     * Method of reading data from local filesystem, one of: read, pread, mmap, io_uring, pread_threadpool. The 'io_uring' method is experimental and does not work for Log, TinyLog, StripeLog, File, Set and Join, and other tables with append-able files in presence of concurrent reads and writes.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.LocalFilesystemReadMethod local_filesystem_read_method = 129;</code>
     * @return The localFilesystemReadMethod.
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.LocalFilesystemReadMethod getLocalFilesystemReadMethod();

    /**
     * <pre>
     * The maximum size of the buffer to read from the filesystem.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/codebrowser/ClickHouse/src/Core/Settings.h.html#DB::SettingsTraits::Data::max_read_buffer_size)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_read_buffer_size = 130 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the maxReadBufferSize field is set.
     */
    boolean hasMaxReadBufferSize();
    /**
     * <pre>
     * The maximum size of the buffer to read from the filesystem.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/codebrowser/ClickHouse/src/Core/Settings.h.html#DB::SettingsTraits::Data::max_read_buffer_size)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_read_buffer_size = 130 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The maxReadBufferSize.
     */
    com.google.protobuf.Int64Value getMaxReadBufferSize();
    /**
     * <pre>
     * The maximum size of the buffer to read from the filesystem.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/codebrowser/ClickHouse/src/Core/Settings.h.html#DB::SettingsTraits::Data::max_read_buffer_size)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_read_buffer_size = 130 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxReadBufferSizeOrBuilder();

    /**
     * <pre>
     * The setting sets the maximum number of retries for ClickHouse Keeper (or ZooKeeper) requests during insert into replicated MergeTree. Only Keeper requests which failed due to network error, Keeper session timeout, or request timeout are considered for retries.
     * Default: 20 from 23.2, 0(disabled) before
     * Min_version: 22.11
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#insert_keeper_max_retries)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value insert_keeper_max_retries = 131 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the insertKeeperMaxRetries field is set.
     */
    boolean hasInsertKeeperMaxRetries();
    /**
     * <pre>
     * The setting sets the maximum number of retries for ClickHouse Keeper (or ZooKeeper) requests during insert into replicated MergeTree. Only Keeper requests which failed due to network error, Keeper session timeout, or request timeout are considered for retries.
     * Default: 20 from 23.2, 0(disabled) before
     * Min_version: 22.11
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#insert_keeper_max_retries)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value insert_keeper_max_retries = 131 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The insertKeeperMaxRetries.
     */
    com.google.protobuf.Int64Value getInsertKeeperMaxRetries();
    /**
     * <pre>
     * The setting sets the maximum number of retries for ClickHouse Keeper (or ZooKeeper) requests during insert into replicated MergeTree. Only Keeper requests which failed due to network error, Keeper session timeout, or request timeout are considered for retries.
     * Default: 20 from 23.2, 0(disabled) before
     * Min_version: 22.11
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#insert_keeper_max_retries)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value insert_keeper_max_retries = 131 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getInsertKeeperMaxRetriesOrBuilder();

    /**
     * <pre>
     * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running user queries. Zero means unlimited.
     * Default: 0 - unlimited
     * Min_version: 22.10
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_user)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_user = 132 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxTemporaryDataOnDiskSizeForUser field is set.
     */
    boolean hasMaxTemporaryDataOnDiskSizeForUser();
    /**
     * <pre>
     * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running user queries. Zero means unlimited.
     * Default: 0 - unlimited
     * Min_version: 22.10
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_user)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_user = 132 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxTemporaryDataOnDiskSizeForUser.
     */
    com.google.protobuf.Int64Value getMaxTemporaryDataOnDiskSizeForUser();
    /**
     * <pre>
     * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running user queries. Zero means unlimited.
     * Default: 0 - unlimited
     * Min_version: 22.10
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_user)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_user = 132 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxTemporaryDataOnDiskSizeForUserOrBuilder();

    /**
     * <pre>
     * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running queries. Zero means unlimited.
     * Default: 0 - unlimited
     * Min_version: 22.10
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_query)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_query = 133 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxTemporaryDataOnDiskSizeForQuery field is set.
     */
    boolean hasMaxTemporaryDataOnDiskSizeForQuery();
    /**
     * <pre>
     * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running queries. Zero means unlimited.
     * Default: 0 - unlimited
     * Min_version: 22.10
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_query)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_query = 133 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxTemporaryDataOnDiskSizeForQuery.
     */
    com.google.protobuf.Int64Value getMaxTemporaryDataOnDiskSizeForQuery();
    /**
     * <pre>
     * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running queries. Zero means unlimited.
     * Default: 0 - unlimited
     * Min_version: 22.10
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_query)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_query = 133 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxTemporaryDataOnDiskSizeForQueryOrBuilder();

    /**
     * <pre>
     * Limits maximum recursion depth in the recursive descent parser. Allows controlling the stack size.
     * Default: 1000
     * Special: 0 - unlimited
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_parser_depth)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_parser_depth = 134 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxParserDepth field is set.
     */
    boolean hasMaxParserDepth();
    /**
     * <pre>
     * Limits maximum recursion depth in the recursive descent parser. Allows controlling the stack size.
     * Default: 1000
     * Special: 0 - unlimited
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_parser_depth)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_parser_depth = 134 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxParserDepth.
     */
    com.google.protobuf.Int64Value getMaxParserDepth();
    /**
     * <pre>
     * Limits maximum recursion depth in the recursive descent parser. Allows controlling the stack size.
     * Default: 1000
     * Special: 0 - unlimited
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_parser_depth)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_parser_depth = 134 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxParserDepthOrBuilder();

    /**
     * <pre>
     * Method of reading data from remote filesystem, one of: read, threadpool.
     * Default: read
     * Min_version: 21.11
     * See in-depth description in [ClickHouse GitHub](https://github.com/ClickHouse/ClickHouse/blob/f9558345e886876b9132d9c018e357f7fa9b22a3/src/Core/Settings.h#L660)
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.RemoteFilesystemReadMethod remote_filesystem_read_method = 135;</code>
     * @return The enum numeric value on the wire for remoteFilesystemReadMethod.
     */
    int getRemoteFilesystemReadMethodValue();
    /**
     * <pre>
     * Method of reading data from remote filesystem, one of: read, threadpool.
     * Default: read
     * Min_version: 21.11
     * See in-depth description in [ClickHouse GitHub](https://github.com/ClickHouse/ClickHouse/blob/f9558345e886876b9132d9c018e357f7fa9b22a3/src/Core/Settings.h#L660)
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.RemoteFilesystemReadMethod remote_filesystem_read_method = 135;</code>
     * @return The remoteFilesystemReadMethod.
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.RemoteFilesystemReadMethod getRemoteFilesystemReadMethod();

    /**
     * <pre>
     * It represents soft memory limit in case when hard limit is reached on user level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
     * Default: 1GiB
     * Min_version: 22.5
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator = 136 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the memoryOvercommitRatioDenominator field is set.
     */
    boolean hasMemoryOvercommitRatioDenominator();
    /**
     * <pre>
     * It represents soft memory limit in case when hard limit is reached on user level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
     * Default: 1GiB
     * Min_version: 22.5
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator = 136 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The memoryOvercommitRatioDenominator.
     */
    com.google.protobuf.Int64Value getMemoryOvercommitRatioDenominator();
    /**
     * <pre>
     * It represents soft memory limit in case when hard limit is reached on user level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
     * Default: 1GiB
     * Min_version: 22.5
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator = 136 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMemoryOvercommitRatioDenominatorOrBuilder();

    /**
     * <pre>
     * It represents soft memory limit in case when hard limit is reached on global level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
     * Default: 1GiB
     * Min_version: 22.5
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator_for_user)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator_for_user = 137 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the memoryOvercommitRatioDenominatorForUser field is set.
     */
    boolean hasMemoryOvercommitRatioDenominatorForUser();
    /**
     * <pre>
     * It represents soft memory limit in case when hard limit is reached on global level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
     * Default: 1GiB
     * Min_version: 22.5
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator_for_user)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator_for_user = 137 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The memoryOvercommitRatioDenominatorForUser.
     */
    com.google.protobuf.Int64Value getMemoryOvercommitRatioDenominatorForUser();
    /**
     * <pre>
     * It represents soft memory limit in case when hard limit is reached on global level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
     * Default: 1GiB
     * Min_version: 22.5
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator_for_user)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator_for_user = 137 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMemoryOvercommitRatioDenominatorForUserOrBuilder();

    /**
     * <pre>
     * Maximum time thread will wait for memory to be freed in the case of memory overcommit on a user level. If the timeout is reached and memory is not freed, an exception is thrown.
     * Default: 5000000
     * Min_version: 22.5
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_usage_overcommit_max_wait_microseconds)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value memory_usage_overcommit_max_wait_microseconds = 138 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the memoryUsageOvercommitMaxWaitMicroseconds field is set.
     */
    boolean hasMemoryUsageOvercommitMaxWaitMicroseconds();
    /**
     * <pre>
     * Maximum time thread will wait for memory to be freed in the case of memory overcommit on a user level. If the timeout is reached and memory is not freed, an exception is thrown.
     * Default: 5000000
     * Min_version: 22.5
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_usage_overcommit_max_wait_microseconds)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value memory_usage_overcommit_max_wait_microseconds = 138 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The memoryUsageOvercommitMaxWaitMicroseconds.
     */
    com.google.protobuf.Int64Value getMemoryUsageOvercommitMaxWaitMicroseconds();
    /**
     * <pre>
     * Maximum time thread will wait for memory to be freed in the case of memory overcommit on a user level. If the timeout is reached and memory is not freed, an exception is thrown.
     * Default: 5000000
     * Min_version: 22.5
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_usage_overcommit_max_wait_microseconds)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value memory_usage_overcommit_max_wait_microseconds = 138 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMemoryUsageOvercommitMaxWaitMicrosecondsOrBuilder();

    /**
     * <pre>
     * Setting up query threads logging. Query threads log into the [system.query_thread_log](https://clickhouse.com/docs/en/operations/system-tables/query_thread_log) table. This setting has effect only when [log_queries](https://clickhouse.com/docs/en/operations/settings/settings#log-queries) is true. Queries threads run by ClickHouse with this setup are logged according to the rules in the [query_thread_log](https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-query_thread_log) server configuration parameter.
     * Default: true
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#log_query_threads)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue log_query_threads = 139;</code>
     * @return Whether the logQueryThreads field is set.
     */
    boolean hasLogQueryThreads();
    /**
     * <pre>
     * Setting up query threads logging. Query threads log into the [system.query_thread_log](https://clickhouse.com/docs/en/operations/system-tables/query_thread_log) table. This setting has effect only when [log_queries](https://clickhouse.com/docs/en/operations/settings/settings#log-queries) is true. Queries threads run by ClickHouse with this setup are logged according to the rules in the [query_thread_log](https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-query_thread_log) server configuration parameter.
     * Default: true
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#log_query_threads)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue log_query_threads = 139;</code>
     * @return The logQueryThreads.
     */
    com.google.protobuf.BoolValue getLogQueryThreads();
    /**
     * <pre>
     * Setting up query threads logging. Query threads log into the [system.query_thread_log](https://clickhouse.com/docs/en/operations/system-tables/query_thread_log) table. This setting has effect only when [log_queries](https://clickhouse.com/docs/en/operations/settings/settings#log-queries) is true. Queries threads run by ClickHouse with this setup are logged according to the rules in the [query_thread_log](https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-query_thread_log) server configuration parameter.
     * Default: true
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#log_query_threads)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue log_query_threads = 139;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getLogQueryThreadsOrBuilder();

    /**
     * <pre>
     * The maximum number of threads to execute the INSERT SELECT query.
     * Default: 0
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_insert_threads)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_insert_threads = 140 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxInsertThreads field is set.
     */
    boolean hasMaxInsertThreads();
    /**
     * <pre>
     * The maximum number of threads to execute the INSERT SELECT query.
     * Default: 0
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_insert_threads)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_insert_threads = 140 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxInsertThreads.
     */
    com.google.protobuf.Int64Value getMaxInsertThreads();
    /**
     * <pre>
     * The maximum number of threads to execute the INSERT SELECT query.
     * Default: 0
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_insert_threads)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_insert_threads = 140 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getMaxInsertThreadsOrBuilder();

    /**
     * <pre>
     * Enables hedged requests logic for remote queries. It allows to establish many connections with different replicas for query. New connection is enabled in case existent connection(s) with replica(s) were not established within hedged_connection_timeout or no data was received within receive_data_timeout. Query uses the first connection which send non empty progress packet (or data packet, if allow_changing_replica_until_first_data_packet); other connections are cancelled. Queries with max_parallel_replicas &gt; 1 are supported.
     * Default: true
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#use_hedged_requests)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue use_hedged_requests = 141;</code>
     * @return Whether the useHedgedRequests field is set.
     */
    boolean hasUseHedgedRequests();
    /**
     * <pre>
     * Enables hedged requests logic for remote queries. It allows to establish many connections with different replicas for query. New connection is enabled in case existent connection(s) with replica(s) were not established within hedged_connection_timeout or no data was received within receive_data_timeout. Query uses the first connection which send non empty progress packet (or data packet, if allow_changing_replica_until_first_data_packet); other connections are cancelled. Queries with max_parallel_replicas &gt; 1 are supported.
     * Default: true
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#use_hedged_requests)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue use_hedged_requests = 141;</code>
     * @return The useHedgedRequests.
     */
    com.google.protobuf.BoolValue getUseHedgedRequests();
    /**
     * <pre>
     * Enables hedged requests logic for remote queries. It allows to establish many connections with different replicas for query. New connection is enabled in case existent connection(s) with replica(s) were not established within hedged_connection_timeout or no data was received within receive_data_timeout. Query uses the first connection which send non empty progress packet (or data packet, if allow_changing_replica_until_first_data_packet); other connections are cancelled. Queries with max_parallel_replicas &gt; 1 are supported.
     * Default: true
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#use_hedged_requests)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue use_hedged_requests = 141;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getUseHedgedRequestsOrBuilder();

    /**
     * <pre>
     * Timeout to close idle TCP connections after specified number of milliseconds.
     * Default: 360000 (3600 seconds)
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#idle_connection_timeout)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value idle_connection_timeout = 142 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the idleConnectionTimeout field is set.
     */
    boolean hasIdleConnectionTimeout();
    /**
     * <pre>
     * Timeout to close idle TCP connections after specified number of milliseconds.
     * Default: 360000 (3600 seconds)
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#idle_connection_timeout)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value idle_connection_timeout = 142 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The idleConnectionTimeout.
     */
    com.google.protobuf.Int64Value getIdleConnectionTimeout();
    /**
     * <pre>
     * Timeout to close idle TCP connections after specified number of milliseconds.
     * Default: 360000 (3600 seconds)
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#idle_connection_timeout)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value idle_connection_timeout = 142 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getIdleConnectionTimeoutOrBuilder();

    /**
     * <pre>
     * Connection timeout for establishing connection with replica for Hedged requests.
     * Default: 50
     * See in-depth description in [ClickHouse GitHub](https://github.com/ClickHouse/ClickHouse/blob/f9558345e886876b9132d9c018e357f7fa9b22a3/src/Core/Settings.h#L64)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value hedged_connection_timeout_ms = 143 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the hedgedConnectionTimeoutMs field is set.
     */
    boolean hasHedgedConnectionTimeoutMs();
    /**
     * <pre>
     * Connection timeout for establishing connection with replica for Hedged requests.
     * Default: 50
     * See in-depth description in [ClickHouse GitHub](https://github.com/ClickHouse/ClickHouse/blob/f9558345e886876b9132d9c018e357f7fa9b22a3/src/Core/Settings.h#L64)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value hedged_connection_timeout_ms = 143 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The hedgedConnectionTimeoutMs.
     */
    com.google.protobuf.Int64Value getHedgedConnectionTimeoutMs();
    /**
     * <pre>
     * Connection timeout for establishing connection with replica for Hedged requests.
     * Default: 50
     * See in-depth description in [ClickHouse GitHub](https://github.com/ClickHouse/ClickHouse/blob/f9558345e886876b9132d9c018e357f7fa9b22a3/src/Core/Settings.h#L64)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value hedged_connection_timeout_ms = 143 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getHedgedConnectionTimeoutMsOrBuilder();

    /**
     * <pre>
     * Specifies the algorithm of replicas selection that is used for distributed query processing, one of: random, nearest_hostname, in_order, first_or_random, round_robin.
     * Default: random
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#load_balancing)
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.LoadBalancing load_balancing = 144;</code>
     * @return The enum numeric value on the wire for loadBalancing.
     */
    int getLoadBalancingValue();
    /**
     * <pre>
     * Specifies the algorithm of replicas selection that is used for distributed query processing, one of: random, nearest_hostname, in_order, first_or_random, round_robin.
     * Default: random
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#load_balancing)
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.LoadBalancing load_balancing = 144;</code>
     * @return The loadBalancing.
     */
    yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.LoadBalancing getLoadBalancing();

    /**
     * <pre>
     * Enables/disables preferable using the localhost replica when processing distributed queries.
     * Default: true
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#prefer_localhost_replica)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue prefer_localhost_replica = 145;</code>
     * @return Whether the preferLocalhostReplica field is set.
     */
    boolean hasPreferLocalhostReplica();
    /**
     * <pre>
     * Enables/disables preferable using the localhost replica when processing distributed queries.
     * Default: true
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#prefer_localhost_replica)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue prefer_localhost_replica = 145;</code>
     * @return The preferLocalhostReplica.
     */
    com.google.protobuf.BoolValue getPreferLocalhostReplica();
    /**
     * <pre>
     * Enables/disables preferable using the localhost replica when processing distributed queries.
     * Default: true
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#prefer_localhost_replica)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue prefer_localhost_replica = 145;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getPreferLocalhostReplicaOrBuilder();

    /**
     * <pre>
     * The setting is deprecated and has no effect.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue compile = 44 [deprecated = true];</code>
     * @deprecated
     * @return Whether the compile field is set.
     */
    @java.lang.Deprecated boolean hasCompile();
    /**
     * <pre>
     * The setting is deprecated and has no effect.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue compile = 44 [deprecated = true];</code>
     * @deprecated
     * @return The compile.
     */
    @java.lang.Deprecated com.google.protobuf.BoolValue getCompile();
    /**
     * <pre>
     * The setting is deprecated and has no effect.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue compile = 44 [deprecated = true];</code>
     */
    @java.lang.Deprecated com.google.protobuf.BoolValueOrBuilder getCompileOrBuilder();

    /**
     * <pre>
     * The setting is deprecated and has no effect.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_count_to_compile = 45 [deprecated = true];</code>
     * @deprecated
     * @return Whether the minCountToCompile field is set.
     */
    @java.lang.Deprecated boolean hasMinCountToCompile();
    /**
     * <pre>
     * The setting is deprecated and has no effect.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_count_to_compile = 45 [deprecated = true];</code>
     * @deprecated
     * @return The minCountToCompile.
     */
    @java.lang.Deprecated com.google.protobuf.Int64Value getMinCountToCompile();
    /**
     * <pre>
     * The setting is deprecated and has no effect.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_count_to_compile = 45 [deprecated = true];</code>
     */
    @java.lang.Deprecated com.google.protobuf.Int64ValueOrBuilder getMinCountToCompileOrBuilder();
  }
  /**
   * <pre>
   * ClickHouse user settings. Supported settings are a limited subset of all settings
   * described in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/).
   * </pre>
   *
   * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.UserSettings}
   */
  public static final class UserSettings extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.clickhouse.v1.UserSettings)
      UserSettingsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UserSettings.newBuilder() to construct.
    private UserSettings(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UserSettings() {
      distributedProductMode_ = 0;
      readOverflowMode_ = 0;
      groupByOverflowMode_ = 0;
      sortOverflowMode_ = 0;
      resultOverflowMode_ = 0;
      distinctOverflowMode_ = 0;
      transferOverflowMode_ = 0;
      timeoutOverflowMode_ = 0;
      setOverflowMode_ = 0;
      joinOverflowMode_ = 0;
      joinAlgorithm_ = java.util.Collections.emptyList();
      countDistinctImplementation_ = 0;
      dateTimeInputFormat_ = 0;
      dateTimeOutputFormat_ = 0;
      quotaMode_ = 0;
      formatRegexp_ = "";
      formatRegexpEscapingRule_ = 0;
      localFilesystemReadMethod_ = 0;
      remoteFilesystemReadMethod_ = 0;
      loadBalancing_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new UserSettings();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private UserSettings(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (readonly_ != null) {
                subBuilder = readonly_.toBuilder();
              }
              readonly_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(readonly_);
                readonly_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (allowDdl_ != null) {
                subBuilder = allowDdl_.toBuilder();
              }
              allowDdl_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(allowDdl_);
                allowDdl_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (insertQuorum_ != null) {
                subBuilder = insertQuorum_.toBuilder();
              }
              insertQuorum_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(insertQuorum_);
                insertQuorum_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (insertQuorumTimeout_ != null) {
                subBuilder = insertQuorumTimeout_.toBuilder();
              }
              insertQuorumTimeout_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(insertQuorumTimeout_);
                insertQuorumTimeout_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (selectSequentialConsistency_ != null) {
                subBuilder = selectSequentialConsistency_.toBuilder();
              }
              selectSequentialConsistency_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(selectSequentialConsistency_);
                selectSequentialConsistency_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxReplicaDelayForDistributedQueries_ != null) {
                subBuilder = maxReplicaDelayForDistributedQueries_.toBuilder();
              }
              maxReplicaDelayForDistributedQueries_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxReplicaDelayForDistributedQueries_);
                maxReplicaDelayForDistributedQueries_ = subBuilder.buildPartial();
              }

              break;
            }
            case 58: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (fallbackToStaleReplicasForDistributedQueries_ != null) {
                subBuilder = fallbackToStaleReplicasForDistributedQueries_.toBuilder();
              }
              fallbackToStaleReplicasForDistributedQueries_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(fallbackToStaleReplicasForDistributedQueries_);
                fallbackToStaleReplicasForDistributedQueries_ = subBuilder.buildPartial();
              }

              break;
            }
            case 66: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxThreads_ != null) {
                subBuilder = maxThreads_.toBuilder();
              }
              maxThreads_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxThreads_);
                maxThreads_ = subBuilder.buildPartial();
              }

              break;
            }
            case 74: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxBlockSize_ != null) {
                subBuilder = maxBlockSize_.toBuilder();
              }
              maxBlockSize_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxBlockSize_);
                maxBlockSize_ = subBuilder.buildPartial();
              }

              break;
            }
            case 82: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxInsertBlockSize_ != null) {
                subBuilder = maxInsertBlockSize_.toBuilder();
              }
              maxInsertBlockSize_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxInsertBlockSize_);
                maxInsertBlockSize_ = subBuilder.buildPartial();
              }

              break;
            }
            case 90: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxMemoryUsage_ != null) {
                subBuilder = maxMemoryUsage_.toBuilder();
              }
              maxMemoryUsage_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxMemoryUsage_);
                maxMemoryUsage_ = subBuilder.buildPartial();
              }

              break;
            }
            case 98: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxMemoryUsageForUser_ != null) {
                subBuilder = maxMemoryUsageForUser_.toBuilder();
              }
              maxMemoryUsageForUser_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxMemoryUsageForUser_);
                maxMemoryUsageForUser_ = subBuilder.buildPartial();
              }

              break;
            }
            case 106: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxRowsToRead_ != null) {
                subBuilder = maxRowsToRead_.toBuilder();
              }
              maxRowsToRead_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxRowsToRead_);
                maxRowsToRead_ = subBuilder.buildPartial();
              }

              break;
            }
            case 114: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxBytesToRead_ != null) {
                subBuilder = maxBytesToRead_.toBuilder();
              }
              maxBytesToRead_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxBytesToRead_);
                maxBytesToRead_ = subBuilder.buildPartial();
              }

              break;
            }
            case 120: {
              int rawValue = input.readEnum();

              readOverflowMode_ = rawValue;
              break;
            }
            case 130: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxRowsToGroupBy_ != null) {
                subBuilder = maxRowsToGroupBy_.toBuilder();
              }
              maxRowsToGroupBy_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxRowsToGroupBy_);
                maxRowsToGroupBy_ = subBuilder.buildPartial();
              }

              break;
            }
            case 136: {
              int rawValue = input.readEnum();

              groupByOverflowMode_ = rawValue;
              break;
            }
            case 146: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxRowsToSort_ != null) {
                subBuilder = maxRowsToSort_.toBuilder();
              }
              maxRowsToSort_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxRowsToSort_);
                maxRowsToSort_ = subBuilder.buildPartial();
              }

              break;
            }
            case 154: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxBytesToSort_ != null) {
                subBuilder = maxBytesToSort_.toBuilder();
              }
              maxBytesToSort_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxBytesToSort_);
                maxBytesToSort_ = subBuilder.buildPartial();
              }

              break;
            }
            case 160: {
              int rawValue = input.readEnum();

              sortOverflowMode_ = rawValue;
              break;
            }
            case 170: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxResultRows_ != null) {
                subBuilder = maxResultRows_.toBuilder();
              }
              maxResultRows_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxResultRows_);
                maxResultRows_ = subBuilder.buildPartial();
              }

              break;
            }
            case 178: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxResultBytes_ != null) {
                subBuilder = maxResultBytes_.toBuilder();
              }
              maxResultBytes_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxResultBytes_);
                maxResultBytes_ = subBuilder.buildPartial();
              }

              break;
            }
            case 184: {
              int rawValue = input.readEnum();

              resultOverflowMode_ = rawValue;
              break;
            }
            case 194: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxRowsInDistinct_ != null) {
                subBuilder = maxRowsInDistinct_.toBuilder();
              }
              maxRowsInDistinct_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxRowsInDistinct_);
                maxRowsInDistinct_ = subBuilder.buildPartial();
              }

              break;
            }
            case 202: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxBytesInDistinct_ != null) {
                subBuilder = maxBytesInDistinct_.toBuilder();
              }
              maxBytesInDistinct_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxBytesInDistinct_);
                maxBytesInDistinct_ = subBuilder.buildPartial();
              }

              break;
            }
            case 208: {
              int rawValue = input.readEnum();

              distinctOverflowMode_ = rawValue;
              break;
            }
            case 218: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxRowsToTransfer_ != null) {
                subBuilder = maxRowsToTransfer_.toBuilder();
              }
              maxRowsToTransfer_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxRowsToTransfer_);
                maxRowsToTransfer_ = subBuilder.buildPartial();
              }

              break;
            }
            case 226: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxBytesToTransfer_ != null) {
                subBuilder = maxBytesToTransfer_.toBuilder();
              }
              maxBytesToTransfer_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxBytesToTransfer_);
                maxBytesToTransfer_ = subBuilder.buildPartial();
              }

              break;
            }
            case 232: {
              int rawValue = input.readEnum();

              transferOverflowMode_ = rawValue;
              break;
            }
            case 242: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxExecutionTime_ != null) {
                subBuilder = maxExecutionTime_.toBuilder();
              }
              maxExecutionTime_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxExecutionTime_);
                maxExecutionTime_ = subBuilder.buildPartial();
              }

              break;
            }
            case 248: {
              int rawValue = input.readEnum();

              timeoutOverflowMode_ = rawValue;
              break;
            }
            case 258: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxColumnsToRead_ != null) {
                subBuilder = maxColumnsToRead_.toBuilder();
              }
              maxColumnsToRead_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxColumnsToRead_);
                maxColumnsToRead_ = subBuilder.buildPartial();
              }

              break;
            }
            case 266: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxTemporaryColumns_ != null) {
                subBuilder = maxTemporaryColumns_.toBuilder();
              }
              maxTemporaryColumns_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxTemporaryColumns_);
                maxTemporaryColumns_ = subBuilder.buildPartial();
              }

              break;
            }
            case 274: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxTemporaryNonConstColumns_ != null) {
                subBuilder = maxTemporaryNonConstColumns_.toBuilder();
              }
              maxTemporaryNonConstColumns_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxTemporaryNonConstColumns_);
                maxTemporaryNonConstColumns_ = subBuilder.buildPartial();
              }

              break;
            }
            case 282: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxQuerySize_ != null) {
                subBuilder = maxQuerySize_.toBuilder();
              }
              maxQuerySize_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxQuerySize_);
                maxQuerySize_ = subBuilder.buildPartial();
              }

              break;
            }
            case 290: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxAstDepth_ != null) {
                subBuilder = maxAstDepth_.toBuilder();
              }
              maxAstDepth_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxAstDepth_);
                maxAstDepth_ = subBuilder.buildPartial();
              }

              break;
            }
            case 298: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxAstElements_ != null) {
                subBuilder = maxAstElements_.toBuilder();
              }
              maxAstElements_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxAstElements_);
                maxAstElements_ = subBuilder.buildPartial();
              }

              break;
            }
            case 306: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxExpandedAstElements_ != null) {
                subBuilder = maxExpandedAstElements_.toBuilder();
              }
              maxExpandedAstElements_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxExpandedAstElements_);
                maxExpandedAstElements_ = subBuilder.buildPartial();
              }

              break;
            }
            case 314: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (connectTimeout_ != null) {
                subBuilder = connectTimeout_.toBuilder();
              }
              connectTimeout_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(connectTimeout_);
                connectTimeout_ = subBuilder.buildPartial();
              }

              break;
            }
            case 322: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (receiveTimeout_ != null) {
                subBuilder = receiveTimeout_.toBuilder();
              }
              receiveTimeout_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(receiveTimeout_);
                receiveTimeout_ = subBuilder.buildPartial();
              }

              break;
            }
            case 330: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (sendTimeout_ != null) {
                subBuilder = sendTimeout_.toBuilder();
              }
              sendTimeout_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(sendTimeout_);
                sendTimeout_ = subBuilder.buildPartial();
              }

              break;
            }
            case 338: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (replicationAlterPartitionsSync_ != null) {
                subBuilder = replicationAlterPartitionsSync_.toBuilder();
              }
              replicationAlterPartitionsSync_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(replicationAlterPartitionsSync_);
                replicationAlterPartitionsSync_ = subBuilder.buildPartial();
              }

              break;
            }
            case 344: {
              int rawValue = input.readEnum();

              distributedProductMode_ = rawValue;
              break;
            }
            case 354: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (compile_ != null) {
                subBuilder = compile_.toBuilder();
              }
              compile_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(compile_);
                compile_ = subBuilder.buildPartial();
              }

              break;
            }
            case 362: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (minCountToCompile_ != null) {
                subBuilder = minCountToCompile_.toBuilder();
              }
              minCountToCompile_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(minCountToCompile_);
                minCountToCompile_ = subBuilder.buildPartial();
              }

              break;
            }
            case 370: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (compileExpressions_ != null) {
                subBuilder = compileExpressions_.toBuilder();
              }
              compileExpressions_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(compileExpressions_);
                compileExpressions_ = subBuilder.buildPartial();
              }

              break;
            }
            case 378: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (minCountToCompileExpression_ != null) {
                subBuilder = minCountToCompileExpression_.toBuilder();
              }
              minCountToCompileExpression_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(minCountToCompileExpression_);
                minCountToCompileExpression_ = subBuilder.buildPartial();
              }

              break;
            }
            case 386: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (minInsertBlockSizeRows_ != null) {
                subBuilder = minInsertBlockSizeRows_.toBuilder();
              }
              minInsertBlockSizeRows_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(minInsertBlockSizeRows_);
                minInsertBlockSizeRows_ = subBuilder.buildPartial();
              }

              break;
            }
            case 394: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (minInsertBlockSizeBytes_ != null) {
                subBuilder = minInsertBlockSizeBytes_.toBuilder();
              }
              minInsertBlockSizeBytes_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(minInsertBlockSizeBytes_);
                minInsertBlockSizeBytes_ = subBuilder.buildPartial();
              }

              break;
            }
            case 402: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (minBytesToUseDirectIo_ != null) {
                subBuilder = minBytesToUseDirectIo_.toBuilder();
              }
              minBytesToUseDirectIo_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(minBytesToUseDirectIo_);
                minBytesToUseDirectIo_ = subBuilder.buildPartial();
              }

              break;
            }
            case 410: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (useUncompressedCache_ != null) {
                subBuilder = useUncompressedCache_.toBuilder();
              }
              useUncompressedCache_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(useUncompressedCache_);
                useUncompressedCache_ = subBuilder.buildPartial();
              }

              break;
            }
            case 418: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (mergeTreeMaxRowsToUseCache_ != null) {
                subBuilder = mergeTreeMaxRowsToUseCache_.toBuilder();
              }
              mergeTreeMaxRowsToUseCache_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mergeTreeMaxRowsToUseCache_);
                mergeTreeMaxRowsToUseCache_ = subBuilder.buildPartial();
              }

              break;
            }
            case 426: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (mergeTreeMaxBytesToUseCache_ != null) {
                subBuilder = mergeTreeMaxBytesToUseCache_.toBuilder();
              }
              mergeTreeMaxBytesToUseCache_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mergeTreeMaxBytesToUseCache_);
                mergeTreeMaxBytesToUseCache_ = subBuilder.buildPartial();
              }

              break;
            }
            case 434: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (mergeTreeMinRowsForConcurrentRead_ != null) {
                subBuilder = mergeTreeMinRowsForConcurrentRead_.toBuilder();
              }
              mergeTreeMinRowsForConcurrentRead_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mergeTreeMinRowsForConcurrentRead_);
                mergeTreeMinRowsForConcurrentRead_ = subBuilder.buildPartial();
              }

              break;
            }
            case 442: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (mergeTreeMinBytesForConcurrentRead_ != null) {
                subBuilder = mergeTreeMinBytesForConcurrentRead_.toBuilder();
              }
              mergeTreeMinBytesForConcurrentRead_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mergeTreeMinBytesForConcurrentRead_);
                mergeTreeMinBytesForConcurrentRead_ = subBuilder.buildPartial();
              }

              break;
            }
            case 450: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (priority_ != null) {
                subBuilder = priority_.toBuilder();
              }
              priority_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(priority_);
                priority_ = subBuilder.buildPartial();
              }

              break;
            }
            case 458: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxNetworkBandwidth_ != null) {
                subBuilder = maxNetworkBandwidth_.toBuilder();
              }
              maxNetworkBandwidth_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxNetworkBandwidth_);
                maxNetworkBandwidth_ = subBuilder.buildPartial();
              }

              break;
            }
            case 466: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxNetworkBandwidthForUser_ != null) {
                subBuilder = maxNetworkBandwidthForUser_.toBuilder();
              }
              maxNetworkBandwidthForUser_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxNetworkBandwidthForUser_);
                maxNetworkBandwidthForUser_ = subBuilder.buildPartial();
              }

              break;
            }
            case 474: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (forceIndexByDate_ != null) {
                subBuilder = forceIndexByDate_.toBuilder();
              }
              forceIndexByDate_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(forceIndexByDate_);
                forceIndexByDate_ = subBuilder.buildPartial();
              }

              break;
            }
            case 482: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (forcePrimaryKey_ != null) {
                subBuilder = forcePrimaryKey_.toBuilder();
              }
              forcePrimaryKey_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(forcePrimaryKey_);
                forcePrimaryKey_ = subBuilder.buildPartial();
              }

              break;
            }
            case 490: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (inputFormatValuesInterpretExpressions_ != null) {
                subBuilder = inputFormatValuesInterpretExpressions_.toBuilder();
              }
              inputFormatValuesInterpretExpressions_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(inputFormatValuesInterpretExpressions_);
                inputFormatValuesInterpretExpressions_ = subBuilder.buildPartial();
              }

              break;
            }
            case 498: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (inputFormatDefaultsForOmittedFields_ != null) {
                subBuilder = inputFormatDefaultsForOmittedFields_.toBuilder();
              }
              inputFormatDefaultsForOmittedFields_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(inputFormatDefaultsForOmittedFields_);
                inputFormatDefaultsForOmittedFields_ = subBuilder.buildPartial();
              }

              break;
            }
            case 506: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (outputFormatJsonQuote64BitIntegers_ != null) {
                subBuilder = outputFormatJsonQuote64BitIntegers_.toBuilder();
              }
              outputFormatJsonQuote64BitIntegers_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(outputFormatJsonQuote64BitIntegers_);
                outputFormatJsonQuote64BitIntegers_ = subBuilder.buildPartial();
              }

              break;
            }
            case 514: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (outputFormatJsonQuoteDenormals_ != null) {
                subBuilder = outputFormatJsonQuoteDenormals_.toBuilder();
              }
              outputFormatJsonQuoteDenormals_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(outputFormatJsonQuoteDenormals_);
                outputFormatJsonQuoteDenormals_ = subBuilder.buildPartial();
              }

              break;
            }
            case 522: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (httpConnectionTimeout_ != null) {
                subBuilder = httpConnectionTimeout_.toBuilder();
              }
              httpConnectionTimeout_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(httpConnectionTimeout_);
                httpConnectionTimeout_ = subBuilder.buildPartial();
              }

              break;
            }
            case 530: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (httpReceiveTimeout_ != null) {
                subBuilder = httpReceiveTimeout_.toBuilder();
              }
              httpReceiveTimeout_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(httpReceiveTimeout_);
                httpReceiveTimeout_ = subBuilder.buildPartial();
              }

              break;
            }
            case 538: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (httpSendTimeout_ != null) {
                subBuilder = httpSendTimeout_.toBuilder();
              }
              httpSendTimeout_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(httpSendTimeout_);
                httpSendTimeout_ = subBuilder.buildPartial();
              }

              break;
            }
            case 546: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (enableHttpCompression_ != null) {
                subBuilder = enableHttpCompression_.toBuilder();
              }
              enableHttpCompression_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(enableHttpCompression_);
                enableHttpCompression_ = subBuilder.buildPartial();
              }

              break;
            }
            case 554: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (sendProgressInHttpHeaders_ != null) {
                subBuilder = sendProgressInHttpHeaders_.toBuilder();
              }
              sendProgressInHttpHeaders_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(sendProgressInHttpHeaders_);
                sendProgressInHttpHeaders_ = subBuilder.buildPartial();
              }

              break;
            }
            case 562: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (httpHeadersProgressInterval_ != null) {
                subBuilder = httpHeadersProgressInterval_.toBuilder();
              }
              httpHeadersProgressInterval_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(httpHeadersProgressInterval_);
                httpHeadersProgressInterval_ = subBuilder.buildPartial();
              }

              break;
            }
            case 570: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (addHttpCorsHeader_ != null) {
                subBuilder = addHttpCorsHeader_.toBuilder();
              }
              addHttpCorsHeader_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(addHttpCorsHeader_);
                addHttpCorsHeader_ = subBuilder.buildPartial();
              }

              break;
            }
            case 578: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (distributedAggregationMemoryEfficient_ != null) {
                subBuilder = distributedAggregationMemoryEfficient_.toBuilder();
              }
              distributedAggregationMemoryEfficient_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(distributedAggregationMemoryEfficient_);
                distributedAggregationMemoryEfficient_ = subBuilder.buildPartial();
              }

              break;
            }
            case 586: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (distributedDdlTaskTimeout_ != null) {
                subBuilder = distributedDdlTaskTimeout_.toBuilder();
              }
              distributedDdlTaskTimeout_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(distributedDdlTaskTimeout_);
                distributedDdlTaskTimeout_ = subBuilder.buildPartial();
              }

              break;
            }
            case 594: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxBytesBeforeExternalGroupBy_ != null) {
                subBuilder = maxBytesBeforeExternalGroupBy_.toBuilder();
              }
              maxBytesBeforeExternalGroupBy_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxBytesBeforeExternalGroupBy_);
                maxBytesBeforeExternalGroupBy_ = subBuilder.buildPartial();
              }

              break;
            }
            case 602: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxBytesBeforeExternalSort_ != null) {
                subBuilder = maxBytesBeforeExternalSort_.toBuilder();
              }
              maxBytesBeforeExternalSort_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxBytesBeforeExternalSort_);
                maxBytesBeforeExternalSort_ = subBuilder.buildPartial();
              }

              break;
            }
            case 610: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (groupByTwoLevelThreshold_ != null) {
                subBuilder = groupByTwoLevelThreshold_.toBuilder();
              }
              groupByTwoLevelThreshold_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(groupByTwoLevelThreshold_);
                groupByTwoLevelThreshold_ = subBuilder.buildPartial();
              }

              break;
            }
            case 618: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (groupByTwoLevelThresholdBytes_ != null) {
                subBuilder = groupByTwoLevelThresholdBytes_.toBuilder();
              }
              groupByTwoLevelThresholdBytes_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(groupByTwoLevelThresholdBytes_);
                groupByTwoLevelThresholdBytes_ = subBuilder.buildPartial();
              }

              break;
            }
            case 626: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (lowCardinalityAllowInNativeFormat_ != null) {
                subBuilder = lowCardinalityAllowInNativeFormat_.toBuilder();
              }
              lowCardinalityAllowInNativeFormat_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(lowCardinalityAllowInNativeFormat_);
                lowCardinalityAllowInNativeFormat_ = subBuilder.buildPartial();
              }

              break;
            }
            case 634: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (emptyResultForAggregationByEmptySet_ != null) {
                subBuilder = emptyResultForAggregationByEmptySet_.toBuilder();
              }
              emptyResultForAggregationByEmptySet_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(emptyResultForAggregationByEmptySet_);
                emptyResultForAggregationByEmptySet_ = subBuilder.buildPartial();
              }

              break;
            }
            case 640: {
              int rawValue = input.readEnum();

              quotaMode_ = rawValue;
              break;
            }
            case 650: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (skipUnavailableShards_ != null) {
                subBuilder = skipUnavailableShards_.toBuilder();
              }
              skipUnavailableShards_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(skipUnavailableShards_);
                skipUnavailableShards_ = subBuilder.buildPartial();
              }

              break;
            }
            case 674: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (minExecutionSpeed_ != null) {
                subBuilder = minExecutionSpeed_.toBuilder();
              }
              minExecutionSpeed_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(minExecutionSpeed_);
                minExecutionSpeed_ = subBuilder.buildPartial();
              }

              break;
            }
            case 682: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (minExecutionSpeedBytes_ != null) {
                subBuilder = minExecutionSpeedBytes_.toBuilder();
              }
              minExecutionSpeedBytes_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(minExecutionSpeedBytes_);
                minExecutionSpeedBytes_ = subBuilder.buildPartial();
              }

              break;
            }
            case 688: {
              int rawValue = input.readEnum();

              countDistinctImplementation_ = rawValue;
              break;
            }
            case 698: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxRowsInSet_ != null) {
                subBuilder = maxRowsInSet_.toBuilder();
              }
              maxRowsInSet_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxRowsInSet_);
                maxRowsInSet_ = subBuilder.buildPartial();
              }

              break;
            }
            case 706: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxBytesInSet_ != null) {
                subBuilder = maxBytesInSet_.toBuilder();
              }
              maxBytesInSet_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxBytesInSet_);
                maxBytesInSet_ = subBuilder.buildPartial();
              }

              break;
            }
            case 712: {
              int rawValue = input.readEnum();

              setOverflowMode_ = rawValue;
              break;
            }
            case 722: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxRowsInJoin_ != null) {
                subBuilder = maxRowsInJoin_.toBuilder();
              }
              maxRowsInJoin_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxRowsInJoin_);
                maxRowsInJoin_ = subBuilder.buildPartial();
              }

              break;
            }
            case 730: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxBytesInJoin_ != null) {
                subBuilder = maxBytesInJoin_.toBuilder();
              }
              maxBytesInJoin_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxBytesInJoin_);
                maxBytesInJoin_ = subBuilder.buildPartial();
              }

              break;
            }
            case 736: {
              int rawValue = input.readEnum();

              joinOverflowMode_ = rawValue;
              break;
            }
            case 746: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (joinedSubqueryRequiresAlias_ != null) {
                subBuilder = joinedSubqueryRequiresAlias_.toBuilder();
              }
              joinedSubqueryRequiresAlias_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(joinedSubqueryRequiresAlias_);
                joinedSubqueryRequiresAlias_ = subBuilder.buildPartial();
              }

              break;
            }
            case 754: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (joinUseNulls_ != null) {
                subBuilder = joinUseNulls_.toBuilder();
              }
              joinUseNulls_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(joinUseNulls_);
                joinUseNulls_ = subBuilder.buildPartial();
              }

              break;
            }
            case 762: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (transformNullIn_ != null) {
                subBuilder = transformNullIn_.toBuilder();
              }
              transformNullIn_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(transformNullIn_);
                transformNullIn_ = subBuilder.buildPartial();
              }

              break;
            }
            case 770: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (allowIntrospectionFunctions_ != null) {
                subBuilder = allowIntrospectionFunctions_.toBuilder();
              }
              allowIntrospectionFunctions_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(allowIntrospectionFunctions_);
                allowIntrospectionFunctions_ = subBuilder.buildPartial();
              }

              break;
            }
            case 778: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (connectTimeoutWithFailover_ != null) {
                subBuilder = connectTimeoutWithFailover_.toBuilder();
              }
              connectTimeoutWithFailover_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(connectTimeoutWithFailover_);
                connectTimeoutWithFailover_ = subBuilder.buildPartial();
              }

              break;
            }
            case 786: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (timeoutBeforeCheckingExecutionSpeed_ != null) {
                subBuilder = timeoutBeforeCheckingExecutionSpeed_.toBuilder();
              }
              timeoutBeforeCheckingExecutionSpeed_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(timeoutBeforeCheckingExecutionSpeed_);
                timeoutBeforeCheckingExecutionSpeed_ = subBuilder.buildPartial();
              }

              break;
            }
            case 794: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (insertQuorumParallel_ != null) {
                subBuilder = insertQuorumParallel_.toBuilder();
              }
              insertQuorumParallel_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(insertQuorumParallel_);
                insertQuorumParallel_ = subBuilder.buildPartial();
              }

              break;
            }
            case 802: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (insertNullAsDefault_ != null) {
                subBuilder = insertNullAsDefault_.toBuilder();
              }
              insertNullAsDefault_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(insertNullAsDefault_);
                insertNullAsDefault_ = subBuilder.buildPartial();
              }

              break;
            }
            case 810: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (deduplicateBlocksInDependentMaterializedViews_ != null) {
                subBuilder = deduplicateBlocksInDependentMaterializedViews_.toBuilder();
              }
              deduplicateBlocksInDependentMaterializedViews_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(deduplicateBlocksInDependentMaterializedViews_);
                deduplicateBlocksInDependentMaterializedViews_ = subBuilder.buildPartial();
              }

              break;
            }
            case 818: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxPartitionsPerInsertBlock_ != null) {
                subBuilder = maxPartitionsPerInsertBlock_.toBuilder();
              }
              maxPartitionsPerInsertBlock_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxPartitionsPerInsertBlock_);
                maxPartitionsPerInsertBlock_ = subBuilder.buildPartial();
              }

              break;
            }
            case 826: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxConcurrentQueriesForUser_ != null) {
                subBuilder = maxConcurrentQueriesForUser_.toBuilder();
              }
              maxConcurrentQueriesForUser_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxConcurrentQueriesForUser_);
                maxConcurrentQueriesForUser_ = subBuilder.buildPartial();
              }

              break;
            }
            case 832: {
              int rawValue = input.readEnum();
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                joinAlgorithm_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              joinAlgorithm_.add(rawValue);
              break;
            }
            case 834: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int rawValue = input.readEnum();
                if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                  joinAlgorithm_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000001;
                }
                joinAlgorithm_.add(rawValue);
              }
              input.popLimit(oldLimit);
              break;
            }
            case 842: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (anyJoinDistinctRightTableKeys_ != null) {
                subBuilder = anyJoinDistinctRightTableKeys_.toBuilder();
              }
              anyJoinDistinctRightTableKeys_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(anyJoinDistinctRightTableKeys_);
                anyJoinDistinctRightTableKeys_ = subBuilder.buildPartial();
              }

              break;
            }
            case 850: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (inputFormatNullAsDefault_ != null) {
                subBuilder = inputFormatNullAsDefault_.toBuilder();
              }
              inputFormatNullAsDefault_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(inputFormatNullAsDefault_);
                inputFormatNullAsDefault_ = subBuilder.buildPartial();
              }

              break;
            }
            case 856: {
              int rawValue = input.readEnum();

              dateTimeInputFormat_ = rawValue;
              break;
            }
            case 866: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (inputFormatWithNamesUseHeader_ != null) {
                subBuilder = inputFormatWithNamesUseHeader_.toBuilder();
              }
              inputFormatWithNamesUseHeader_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(inputFormatWithNamesUseHeader_);
                inputFormatWithNamesUseHeader_ = subBuilder.buildPartial();
              }

              break;
            }
            case 872: {
              int rawValue = input.readEnum();

              dateTimeOutputFormat_ = rawValue;
              break;
            }
            case 882: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (allowSuspiciousLowCardinalityTypes_ != null) {
                subBuilder = allowSuspiciousLowCardinalityTypes_.toBuilder();
              }
              allowSuspiciousLowCardinalityTypes_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(allowSuspiciousLowCardinalityTypes_);
                allowSuspiciousLowCardinalityTypes_ = subBuilder.buildPartial();
              }

              break;
            }
            case 890: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (cancelHttpReadonlyQueriesOnClientClose_ != null) {
                subBuilder = cancelHttpReadonlyQueriesOnClientClose_.toBuilder();
              }
              cancelHttpReadonlyQueriesOnClientClose_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(cancelHttpReadonlyQueriesOnClientClose_);
                cancelHttpReadonlyQueriesOnClientClose_ = subBuilder.buildPartial();
              }

              break;
            }
            case 898: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxHttpGetRedirects_ != null) {
                subBuilder = maxHttpGetRedirects_.toBuilder();
              }
              maxHttpGetRedirects_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxHttpGetRedirects_);
                maxHttpGetRedirects_ = subBuilder.buildPartial();
              }

              break;
            }
            case 906: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (flattenNested_ != null) {
                subBuilder = flattenNested_.toBuilder();
              }
              flattenNested_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(flattenNested_);
                flattenNested_ = subBuilder.buildPartial();
              }

              break;
            }
            case 914: {
              java.lang.String s = input.readStringRequireUtf8();

              formatRegexp_ = s;
              break;
            }
            case 920: {
              int rawValue = input.readEnum();

              formatRegexpEscapingRule_ = rawValue;
              break;
            }
            case 930: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (formatRegexpSkipUnmatched_ != null) {
                subBuilder = formatRegexpSkipUnmatched_.toBuilder();
              }
              formatRegexpSkipUnmatched_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(formatRegexpSkipUnmatched_);
                formatRegexpSkipUnmatched_ = subBuilder.buildPartial();
              }

              break;
            }
            case 938: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (asyncInsert_ != null) {
                subBuilder = asyncInsert_.toBuilder();
              }
              asyncInsert_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(asyncInsert_);
                asyncInsert_ = subBuilder.buildPartial();
              }

              break;
            }
            case 946: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (asyncInsertThreads_ != null) {
                subBuilder = asyncInsertThreads_.toBuilder();
              }
              asyncInsertThreads_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(asyncInsertThreads_);
                asyncInsertThreads_ = subBuilder.buildPartial();
              }

              break;
            }
            case 954: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (waitForAsyncInsert_ != null) {
                subBuilder = waitForAsyncInsert_.toBuilder();
              }
              waitForAsyncInsert_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(waitForAsyncInsert_);
                waitForAsyncInsert_ = subBuilder.buildPartial();
              }

              break;
            }
            case 962: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (waitForAsyncInsertTimeout_ != null) {
                subBuilder = waitForAsyncInsertTimeout_.toBuilder();
              }
              waitForAsyncInsertTimeout_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(waitForAsyncInsertTimeout_);
                waitForAsyncInsertTimeout_ = subBuilder.buildPartial();
              }

              break;
            }
            case 970: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (asyncInsertMaxDataSize_ != null) {
                subBuilder = asyncInsertMaxDataSize_.toBuilder();
              }
              asyncInsertMaxDataSize_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(asyncInsertMaxDataSize_);
                asyncInsertMaxDataSize_ = subBuilder.buildPartial();
              }

              break;
            }
            case 978: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (asyncInsertBusyTimeout_ != null) {
                subBuilder = asyncInsertBusyTimeout_.toBuilder();
              }
              asyncInsertBusyTimeout_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(asyncInsertBusyTimeout_);
                asyncInsertBusyTimeout_ = subBuilder.buildPartial();
              }

              break;
            }
            case 986: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (asyncInsertStaleTimeout_ != null) {
                subBuilder = asyncInsertStaleTimeout_.toBuilder();
              }
              asyncInsertStaleTimeout_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(asyncInsertStaleTimeout_);
                asyncInsertStaleTimeout_ = subBuilder.buildPartial();
              }

              break;
            }
            case 994: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (memoryProfilerStep_ != null) {
                subBuilder = memoryProfilerStep_.toBuilder();
              }
              memoryProfilerStep_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(memoryProfilerStep_);
                memoryProfilerStep_ = subBuilder.buildPartial();
              }

              break;
            }
            case 1002: {
              com.google.protobuf.DoubleValue.Builder subBuilder = null;
              if (memoryProfilerSampleProbability_ != null) {
                subBuilder = memoryProfilerSampleProbability_.toBuilder();
              }
              memoryProfilerSampleProbability_ = input.readMessage(com.google.protobuf.DoubleValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(memoryProfilerSampleProbability_);
                memoryProfilerSampleProbability_ = subBuilder.buildPartial();
              }

              break;
            }
            case 1010: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxFinalThreads_ != null) {
                subBuilder = maxFinalThreads_.toBuilder();
              }
              maxFinalThreads_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxFinalThreads_);
                maxFinalThreads_ = subBuilder.buildPartial();
              }

              break;
            }
            case 1018: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (inputFormatParallelParsing_ != null) {
                subBuilder = inputFormatParallelParsing_.toBuilder();
              }
              inputFormatParallelParsing_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(inputFormatParallelParsing_);
                inputFormatParallelParsing_ = subBuilder.buildPartial();
              }

              break;
            }
            case 1026: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (inputFormatImportNestedJson_ != null) {
                subBuilder = inputFormatImportNestedJson_.toBuilder();
              }
              inputFormatImportNestedJson_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(inputFormatImportNestedJson_);
                inputFormatImportNestedJson_ = subBuilder.buildPartial();
              }

              break;
            }
            case 1032: {
              int rawValue = input.readEnum();

              localFilesystemReadMethod_ = rawValue;
              break;
            }
            case 1042: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxReadBufferSize_ != null) {
                subBuilder = maxReadBufferSize_.toBuilder();
              }
              maxReadBufferSize_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxReadBufferSize_);
                maxReadBufferSize_ = subBuilder.buildPartial();
              }

              break;
            }
            case 1050: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (insertKeeperMaxRetries_ != null) {
                subBuilder = insertKeeperMaxRetries_.toBuilder();
              }
              insertKeeperMaxRetries_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(insertKeeperMaxRetries_);
                insertKeeperMaxRetries_ = subBuilder.buildPartial();
              }

              break;
            }
            case 1058: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxTemporaryDataOnDiskSizeForUser_ != null) {
                subBuilder = maxTemporaryDataOnDiskSizeForUser_.toBuilder();
              }
              maxTemporaryDataOnDiskSizeForUser_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxTemporaryDataOnDiskSizeForUser_);
                maxTemporaryDataOnDiskSizeForUser_ = subBuilder.buildPartial();
              }

              break;
            }
            case 1066: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxTemporaryDataOnDiskSizeForQuery_ != null) {
                subBuilder = maxTemporaryDataOnDiskSizeForQuery_.toBuilder();
              }
              maxTemporaryDataOnDiskSizeForQuery_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxTemporaryDataOnDiskSizeForQuery_);
                maxTemporaryDataOnDiskSizeForQuery_ = subBuilder.buildPartial();
              }

              break;
            }
            case 1074: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxParserDepth_ != null) {
                subBuilder = maxParserDepth_.toBuilder();
              }
              maxParserDepth_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxParserDepth_);
                maxParserDepth_ = subBuilder.buildPartial();
              }

              break;
            }
            case 1080: {
              int rawValue = input.readEnum();

              remoteFilesystemReadMethod_ = rawValue;
              break;
            }
            case 1090: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (memoryOvercommitRatioDenominator_ != null) {
                subBuilder = memoryOvercommitRatioDenominator_.toBuilder();
              }
              memoryOvercommitRatioDenominator_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(memoryOvercommitRatioDenominator_);
                memoryOvercommitRatioDenominator_ = subBuilder.buildPartial();
              }

              break;
            }
            case 1098: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (memoryOvercommitRatioDenominatorForUser_ != null) {
                subBuilder = memoryOvercommitRatioDenominatorForUser_.toBuilder();
              }
              memoryOvercommitRatioDenominatorForUser_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(memoryOvercommitRatioDenominatorForUser_);
                memoryOvercommitRatioDenominatorForUser_ = subBuilder.buildPartial();
              }

              break;
            }
            case 1106: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (memoryUsageOvercommitMaxWaitMicroseconds_ != null) {
                subBuilder = memoryUsageOvercommitMaxWaitMicroseconds_.toBuilder();
              }
              memoryUsageOvercommitMaxWaitMicroseconds_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(memoryUsageOvercommitMaxWaitMicroseconds_);
                memoryUsageOvercommitMaxWaitMicroseconds_ = subBuilder.buildPartial();
              }

              break;
            }
            case 1114: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (logQueryThreads_ != null) {
                subBuilder = logQueryThreads_.toBuilder();
              }
              logQueryThreads_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(logQueryThreads_);
                logQueryThreads_ = subBuilder.buildPartial();
              }

              break;
            }
            case 1122: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (maxInsertThreads_ != null) {
                subBuilder = maxInsertThreads_.toBuilder();
              }
              maxInsertThreads_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxInsertThreads_);
                maxInsertThreads_ = subBuilder.buildPartial();
              }

              break;
            }
            case 1130: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (useHedgedRequests_ != null) {
                subBuilder = useHedgedRequests_.toBuilder();
              }
              useHedgedRequests_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(useHedgedRequests_);
                useHedgedRequests_ = subBuilder.buildPartial();
              }

              break;
            }
            case 1138: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (idleConnectionTimeout_ != null) {
                subBuilder = idleConnectionTimeout_.toBuilder();
              }
              idleConnectionTimeout_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(idleConnectionTimeout_);
                idleConnectionTimeout_ = subBuilder.buildPartial();
              }

              break;
            }
            case 1146: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (hedgedConnectionTimeoutMs_ != null) {
                subBuilder = hedgedConnectionTimeoutMs_.toBuilder();
              }
              hedgedConnectionTimeoutMs_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(hedgedConnectionTimeoutMs_);
                hedgedConnectionTimeoutMs_ = subBuilder.buildPartial();
              }

              break;
            }
            case 1152: {
              int rawValue = input.readEnum();

              loadBalancing_ = rawValue;
              break;
            }
            case 1162: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (preferLocalhostReplica_ != null) {
                subBuilder = preferLocalhostReplica_.toBuilder();
              }
              preferLocalhostReplica_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(preferLocalhostReplica_);
                preferLocalhostReplica_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          joinAlgorithm_ = java.util.Collections.unmodifiableList(joinAlgorithm_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.internal_static_yandex_cloud_mdb_clickhouse_v1_UserSettings_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.internal_static_yandex_cloud_mdb_clickhouse_v1_UserSettings_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.class, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.Builder.class);
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode}
     */
    public enum OverflowMode
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>OVERFLOW_MODE_UNSPECIFIED = 0;</code>
       */
      OVERFLOW_MODE_UNSPECIFIED(0),
      /**
       * <code>OVERFLOW_MODE_THROW = 1;</code>
       */
      OVERFLOW_MODE_THROW(1),
      /**
       * <code>OVERFLOW_MODE_BREAK = 2;</code>
       */
      OVERFLOW_MODE_BREAK(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>OVERFLOW_MODE_UNSPECIFIED = 0;</code>
       */
      public static final int OVERFLOW_MODE_UNSPECIFIED_VALUE = 0;
      /**
       * <code>OVERFLOW_MODE_THROW = 1;</code>
       */
      public static final int OVERFLOW_MODE_THROW_VALUE = 1;
      /**
       * <code>OVERFLOW_MODE_BREAK = 2;</code>
       */
      public static final int OVERFLOW_MODE_BREAK_VALUE = 2;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static OverflowMode valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static OverflowMode forNumber(int value) {
        switch (value) {
          case 0: return OVERFLOW_MODE_UNSPECIFIED;
          case 1: return OVERFLOW_MODE_THROW;
          case 2: return OVERFLOW_MODE_BREAK;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<OverflowMode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          OverflowMode> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<OverflowMode>() {
              public OverflowMode findValueByNumber(int number) {
                return OverflowMode.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.getDescriptor().getEnumTypes().get(0);
      }

      private static final OverflowMode[] VALUES = values();

      public static OverflowMode valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private OverflowMode(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode)
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.clickhouse.v1.UserSettings.GroupByOverflowMode}
     */
    public enum GroupByOverflowMode
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>GROUP_BY_OVERFLOW_MODE_UNSPECIFIED = 0;</code>
       */
      GROUP_BY_OVERFLOW_MODE_UNSPECIFIED(0),
      /**
       * <code>GROUP_BY_OVERFLOW_MODE_THROW = 1;</code>
       */
      GROUP_BY_OVERFLOW_MODE_THROW(1),
      /**
       * <code>GROUP_BY_OVERFLOW_MODE_BREAK = 2;</code>
       */
      GROUP_BY_OVERFLOW_MODE_BREAK(2),
      /**
       * <code>GROUP_BY_OVERFLOW_MODE_ANY = 3;</code>
       */
      GROUP_BY_OVERFLOW_MODE_ANY(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>GROUP_BY_OVERFLOW_MODE_UNSPECIFIED = 0;</code>
       */
      public static final int GROUP_BY_OVERFLOW_MODE_UNSPECIFIED_VALUE = 0;
      /**
       * <code>GROUP_BY_OVERFLOW_MODE_THROW = 1;</code>
       */
      public static final int GROUP_BY_OVERFLOW_MODE_THROW_VALUE = 1;
      /**
       * <code>GROUP_BY_OVERFLOW_MODE_BREAK = 2;</code>
       */
      public static final int GROUP_BY_OVERFLOW_MODE_BREAK_VALUE = 2;
      /**
       * <code>GROUP_BY_OVERFLOW_MODE_ANY = 3;</code>
       */
      public static final int GROUP_BY_OVERFLOW_MODE_ANY_VALUE = 3;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static GroupByOverflowMode valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static GroupByOverflowMode forNumber(int value) {
        switch (value) {
          case 0: return GROUP_BY_OVERFLOW_MODE_UNSPECIFIED;
          case 1: return GROUP_BY_OVERFLOW_MODE_THROW;
          case 2: return GROUP_BY_OVERFLOW_MODE_BREAK;
          case 3: return GROUP_BY_OVERFLOW_MODE_ANY;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<GroupByOverflowMode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          GroupByOverflowMode> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<GroupByOverflowMode>() {
              public GroupByOverflowMode findValueByNumber(int number) {
                return GroupByOverflowMode.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.getDescriptor().getEnumTypes().get(1);
      }

      private static final GroupByOverflowMode[] VALUES = values();

      public static GroupByOverflowMode valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private GroupByOverflowMode(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.clickhouse.v1.UserSettings.GroupByOverflowMode)
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.clickhouse.v1.UserSettings.DistributedProductMode}
     */
    public enum DistributedProductMode
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>DISTRIBUTED_PRODUCT_MODE_UNSPECIFIED = 0;</code>
       */
      DISTRIBUTED_PRODUCT_MODE_UNSPECIFIED(0),
      /**
       * <pre>
       * Default value. Prohibits using these types of subqueries (returns the "Double-distributed in/JOIN subqueries is denied" exception).
       * </pre>
       *
       * <code>DISTRIBUTED_PRODUCT_MODE_DENY = 1;</code>
       */
      DISTRIBUTED_PRODUCT_MODE_DENY(1),
      /**
       * <pre>
       * Replaces the database and table in the subquery with local ones for the destination server (shard), leaving the normal IN/JOIN.
       * </pre>
       *
       * <code>DISTRIBUTED_PRODUCT_MODE_LOCAL = 2;</code>
       */
      DISTRIBUTED_PRODUCT_MODE_LOCAL(2),
      /**
       * <pre>
       * Replaces the IN/JOIN query with GLOBAL IN/GLOBAL JOIN.
       * </pre>
       *
       * <code>DISTRIBUTED_PRODUCT_MODE_GLOBAL = 3;</code>
       */
      DISTRIBUTED_PRODUCT_MODE_GLOBAL(3),
      /**
       * <pre>
       * Allows the use of these types of subqueries.
       * </pre>
       *
       * <code>DISTRIBUTED_PRODUCT_MODE_ALLOW = 4;</code>
       */
      DISTRIBUTED_PRODUCT_MODE_ALLOW(4),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>DISTRIBUTED_PRODUCT_MODE_UNSPECIFIED = 0;</code>
       */
      public static final int DISTRIBUTED_PRODUCT_MODE_UNSPECIFIED_VALUE = 0;
      /**
       * <pre>
       * Default value. Prohibits using these types of subqueries (returns the "Double-distributed in/JOIN subqueries is denied" exception).
       * </pre>
       *
       * <code>DISTRIBUTED_PRODUCT_MODE_DENY = 1;</code>
       */
      public static final int DISTRIBUTED_PRODUCT_MODE_DENY_VALUE = 1;
      /**
       * <pre>
       * Replaces the database and table in the subquery with local ones for the destination server (shard), leaving the normal IN/JOIN.
       * </pre>
       *
       * <code>DISTRIBUTED_PRODUCT_MODE_LOCAL = 2;</code>
       */
      public static final int DISTRIBUTED_PRODUCT_MODE_LOCAL_VALUE = 2;
      /**
       * <pre>
       * Replaces the IN/JOIN query with GLOBAL IN/GLOBAL JOIN.
       * </pre>
       *
       * <code>DISTRIBUTED_PRODUCT_MODE_GLOBAL = 3;</code>
       */
      public static final int DISTRIBUTED_PRODUCT_MODE_GLOBAL_VALUE = 3;
      /**
       * <pre>
       * Allows the use of these types of subqueries.
       * </pre>
       *
       * <code>DISTRIBUTED_PRODUCT_MODE_ALLOW = 4;</code>
       */
      public static final int DISTRIBUTED_PRODUCT_MODE_ALLOW_VALUE = 4;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static DistributedProductMode valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static DistributedProductMode forNumber(int value) {
        switch (value) {
          case 0: return DISTRIBUTED_PRODUCT_MODE_UNSPECIFIED;
          case 1: return DISTRIBUTED_PRODUCT_MODE_DENY;
          case 2: return DISTRIBUTED_PRODUCT_MODE_LOCAL;
          case 3: return DISTRIBUTED_PRODUCT_MODE_GLOBAL;
          case 4: return DISTRIBUTED_PRODUCT_MODE_ALLOW;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<DistributedProductMode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          DistributedProductMode> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<DistributedProductMode>() {
              public DistributedProductMode findValueByNumber(int number) {
                return DistributedProductMode.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.getDescriptor().getEnumTypes().get(2);
      }

      private static final DistributedProductMode[] VALUES = values();

      public static DistributedProductMode valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private DistributedProductMode(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.clickhouse.v1.UserSettings.DistributedProductMode)
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.clickhouse.v1.UserSettings.QuotaMode}
     */
    public enum QuotaMode
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>QUOTA_MODE_UNSPECIFIED = 0;</code>
       */
      QUOTA_MODE_UNSPECIFIED(0),
      /**
       * <code>QUOTA_MODE_DEFAULT = 1;</code>
       */
      QUOTA_MODE_DEFAULT(1),
      /**
       * <code>QUOTA_MODE_KEYED = 2;</code>
       */
      QUOTA_MODE_KEYED(2),
      /**
       * <code>QUOTA_MODE_KEYED_BY_IP = 3;</code>
       */
      QUOTA_MODE_KEYED_BY_IP(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>QUOTA_MODE_UNSPECIFIED = 0;</code>
       */
      public static final int QUOTA_MODE_UNSPECIFIED_VALUE = 0;
      /**
       * <code>QUOTA_MODE_DEFAULT = 1;</code>
       */
      public static final int QUOTA_MODE_DEFAULT_VALUE = 1;
      /**
       * <code>QUOTA_MODE_KEYED = 2;</code>
       */
      public static final int QUOTA_MODE_KEYED_VALUE = 2;
      /**
       * <code>QUOTA_MODE_KEYED_BY_IP = 3;</code>
       */
      public static final int QUOTA_MODE_KEYED_BY_IP_VALUE = 3;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static QuotaMode valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static QuotaMode forNumber(int value) {
        switch (value) {
          case 0: return QUOTA_MODE_UNSPECIFIED;
          case 1: return QUOTA_MODE_DEFAULT;
          case 2: return QUOTA_MODE_KEYED;
          case 3: return QUOTA_MODE_KEYED_BY_IP;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<QuotaMode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          QuotaMode> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<QuotaMode>() {
              public QuotaMode findValueByNumber(int number) {
                return QuotaMode.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.getDescriptor().getEnumTypes().get(3);
      }

      private static final QuotaMode[] VALUES = values();

      public static QuotaMode valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private QuotaMode(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.clickhouse.v1.UserSettings.QuotaMode)
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.clickhouse.v1.UserSettings.CountDistinctImplementation}
     */
    public enum CountDistinctImplementation
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>COUNT_DISTINCT_IMPLEMENTATION_UNSPECIFIED = 0;</code>
       */
      COUNT_DISTINCT_IMPLEMENTATION_UNSPECIFIED(0),
      /**
       * <code>COUNT_DISTINCT_IMPLEMENTATION_UNIQ = 1;</code>
       */
      COUNT_DISTINCT_IMPLEMENTATION_UNIQ(1),
      /**
       * <code>COUNT_DISTINCT_IMPLEMENTATION_UNIQ_COMBINED = 2;</code>
       */
      COUNT_DISTINCT_IMPLEMENTATION_UNIQ_COMBINED(2),
      /**
       * <code>COUNT_DISTINCT_IMPLEMENTATION_UNIQ_COMBINED_64 = 3;</code>
       */
      COUNT_DISTINCT_IMPLEMENTATION_UNIQ_COMBINED_64(3),
      /**
       * <code>COUNT_DISTINCT_IMPLEMENTATION_UNIQ_HLL_12 = 4;</code>
       */
      COUNT_DISTINCT_IMPLEMENTATION_UNIQ_HLL_12(4),
      /**
       * <code>COUNT_DISTINCT_IMPLEMENTATION_UNIQ_EXACT = 5;</code>
       */
      COUNT_DISTINCT_IMPLEMENTATION_UNIQ_EXACT(5),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>COUNT_DISTINCT_IMPLEMENTATION_UNSPECIFIED = 0;</code>
       */
      public static final int COUNT_DISTINCT_IMPLEMENTATION_UNSPECIFIED_VALUE = 0;
      /**
       * <code>COUNT_DISTINCT_IMPLEMENTATION_UNIQ = 1;</code>
       */
      public static final int COUNT_DISTINCT_IMPLEMENTATION_UNIQ_VALUE = 1;
      /**
       * <code>COUNT_DISTINCT_IMPLEMENTATION_UNIQ_COMBINED = 2;</code>
       */
      public static final int COUNT_DISTINCT_IMPLEMENTATION_UNIQ_COMBINED_VALUE = 2;
      /**
       * <code>COUNT_DISTINCT_IMPLEMENTATION_UNIQ_COMBINED_64 = 3;</code>
       */
      public static final int COUNT_DISTINCT_IMPLEMENTATION_UNIQ_COMBINED_64_VALUE = 3;
      /**
       * <code>COUNT_DISTINCT_IMPLEMENTATION_UNIQ_HLL_12 = 4;</code>
       */
      public static final int COUNT_DISTINCT_IMPLEMENTATION_UNIQ_HLL_12_VALUE = 4;
      /**
       * <code>COUNT_DISTINCT_IMPLEMENTATION_UNIQ_EXACT = 5;</code>
       */
      public static final int COUNT_DISTINCT_IMPLEMENTATION_UNIQ_EXACT_VALUE = 5;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static CountDistinctImplementation valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static CountDistinctImplementation forNumber(int value) {
        switch (value) {
          case 0: return COUNT_DISTINCT_IMPLEMENTATION_UNSPECIFIED;
          case 1: return COUNT_DISTINCT_IMPLEMENTATION_UNIQ;
          case 2: return COUNT_DISTINCT_IMPLEMENTATION_UNIQ_COMBINED;
          case 3: return COUNT_DISTINCT_IMPLEMENTATION_UNIQ_COMBINED_64;
          case 4: return COUNT_DISTINCT_IMPLEMENTATION_UNIQ_HLL_12;
          case 5: return COUNT_DISTINCT_IMPLEMENTATION_UNIQ_EXACT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<CountDistinctImplementation>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          CountDistinctImplementation> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<CountDistinctImplementation>() {
              public CountDistinctImplementation findValueByNumber(int number) {
                return CountDistinctImplementation.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.getDescriptor().getEnumTypes().get(4);
      }

      private static final CountDistinctImplementation[] VALUES = values();

      public static CountDistinctImplementation valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private CountDistinctImplementation(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.clickhouse.v1.UserSettings.CountDistinctImplementation)
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.clickhouse.v1.UserSettings.JoinAlgorithm}
     */
    public enum JoinAlgorithm
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>JOIN_ALGORITHM_UNSPECIFIED = 0;</code>
       */
      JOIN_ALGORITHM_UNSPECIFIED(0),
      /**
       * <code>JOIN_ALGORITHM_HASH = 1;</code>
       */
      JOIN_ALGORITHM_HASH(1),
      /**
       * <code>JOIN_ALGORITHM_PARALLEL_HASH = 2;</code>
       */
      JOIN_ALGORITHM_PARALLEL_HASH(2),
      /**
       * <code>JOIN_ALGORITHM_PARTIAL_MERGE = 3;</code>
       */
      JOIN_ALGORITHM_PARTIAL_MERGE(3),
      /**
       * <code>JOIN_ALGORITHM_DIRECT = 4;</code>
       */
      JOIN_ALGORITHM_DIRECT(4),
      /**
       * <code>JOIN_ALGORITHM_AUTO = 5;</code>
       */
      JOIN_ALGORITHM_AUTO(5),
      /**
       * <code>JOIN_ALGORITHM_FULL_SORTING_MERGE = 6;</code>
       */
      JOIN_ALGORITHM_FULL_SORTING_MERGE(6),
      /**
       * <code>JOIN_ALGORITHM_PREFER_PARTIAL_MERGE = 7;</code>
       */
      JOIN_ALGORITHM_PREFER_PARTIAL_MERGE(7),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>JOIN_ALGORITHM_UNSPECIFIED = 0;</code>
       */
      public static final int JOIN_ALGORITHM_UNSPECIFIED_VALUE = 0;
      /**
       * <code>JOIN_ALGORITHM_HASH = 1;</code>
       */
      public static final int JOIN_ALGORITHM_HASH_VALUE = 1;
      /**
       * <code>JOIN_ALGORITHM_PARALLEL_HASH = 2;</code>
       */
      public static final int JOIN_ALGORITHM_PARALLEL_HASH_VALUE = 2;
      /**
       * <code>JOIN_ALGORITHM_PARTIAL_MERGE = 3;</code>
       */
      public static final int JOIN_ALGORITHM_PARTIAL_MERGE_VALUE = 3;
      /**
       * <code>JOIN_ALGORITHM_DIRECT = 4;</code>
       */
      public static final int JOIN_ALGORITHM_DIRECT_VALUE = 4;
      /**
       * <code>JOIN_ALGORITHM_AUTO = 5;</code>
       */
      public static final int JOIN_ALGORITHM_AUTO_VALUE = 5;
      /**
       * <code>JOIN_ALGORITHM_FULL_SORTING_MERGE = 6;</code>
       */
      public static final int JOIN_ALGORITHM_FULL_SORTING_MERGE_VALUE = 6;
      /**
       * <code>JOIN_ALGORITHM_PREFER_PARTIAL_MERGE = 7;</code>
       */
      public static final int JOIN_ALGORITHM_PREFER_PARTIAL_MERGE_VALUE = 7;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static JoinAlgorithm valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static JoinAlgorithm forNumber(int value) {
        switch (value) {
          case 0: return JOIN_ALGORITHM_UNSPECIFIED;
          case 1: return JOIN_ALGORITHM_HASH;
          case 2: return JOIN_ALGORITHM_PARALLEL_HASH;
          case 3: return JOIN_ALGORITHM_PARTIAL_MERGE;
          case 4: return JOIN_ALGORITHM_DIRECT;
          case 5: return JOIN_ALGORITHM_AUTO;
          case 6: return JOIN_ALGORITHM_FULL_SORTING_MERGE;
          case 7: return JOIN_ALGORITHM_PREFER_PARTIAL_MERGE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<JoinAlgorithm>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          JoinAlgorithm> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<JoinAlgorithm>() {
              public JoinAlgorithm findValueByNumber(int number) {
                return JoinAlgorithm.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.getDescriptor().getEnumTypes().get(5);
      }

      private static final JoinAlgorithm[] VALUES = values();

      public static JoinAlgorithm valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private JoinAlgorithm(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.clickhouse.v1.UserSettings.JoinAlgorithm)
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.clickhouse.v1.UserSettings.FormatRegexpEscapingRule}
     */
    public enum FormatRegexpEscapingRule
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>FORMAT_REGEXP_ESCAPING_RULE_UNSPECIFIED = 0;</code>
       */
      FORMAT_REGEXP_ESCAPING_RULE_UNSPECIFIED(0),
      /**
       * <code>FORMAT_REGEXP_ESCAPING_RULE_ESCAPED = 1;</code>
       */
      FORMAT_REGEXP_ESCAPING_RULE_ESCAPED(1),
      /**
       * <code>FORMAT_REGEXP_ESCAPING_RULE_QUOTED = 2;</code>
       */
      FORMAT_REGEXP_ESCAPING_RULE_QUOTED(2),
      /**
       * <code>FORMAT_REGEXP_ESCAPING_RULE_CSV = 3;</code>
       */
      FORMAT_REGEXP_ESCAPING_RULE_CSV(3),
      /**
       * <code>FORMAT_REGEXP_ESCAPING_RULE_JSON = 4;</code>
       */
      FORMAT_REGEXP_ESCAPING_RULE_JSON(4),
      /**
       * <code>FORMAT_REGEXP_ESCAPING_RULE_XML = 5;</code>
       */
      FORMAT_REGEXP_ESCAPING_RULE_XML(5),
      /**
       * <code>FORMAT_REGEXP_ESCAPING_RULE_RAW = 6;</code>
       */
      FORMAT_REGEXP_ESCAPING_RULE_RAW(6),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>FORMAT_REGEXP_ESCAPING_RULE_UNSPECIFIED = 0;</code>
       */
      public static final int FORMAT_REGEXP_ESCAPING_RULE_UNSPECIFIED_VALUE = 0;
      /**
       * <code>FORMAT_REGEXP_ESCAPING_RULE_ESCAPED = 1;</code>
       */
      public static final int FORMAT_REGEXP_ESCAPING_RULE_ESCAPED_VALUE = 1;
      /**
       * <code>FORMAT_REGEXP_ESCAPING_RULE_QUOTED = 2;</code>
       */
      public static final int FORMAT_REGEXP_ESCAPING_RULE_QUOTED_VALUE = 2;
      /**
       * <code>FORMAT_REGEXP_ESCAPING_RULE_CSV = 3;</code>
       */
      public static final int FORMAT_REGEXP_ESCAPING_RULE_CSV_VALUE = 3;
      /**
       * <code>FORMAT_REGEXP_ESCAPING_RULE_JSON = 4;</code>
       */
      public static final int FORMAT_REGEXP_ESCAPING_RULE_JSON_VALUE = 4;
      /**
       * <code>FORMAT_REGEXP_ESCAPING_RULE_XML = 5;</code>
       */
      public static final int FORMAT_REGEXP_ESCAPING_RULE_XML_VALUE = 5;
      /**
       * <code>FORMAT_REGEXP_ESCAPING_RULE_RAW = 6;</code>
       */
      public static final int FORMAT_REGEXP_ESCAPING_RULE_RAW_VALUE = 6;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static FormatRegexpEscapingRule valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static FormatRegexpEscapingRule forNumber(int value) {
        switch (value) {
          case 0: return FORMAT_REGEXP_ESCAPING_RULE_UNSPECIFIED;
          case 1: return FORMAT_REGEXP_ESCAPING_RULE_ESCAPED;
          case 2: return FORMAT_REGEXP_ESCAPING_RULE_QUOTED;
          case 3: return FORMAT_REGEXP_ESCAPING_RULE_CSV;
          case 4: return FORMAT_REGEXP_ESCAPING_RULE_JSON;
          case 5: return FORMAT_REGEXP_ESCAPING_RULE_XML;
          case 6: return FORMAT_REGEXP_ESCAPING_RULE_RAW;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<FormatRegexpEscapingRule>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          FormatRegexpEscapingRule> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<FormatRegexpEscapingRule>() {
              public FormatRegexpEscapingRule findValueByNumber(int number) {
                return FormatRegexpEscapingRule.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.getDescriptor().getEnumTypes().get(6);
      }

      private static final FormatRegexpEscapingRule[] VALUES = values();

      public static FormatRegexpEscapingRule valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private FormatRegexpEscapingRule(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.clickhouse.v1.UserSettings.FormatRegexpEscapingRule)
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.clickhouse.v1.UserSettings.DateTimeInputFormat}
     */
    public enum DateTimeInputFormat
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>DATE_TIME_INPUT_FORMAT_UNSPECIFIED = 0;</code>
       */
      DATE_TIME_INPUT_FORMAT_UNSPECIFIED(0),
      /**
       * <code>DATE_TIME_INPUT_FORMAT_BEST_EFFORT = 1;</code>
       */
      DATE_TIME_INPUT_FORMAT_BEST_EFFORT(1),
      /**
       * <code>DATE_TIME_INPUT_FORMAT_BASIC = 2;</code>
       */
      DATE_TIME_INPUT_FORMAT_BASIC(2),
      /**
       * <code>DATE_TIME_INPUT_FORMAT_BEST_EFFORT_US = 3;</code>
       */
      DATE_TIME_INPUT_FORMAT_BEST_EFFORT_US(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>DATE_TIME_INPUT_FORMAT_UNSPECIFIED = 0;</code>
       */
      public static final int DATE_TIME_INPUT_FORMAT_UNSPECIFIED_VALUE = 0;
      /**
       * <code>DATE_TIME_INPUT_FORMAT_BEST_EFFORT = 1;</code>
       */
      public static final int DATE_TIME_INPUT_FORMAT_BEST_EFFORT_VALUE = 1;
      /**
       * <code>DATE_TIME_INPUT_FORMAT_BASIC = 2;</code>
       */
      public static final int DATE_TIME_INPUT_FORMAT_BASIC_VALUE = 2;
      /**
       * <code>DATE_TIME_INPUT_FORMAT_BEST_EFFORT_US = 3;</code>
       */
      public static final int DATE_TIME_INPUT_FORMAT_BEST_EFFORT_US_VALUE = 3;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static DateTimeInputFormat valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static DateTimeInputFormat forNumber(int value) {
        switch (value) {
          case 0: return DATE_TIME_INPUT_FORMAT_UNSPECIFIED;
          case 1: return DATE_TIME_INPUT_FORMAT_BEST_EFFORT;
          case 2: return DATE_TIME_INPUT_FORMAT_BASIC;
          case 3: return DATE_TIME_INPUT_FORMAT_BEST_EFFORT_US;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<DateTimeInputFormat>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          DateTimeInputFormat> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<DateTimeInputFormat>() {
              public DateTimeInputFormat findValueByNumber(int number) {
                return DateTimeInputFormat.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.getDescriptor().getEnumTypes().get(7);
      }

      private static final DateTimeInputFormat[] VALUES = values();

      public static DateTimeInputFormat valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private DateTimeInputFormat(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.clickhouse.v1.UserSettings.DateTimeInputFormat)
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.clickhouse.v1.UserSettings.DateTimeOutputFormat}
     */
    public enum DateTimeOutputFormat
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>DATE_TIME_OUTPUT_FORMAT_UNSPECIFIED = 0;</code>
       */
      DATE_TIME_OUTPUT_FORMAT_UNSPECIFIED(0),
      /**
       * <code>DATE_TIME_OUTPUT_FORMAT_SIMPLE = 1;</code>
       */
      DATE_TIME_OUTPUT_FORMAT_SIMPLE(1),
      /**
       * <code>DATE_TIME_OUTPUT_FORMAT_ISO = 2;</code>
       */
      DATE_TIME_OUTPUT_FORMAT_ISO(2),
      /**
       * <code>DATE_TIME_OUTPUT_FORMAT_UNIX_TIMESTAMP = 3;</code>
       */
      DATE_TIME_OUTPUT_FORMAT_UNIX_TIMESTAMP(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>DATE_TIME_OUTPUT_FORMAT_UNSPECIFIED = 0;</code>
       */
      public static final int DATE_TIME_OUTPUT_FORMAT_UNSPECIFIED_VALUE = 0;
      /**
       * <code>DATE_TIME_OUTPUT_FORMAT_SIMPLE = 1;</code>
       */
      public static final int DATE_TIME_OUTPUT_FORMAT_SIMPLE_VALUE = 1;
      /**
       * <code>DATE_TIME_OUTPUT_FORMAT_ISO = 2;</code>
       */
      public static final int DATE_TIME_OUTPUT_FORMAT_ISO_VALUE = 2;
      /**
       * <code>DATE_TIME_OUTPUT_FORMAT_UNIX_TIMESTAMP = 3;</code>
       */
      public static final int DATE_TIME_OUTPUT_FORMAT_UNIX_TIMESTAMP_VALUE = 3;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static DateTimeOutputFormat valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static DateTimeOutputFormat forNumber(int value) {
        switch (value) {
          case 0: return DATE_TIME_OUTPUT_FORMAT_UNSPECIFIED;
          case 1: return DATE_TIME_OUTPUT_FORMAT_SIMPLE;
          case 2: return DATE_TIME_OUTPUT_FORMAT_ISO;
          case 3: return DATE_TIME_OUTPUT_FORMAT_UNIX_TIMESTAMP;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<DateTimeOutputFormat>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          DateTimeOutputFormat> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<DateTimeOutputFormat>() {
              public DateTimeOutputFormat findValueByNumber(int number) {
                return DateTimeOutputFormat.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.getDescriptor().getEnumTypes().get(8);
      }

      private static final DateTimeOutputFormat[] VALUES = values();

      public static DateTimeOutputFormat valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private DateTimeOutputFormat(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.clickhouse.v1.UserSettings.DateTimeOutputFormat)
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.clickhouse.v1.UserSettings.LocalFilesystemReadMethod}
     */
    public enum LocalFilesystemReadMethod
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>LOCAL_FILESYSTEM_READ_METHOD_UNSPECIFIED = 0;</code>
       */
      LOCAL_FILESYSTEM_READ_METHOD_UNSPECIFIED(0),
      /**
       * <code>LOCAL_FILESYSTEM_READ_METHOD_READ = 1;</code>
       */
      LOCAL_FILESYSTEM_READ_METHOD_READ(1),
      /**
       * <code>LOCAL_FILESYSTEM_READ_METHOD_PREAD_THREADPOOL = 2;</code>
       */
      LOCAL_FILESYSTEM_READ_METHOD_PREAD_THREADPOOL(2),
      /**
       * <code>LOCAL_FILESYSTEM_READ_METHOD_PREAD = 3;</code>
       */
      LOCAL_FILESYSTEM_READ_METHOD_PREAD(3),
      /**
       * <code>LOCAL_FILESYSTEM_READ_METHOD_NMAP = 4;</code>
       */
      LOCAL_FILESYSTEM_READ_METHOD_NMAP(4),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>LOCAL_FILESYSTEM_READ_METHOD_UNSPECIFIED = 0;</code>
       */
      public static final int LOCAL_FILESYSTEM_READ_METHOD_UNSPECIFIED_VALUE = 0;
      /**
       * <code>LOCAL_FILESYSTEM_READ_METHOD_READ = 1;</code>
       */
      public static final int LOCAL_FILESYSTEM_READ_METHOD_READ_VALUE = 1;
      /**
       * <code>LOCAL_FILESYSTEM_READ_METHOD_PREAD_THREADPOOL = 2;</code>
       */
      public static final int LOCAL_FILESYSTEM_READ_METHOD_PREAD_THREADPOOL_VALUE = 2;
      /**
       * <code>LOCAL_FILESYSTEM_READ_METHOD_PREAD = 3;</code>
       */
      public static final int LOCAL_FILESYSTEM_READ_METHOD_PREAD_VALUE = 3;
      /**
       * <code>LOCAL_FILESYSTEM_READ_METHOD_NMAP = 4;</code>
       */
      public static final int LOCAL_FILESYSTEM_READ_METHOD_NMAP_VALUE = 4;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static LocalFilesystemReadMethod valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static LocalFilesystemReadMethod forNumber(int value) {
        switch (value) {
          case 0: return LOCAL_FILESYSTEM_READ_METHOD_UNSPECIFIED;
          case 1: return LOCAL_FILESYSTEM_READ_METHOD_READ;
          case 2: return LOCAL_FILESYSTEM_READ_METHOD_PREAD_THREADPOOL;
          case 3: return LOCAL_FILESYSTEM_READ_METHOD_PREAD;
          case 4: return LOCAL_FILESYSTEM_READ_METHOD_NMAP;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<LocalFilesystemReadMethod>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          LocalFilesystemReadMethod> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<LocalFilesystemReadMethod>() {
              public LocalFilesystemReadMethod findValueByNumber(int number) {
                return LocalFilesystemReadMethod.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.getDescriptor().getEnumTypes().get(9);
      }

      private static final LocalFilesystemReadMethod[] VALUES = values();

      public static LocalFilesystemReadMethod valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private LocalFilesystemReadMethod(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.clickhouse.v1.UserSettings.LocalFilesystemReadMethod)
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.clickhouse.v1.UserSettings.RemoteFilesystemReadMethod}
     */
    public enum RemoteFilesystemReadMethod
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>REMOTE_FILESYSTEM_READ_METHOD_UNSPECIFIED = 0;</code>
       */
      REMOTE_FILESYSTEM_READ_METHOD_UNSPECIFIED(0),
      /**
       * <code>REMOTE_FILESYSTEM_READ_METHOD_READ = 1;</code>
       */
      REMOTE_FILESYSTEM_READ_METHOD_READ(1),
      /**
       * <code>REMOTE_FILESYSTEM_READ_METHOD_THREADPOOL = 2;</code>
       */
      REMOTE_FILESYSTEM_READ_METHOD_THREADPOOL(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>REMOTE_FILESYSTEM_READ_METHOD_UNSPECIFIED = 0;</code>
       */
      public static final int REMOTE_FILESYSTEM_READ_METHOD_UNSPECIFIED_VALUE = 0;
      /**
       * <code>REMOTE_FILESYSTEM_READ_METHOD_READ = 1;</code>
       */
      public static final int REMOTE_FILESYSTEM_READ_METHOD_READ_VALUE = 1;
      /**
       * <code>REMOTE_FILESYSTEM_READ_METHOD_THREADPOOL = 2;</code>
       */
      public static final int REMOTE_FILESYSTEM_READ_METHOD_THREADPOOL_VALUE = 2;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static RemoteFilesystemReadMethod valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static RemoteFilesystemReadMethod forNumber(int value) {
        switch (value) {
          case 0: return REMOTE_FILESYSTEM_READ_METHOD_UNSPECIFIED;
          case 1: return REMOTE_FILESYSTEM_READ_METHOD_READ;
          case 2: return REMOTE_FILESYSTEM_READ_METHOD_THREADPOOL;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<RemoteFilesystemReadMethod>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          RemoteFilesystemReadMethod> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<RemoteFilesystemReadMethod>() {
              public RemoteFilesystemReadMethod findValueByNumber(int number) {
                return RemoteFilesystemReadMethod.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.getDescriptor().getEnumTypes().get(10);
      }

      private static final RemoteFilesystemReadMethod[] VALUES = values();

      public static RemoteFilesystemReadMethod valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private RemoteFilesystemReadMethod(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.clickhouse.v1.UserSettings.RemoteFilesystemReadMethod)
    }

    /**
     * Protobuf enum {@code yandex.cloud.mdb.clickhouse.v1.UserSettings.LoadBalancing}
     */
    public enum LoadBalancing
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>LOAD_BALANCING_UNSPECIFIED = 0;</code>
       */
      LOAD_BALANCING_UNSPECIFIED(0),
      /**
       * <code>LOAD_BALANCING_RANDOM = 1;</code>
       */
      LOAD_BALANCING_RANDOM(1),
      /**
       * <code>LOAD_BALANCING_NEAREST_HOSTNAME = 2;</code>
       */
      LOAD_BALANCING_NEAREST_HOSTNAME(2),
      /**
       * <code>LOAD_BALANCING_IN_ORDER = 3;</code>
       */
      LOAD_BALANCING_IN_ORDER(3),
      /**
       * <code>LOAD_BALANCING_FIRST_OR_RANDOM = 4;</code>
       */
      LOAD_BALANCING_FIRST_OR_RANDOM(4),
      /**
       * <code>LOAD_BALANCING_ROUND_ROBIN = 5;</code>
       */
      LOAD_BALANCING_ROUND_ROBIN(5),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>LOAD_BALANCING_UNSPECIFIED = 0;</code>
       */
      public static final int LOAD_BALANCING_UNSPECIFIED_VALUE = 0;
      /**
       * <code>LOAD_BALANCING_RANDOM = 1;</code>
       */
      public static final int LOAD_BALANCING_RANDOM_VALUE = 1;
      /**
       * <code>LOAD_BALANCING_NEAREST_HOSTNAME = 2;</code>
       */
      public static final int LOAD_BALANCING_NEAREST_HOSTNAME_VALUE = 2;
      /**
       * <code>LOAD_BALANCING_IN_ORDER = 3;</code>
       */
      public static final int LOAD_BALANCING_IN_ORDER_VALUE = 3;
      /**
       * <code>LOAD_BALANCING_FIRST_OR_RANDOM = 4;</code>
       */
      public static final int LOAD_BALANCING_FIRST_OR_RANDOM_VALUE = 4;
      /**
       * <code>LOAD_BALANCING_ROUND_ROBIN = 5;</code>
       */
      public static final int LOAD_BALANCING_ROUND_ROBIN_VALUE = 5;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static LoadBalancing valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static LoadBalancing forNumber(int value) {
        switch (value) {
          case 0: return LOAD_BALANCING_UNSPECIFIED;
          case 1: return LOAD_BALANCING_RANDOM;
          case 2: return LOAD_BALANCING_NEAREST_HOSTNAME;
          case 3: return LOAD_BALANCING_IN_ORDER;
          case 4: return LOAD_BALANCING_FIRST_OR_RANDOM;
          case 5: return LOAD_BALANCING_ROUND_ROBIN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<LoadBalancing>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          LoadBalancing> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<LoadBalancing>() {
              public LoadBalancing findValueByNumber(int number) {
                return LoadBalancing.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.getDescriptor().getEnumTypes().get(11);
      }

      private static final LoadBalancing[] VALUES = values();

      public static LoadBalancing valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private LoadBalancing(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:yandex.cloud.mdb.clickhouse.v1.UserSettings.LoadBalancing)
    }

    public static final int READONLY_FIELD_NUMBER = 1;
    private com.google.protobuf.Int64Value readonly_;
    /**
     * <pre>
     * Restricts permissions for non-DDL queries. To restrict permissions for DDL queries, use [allow_ddl] instead.
     * * **0** (default)-no restrictions.
     * * **1**-only read data queries are allowed.
     * * **2**-read data and change settings queries are allowed.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_readonly).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value readonly = 1 [(.yandex.cloud.value) = "0-2"];</code>
     * @return Whether the readonly field is set.
     */
    @java.lang.Override
    public boolean hasReadonly() {
      return readonly_ != null;
    }
    /**
     * <pre>
     * Restricts permissions for non-DDL queries. To restrict permissions for DDL queries, use [allow_ddl] instead.
     * * **0** (default)-no restrictions.
     * * **1**-only read data queries are allowed.
     * * **2**-read data and change settings queries are allowed.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_readonly).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value readonly = 1 [(.yandex.cloud.value) = "0-2"];</code>
     * @return The readonly.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getReadonly() {
      return readonly_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : readonly_;
    }
    /**
     * <pre>
     * Restricts permissions for non-DDL queries. To restrict permissions for DDL queries, use [allow_ddl] instead.
     * * **0** (default)-no restrictions.
     * * **1**-only read data queries are allowed.
     * * **2**-read data and change settings queries are allowed.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_readonly).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value readonly = 1 [(.yandex.cloud.value) = "0-2"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getReadonlyOrBuilder() {
      return getReadonly();
    }

    public static final int ALLOW_DDL_FIELD_NUMBER = 2;
    private com.google.protobuf.BoolValue allowDdl_;
    /**
     * <pre>
     * Determines whether DDL queries are allowed (e.g., **CREATE**, **ALTER**, **RENAME**, etc).
     * Default value: **true**.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_allow_ddl).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue allow_ddl = 2;</code>
     * @return Whether the allowDdl field is set.
     */
    @java.lang.Override
    public boolean hasAllowDdl() {
      return allowDdl_ != null;
    }
    /**
     * <pre>
     * Determines whether DDL queries are allowed (e.g., **CREATE**, **ALTER**, **RENAME**, etc).
     * Default value: **true**.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_allow_ddl).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue allow_ddl = 2;</code>
     * @return The allowDdl.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getAllowDdl() {
      return allowDdl_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : allowDdl_;
    }
    /**
     * <pre>
     * Determines whether DDL queries are allowed (e.g., **CREATE**, **ALTER**, **RENAME**, etc).
     * Default value: **true**.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_allow_ddl).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue allow_ddl = 2;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getAllowDdlOrBuilder() {
      return getAllowDdl();
    }

    public static final int ALLOW_INTROSPECTION_FUNCTIONS_FIELD_NUMBER = 96;
    private com.google.protobuf.BoolValue allowIntrospectionFunctions_;
    /**
     * <pre>
     * Enables [introspections functions](https://clickhouse.com/docs/en/sql-reference/functions/introspection) for query profiling.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-allow_introspection_functions).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue allow_introspection_functions = 96;</code>
     * @return Whether the allowIntrospectionFunctions field is set.
     */
    @java.lang.Override
    public boolean hasAllowIntrospectionFunctions() {
      return allowIntrospectionFunctions_ != null;
    }
    /**
     * <pre>
     * Enables [introspections functions](https://clickhouse.com/docs/en/sql-reference/functions/introspection) for query profiling.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-allow_introspection_functions).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue allow_introspection_functions = 96;</code>
     * @return The allowIntrospectionFunctions.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getAllowIntrospectionFunctions() {
      return allowIntrospectionFunctions_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : allowIntrospectionFunctions_;
    }
    /**
     * <pre>
     * Enables [introspections functions](https://clickhouse.com/docs/en/sql-reference/functions/introspection) for query profiling.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-allow_introspection_functions).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue allow_introspection_functions = 96;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getAllowIntrospectionFunctionsOrBuilder() {
      return getAllowIntrospectionFunctions();
    }

    public static final int CONNECT_TIMEOUT_FIELD_NUMBER = 39;
    private com.google.protobuf.Int64Value connectTimeout_;
    /**
     * <pre>
     * Connection timeout in milliseconds.
     * Value must be greater than **0** (default: **10000**, 10 seconds).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value connect_timeout = 39 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the connectTimeout field is set.
     */
    @java.lang.Override
    public boolean hasConnectTimeout() {
      return connectTimeout_ != null;
    }
    /**
     * <pre>
     * Connection timeout in milliseconds.
     * Value must be greater than **0** (default: **10000**, 10 seconds).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value connect_timeout = 39 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The connectTimeout.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getConnectTimeout() {
      return connectTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : connectTimeout_;
    }
    /**
     * <pre>
     * Connection timeout in milliseconds.
     * Value must be greater than **0** (default: **10000**, 10 seconds).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value connect_timeout = 39 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getConnectTimeoutOrBuilder() {
      return getConnectTimeout();
    }

    public static final int CONNECT_TIMEOUT_WITH_FAILOVER_FIELD_NUMBER = 97;
    private com.google.protobuf.Int64Value connectTimeoutWithFailover_;
    /**
     * <pre>
     * The timeout in milliseconds for connecting to a remote server for a Distributed table engine. Applies only if the cluster uses sharding and replication. If unsuccessful, several attempts are made to connect to various replicas.
     * Default value: **50**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#connect-timeout-with-failover-ms).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value connect_timeout_with_failover = 97 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the connectTimeoutWithFailover field is set.
     */
    @java.lang.Override
    public boolean hasConnectTimeoutWithFailover() {
      return connectTimeoutWithFailover_ != null;
    }
    /**
     * <pre>
     * The timeout in milliseconds for connecting to a remote server for a Distributed table engine. Applies only if the cluster uses sharding and replication. If unsuccessful, several attempts are made to connect to various replicas.
     * Default value: **50**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#connect-timeout-with-failover-ms).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value connect_timeout_with_failover = 97 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The connectTimeoutWithFailover.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getConnectTimeoutWithFailover() {
      return connectTimeoutWithFailover_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : connectTimeoutWithFailover_;
    }
    /**
     * <pre>
     * The timeout in milliseconds for connecting to a remote server for a Distributed table engine. Applies only if the cluster uses sharding and replication. If unsuccessful, several attempts are made to connect to various replicas.
     * Default value: **50**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#connect-timeout-with-failover-ms).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value connect_timeout_with_failover = 97 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getConnectTimeoutWithFailoverOrBuilder() {
      return getConnectTimeoutWithFailover();
    }

    public static final int RECEIVE_TIMEOUT_FIELD_NUMBER = 40;
    private com.google.protobuf.Int64Value receiveTimeout_;
    /**
     * <pre>
     * Receive timeout in milliseconds.
     * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value receive_timeout = 40 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the receiveTimeout field is set.
     */
    @java.lang.Override
    public boolean hasReceiveTimeout() {
      return receiveTimeout_ != null;
    }
    /**
     * <pre>
     * Receive timeout in milliseconds.
     * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value receive_timeout = 40 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The receiveTimeout.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getReceiveTimeout() {
      return receiveTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : receiveTimeout_;
    }
    /**
     * <pre>
     * Receive timeout in milliseconds.
     * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value receive_timeout = 40 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getReceiveTimeoutOrBuilder() {
      return getReceiveTimeout();
    }

    public static final int SEND_TIMEOUT_FIELD_NUMBER = 41;
    private com.google.protobuf.Int64Value sendTimeout_;
    /**
     * <pre>
     * Send timeout in milliseconds.
     * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value send_timeout = 41 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the sendTimeout field is set.
     */
    @java.lang.Override
    public boolean hasSendTimeout() {
      return sendTimeout_ != null;
    }
    /**
     * <pre>
     * Send timeout in milliseconds.
     * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value send_timeout = 41 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The sendTimeout.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getSendTimeout() {
      return sendTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : sendTimeout_;
    }
    /**
     * <pre>
     * Send timeout in milliseconds.
     * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value send_timeout = 41 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getSendTimeoutOrBuilder() {
      return getSendTimeout();
    }

    public static final int TIMEOUT_BEFORE_CHECKING_EXECUTION_SPEED_FIELD_NUMBER = 98;
    private com.google.protobuf.Int64Value timeoutBeforeCheckingExecutionSpeed_;
    /**
     * <pre>
     * Timeout (in seconds) between checks of execution speed. It is checked that execution speed is not less that specified in [min_execution_speed] parameter.
     * Default value: **10**.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value timeout_before_checking_execution_speed = 98;</code>
     * @return Whether the timeoutBeforeCheckingExecutionSpeed field is set.
     */
    @java.lang.Override
    public boolean hasTimeoutBeforeCheckingExecutionSpeed() {
      return timeoutBeforeCheckingExecutionSpeed_ != null;
    }
    /**
     * <pre>
     * Timeout (in seconds) between checks of execution speed. It is checked that execution speed is not less that specified in [min_execution_speed] parameter.
     * Default value: **10**.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value timeout_before_checking_execution_speed = 98;</code>
     * @return The timeoutBeforeCheckingExecutionSpeed.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getTimeoutBeforeCheckingExecutionSpeed() {
      return timeoutBeforeCheckingExecutionSpeed_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : timeoutBeforeCheckingExecutionSpeed_;
    }
    /**
     * <pre>
     * Timeout (in seconds) between checks of execution speed. It is checked that execution speed is not less that specified in [min_execution_speed] parameter.
     * Default value: **10**.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value timeout_before_checking_execution_speed = 98;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getTimeoutBeforeCheckingExecutionSpeedOrBuilder() {
      return getTimeoutBeforeCheckingExecutionSpeed();
    }

    public static final int INSERT_QUORUM_FIELD_NUMBER = 3;
    private com.google.protobuf.Int64Value insertQuorum_;
    /**
     * <pre>
     * Enables or disables write quorum for ClickHouse cluster.
     * If the value is less than **2**, then write quorum is disabled, otherwise it is enabled.
     * When used, write quorum guarantees that ClickHouse has written data to the quorum of **insert_quorum** replicas with no errors until the [insert_quorum_timeout] expires.
     * All replicas in the quorum are in the consistent state, meaning that they contain linearized data from the previous **INSERT** queries.
     * Employ write quorum, if you need the guarantees that the written data would not be lost in case of one or more replicas failure.
     * You can use [select_sequential_consistency] setting to read the data written with write quorum.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value insert_quorum = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the insertQuorum field is set.
     */
    @java.lang.Override
    public boolean hasInsertQuorum() {
      return insertQuorum_ != null;
    }
    /**
     * <pre>
     * Enables or disables write quorum for ClickHouse cluster.
     * If the value is less than **2**, then write quorum is disabled, otherwise it is enabled.
     * When used, write quorum guarantees that ClickHouse has written data to the quorum of **insert_quorum** replicas with no errors until the [insert_quorum_timeout] expires.
     * All replicas in the quorum are in the consistent state, meaning that they contain linearized data from the previous **INSERT** queries.
     * Employ write quorum, if you need the guarantees that the written data would not be lost in case of one or more replicas failure.
     * You can use [select_sequential_consistency] setting to read the data written with write quorum.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value insert_quorum = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The insertQuorum.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getInsertQuorum() {
      return insertQuorum_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : insertQuorum_;
    }
    /**
     * <pre>
     * Enables or disables write quorum for ClickHouse cluster.
     * If the value is less than **2**, then write quorum is disabled, otherwise it is enabled.
     * When used, write quorum guarantees that ClickHouse has written data to the quorum of **insert_quorum** replicas with no errors until the [insert_quorum_timeout] expires.
     * All replicas in the quorum are in the consistent state, meaning that they contain linearized data from the previous **INSERT** queries.
     * Employ write quorum, if you need the guarantees that the written data would not be lost in case of one or more replicas failure.
     * You can use [select_sequential_consistency] setting to read the data written with write quorum.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value insert_quorum = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getInsertQuorumOrBuilder() {
      return getInsertQuorum();
    }

    public static final int INSERT_QUORUM_TIMEOUT_FIELD_NUMBER = 4;
    private com.google.protobuf.Int64Value insertQuorumTimeout_;
    /**
     * <pre>
     * Quorum write timeout in milliseconds.
     * If the write quorum is enabled in the cluster, this timeout expires and some data is not written to the [insert_quorum] replicas, then ClickHouse will abort the execution of **INSERT** query and return an error.
     * In this case, the client must send the query again to write the data block into the same or another replica.
     * Minimum value: **1000**, 1 second (default: **60000**, 1 minute).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value insert_quorum_timeout = 4 [(.yandex.cloud.value) = "&gt;=1000"];</code>
     * @return Whether the insertQuorumTimeout field is set.
     */
    @java.lang.Override
    public boolean hasInsertQuorumTimeout() {
      return insertQuorumTimeout_ != null;
    }
    /**
     * <pre>
     * Quorum write timeout in milliseconds.
     * If the write quorum is enabled in the cluster, this timeout expires and some data is not written to the [insert_quorum] replicas, then ClickHouse will abort the execution of **INSERT** query and return an error.
     * In this case, the client must send the query again to write the data block into the same or another replica.
     * Minimum value: **1000**, 1 second (default: **60000**, 1 minute).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value insert_quorum_timeout = 4 [(.yandex.cloud.value) = "&gt;=1000"];</code>
     * @return The insertQuorumTimeout.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getInsertQuorumTimeout() {
      return insertQuorumTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : insertQuorumTimeout_;
    }
    /**
     * <pre>
     * Quorum write timeout in milliseconds.
     * If the write quorum is enabled in the cluster, this timeout expires and some data is not written to the [insert_quorum] replicas, then ClickHouse will abort the execution of **INSERT** query and return an error.
     * In this case, the client must send the query again to write the data block into the same or another replica.
     * Minimum value: **1000**, 1 second (default: **60000**, 1 minute).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value insert_quorum_timeout = 4 [(.yandex.cloud.value) = "&gt;=1000"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getInsertQuorumTimeoutOrBuilder() {
      return getInsertQuorumTimeout();
    }

    public static final int INSERT_QUORUM_PARALLEL_FIELD_NUMBER = 99;
    private com.google.protobuf.BoolValue insertQuorumParallel_;
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum_parallel).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue insert_quorum_parallel = 99;</code>
     * @return Whether the insertQuorumParallel field is set.
     */
    @java.lang.Override
    public boolean hasInsertQuorumParallel() {
      return insertQuorumParallel_ != null;
    }
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum_parallel).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue insert_quorum_parallel = 99;</code>
     * @return The insertQuorumParallel.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getInsertQuorumParallel() {
      return insertQuorumParallel_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : insertQuorumParallel_;
    }
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum_parallel).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue insert_quorum_parallel = 99;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getInsertQuorumParallelOrBuilder() {
      return getInsertQuorumParallel();
    }

    public static final int INSERT_NULL_AS_DEFAULT_FIELD_NUMBER = 100;
    private com.google.protobuf.BoolValue insertNullAsDefault_;
    /**
     * <pre>
     * Enables the insertion of default values instead of NULL into columns with not nullable data type.
     * Default value: **true**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#insert_null_as_default).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue insert_null_as_default = 100;</code>
     * @return Whether the insertNullAsDefault field is set.
     */
    @java.lang.Override
    public boolean hasInsertNullAsDefault() {
      return insertNullAsDefault_ != null;
    }
    /**
     * <pre>
     * Enables the insertion of default values instead of NULL into columns with not nullable data type.
     * Default value: **true**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#insert_null_as_default).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue insert_null_as_default = 100;</code>
     * @return The insertNullAsDefault.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getInsertNullAsDefault() {
      return insertNullAsDefault_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : insertNullAsDefault_;
    }
    /**
     * <pre>
     * Enables the insertion of default values instead of NULL into columns with not nullable data type.
     * Default value: **true**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#insert_null_as_default).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue insert_null_as_default = 100;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getInsertNullAsDefaultOrBuilder() {
      return getInsertNullAsDefault();
    }

    public static final int SELECT_SEQUENTIAL_CONSISTENCY_FIELD_NUMBER = 5;
    private com.google.protobuf.BoolValue selectSequentialConsistency_;
    /**
     * <pre>
     * Determines the behavior of **SELECT** queries from the replicated table: if enabled, ClickHouse will terminate a query with error message in case the replica does not have a chunk written with the quorum and will not read the parts that have not yet been written with the quorum.
     * Default value: **false** (sequential consistency is disabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue select_sequential_consistency = 5;</code>
     * @return Whether the selectSequentialConsistency field is set.
     */
    @java.lang.Override
    public boolean hasSelectSequentialConsistency() {
      return selectSequentialConsistency_ != null;
    }
    /**
     * <pre>
     * Determines the behavior of **SELECT** queries from the replicated table: if enabled, ClickHouse will terminate a query with error message in case the replica does not have a chunk written with the quorum and will not read the parts that have not yet been written with the quorum.
     * Default value: **false** (sequential consistency is disabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue select_sequential_consistency = 5;</code>
     * @return The selectSequentialConsistency.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getSelectSequentialConsistency() {
      return selectSequentialConsistency_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : selectSequentialConsistency_;
    }
    /**
     * <pre>
     * Determines the behavior of **SELECT** queries from the replicated table: if enabled, ClickHouse will terminate a query with error message in case the replica does not have a chunk written with the quorum and will not read the parts that have not yet been written with the quorum.
     * Default value: **false** (sequential consistency is disabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue select_sequential_consistency = 5;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getSelectSequentialConsistencyOrBuilder() {
      return getSelectSequentialConsistency();
    }

    public static final int DEDUPLICATE_BLOCKS_IN_DEPENDENT_MATERIALIZED_VIEWS_FIELD_NUMBER = 101;
    private com.google.protobuf.BoolValue deduplicateBlocksInDependentMaterializedViews_;
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-deduplicate-blocks-in-dependent-materialized-views).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue deduplicate_blocks_in_dependent_materialized_views = 101;</code>
     * @return Whether the deduplicateBlocksInDependentMaterializedViews field is set.
     */
    @java.lang.Override
    public boolean hasDeduplicateBlocksInDependentMaterializedViews() {
      return deduplicateBlocksInDependentMaterializedViews_ != null;
    }
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-deduplicate-blocks-in-dependent-materialized-views).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue deduplicate_blocks_in_dependent_materialized_views = 101;</code>
     * @return The deduplicateBlocksInDependentMaterializedViews.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getDeduplicateBlocksInDependentMaterializedViews() {
      return deduplicateBlocksInDependentMaterializedViews_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : deduplicateBlocksInDependentMaterializedViews_;
    }
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-deduplicate-blocks-in-dependent-materialized-views).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue deduplicate_blocks_in_dependent_materialized_views = 101;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getDeduplicateBlocksInDependentMaterializedViewsOrBuilder() {
      return getDeduplicateBlocksInDependentMaterializedViews();
    }

    public static final int REPLICATION_ALTER_PARTITIONS_SYNC_FIELD_NUMBER = 42;
    private com.google.protobuf.Int64Value replicationAlterPartitionsSync_;
    /**
     * <pre>
     * Wait mode for asynchronous actions in **ALTER** queries on replicated tables:
     * * **0**-do not wait for replicas.
     * * **1**-only wait for own execution (default).
     * * **2**-wait for all replicas.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/alter/#synchronicity-of-alter-queries).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value replication_alter_partitions_sync = 42 [(.yandex.cloud.value) = "0-2"];</code>
     * @return Whether the replicationAlterPartitionsSync field is set.
     */
    @java.lang.Override
    public boolean hasReplicationAlterPartitionsSync() {
      return replicationAlterPartitionsSync_ != null;
    }
    /**
     * <pre>
     * Wait mode for asynchronous actions in **ALTER** queries on replicated tables:
     * * **0**-do not wait for replicas.
     * * **1**-only wait for own execution (default).
     * * **2**-wait for all replicas.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/alter/#synchronicity-of-alter-queries).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value replication_alter_partitions_sync = 42 [(.yandex.cloud.value) = "0-2"];</code>
     * @return The replicationAlterPartitionsSync.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getReplicationAlterPartitionsSync() {
      return replicationAlterPartitionsSync_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : replicationAlterPartitionsSync_;
    }
    /**
     * <pre>
     * Wait mode for asynchronous actions in **ALTER** queries on replicated tables:
     * * **0**-do not wait for replicas.
     * * **1**-only wait for own execution (default).
     * * **2**-wait for all replicas.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/alter/#synchronicity-of-alter-queries).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value replication_alter_partitions_sync = 42 [(.yandex.cloud.value) = "0-2"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getReplicationAlterPartitionsSyncOrBuilder() {
      return getReplicationAlterPartitionsSync();
    }

    public static final int MAX_REPLICA_DELAY_FOR_DISTRIBUTED_QUERIES_FIELD_NUMBER = 6;
    private com.google.protobuf.Int64Value maxReplicaDelayForDistributedQueries_;
    /**
     * <pre>
     * Max replica delay in milliseconds. If a replica lags more than the set value, this replica is not used and becomes a stale one.
     * Minimum value: **1000**, 1 second (default: **300000**, 300 seconds or 5 minutes).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_replica_delay_for_distributed_queries).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_replica_delay_for_distributed_queries = 6 [(.yandex.cloud.value) = "&gt;=1000"];</code>
     * @return Whether the maxReplicaDelayForDistributedQueries field is set.
     */
    @java.lang.Override
    public boolean hasMaxReplicaDelayForDistributedQueries() {
      return maxReplicaDelayForDistributedQueries_ != null;
    }
    /**
     * <pre>
     * Max replica delay in milliseconds. If a replica lags more than the set value, this replica is not used and becomes a stale one.
     * Minimum value: **1000**, 1 second (default: **300000**, 300 seconds or 5 minutes).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_replica_delay_for_distributed_queries).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_replica_delay_for_distributed_queries = 6 [(.yandex.cloud.value) = "&gt;=1000"];</code>
     * @return The maxReplicaDelayForDistributedQueries.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxReplicaDelayForDistributedQueries() {
      return maxReplicaDelayForDistributedQueries_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxReplicaDelayForDistributedQueries_;
    }
    /**
     * <pre>
     * Max replica delay in milliseconds. If a replica lags more than the set value, this replica is not used and becomes a stale one.
     * Minimum value: **1000**, 1 second (default: **300000**, 300 seconds or 5 minutes).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_replica_delay_for_distributed_queries).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_replica_delay_for_distributed_queries = 6 [(.yandex.cloud.value) = "&gt;=1000"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxReplicaDelayForDistributedQueriesOrBuilder() {
      return getMaxReplicaDelayForDistributedQueries();
    }

    public static final int FALLBACK_TO_STALE_REPLICAS_FOR_DISTRIBUTED_QUERIES_FIELD_NUMBER = 7;
    private com.google.protobuf.BoolValue fallbackToStaleReplicasForDistributedQueries_;
    /**
     * <pre>
     * Enables or disables query forcing to a stale replica in case the actual data is unavailable.
     * If enabled, ClickHouse will choose the most up-to-date replica and force the query to use the data in this replica.
     * This setting can be used when doing **SELECT** query from a distributed table that points to replicated tables.
     * Default value: **true** (query forcing is enabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-fallback_to_stale_replicas_for_distributed_queries).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue fallback_to_stale_replicas_for_distributed_queries = 7;</code>
     * @return Whether the fallbackToStaleReplicasForDistributedQueries field is set.
     */
    @java.lang.Override
    public boolean hasFallbackToStaleReplicasForDistributedQueries() {
      return fallbackToStaleReplicasForDistributedQueries_ != null;
    }
    /**
     * <pre>
     * Enables or disables query forcing to a stale replica in case the actual data is unavailable.
     * If enabled, ClickHouse will choose the most up-to-date replica and force the query to use the data in this replica.
     * This setting can be used when doing **SELECT** query from a distributed table that points to replicated tables.
     * Default value: **true** (query forcing is enabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-fallback_to_stale_replicas_for_distributed_queries).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue fallback_to_stale_replicas_for_distributed_queries = 7;</code>
     * @return The fallbackToStaleReplicasForDistributedQueries.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getFallbackToStaleReplicasForDistributedQueries() {
      return fallbackToStaleReplicasForDistributedQueries_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : fallbackToStaleReplicasForDistributedQueries_;
    }
    /**
     * <pre>
     * Enables or disables query forcing to a stale replica in case the actual data is unavailable.
     * If enabled, ClickHouse will choose the most up-to-date replica and force the query to use the data in this replica.
     * This setting can be used when doing **SELECT** query from a distributed table that points to replicated tables.
     * Default value: **true** (query forcing is enabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-fallback_to_stale_replicas_for_distributed_queries).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue fallback_to_stale_replicas_for_distributed_queries = 7;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getFallbackToStaleReplicasForDistributedQueriesOrBuilder() {
      return getFallbackToStaleReplicasForDistributedQueries();
    }

    public static final int DISTRIBUTED_PRODUCT_MODE_FIELD_NUMBER = 43;
    private int distributedProductMode_;
    /**
     * <pre>
     * Determine the behavior of distributed subqueries.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#distributed-product-mode).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.DistributedProductMode distributed_product_mode = 43;</code>
     * @return The enum numeric value on the wire for distributedProductMode.
     */
    @java.lang.Override public int getDistributedProductModeValue() {
      return distributedProductMode_;
    }
    /**
     * <pre>
     * Determine the behavior of distributed subqueries.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#distributed-product-mode).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.DistributedProductMode distributed_product_mode = 43;</code>
     * @return The distributedProductMode.
     */
    @java.lang.Override public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DistributedProductMode getDistributedProductMode() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DistributedProductMode result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DistributedProductMode.valueOf(distributedProductMode_);
      return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DistributedProductMode.UNRECOGNIZED : result;
    }

    public static final int DISTRIBUTED_AGGREGATION_MEMORY_EFFICIENT_FIELD_NUMBER = 72;
    private com.google.protobuf.BoolValue distributedAggregationMemoryEfficient_;
    /**
     * <pre>
     * Enables of disables memory saving mode when doing distributed aggregation.
     * When ClickHouse works with a distributed query, external aggregation is done on remote servers.
     * Enable this setting to achieve a smaller memory footprint on the server that sourced such a distributed query.
     * Default value: **false** (memory saving mode is disabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue distributed_aggregation_memory_efficient = 72;</code>
     * @return Whether the distributedAggregationMemoryEfficient field is set.
     */
    @java.lang.Override
    public boolean hasDistributedAggregationMemoryEfficient() {
      return distributedAggregationMemoryEfficient_ != null;
    }
    /**
     * <pre>
     * Enables of disables memory saving mode when doing distributed aggregation.
     * When ClickHouse works with a distributed query, external aggregation is done on remote servers.
     * Enable this setting to achieve a smaller memory footprint on the server that sourced such a distributed query.
     * Default value: **false** (memory saving mode is disabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue distributed_aggregation_memory_efficient = 72;</code>
     * @return The distributedAggregationMemoryEfficient.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getDistributedAggregationMemoryEfficient() {
      return distributedAggregationMemoryEfficient_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : distributedAggregationMemoryEfficient_;
    }
    /**
     * <pre>
     * Enables of disables memory saving mode when doing distributed aggregation.
     * When ClickHouse works with a distributed query, external aggregation is done on remote servers.
     * Enable this setting to achieve a smaller memory footprint on the server that sourced such a distributed query.
     * Default value: **false** (memory saving mode is disabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue distributed_aggregation_memory_efficient = 72;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getDistributedAggregationMemoryEfficientOrBuilder() {
      return getDistributedAggregationMemoryEfficient();
    }

    public static final int DISTRIBUTED_DDL_TASK_TIMEOUT_FIELD_NUMBER = 73;
    private com.google.protobuf.Int64Value distributedDdlTaskTimeout_;
    /**
     * <pre>
     * Timeout for DDL queries, in milliseconds.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value distributed_ddl_task_timeout = 73;</code>
     * @return Whether the distributedDdlTaskTimeout field is set.
     */
    @java.lang.Override
    public boolean hasDistributedDdlTaskTimeout() {
      return distributedDdlTaskTimeout_ != null;
    }
    /**
     * <pre>
     * Timeout for DDL queries, in milliseconds.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value distributed_ddl_task_timeout = 73;</code>
     * @return The distributedDdlTaskTimeout.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getDistributedDdlTaskTimeout() {
      return distributedDdlTaskTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : distributedDdlTaskTimeout_;
    }
    /**
     * <pre>
     * Timeout for DDL queries, in milliseconds.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value distributed_ddl_task_timeout = 73;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getDistributedDdlTaskTimeoutOrBuilder() {
      return getDistributedDdlTaskTimeout();
    }

    public static final int SKIP_UNAVAILABLE_SHARDS_FIELD_NUMBER = 81;
    private com.google.protobuf.BoolValue skipUnavailableShards_;
    /**
     * <pre>
     * Enables or disables silent skipping of unavailable shards.
     * A shard is considered unavailable if all its replicas are also unavailable.
     * Default value: **false** (silent skipping is disabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-skip_unavailable_shards).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue skip_unavailable_shards = 81;</code>
     * @return Whether the skipUnavailableShards field is set.
     */
    @java.lang.Override
    public boolean hasSkipUnavailableShards() {
      return skipUnavailableShards_ != null;
    }
    /**
     * <pre>
     * Enables or disables silent skipping of unavailable shards.
     * A shard is considered unavailable if all its replicas are also unavailable.
     * Default value: **false** (silent skipping is disabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-skip_unavailable_shards).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue skip_unavailable_shards = 81;</code>
     * @return The skipUnavailableShards.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getSkipUnavailableShards() {
      return skipUnavailableShards_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : skipUnavailableShards_;
    }
    /**
     * <pre>
     * Enables or disables silent skipping of unavailable shards.
     * A shard is considered unavailable if all its replicas are also unavailable.
     * Default value: **false** (silent skipping is disabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-skip_unavailable_shards).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue skip_unavailable_shards = 81;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getSkipUnavailableShardsOrBuilder() {
      return getSkipUnavailableShards();
    }

    public static final int COMPILE_EXPRESSIONS_FIELD_NUMBER = 46;
    private com.google.protobuf.BoolValue compileExpressions_;
    /**
     * <pre>
     * Enables or disables expression compilation.
     * If you execute a lot of queries that contain identical expressions, then enable this setting.
     * As a result, such queries may be executed faster due to use of compiled expressions.
     * Use this setting in combination with [min_count_to_compile_expression] setting.
     * Default value: **false** (expression compilation is disabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue compile_expressions = 46;</code>
     * @return Whether the compileExpressions field is set.
     */
    @java.lang.Override
    public boolean hasCompileExpressions() {
      return compileExpressions_ != null;
    }
    /**
     * <pre>
     * Enables or disables expression compilation.
     * If you execute a lot of queries that contain identical expressions, then enable this setting.
     * As a result, such queries may be executed faster due to use of compiled expressions.
     * Use this setting in combination with [min_count_to_compile_expression] setting.
     * Default value: **false** (expression compilation is disabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue compile_expressions = 46;</code>
     * @return The compileExpressions.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getCompileExpressions() {
      return compileExpressions_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : compileExpressions_;
    }
    /**
     * <pre>
     * Enables or disables expression compilation.
     * If you execute a lot of queries that contain identical expressions, then enable this setting.
     * As a result, such queries may be executed faster due to use of compiled expressions.
     * Use this setting in combination with [min_count_to_compile_expression] setting.
     * Default value: **false** (expression compilation is disabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue compile_expressions = 46;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getCompileExpressionsOrBuilder() {
      return getCompileExpressions();
    }

    public static final int MIN_COUNT_TO_COMPILE_EXPRESSION_FIELD_NUMBER = 47;
    private com.google.protobuf.Int64Value minCountToCompileExpression_;
    /**
     * <pre>
     * How many identical expressions ClickHouse has to encounter before they are compiled.
     * Minimum value: **0** (default: **3**).
     * For the **0** value compilation is synchronous: a query waits for expression compilation process to complete prior to continuing execution.
     * It is recommended to set this value only for testing purposes.
     * For all other values, compilation is asynchronous: the compilation process executes in a separate thread.
     * When a compiled expression is ready, it will be used by ClickHouse for eligible queries, including the ones that are currently running.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_count_to_compile_expression = 47 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the minCountToCompileExpression field is set.
     */
    @java.lang.Override
    public boolean hasMinCountToCompileExpression() {
      return minCountToCompileExpression_ != null;
    }
    /**
     * <pre>
     * How many identical expressions ClickHouse has to encounter before they are compiled.
     * Minimum value: **0** (default: **3**).
     * For the **0** value compilation is synchronous: a query waits for expression compilation process to complete prior to continuing execution.
     * It is recommended to set this value only for testing purposes.
     * For all other values, compilation is asynchronous: the compilation process executes in a separate thread.
     * When a compiled expression is ready, it will be used by ClickHouse for eligible queries, including the ones that are currently running.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_count_to_compile_expression = 47 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The minCountToCompileExpression.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMinCountToCompileExpression() {
      return minCountToCompileExpression_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : minCountToCompileExpression_;
    }
    /**
     * <pre>
     * How many identical expressions ClickHouse has to encounter before they are compiled.
     * Minimum value: **0** (default: **3**).
     * For the **0** value compilation is synchronous: a query waits for expression compilation process to complete prior to continuing execution.
     * It is recommended to set this value only for testing purposes.
     * For all other values, compilation is asynchronous: the compilation process executes in a separate thread.
     * When a compiled expression is ready, it will be used by ClickHouse for eligible queries, including the ones that are currently running.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_count_to_compile_expression = 47 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMinCountToCompileExpressionOrBuilder() {
      return getMinCountToCompileExpression();
    }

    public static final int MAX_BLOCK_SIZE_FIELD_NUMBER = 9;
    private com.google.protobuf.Int64Value maxBlockSize_;
    /**
     * <pre>
     * The maximum block size for reading.
     * Data in ClickHouse is organized and processed by blocks (block is a set of columns' parts).
     * The internal processing cycles for a single block are efficient enough, but there are noticeable expenditures on each block.
     * This setting is a recommendation for size of block (in a count of rows) that should be loaded from tables.
     * Value must be greater than **0** (default: **65536**).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_block_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_block_size = 9 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the maxBlockSize field is set.
     */
    @java.lang.Override
    public boolean hasMaxBlockSize() {
      return maxBlockSize_ != null;
    }
    /**
     * <pre>
     * The maximum block size for reading.
     * Data in ClickHouse is organized and processed by blocks (block is a set of columns' parts).
     * The internal processing cycles for a single block are efficient enough, but there are noticeable expenditures on each block.
     * This setting is a recommendation for size of block (in a count of rows) that should be loaded from tables.
     * Value must be greater than **0** (default: **65536**).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_block_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_block_size = 9 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The maxBlockSize.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxBlockSize() {
      return maxBlockSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxBlockSize_;
    }
    /**
     * <pre>
     * The maximum block size for reading.
     * Data in ClickHouse is organized and processed by blocks (block is a set of columns' parts).
     * The internal processing cycles for a single block are efficient enough, but there are noticeable expenditures on each block.
     * This setting is a recommendation for size of block (in a count of rows) that should be loaded from tables.
     * Value must be greater than **0** (default: **65536**).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_block_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_block_size = 9 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxBlockSizeOrBuilder() {
      return getMaxBlockSize();
    }

    public static final int MIN_INSERT_BLOCK_SIZE_ROWS_FIELD_NUMBER = 48;
    private com.google.protobuf.Int64Value minInsertBlockSizeRows_;
    /**
     * <pre>
     * Limits the minimum number of rows in a block to be inserted in a table by **INSERT** query.
     * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
     * Minimal value: **0**, block squashing is disabled (default: **1048576**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_insert_block_size_rows = 48 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the minInsertBlockSizeRows field is set.
     */
    @java.lang.Override
    public boolean hasMinInsertBlockSizeRows() {
      return minInsertBlockSizeRows_ != null;
    }
    /**
     * <pre>
     * Limits the minimum number of rows in a block to be inserted in a table by **INSERT** query.
     * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
     * Minimal value: **0**, block squashing is disabled (default: **1048576**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_insert_block_size_rows = 48 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The minInsertBlockSizeRows.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMinInsertBlockSizeRows() {
      return minInsertBlockSizeRows_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : minInsertBlockSizeRows_;
    }
    /**
     * <pre>
     * Limits the minimum number of rows in a block to be inserted in a table by **INSERT** query.
     * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
     * Minimal value: **0**, block squashing is disabled (default: **1048576**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_insert_block_size_rows = 48 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMinInsertBlockSizeRowsOrBuilder() {
      return getMinInsertBlockSizeRows();
    }

    public static final int MIN_INSERT_BLOCK_SIZE_BYTES_FIELD_NUMBER = 49;
    private com.google.protobuf.Int64Value minInsertBlockSizeBytes_;
    /**
     * <pre>
     * Limits the minimum number of bytes in a block to be inserted in a table by **INSERT** query.
     * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
     * Minimal value: **0**, block squashing is disabled (default: **268435456**, 256 MB).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_insert_block_size_bytes = 49 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the minInsertBlockSizeBytes field is set.
     */
    @java.lang.Override
    public boolean hasMinInsertBlockSizeBytes() {
      return minInsertBlockSizeBytes_ != null;
    }
    /**
     * <pre>
     * Limits the minimum number of bytes in a block to be inserted in a table by **INSERT** query.
     * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
     * Minimal value: **0**, block squashing is disabled (default: **268435456**, 256 MB).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_insert_block_size_bytes = 49 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The minInsertBlockSizeBytes.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMinInsertBlockSizeBytes() {
      return minInsertBlockSizeBytes_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : minInsertBlockSizeBytes_;
    }
    /**
     * <pre>
     * Limits the minimum number of bytes in a block to be inserted in a table by **INSERT** query.
     * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
     * Minimal value: **0**, block squashing is disabled (default: **268435456**, 256 MB).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_insert_block_size_bytes = 49 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMinInsertBlockSizeBytesOrBuilder() {
      return getMinInsertBlockSizeBytes();
    }

    public static final int MAX_INSERT_BLOCK_SIZE_FIELD_NUMBER = 10;
    private com.google.protobuf.Int64Value maxInsertBlockSize_;
    /**
     * <pre>
     * Allows to form blocks of the specified size (in bytes) when inserting data in a table.
     * This setting has effect only if server is creating such blocks by itself.
     * Value must be greater than **0** (default: **1048576**).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_insert_block_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_insert_block_size = 10 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the maxInsertBlockSize field is set.
     */
    @java.lang.Override
    public boolean hasMaxInsertBlockSize() {
      return maxInsertBlockSize_ != null;
    }
    /**
     * <pre>
     * Allows to form blocks of the specified size (in bytes) when inserting data in a table.
     * This setting has effect only if server is creating such blocks by itself.
     * Value must be greater than **0** (default: **1048576**).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_insert_block_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_insert_block_size = 10 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The maxInsertBlockSize.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxInsertBlockSize() {
      return maxInsertBlockSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxInsertBlockSize_;
    }
    /**
     * <pre>
     * Allows to form blocks of the specified size (in bytes) when inserting data in a table.
     * This setting has effect only if server is creating such blocks by itself.
     * Value must be greater than **0** (default: **1048576**).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_insert_block_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_insert_block_size = 10 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxInsertBlockSizeOrBuilder() {
      return getMaxInsertBlockSize();
    }

    public static final int MIN_BYTES_TO_USE_DIRECT_IO_FIELD_NUMBER = 50;
    private com.google.protobuf.Int64Value minBytesToUseDirectIo_;
    /**
     * <pre>
     * Limits the minimum number of bytes to enable unbuffered direct reads from disk (Direct I/O).
     * By default, ClickHouse does not read data directly from disk, but relies on the filesystem and its cache instead.
     * Such reading strategy is effective when the data volume is small.
     * If the amount of the data to read is huge, it is more effective to read directly from the disk, bypassing the filesystem cache.
     * If the total amount of the data to read is greater than the value of this setting, then ClickHouse will fetch this data directly from the disk.
     * Minimal value and default value: **0**, Direct I/O is disabled.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_bytes_to_use_direct_io = 50 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the minBytesToUseDirectIo field is set.
     */
    @java.lang.Override
    public boolean hasMinBytesToUseDirectIo() {
      return minBytesToUseDirectIo_ != null;
    }
    /**
     * <pre>
     * Limits the minimum number of bytes to enable unbuffered direct reads from disk (Direct I/O).
     * By default, ClickHouse does not read data directly from disk, but relies on the filesystem and its cache instead.
     * Such reading strategy is effective when the data volume is small.
     * If the amount of the data to read is huge, it is more effective to read directly from the disk, bypassing the filesystem cache.
     * If the total amount of the data to read is greater than the value of this setting, then ClickHouse will fetch this data directly from the disk.
     * Minimal value and default value: **0**, Direct I/O is disabled.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_bytes_to_use_direct_io = 50 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The minBytesToUseDirectIo.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMinBytesToUseDirectIo() {
      return minBytesToUseDirectIo_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : minBytesToUseDirectIo_;
    }
    /**
     * <pre>
     * Limits the minimum number of bytes to enable unbuffered direct reads from disk (Direct I/O).
     * By default, ClickHouse does not read data directly from disk, but relies on the filesystem and its cache instead.
     * Such reading strategy is effective when the data volume is small.
     * If the amount of the data to read is huge, it is more effective to read directly from the disk, bypassing the filesystem cache.
     * If the total amount of the data to read is greater than the value of this setting, then ClickHouse will fetch this data directly from the disk.
     * Minimal value and default value: **0**, Direct I/O is disabled.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_bytes_to_use_direct_io = 50 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMinBytesToUseDirectIoOrBuilder() {
      return getMinBytesToUseDirectIo();
    }

    public static final int USE_UNCOMPRESSED_CACHE_FIELD_NUMBER = 51;
    private com.google.protobuf.BoolValue useUncompressedCache_;
    /**
     * <pre>
     * Determines whether to use the cache of uncompressed blocks, or not.
     * Using this cache can significantly reduce latency and increase the throughput when a huge amount of small queries is to be processed.
     * Enable this setting for the users who instantiates small queries frequently.
     * This setting has effect only for tables of the MergeTree family.
     * Default value: **false** (uncompressed cache is disabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-use_uncompressed_cache).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue use_uncompressed_cache = 51;</code>
     * @return Whether the useUncompressedCache field is set.
     */
    @java.lang.Override
    public boolean hasUseUncompressedCache() {
      return useUncompressedCache_ != null;
    }
    /**
     * <pre>
     * Determines whether to use the cache of uncompressed blocks, or not.
     * Using this cache can significantly reduce latency and increase the throughput when a huge amount of small queries is to be processed.
     * Enable this setting for the users who instantiates small queries frequently.
     * This setting has effect only for tables of the MergeTree family.
     * Default value: **false** (uncompressed cache is disabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-use_uncompressed_cache).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue use_uncompressed_cache = 51;</code>
     * @return The useUncompressedCache.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getUseUncompressedCache() {
      return useUncompressedCache_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : useUncompressedCache_;
    }
    /**
     * <pre>
     * Determines whether to use the cache of uncompressed blocks, or not.
     * Using this cache can significantly reduce latency and increase the throughput when a huge amount of small queries is to be processed.
     * Enable this setting for the users who instantiates small queries frequently.
     * This setting has effect only for tables of the MergeTree family.
     * Default value: **false** (uncompressed cache is disabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-use_uncompressed_cache).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue use_uncompressed_cache = 51;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getUseUncompressedCacheOrBuilder() {
      return getUseUncompressedCache();
    }

    public static final int MERGE_TREE_MAX_ROWS_TO_USE_CACHE_FIELD_NUMBER = 52;
    private com.google.protobuf.Int64Value mergeTreeMaxRowsToUseCache_;
    /**
     * <pre>
     * Limits the maximum size in rows of the request that can use the cache of uncompressed data. The cache is not used for requests larger
     * than the specified value.
     * Use this setting in combination with [use_uncompressed_cache] setting.
     * Value must be greater than **0** (default: **128x8192**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value merge_tree_max_rows_to_use_cache = 52 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the mergeTreeMaxRowsToUseCache field is set.
     */
    @java.lang.Override
    public boolean hasMergeTreeMaxRowsToUseCache() {
      return mergeTreeMaxRowsToUseCache_ != null;
    }
    /**
     * <pre>
     * Limits the maximum size in rows of the request that can use the cache of uncompressed data. The cache is not used for requests larger
     * than the specified value.
     * Use this setting in combination with [use_uncompressed_cache] setting.
     * Value must be greater than **0** (default: **128x8192**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value merge_tree_max_rows_to_use_cache = 52 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The mergeTreeMaxRowsToUseCache.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMergeTreeMaxRowsToUseCache() {
      return mergeTreeMaxRowsToUseCache_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : mergeTreeMaxRowsToUseCache_;
    }
    /**
     * <pre>
     * Limits the maximum size in rows of the request that can use the cache of uncompressed data. The cache is not used for requests larger
     * than the specified value.
     * Use this setting in combination with [use_uncompressed_cache] setting.
     * Value must be greater than **0** (default: **128x8192**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value merge_tree_max_rows_to_use_cache = 52 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMergeTreeMaxRowsToUseCacheOrBuilder() {
      return getMergeTreeMaxRowsToUseCache();
    }

    public static final int MERGE_TREE_MAX_BYTES_TO_USE_CACHE_FIELD_NUMBER = 53;
    private com.google.protobuf.Int64Value mergeTreeMaxBytesToUseCache_;
    /**
     * <pre>
     * Limits the maximum size in bytes of the request that can use the cache of uncompressed data. The cache is not used for requests larger
     * than the specified value.
     * Use this setting in combination with [use_uncompressed_cache] setting.
     * Value must be greater than **0** (default: **192x10x1024x1024**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value merge_tree_max_bytes_to_use_cache = 53 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the mergeTreeMaxBytesToUseCache field is set.
     */
    @java.lang.Override
    public boolean hasMergeTreeMaxBytesToUseCache() {
      return mergeTreeMaxBytesToUseCache_ != null;
    }
    /**
     * <pre>
     * Limits the maximum size in bytes of the request that can use the cache of uncompressed data. The cache is not used for requests larger
     * than the specified value.
     * Use this setting in combination with [use_uncompressed_cache] setting.
     * Value must be greater than **0** (default: **192x10x1024x1024**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value merge_tree_max_bytes_to_use_cache = 53 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The mergeTreeMaxBytesToUseCache.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMergeTreeMaxBytesToUseCache() {
      return mergeTreeMaxBytesToUseCache_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : mergeTreeMaxBytesToUseCache_;
    }
    /**
     * <pre>
     * Limits the maximum size in bytes of the request that can use the cache of uncompressed data. The cache is not used for requests larger
     * than the specified value.
     * Use this setting in combination with [use_uncompressed_cache] setting.
     * Value must be greater than **0** (default: **192x10x1024x1024**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value merge_tree_max_bytes_to_use_cache = 53 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMergeTreeMaxBytesToUseCacheOrBuilder() {
      return getMergeTreeMaxBytesToUseCache();
    }

    public static final int MERGE_TREE_MIN_ROWS_FOR_CONCURRENT_READ_FIELD_NUMBER = 54;
    private com.google.protobuf.Int64Value mergeTreeMinRowsForConcurrentRead_;
    /**
     * <pre>
     * Limits the minimum number of rows to be read from a file to enable concurrent read.
     * If the number of rows to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
     * This setting has effect only for tables of the MergeTree family.
     * Value must be greater than **0** (default: **20x8192**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value merge_tree_min_rows_for_concurrent_read = 54 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the mergeTreeMinRowsForConcurrentRead field is set.
     */
    @java.lang.Override
    public boolean hasMergeTreeMinRowsForConcurrentRead() {
      return mergeTreeMinRowsForConcurrentRead_ != null;
    }
    /**
     * <pre>
     * Limits the minimum number of rows to be read from a file to enable concurrent read.
     * If the number of rows to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
     * This setting has effect only for tables of the MergeTree family.
     * Value must be greater than **0** (default: **20x8192**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value merge_tree_min_rows_for_concurrent_read = 54 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The mergeTreeMinRowsForConcurrentRead.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMergeTreeMinRowsForConcurrentRead() {
      return mergeTreeMinRowsForConcurrentRead_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : mergeTreeMinRowsForConcurrentRead_;
    }
    /**
     * <pre>
     * Limits the minimum number of rows to be read from a file to enable concurrent read.
     * If the number of rows to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
     * This setting has effect only for tables of the MergeTree family.
     * Value must be greater than **0** (default: **20x8192**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value merge_tree_min_rows_for_concurrent_read = 54 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMergeTreeMinRowsForConcurrentReadOrBuilder() {
      return getMergeTreeMinRowsForConcurrentRead();
    }

    public static final int MERGE_TREE_MIN_BYTES_FOR_CONCURRENT_READ_FIELD_NUMBER = 55;
    private com.google.protobuf.Int64Value mergeTreeMinBytesForConcurrentRead_;
    /**
     * <pre>
     * Limits the number of bytes to be read from a file to enable concurrent read.
     * If the number of bytes to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
     * This setting has effect only for tables of the MergeTree family.
     * Value must be greater than **0** (default: **24x10x1024x1024**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value merge_tree_min_bytes_for_concurrent_read = 55 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the mergeTreeMinBytesForConcurrentRead field is set.
     */
    @java.lang.Override
    public boolean hasMergeTreeMinBytesForConcurrentRead() {
      return mergeTreeMinBytesForConcurrentRead_ != null;
    }
    /**
     * <pre>
     * Limits the number of bytes to be read from a file to enable concurrent read.
     * If the number of bytes to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
     * This setting has effect only for tables of the MergeTree family.
     * Value must be greater than **0** (default: **24x10x1024x1024**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value merge_tree_min_bytes_for_concurrent_read = 55 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The mergeTreeMinBytesForConcurrentRead.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMergeTreeMinBytesForConcurrentRead() {
      return mergeTreeMinBytesForConcurrentRead_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : mergeTreeMinBytesForConcurrentRead_;
    }
    /**
     * <pre>
     * Limits the number of bytes to be read from a file to enable concurrent read.
     * If the number of bytes to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
     * This setting has effect only for tables of the MergeTree family.
     * Value must be greater than **0** (default: **24x10x1024x1024**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value merge_tree_min_bytes_for_concurrent_read = 55 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMergeTreeMinBytesForConcurrentReadOrBuilder() {
      return getMergeTreeMinBytesForConcurrentRead();
    }

    public static final int MAX_BYTES_BEFORE_EXTERNAL_GROUP_BY_FIELD_NUMBER = 74;
    private com.google.protobuf.Int64Value maxBytesBeforeExternalGroupBy_;
    /**
     * <pre>
     * Sets the threshold of RAM consumption (in bytes) after that the temporary data, collected during the **GROUP BY** operation, should be flushed to disk to limit the RAM comsumption.
     * By default, aggregation is done by employing hash table that resides in RAM.
     * A query can result in aggregation of huge data volumes that can lead to memory exhaustion and abortion of the query (see the [max_memory_usage] setting).
     * For such queries, you can use this setting to force ClickHouse to do flushing and complete aggregation successfully.
     * Minimal value and default value: **0**, **GROUP BY** in the external memory is disabled.
     * When using aggregation in external memory, it is recommended to set the value of this setting twice as low as the [max_memory_usage] setting value (by default, the maximum memory usage is limited to ten gigabytes).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
     * See also: the [distributed_aggregation_memory_efficient] setting.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_before_external_group_by = 74;</code>
     * @return Whether the maxBytesBeforeExternalGroupBy field is set.
     */
    @java.lang.Override
    public boolean hasMaxBytesBeforeExternalGroupBy() {
      return maxBytesBeforeExternalGroupBy_ != null;
    }
    /**
     * <pre>
     * Sets the threshold of RAM consumption (in bytes) after that the temporary data, collected during the **GROUP BY** operation, should be flushed to disk to limit the RAM comsumption.
     * By default, aggregation is done by employing hash table that resides in RAM.
     * A query can result in aggregation of huge data volumes that can lead to memory exhaustion and abortion of the query (see the [max_memory_usage] setting).
     * For such queries, you can use this setting to force ClickHouse to do flushing and complete aggregation successfully.
     * Minimal value and default value: **0**, **GROUP BY** in the external memory is disabled.
     * When using aggregation in external memory, it is recommended to set the value of this setting twice as low as the [max_memory_usage] setting value (by default, the maximum memory usage is limited to ten gigabytes).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
     * See also: the [distributed_aggregation_memory_efficient] setting.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_before_external_group_by = 74;</code>
     * @return The maxBytesBeforeExternalGroupBy.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxBytesBeforeExternalGroupBy() {
      return maxBytesBeforeExternalGroupBy_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxBytesBeforeExternalGroupBy_;
    }
    /**
     * <pre>
     * Sets the threshold of RAM consumption (in bytes) after that the temporary data, collected during the **GROUP BY** operation, should be flushed to disk to limit the RAM comsumption.
     * By default, aggregation is done by employing hash table that resides in RAM.
     * A query can result in aggregation of huge data volumes that can lead to memory exhaustion and abortion of the query (see the [max_memory_usage] setting).
     * For such queries, you can use this setting to force ClickHouse to do flushing and complete aggregation successfully.
     * Minimal value and default value: **0**, **GROUP BY** in the external memory is disabled.
     * When using aggregation in external memory, it is recommended to set the value of this setting twice as low as the [max_memory_usage] setting value (by default, the maximum memory usage is limited to ten gigabytes).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
     * See also: the [distributed_aggregation_memory_efficient] setting.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_before_external_group_by = 74;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxBytesBeforeExternalGroupByOrBuilder() {
      return getMaxBytesBeforeExternalGroupBy();
    }

    public static final int MAX_BYTES_BEFORE_EXTERNAL_SORT_FIELD_NUMBER = 75;
    private com.google.protobuf.Int64Value maxBytesBeforeExternalSort_;
    /**
     * <pre>
     * This setting is equivalent of the [max_bytes_before_external_group_by] setting, except for it is for sort operation (**ORDER BY**), not aggregation.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_before_external_sort = 75;</code>
     * @return Whether the maxBytesBeforeExternalSort field is set.
     */
    @java.lang.Override
    public boolean hasMaxBytesBeforeExternalSort() {
      return maxBytesBeforeExternalSort_ != null;
    }
    /**
     * <pre>
     * This setting is equivalent of the [max_bytes_before_external_group_by] setting, except for it is for sort operation (**ORDER BY**), not aggregation.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_before_external_sort = 75;</code>
     * @return The maxBytesBeforeExternalSort.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxBytesBeforeExternalSort() {
      return maxBytesBeforeExternalSort_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxBytesBeforeExternalSort_;
    }
    /**
     * <pre>
     * This setting is equivalent of the [max_bytes_before_external_group_by] setting, except for it is for sort operation (**ORDER BY**), not aggregation.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_before_external_sort = 75;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxBytesBeforeExternalSortOrBuilder() {
      return getMaxBytesBeforeExternalSort();
    }

    public static final int GROUP_BY_TWO_LEVEL_THRESHOLD_FIELD_NUMBER = 76;
    private com.google.protobuf.Int64Value groupByTwoLevelThreshold_;
    /**
     * <pre>
     * Sets the threshold of the number of keys, after that the two-level aggregation should be used.
     * Minimal value: **0**, threshold is not set (default: **10000**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value group_by_two_level_threshold = 76;</code>
     * @return Whether the groupByTwoLevelThreshold field is set.
     */
    @java.lang.Override
    public boolean hasGroupByTwoLevelThreshold() {
      return groupByTwoLevelThreshold_ != null;
    }
    /**
     * <pre>
     * Sets the threshold of the number of keys, after that the two-level aggregation should be used.
     * Minimal value: **0**, threshold is not set (default: **10000**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value group_by_two_level_threshold = 76;</code>
     * @return The groupByTwoLevelThreshold.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getGroupByTwoLevelThreshold() {
      return groupByTwoLevelThreshold_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : groupByTwoLevelThreshold_;
    }
    /**
     * <pre>
     * Sets the threshold of the number of keys, after that the two-level aggregation should be used.
     * Minimal value: **0**, threshold is not set (default: **10000**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value group_by_two_level_threshold = 76;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getGroupByTwoLevelThresholdOrBuilder() {
      return getGroupByTwoLevelThreshold();
    }

    public static final int GROUP_BY_TWO_LEVEL_THRESHOLD_BYTES_FIELD_NUMBER = 77;
    private com.google.protobuf.Int64Value groupByTwoLevelThresholdBytes_;
    /**
     * <pre>
     * Sets the threshold of the number of bytes, after that the two-level aggregation should be used.
     * Minimal value: **0**, threshold is not set (default: **100000000**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value group_by_two_level_threshold_bytes = 77;</code>
     * @return Whether the groupByTwoLevelThresholdBytes field is set.
     */
    @java.lang.Override
    public boolean hasGroupByTwoLevelThresholdBytes() {
      return groupByTwoLevelThresholdBytes_ != null;
    }
    /**
     * <pre>
     * Sets the threshold of the number of bytes, after that the two-level aggregation should be used.
     * Minimal value: **0**, threshold is not set (default: **100000000**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value group_by_two_level_threshold_bytes = 77;</code>
     * @return The groupByTwoLevelThresholdBytes.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getGroupByTwoLevelThresholdBytes() {
      return groupByTwoLevelThresholdBytes_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : groupByTwoLevelThresholdBytes_;
    }
    /**
     * <pre>
     * Sets the threshold of the number of bytes, after that the two-level aggregation should be used.
     * Minimal value: **0**, threshold is not set (default: **100000000**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value group_by_two_level_threshold_bytes = 77;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getGroupByTwoLevelThresholdBytesOrBuilder() {
      return getGroupByTwoLevelThresholdBytes();
    }

    public static final int PRIORITY_FIELD_NUMBER = 56;
    private com.google.protobuf.Int64Value priority_;
    /**
     * <pre>
     * Sets the priority of a query.
     * * **0**-priority is not used.
     * * **1**-the highest priority.
     * * and so on. The higher the number, the lower a query's priority.
     * This setting should be set up for each query individually.
     * If ClickHouse is working with the high-priority queries, and a low-priority query enters, then the low-priority query is paused until higher-priority queries are completed.
     * Minimal value and default value: **0**, priority is not used.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value priority = 56 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the priority field is set.
     */
    @java.lang.Override
    public boolean hasPriority() {
      return priority_ != null;
    }
    /**
     * <pre>
     * Sets the priority of a query.
     * * **0**-priority is not used.
     * * **1**-the highest priority.
     * * and so on. The higher the number, the lower a query's priority.
     * This setting should be set up for each query individually.
     * If ClickHouse is working with the high-priority queries, and a low-priority query enters, then the low-priority query is paused until higher-priority queries are completed.
     * Minimal value and default value: **0**, priority is not used.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value priority = 56 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The priority.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getPriority() {
      return priority_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : priority_;
    }
    /**
     * <pre>
     * Sets the priority of a query.
     * * **0**-priority is not used.
     * * **1**-the highest priority.
     * * and so on. The higher the number, the lower a query's priority.
     * This setting should be set up for each query individually.
     * If ClickHouse is working with the high-priority queries, and a low-priority query enters, then the low-priority query is paused until higher-priority queries are completed.
     * Minimal value and default value: **0**, priority is not used.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value priority = 56 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getPriorityOrBuilder() {
      return getPriority();
    }

    public static final int MAX_THREADS_FIELD_NUMBER = 8;
    private com.google.protobuf.Int64Value maxThreads_;
    /**
     * <pre>
     * Limits the maximum number of threads to process the request (setting does not take threads that read data from remote servers into account).
     * This setting applies to threads that perform the same stages of the query processing pipeline in parallel.
     * Minimal value and default value: **0** (the thread number is calculated automatically based on the number of physical CPU cores, no HyperThreading cores are taken into account).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_threads).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_threads = 8 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the maxThreads field is set.
     */
    @java.lang.Override
    public boolean hasMaxThreads() {
      return maxThreads_ != null;
    }
    /**
     * <pre>
     * Limits the maximum number of threads to process the request (setting does not take threads that read data from remote servers into account).
     * This setting applies to threads that perform the same stages of the query processing pipeline in parallel.
     * Minimal value and default value: **0** (the thread number is calculated automatically based on the number of physical CPU cores, no HyperThreading cores are taken into account).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_threads).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_threads = 8 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The maxThreads.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxThreads() {
      return maxThreads_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxThreads_;
    }
    /**
     * <pre>
     * Limits the maximum number of threads to process the request (setting does not take threads that read data from remote servers into account).
     * This setting applies to threads that perform the same stages of the query processing pipeline in parallel.
     * Minimal value and default value: **0** (the thread number is calculated automatically based on the number of physical CPU cores, no HyperThreading cores are taken into account).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_threads).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_threads = 8 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxThreadsOrBuilder() {
      return getMaxThreads();
    }

    public static final int MAX_MEMORY_USAGE_FIELD_NUMBER = 11;
    private com.google.protobuf.Int64Value maxMemoryUsage_;
    /**
     * <pre>
     * Limits the maximum memory usage (in bytes) for processing of a single user's query on a single server.
     * This setting does not take server's free RAM amount or total RAM amount into account.
     * This limitation is enforced for any user's single query on a single server.
     * Minimal value: **0**, no limitation is set.
     * Value that is set in the ClickHouse default config file: **10737418240** (10 GB).
     * If you use [max_bytes_before_external_group_by] or [max_bytes_before_external_sort] setting, then it is recommended to set their values twice as low as [max_memory_usage] setting value.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#settings_max_memory_usage).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_memory_usage = 11 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxMemoryUsage field is set.
     */
    @java.lang.Override
    public boolean hasMaxMemoryUsage() {
      return maxMemoryUsage_ != null;
    }
    /**
     * <pre>
     * Limits the maximum memory usage (in bytes) for processing of a single user's query on a single server.
     * This setting does not take server's free RAM amount or total RAM amount into account.
     * This limitation is enforced for any user's single query on a single server.
     * Minimal value: **0**, no limitation is set.
     * Value that is set in the ClickHouse default config file: **10737418240** (10 GB).
     * If you use [max_bytes_before_external_group_by] or [max_bytes_before_external_sort] setting, then it is recommended to set their values twice as low as [max_memory_usage] setting value.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#settings_max_memory_usage).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_memory_usage = 11 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxMemoryUsage.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxMemoryUsage() {
      return maxMemoryUsage_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxMemoryUsage_;
    }
    /**
     * <pre>
     * Limits the maximum memory usage (in bytes) for processing of a single user's query on a single server.
     * This setting does not take server's free RAM amount or total RAM amount into account.
     * This limitation is enforced for any user's single query on a single server.
     * Minimal value: **0**, no limitation is set.
     * Value that is set in the ClickHouse default config file: **10737418240** (10 GB).
     * If you use [max_bytes_before_external_group_by] or [max_bytes_before_external_sort] setting, then it is recommended to set their values twice as low as [max_memory_usage] setting value.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#settings_max_memory_usage).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_memory_usage = 11 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxMemoryUsageOrBuilder() {
      return getMaxMemoryUsage();
    }

    public static final int MAX_MEMORY_USAGE_FOR_USER_FIELD_NUMBER = 12;
    private com.google.protobuf.Int64Value maxMemoryUsageForUser_;
    /**
     * <pre>
     * Limits the maximum memory usage (in bytes) for processing of user's queries on a single server.
     * This setting does not take server's free RAM amount or total RAM amount into account.
     * This limitation is enforced for all queries that belong to one user and run simultaneously on a single server.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_memory_usage_for_user = 12 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxMemoryUsageForUser field is set.
     */
    @java.lang.Override
    public boolean hasMaxMemoryUsageForUser() {
      return maxMemoryUsageForUser_ != null;
    }
    /**
     * <pre>
     * Limits the maximum memory usage (in bytes) for processing of user's queries on a single server.
     * This setting does not take server's free RAM amount or total RAM amount into account.
     * This limitation is enforced for all queries that belong to one user and run simultaneously on a single server.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_memory_usage_for_user = 12 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxMemoryUsageForUser.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxMemoryUsageForUser() {
      return maxMemoryUsageForUser_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxMemoryUsageForUser_;
    }
    /**
     * <pre>
     * Limits the maximum memory usage (in bytes) for processing of user's queries on a single server.
     * This setting does not take server's free RAM amount or total RAM amount into account.
     * This limitation is enforced for all queries that belong to one user and run simultaneously on a single server.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_memory_usage_for_user = 12 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxMemoryUsageForUserOrBuilder() {
      return getMaxMemoryUsageForUser();
    }

    public static final int MAX_NETWORK_BANDWIDTH_FIELD_NUMBER = 57;
    private com.google.protobuf.Int64Value maxNetworkBandwidth_;
    /**
     * <pre>
     * The maximum speed of data exchange over the network in bytes per second for a query.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_network_bandwidth = 57;</code>
     * @return Whether the maxNetworkBandwidth field is set.
     */
    @java.lang.Override
    public boolean hasMaxNetworkBandwidth() {
      return maxNetworkBandwidth_ != null;
    }
    /**
     * <pre>
     * The maximum speed of data exchange over the network in bytes per second for a query.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_network_bandwidth = 57;</code>
     * @return The maxNetworkBandwidth.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxNetworkBandwidth() {
      return maxNetworkBandwidth_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxNetworkBandwidth_;
    }
    /**
     * <pre>
     * The maximum speed of data exchange over the network in bytes per second for a query.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_network_bandwidth = 57;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxNetworkBandwidthOrBuilder() {
      return getMaxNetworkBandwidth();
    }

    public static final int MAX_NETWORK_BANDWIDTH_FOR_USER_FIELD_NUMBER = 58;
    private com.google.protobuf.Int64Value maxNetworkBandwidthForUser_;
    /**
     * <pre>
     * The maximum speed of data exchange over the network in bytes per second for all concurrently running user queries.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_network_bandwidth_for_user = 58;</code>
     * @return Whether the maxNetworkBandwidthForUser field is set.
     */
    @java.lang.Override
    public boolean hasMaxNetworkBandwidthForUser() {
      return maxNetworkBandwidthForUser_ != null;
    }
    /**
     * <pre>
     * The maximum speed of data exchange over the network in bytes per second for all concurrently running user queries.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_network_bandwidth_for_user = 58;</code>
     * @return The maxNetworkBandwidthForUser.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxNetworkBandwidthForUser() {
      return maxNetworkBandwidthForUser_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxNetworkBandwidthForUser_;
    }
    /**
     * <pre>
     * The maximum speed of data exchange over the network in bytes per second for all concurrently running user queries.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_network_bandwidth_for_user = 58;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxNetworkBandwidthForUserOrBuilder() {
      return getMaxNetworkBandwidthForUser();
    }

    public static final int MAX_PARTITIONS_PER_INSERT_BLOCK_FIELD_NUMBER = 102;
    private com.google.protobuf.Int64Value maxPartitionsPerInsertBlock_;
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/ru/operations/settings/query-complexity/#max-partitions-per-insert-block).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_partitions_per_insert_block = 102;</code>
     * @return Whether the maxPartitionsPerInsertBlock field is set.
     */
    @java.lang.Override
    public boolean hasMaxPartitionsPerInsertBlock() {
      return maxPartitionsPerInsertBlock_ != null;
    }
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/ru/operations/settings/query-complexity/#max-partitions-per-insert-block).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_partitions_per_insert_block = 102;</code>
     * @return The maxPartitionsPerInsertBlock.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxPartitionsPerInsertBlock() {
      return maxPartitionsPerInsertBlock_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxPartitionsPerInsertBlock_;
    }
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/ru/operations/settings/query-complexity/#max-partitions-per-insert-block).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_partitions_per_insert_block = 102;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxPartitionsPerInsertBlockOrBuilder() {
      return getMaxPartitionsPerInsertBlock();
    }

    public static final int MAX_CONCURRENT_QUERIES_FOR_USER_FIELD_NUMBER = 103;
    private com.google.protobuf.Int64Value maxConcurrentQueriesForUser_;
    /**
     * <pre>
     * The maximum number of concurrent requests per user.
     * Default value: 0 (no limit).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_concurrent_queries_for_user = 103;</code>
     * @return Whether the maxConcurrentQueriesForUser field is set.
     */
    @java.lang.Override
    public boolean hasMaxConcurrentQueriesForUser() {
      return maxConcurrentQueriesForUser_ != null;
    }
    /**
     * <pre>
     * The maximum number of concurrent requests per user.
     * Default value: 0 (no limit).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_concurrent_queries_for_user = 103;</code>
     * @return The maxConcurrentQueriesForUser.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxConcurrentQueriesForUser() {
      return maxConcurrentQueriesForUser_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxConcurrentQueriesForUser_;
    }
    /**
     * <pre>
     * The maximum number of concurrent requests per user.
     * Default value: 0 (no limit).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_concurrent_queries_for_user = 103;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxConcurrentQueriesForUserOrBuilder() {
      return getMaxConcurrentQueriesForUser();
    }

    public static final int FORCE_INDEX_BY_DATE_FIELD_NUMBER = 59;
    private com.google.protobuf.BoolValue forceIndexByDate_;
    /**
     * <pre>
     * If enabled, query is not executed if the ClickHouse can't use index by date.
     * This setting has effect only for tables of the MergeTree family.
     * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by date).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-force_index_by_date).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue force_index_by_date = 59;</code>
     * @return Whether the forceIndexByDate field is set.
     */
    @java.lang.Override
    public boolean hasForceIndexByDate() {
      return forceIndexByDate_ != null;
    }
    /**
     * <pre>
     * If enabled, query is not executed if the ClickHouse can't use index by date.
     * This setting has effect only for tables of the MergeTree family.
     * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by date).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-force_index_by_date).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue force_index_by_date = 59;</code>
     * @return The forceIndexByDate.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getForceIndexByDate() {
      return forceIndexByDate_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : forceIndexByDate_;
    }
    /**
     * <pre>
     * If enabled, query is not executed if the ClickHouse can't use index by date.
     * This setting has effect only for tables of the MergeTree family.
     * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by date).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-force_index_by_date).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue force_index_by_date = 59;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getForceIndexByDateOrBuilder() {
      return getForceIndexByDate();
    }

    public static final int FORCE_PRIMARY_KEY_FIELD_NUMBER = 60;
    private com.google.protobuf.BoolValue forcePrimaryKey_;
    /**
     * <pre>
     * If enabled, query is not executed if the ClickHouse can't use index by primary key.
     * This setting has effect only for tables of the MergeTree family.
     * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by primary key).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#force-primary-key).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue force_primary_key = 60;</code>
     * @return Whether the forcePrimaryKey field is set.
     */
    @java.lang.Override
    public boolean hasForcePrimaryKey() {
      return forcePrimaryKey_ != null;
    }
    /**
     * <pre>
     * If enabled, query is not executed if the ClickHouse can't use index by primary key.
     * This setting has effect only for tables of the MergeTree family.
     * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by primary key).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#force-primary-key).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue force_primary_key = 60;</code>
     * @return The forcePrimaryKey.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getForcePrimaryKey() {
      return forcePrimaryKey_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : forcePrimaryKey_;
    }
    /**
     * <pre>
     * If enabled, query is not executed if the ClickHouse can't use index by primary key.
     * This setting has effect only for tables of the MergeTree family.
     * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by primary key).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#force-primary-key).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue force_primary_key = 60;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getForcePrimaryKeyOrBuilder() {
      return getForcePrimaryKey();
    }

    public static final int MAX_ROWS_TO_READ_FIELD_NUMBER = 13;
    private com.google.protobuf.Int64Value maxRowsToRead_;
    /**
     * <pre>
     * Limits the maximum number of rows that can be read from a table when running a query.
     * Minimal value and default value: **0**, no limitation is set.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-rows-to-read).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_to_read = 13 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxRowsToRead field is set.
     */
    @java.lang.Override
    public boolean hasMaxRowsToRead() {
      return maxRowsToRead_ != null;
    }
    /**
     * <pre>
     * Limits the maximum number of rows that can be read from a table when running a query.
     * Minimal value and default value: **0**, no limitation is set.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-rows-to-read).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_to_read = 13 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxRowsToRead.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxRowsToRead() {
      return maxRowsToRead_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxRowsToRead_;
    }
    /**
     * <pre>
     * Limits the maximum number of rows that can be read from a table when running a query.
     * Minimal value and default value: **0**, no limitation is set.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-rows-to-read).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_to_read = 13 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxRowsToReadOrBuilder() {
      return getMaxRowsToRead();
    }

    public static final int MAX_BYTES_TO_READ_FIELD_NUMBER = 14;
    private com.google.protobuf.Int64Value maxBytesToRead_;
    /**
     * <pre>
     * Limits the maximum number of bytes (uncompressed data) that can be read from a table when running a query.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_to_read = 14 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxBytesToRead field is set.
     */
    @java.lang.Override
    public boolean hasMaxBytesToRead() {
      return maxBytesToRead_ != null;
    }
    /**
     * <pre>
     * Limits the maximum number of bytes (uncompressed data) that can be read from a table when running a query.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_to_read = 14 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxBytesToRead.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxBytesToRead() {
      return maxBytesToRead_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxBytesToRead_;
    }
    /**
     * <pre>
     * Limits the maximum number of bytes (uncompressed data) that can be read from a table when running a query.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_to_read = 14 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxBytesToReadOrBuilder() {
      return getMaxBytesToRead();
    }

    public static final int READ_OVERFLOW_MODE_FIELD_NUMBER = 15;
    private int readOverflowMode_;
    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while reading the data.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode read_overflow_mode = 15;</code>
     * @return The enum numeric value on the wire for readOverflowMode.
     */
    @java.lang.Override public int getReadOverflowModeValue() {
      return readOverflowMode_;
    }
    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while reading the data.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode read_overflow_mode = 15;</code>
     * @return The readOverflowMode.
     */
    @java.lang.Override public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode getReadOverflowMode() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.valueOf(readOverflowMode_);
      return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.UNRECOGNIZED : result;
    }

    public static final int MAX_ROWS_TO_GROUP_BY_FIELD_NUMBER = 16;
    private com.google.protobuf.Int64Value maxRowsToGroupBy_;
    /**
     * <pre>
     * Limits the maximum number of unique keys received from aggregation function.
     * This setting helps to reduce RAM consumption while doing aggregation.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_to_group_by = 16 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxRowsToGroupBy field is set.
     */
    @java.lang.Override
    public boolean hasMaxRowsToGroupBy() {
      return maxRowsToGroupBy_ != null;
    }
    /**
     * <pre>
     * Limits the maximum number of unique keys received from aggregation function.
     * This setting helps to reduce RAM consumption while doing aggregation.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_to_group_by = 16 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxRowsToGroupBy.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxRowsToGroupBy() {
      return maxRowsToGroupBy_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxRowsToGroupBy_;
    }
    /**
     * <pre>
     * Limits the maximum number of unique keys received from aggregation function.
     * This setting helps to reduce RAM consumption while doing aggregation.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_to_group_by = 16 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxRowsToGroupByOrBuilder() {
      return getMaxRowsToGroupBy();
    }

    public static final int GROUP_BY_OVERFLOW_MODE_FIELD_NUMBER = 17;
    private int groupByOverflowMode_;
    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing aggregation.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * * **any**-perform approximate **GROUP BY** operation by continuing aggregation for the keys that got into the set, but don't add new keys to the set.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.GroupByOverflowMode group_by_overflow_mode = 17;</code>
     * @return The enum numeric value on the wire for groupByOverflowMode.
     */
    @java.lang.Override public int getGroupByOverflowModeValue() {
      return groupByOverflowMode_;
    }
    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing aggregation.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * * **any**-perform approximate **GROUP BY** operation by continuing aggregation for the keys that got into the set, but don't add new keys to the set.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.GroupByOverflowMode group_by_overflow_mode = 17;</code>
     * @return The groupByOverflowMode.
     */
    @java.lang.Override public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.GroupByOverflowMode getGroupByOverflowMode() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.GroupByOverflowMode result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.GroupByOverflowMode.valueOf(groupByOverflowMode_);
      return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.GroupByOverflowMode.UNRECOGNIZED : result;
    }

    public static final int MAX_ROWS_TO_SORT_FIELD_NUMBER = 18;
    private com.google.protobuf.Int64Value maxRowsToSort_;
    /**
     * <pre>
     * Limits the maximum number of rows that can be read from a table for sorting.
     * This setting helps to reduce RAM consumption.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_to_sort = 18 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxRowsToSort field is set.
     */
    @java.lang.Override
    public boolean hasMaxRowsToSort() {
      return maxRowsToSort_ != null;
    }
    /**
     * <pre>
     * Limits the maximum number of rows that can be read from a table for sorting.
     * This setting helps to reduce RAM consumption.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_to_sort = 18 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxRowsToSort.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxRowsToSort() {
      return maxRowsToSort_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxRowsToSort_;
    }
    /**
     * <pre>
     * Limits the maximum number of rows that can be read from a table for sorting.
     * This setting helps to reduce RAM consumption.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_to_sort = 18 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxRowsToSortOrBuilder() {
      return getMaxRowsToSort();
    }

    public static final int MAX_BYTES_TO_SORT_FIELD_NUMBER = 19;
    private com.google.protobuf.Int64Value maxBytesToSort_;
    /**
     * <pre>
     * Limits the maximum number of bytes (uncompressed data) that can be read from a table for sorting.
     * This setting helps to reduce RAM consumption.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_to_sort = 19 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxBytesToSort field is set.
     */
    @java.lang.Override
    public boolean hasMaxBytesToSort() {
      return maxBytesToSort_ != null;
    }
    /**
     * <pre>
     * Limits the maximum number of bytes (uncompressed data) that can be read from a table for sorting.
     * This setting helps to reduce RAM consumption.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_to_sort = 19 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxBytesToSort.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxBytesToSort() {
      return maxBytesToSort_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxBytesToSort_;
    }
    /**
     * <pre>
     * Limits the maximum number of bytes (uncompressed data) that can be read from a table for sorting.
     * This setting helps to reduce RAM consumption.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_to_sort = 19 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxBytesToSortOrBuilder() {
      return getMaxBytesToSort();
    }

    public static final int SORT_OVERFLOW_MODE_FIELD_NUMBER = 20;
    private int sortOverflowMode_;
    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while sorting.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode sort_overflow_mode = 20;</code>
     * @return The enum numeric value on the wire for sortOverflowMode.
     */
    @java.lang.Override public int getSortOverflowModeValue() {
      return sortOverflowMode_;
    }
    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while sorting.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode sort_overflow_mode = 20;</code>
     * @return The sortOverflowMode.
     */
    @java.lang.Override public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode getSortOverflowMode() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.valueOf(sortOverflowMode_);
      return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.UNRECOGNIZED : result;
    }

    public static final int MAX_RESULT_ROWS_FIELD_NUMBER = 21;
    private com.google.protobuf.Int64Value maxResultRows_;
    /**
     * <pre>
     * Limits the number of rows in the result.
     * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_result_rows = 21 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxResultRows field is set.
     */
    @java.lang.Override
    public boolean hasMaxResultRows() {
      return maxResultRows_ != null;
    }
    /**
     * <pre>
     * Limits the number of rows in the result.
     * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_result_rows = 21 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxResultRows.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxResultRows() {
      return maxResultRows_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxResultRows_;
    }
    /**
     * <pre>
     * Limits the number of rows in the result.
     * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_result_rows = 21 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxResultRowsOrBuilder() {
      return getMaxResultRows();
    }

    public static final int MAX_RESULT_BYTES_FIELD_NUMBER = 22;
    private com.google.protobuf.Int64Value maxResultBytes_;
    /**
     * <pre>
     * Limits the number of bytes in the result.
     * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_result_bytes = 22 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxResultBytes field is set.
     */
    @java.lang.Override
    public boolean hasMaxResultBytes() {
      return maxResultBytes_ != null;
    }
    /**
     * <pre>
     * Limits the number of bytes in the result.
     * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_result_bytes = 22 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxResultBytes.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxResultBytes() {
      return maxResultBytes_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxResultBytes_;
    }
    /**
     * <pre>
     * Limits the number of bytes in the result.
     * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_result_bytes = 22 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxResultBytesOrBuilder() {
      return getMaxResultBytes();
    }

    public static final int RESULT_OVERFLOW_MODE_FIELD_NUMBER = 23;
    private int resultOverflowMode_;
    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while forming result.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode result_overflow_mode = 23;</code>
     * @return The enum numeric value on the wire for resultOverflowMode.
     */
    @java.lang.Override public int getResultOverflowModeValue() {
      return resultOverflowMode_;
    }
    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while forming result.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode result_overflow_mode = 23;</code>
     * @return The resultOverflowMode.
     */
    @java.lang.Override public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode getResultOverflowMode() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.valueOf(resultOverflowMode_);
      return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.UNRECOGNIZED : result;
    }

    public static final int MAX_ROWS_IN_DISTINCT_FIELD_NUMBER = 24;
    private com.google.protobuf.Int64Value maxRowsInDistinct_;
    /**
     * <pre>
     * Limits the maximum number of different rows when using **DISTINCT**.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_in_distinct = 24 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxRowsInDistinct field is set.
     */
    @java.lang.Override
    public boolean hasMaxRowsInDistinct() {
      return maxRowsInDistinct_ != null;
    }
    /**
     * <pre>
     * Limits the maximum number of different rows when using **DISTINCT**.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_in_distinct = 24 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxRowsInDistinct.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxRowsInDistinct() {
      return maxRowsInDistinct_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxRowsInDistinct_;
    }
    /**
     * <pre>
     * Limits the maximum number of different rows when using **DISTINCT**.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_in_distinct = 24 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxRowsInDistinctOrBuilder() {
      return getMaxRowsInDistinct();
    }

    public static final int MAX_BYTES_IN_DISTINCT_FIELD_NUMBER = 25;
    private com.google.protobuf.Int64Value maxBytesInDistinct_;
    /**
     * <pre>
     * Limits the maximum size of a hash table in bytes (uncompressed data) when using **DISTINCT**.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_in_distinct = 25 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxBytesInDistinct field is set.
     */
    @java.lang.Override
    public boolean hasMaxBytesInDistinct() {
      return maxBytesInDistinct_ != null;
    }
    /**
     * <pre>
     * Limits the maximum size of a hash table in bytes (uncompressed data) when using **DISTINCT**.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_in_distinct = 25 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxBytesInDistinct.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxBytesInDistinct() {
      return maxBytesInDistinct_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxBytesInDistinct_;
    }
    /**
     * <pre>
     * Limits the maximum size of a hash table in bytes (uncompressed data) when using **DISTINCT**.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_in_distinct = 25 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxBytesInDistinctOrBuilder() {
      return getMaxBytesInDistinct();
    }

    public static final int DISTINCT_OVERFLOW_MODE_FIELD_NUMBER = 26;
    private int distinctOverflowMode_;
    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing **DISCTINCT**.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode distinct_overflow_mode = 26;</code>
     * @return The enum numeric value on the wire for distinctOverflowMode.
     */
    @java.lang.Override public int getDistinctOverflowModeValue() {
      return distinctOverflowMode_;
    }
    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing **DISCTINCT**.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode distinct_overflow_mode = 26;</code>
     * @return The distinctOverflowMode.
     */
    @java.lang.Override public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode getDistinctOverflowMode() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.valueOf(distinctOverflowMode_);
      return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.UNRECOGNIZED : result;
    }

    public static final int MAX_ROWS_TO_TRANSFER_FIELD_NUMBER = 27;
    private com.google.protobuf.Int64Value maxRowsToTransfer_;
    /**
     * <pre>
     * Limits the maximum number of rows that can be passed to a remote server or saved in a temporary table when using **GLOBAL IN**.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_to_transfer = 27 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxRowsToTransfer field is set.
     */
    @java.lang.Override
    public boolean hasMaxRowsToTransfer() {
      return maxRowsToTransfer_ != null;
    }
    /**
     * <pre>
     * Limits the maximum number of rows that can be passed to a remote server or saved in a temporary table when using **GLOBAL IN**.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_to_transfer = 27 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxRowsToTransfer.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxRowsToTransfer() {
      return maxRowsToTransfer_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxRowsToTransfer_;
    }
    /**
     * <pre>
     * Limits the maximum number of rows that can be passed to a remote server or saved in a temporary table when using **GLOBAL IN**.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_to_transfer = 27 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxRowsToTransferOrBuilder() {
      return getMaxRowsToTransfer();
    }

    public static final int MAX_BYTES_TO_TRANSFER_FIELD_NUMBER = 28;
    private com.google.protobuf.Int64Value maxBytesToTransfer_;
    /**
     * <pre>
     * Limits the maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary
     * table when using **GLOBAL IN**.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_to_transfer = 28 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxBytesToTransfer field is set.
     */
    @java.lang.Override
    public boolean hasMaxBytesToTransfer() {
      return maxBytesToTransfer_ != null;
    }
    /**
     * <pre>
     * Limits the maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary
     * table when using **GLOBAL IN**.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_to_transfer = 28 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxBytesToTransfer.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxBytesToTransfer() {
      return maxBytesToTransfer_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxBytesToTransfer_;
    }
    /**
     * <pre>
     * Limits the maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary
     * table when using **GLOBAL IN**.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_to_transfer = 28 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxBytesToTransferOrBuilder() {
      return getMaxBytesToTransfer();
    }

    public static final int TRANSFER_OVERFLOW_MODE_FIELD_NUMBER = 29;
    private int transferOverflowMode_;
    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing transfers.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode transfer_overflow_mode = 29;</code>
     * @return The enum numeric value on the wire for transferOverflowMode.
     */
    @java.lang.Override public int getTransferOverflowModeValue() {
      return transferOverflowMode_;
    }
    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing transfers.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode transfer_overflow_mode = 29;</code>
     * @return The transferOverflowMode.
     */
    @java.lang.Override public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode getTransferOverflowMode() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.valueOf(transferOverflowMode_);
      return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.UNRECOGNIZED : result;
    }

    public static final int MAX_EXECUTION_TIME_FIELD_NUMBER = 30;
    private com.google.protobuf.Int64Value maxExecutionTime_;
    /**
     * <pre>
     * Limits the maximum query execution time in milliseconds.
     * At this moment, this limitation is not checked when passing one of the sorting stages, as well as merging and finalizing aggregation funictions.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_execution_time = 30 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxExecutionTime field is set.
     */
    @java.lang.Override
    public boolean hasMaxExecutionTime() {
      return maxExecutionTime_ != null;
    }
    /**
     * <pre>
     * Limits the maximum query execution time in milliseconds.
     * At this moment, this limitation is not checked when passing one of the sorting stages, as well as merging and finalizing aggregation funictions.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_execution_time = 30 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxExecutionTime.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxExecutionTime() {
      return maxExecutionTime_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxExecutionTime_;
    }
    /**
     * <pre>
     * Limits the maximum query execution time in milliseconds.
     * At this moment, this limitation is not checked when passing one of the sorting stages, as well as merging and finalizing aggregation funictions.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_execution_time = 30 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxExecutionTimeOrBuilder() {
      return getMaxExecutionTime();
    }

    public static final int TIMEOUT_OVERFLOW_MODE_FIELD_NUMBER = 31;
    private int timeoutOverflowMode_;
    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) of execution time.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode timeout_overflow_mode = 31;</code>
     * @return The enum numeric value on the wire for timeoutOverflowMode.
     */
    @java.lang.Override public int getTimeoutOverflowModeValue() {
      return timeoutOverflowMode_;
    }
    /**
     * <pre>
     * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) of execution time.
     * * **throw**-abort query execution, return an error.
     * * **break**-stop query execution, return partial result.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode timeout_overflow_mode = 31;</code>
     * @return The timeoutOverflowMode.
     */
    @java.lang.Override public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode getTimeoutOverflowMode() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.valueOf(timeoutOverflowMode_);
      return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.UNRECOGNIZED : result;
    }

    public static final int MAX_ROWS_IN_SET_FIELD_NUMBER = 87;
    private com.google.protobuf.Int64Value maxRowsInSet_;
    /**
     * <pre>
     * Limit on the number of rows in the set resulting from the execution of the IN section.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_in_set = 87 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxRowsInSet field is set.
     */
    @java.lang.Override
    public boolean hasMaxRowsInSet() {
      return maxRowsInSet_ != null;
    }
    /**
     * <pre>
     * Limit on the number of rows in the set resulting from the execution of the IN section.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_in_set = 87 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxRowsInSet.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxRowsInSet() {
      return maxRowsInSet_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxRowsInSet_;
    }
    /**
     * <pre>
     * Limit on the number of rows in the set resulting from the execution of the IN section.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_in_set = 87 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxRowsInSetOrBuilder() {
      return getMaxRowsInSet();
    }

    public static final int MAX_BYTES_IN_SET_FIELD_NUMBER = 88;
    private com.google.protobuf.Int64Value maxBytesInSet_;
    /**
     * <pre>
     * Limit on the number of bytes in the set resulting from the execution of the IN section.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_in_set = 88 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxBytesInSet field is set.
     */
    @java.lang.Override
    public boolean hasMaxBytesInSet() {
      return maxBytesInSet_ != null;
    }
    /**
     * <pre>
     * Limit on the number of bytes in the set resulting from the execution of the IN section.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_in_set = 88 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxBytesInSet.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxBytesInSet() {
      return maxBytesInSet_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxBytesInSet_;
    }
    /**
     * <pre>
     * Limit on the number of bytes in the set resulting from the execution of the IN section.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_in_set = 88 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxBytesInSetOrBuilder() {
      return getMaxBytesInSet();
    }

    public static final int SET_OVERFLOW_MODE_FIELD_NUMBER = 89;
    private int setOverflowMode_;
    /**
     * <pre>
     * Determine the behavior on exceeding max_rows_in_set or max_bytes_in_set limit.
     * Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode set_overflow_mode = 89;</code>
     * @return The enum numeric value on the wire for setOverflowMode.
     */
    @java.lang.Override public int getSetOverflowModeValue() {
      return setOverflowMode_;
    }
    /**
     * <pre>
     * Determine the behavior on exceeding max_rows_in_set or max_bytes_in_set limit.
     * Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode set_overflow_mode = 89;</code>
     * @return The setOverflowMode.
     */
    @java.lang.Override public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode getSetOverflowMode() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.valueOf(setOverflowMode_);
      return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.UNRECOGNIZED : result;
    }

    public static final int MAX_ROWS_IN_JOIN_FIELD_NUMBER = 90;
    private com.google.protobuf.Int64Value maxRowsInJoin_;
    /**
     * <pre>
     * Limit on maximum size of the hash table for JOIN, in rows.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_in_join = 90 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxRowsInJoin field is set.
     */
    @java.lang.Override
    public boolean hasMaxRowsInJoin() {
      return maxRowsInJoin_ != null;
    }
    /**
     * <pre>
     * Limit on maximum size of the hash table for JOIN, in rows.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_in_join = 90 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxRowsInJoin.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxRowsInJoin() {
      return maxRowsInJoin_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxRowsInJoin_;
    }
    /**
     * <pre>
     * Limit on maximum size of the hash table for JOIN, in rows.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_rows_in_join = 90 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxRowsInJoinOrBuilder() {
      return getMaxRowsInJoin();
    }

    public static final int MAX_BYTES_IN_JOIN_FIELD_NUMBER = 91;
    private com.google.protobuf.Int64Value maxBytesInJoin_;
    /**
     * <pre>
     * Limit on maximum size of the hash table for JOIN, in bytes.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_in_join = 91 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxBytesInJoin field is set.
     */
    @java.lang.Override
    public boolean hasMaxBytesInJoin() {
      return maxBytesInJoin_ != null;
    }
    /**
     * <pre>
     * Limit on maximum size of the hash table for JOIN, in bytes.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_in_join = 91 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxBytesInJoin.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxBytesInJoin() {
      return maxBytesInJoin_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxBytesInJoin_;
    }
    /**
     * <pre>
     * Limit on maximum size of the hash table for JOIN, in bytes.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_bytes_in_join = 91 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxBytesInJoinOrBuilder() {
      return getMaxBytesInJoin();
    }

    public static final int JOIN_OVERFLOW_MODE_FIELD_NUMBER = 92;
    private int joinOverflowMode_;
    /**
     * <pre>
     * Determine the behavior on exceeding max_rows_in_join or max_bytes_in_join limit.
     * Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode join_overflow_mode = 92;</code>
     * @return The enum numeric value on the wire for joinOverflowMode.
     */
    @java.lang.Override public int getJoinOverflowModeValue() {
      return joinOverflowMode_;
    }
    /**
     * <pre>
     * Determine the behavior on exceeding max_rows_in_join or max_bytes_in_join limit.
     * Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode join_overflow_mode = 92;</code>
     * @return The joinOverflowMode.
     */
    @java.lang.Override public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode getJoinOverflowMode() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.valueOf(joinOverflowMode_);
      return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.UNRECOGNIZED : result;
    }

    public static final int JOIN_ALGORITHM_FIELD_NUMBER = 104;
    private java.util.List<java.lang.Integer> joinAlgorithm_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.JoinAlgorithm> joinAlgorithm_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.JoinAlgorithm>() {
              public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.JoinAlgorithm convert(java.lang.Integer from) {
                @SuppressWarnings("deprecation")
                yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.JoinAlgorithm result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.JoinAlgorithm.valueOf(from);
                return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.JoinAlgorithm.UNRECOGNIZED : result;
              }
            };
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-join_algorithm).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserSettings.JoinAlgorithm join_algorithm = 104;</code>
     * @return A list containing the joinAlgorithm.
     */
    @java.lang.Override
    public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.JoinAlgorithm> getJoinAlgorithmList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.JoinAlgorithm>(joinAlgorithm_, joinAlgorithm_converter_);
    }
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-join_algorithm).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserSettings.JoinAlgorithm join_algorithm = 104;</code>
     * @return The count of joinAlgorithm.
     */
    @java.lang.Override
    public int getJoinAlgorithmCount() {
      return joinAlgorithm_.size();
    }
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-join_algorithm).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserSettings.JoinAlgorithm join_algorithm = 104;</code>
     * @param index The index of the element to return.
     * @return The joinAlgorithm at the given index.
     */
    @java.lang.Override
    public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.JoinAlgorithm getJoinAlgorithm(int index) {
      return joinAlgorithm_converter_.convert(joinAlgorithm_.get(index));
    }
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-join_algorithm).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserSettings.JoinAlgorithm join_algorithm = 104;</code>
     * @return A list containing the enum numeric values on the wire for joinAlgorithm.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
    getJoinAlgorithmValueList() {
      return joinAlgorithm_;
    }
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-join_algorithm).
     * </pre>
     *
     * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserSettings.JoinAlgorithm join_algorithm = 104;</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of joinAlgorithm at the given index.
     */
    @java.lang.Override
    public int getJoinAlgorithmValue(int index) {
      return joinAlgorithm_.get(index);
    }
    private int joinAlgorithmMemoizedSerializedSize;

    public static final int ANY_JOIN_DISTINCT_RIGHT_TABLE_KEYS_FIELD_NUMBER = 105;
    private com.google.protobuf.BoolValue anyJoinDistinctRightTableKeys_;
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#any_join_distinct_right_table_keys).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue any_join_distinct_right_table_keys = 105;</code>
     * @return Whether the anyJoinDistinctRightTableKeys field is set.
     */
    @java.lang.Override
    public boolean hasAnyJoinDistinctRightTableKeys() {
      return anyJoinDistinctRightTableKeys_ != null;
    }
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#any_join_distinct_right_table_keys).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue any_join_distinct_right_table_keys = 105;</code>
     * @return The anyJoinDistinctRightTableKeys.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getAnyJoinDistinctRightTableKeys() {
      return anyJoinDistinctRightTableKeys_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : anyJoinDistinctRightTableKeys_;
    }
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#any_join_distinct_right_table_keys).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue any_join_distinct_right_table_keys = 105;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getAnyJoinDistinctRightTableKeysOrBuilder() {
      return getAnyJoinDistinctRightTableKeys();
    }

    public static final int MAX_COLUMNS_TO_READ_FIELD_NUMBER = 32;
    private com.google.protobuf.Int64Value maxColumnsToRead_;
    /**
     * <pre>
     * Limits the maximum number of columns that can be read from a table in a single query.
     * If the query requires to read more columns to complete, then it will be aborted.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_columns_to_read = 32 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxColumnsToRead field is set.
     */
    @java.lang.Override
    public boolean hasMaxColumnsToRead() {
      return maxColumnsToRead_ != null;
    }
    /**
     * <pre>
     * Limits the maximum number of columns that can be read from a table in a single query.
     * If the query requires to read more columns to complete, then it will be aborted.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_columns_to_read = 32 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxColumnsToRead.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxColumnsToRead() {
      return maxColumnsToRead_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxColumnsToRead_;
    }
    /**
     * <pre>
     * Limits the maximum number of columns that can be read from a table in a single query.
     * If the query requires to read more columns to complete, then it will be aborted.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_columns_to_read = 32 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxColumnsToReadOrBuilder() {
      return getMaxColumnsToRead();
    }

    public static final int MAX_TEMPORARY_COLUMNS_FIELD_NUMBER = 33;
    private com.google.protobuf.Int64Value maxTemporaryColumns_;
    /**
     * <pre>
     * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_temporary_columns = 33 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxTemporaryColumns field is set.
     */
    @java.lang.Override
    public boolean hasMaxTemporaryColumns() {
      return maxTemporaryColumns_ != null;
    }
    /**
     * <pre>
     * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_temporary_columns = 33 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxTemporaryColumns.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxTemporaryColumns() {
      return maxTemporaryColumns_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxTemporaryColumns_;
    }
    /**
     * <pre>
     * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_temporary_columns = 33 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxTemporaryColumnsOrBuilder() {
      return getMaxTemporaryColumns();
    }

    public static final int MAX_TEMPORARY_NON_CONST_COLUMNS_FIELD_NUMBER = 34;
    private com.google.protobuf.Int64Value maxTemporaryNonConstColumns_;
    /**
     * <pre>
     * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_temporary_non_const_columns = 34 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxTemporaryNonConstColumns field is set.
     */
    @java.lang.Override
    public boolean hasMaxTemporaryNonConstColumns() {
      return maxTemporaryNonConstColumns_ != null;
    }
    /**
     * <pre>
     * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_temporary_non_const_columns = 34 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxTemporaryNonConstColumns.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxTemporaryNonConstColumns() {
      return maxTemporaryNonConstColumns_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxTemporaryNonConstColumns_;
    }
    /**
     * <pre>
     * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.
     * Minimal value and default value: **0**, no limitation is set.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_temporary_non_const_columns = 34 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxTemporaryNonConstColumnsOrBuilder() {
      return getMaxTemporaryNonConstColumns();
    }

    public static final int MAX_QUERY_SIZE_FIELD_NUMBER = 35;
    private com.google.protobuf.Int64Value maxQuerySize_;
    /**
     * <pre>
     * Limits the size of the part of a query that can be transferred to RAM for parsing with the SQL parser, in bytes.
     * Value must be greater than **0** (default: **262144**).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_query_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_query_size = 35 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the maxQuerySize field is set.
     */
    @java.lang.Override
    public boolean hasMaxQuerySize() {
      return maxQuerySize_ != null;
    }
    /**
     * <pre>
     * Limits the size of the part of a query that can be transferred to RAM for parsing with the SQL parser, in bytes.
     * Value must be greater than **0** (default: **262144**).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_query_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_query_size = 35 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The maxQuerySize.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxQuerySize() {
      return maxQuerySize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxQuerySize_;
    }
    /**
     * <pre>
     * Limits the size of the part of a query that can be transferred to RAM for parsing with the SQL parser, in bytes.
     * Value must be greater than **0** (default: **262144**).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_query_size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_query_size = 35 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxQuerySizeOrBuilder() {
      return getMaxQuerySize();
    }

    public static final int MAX_AST_DEPTH_FIELD_NUMBER = 36;
    private com.google.protobuf.Int64Value maxAstDepth_;
    /**
     * <pre>
     * Limits the maximum depth of query syntax tree.
     * Executing a big and complex query may result in building a syntax tree of enormous depth.
     * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
     * For example, the **SELECT *** query may result in more complex and deeper syntax tree, compared to the **SELECT ... WHERE ...** query, containing constraints and conditions, in the most cases.
     * A user can be forced to construct more optimized queries, if this setting is used.
     * Value must be greater than **0** (default: **1000**).
     * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-depth).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_ast_depth = 36 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the maxAstDepth field is set.
     */
    @java.lang.Override
    public boolean hasMaxAstDepth() {
      return maxAstDepth_ != null;
    }
    /**
     * <pre>
     * Limits the maximum depth of query syntax tree.
     * Executing a big and complex query may result in building a syntax tree of enormous depth.
     * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
     * For example, the **SELECT *** query may result in more complex and deeper syntax tree, compared to the **SELECT ... WHERE ...** query, containing constraints and conditions, in the most cases.
     * A user can be forced to construct more optimized queries, if this setting is used.
     * Value must be greater than **0** (default: **1000**).
     * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-depth).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_ast_depth = 36 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The maxAstDepth.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxAstDepth() {
      return maxAstDepth_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxAstDepth_;
    }
    /**
     * <pre>
     * Limits the maximum depth of query syntax tree.
     * Executing a big and complex query may result in building a syntax tree of enormous depth.
     * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
     * For example, the **SELECT *** query may result in more complex and deeper syntax tree, compared to the **SELECT ... WHERE ...** query, containing constraints and conditions, in the most cases.
     * A user can be forced to construct more optimized queries, if this setting is used.
     * Value must be greater than **0** (default: **1000**).
     * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-depth).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_ast_depth = 36 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxAstDepthOrBuilder() {
      return getMaxAstDepth();
    }

    public static final int MAX_AST_ELEMENTS_FIELD_NUMBER = 37;
    private com.google.protobuf.Int64Value maxAstElements_;
    /**
     * <pre>
     * Limits the maximum size of query syntax tree in number of nodes.
     * Executing a big and complex query may result in building a syntax tree of enormous size.
     * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
     * Value must be greater than **0** (default: **50000**).
     * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-elements).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_ast_elements = 37 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the maxAstElements field is set.
     */
    @java.lang.Override
    public boolean hasMaxAstElements() {
      return maxAstElements_ != null;
    }
    /**
     * <pre>
     * Limits the maximum size of query syntax tree in number of nodes.
     * Executing a big and complex query may result in building a syntax tree of enormous size.
     * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
     * Value must be greater than **0** (default: **50000**).
     * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-elements).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_ast_elements = 37 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The maxAstElements.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxAstElements() {
      return maxAstElements_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxAstElements_;
    }
    /**
     * <pre>
     * Limits the maximum size of query syntax tree in number of nodes.
     * Executing a big and complex query may result in building a syntax tree of enormous size.
     * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
     * Value must be greater than **0** (default: **50000**).
     * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-elements).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_ast_elements = 37 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxAstElementsOrBuilder() {
      return getMaxAstElements();
    }

    public static final int MAX_EXPANDED_AST_ELEMENTS_FIELD_NUMBER = 38;
    private com.google.protobuf.Int64Value maxExpandedAstElements_;
    /**
     * <pre>
     * Limits the maximum size of query syntax tree in number of nodes after expansion of aliases and the asterisk values.
     * Executing a big and complex query may result in building a syntax tree of enormous size.
     * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
     * Value must be greater than **0** (default: **500000**).
     * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_expanded_ast_elements = 38 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the maxExpandedAstElements field is set.
     */
    @java.lang.Override
    public boolean hasMaxExpandedAstElements() {
      return maxExpandedAstElements_ != null;
    }
    /**
     * <pre>
     * Limits the maximum size of query syntax tree in number of nodes after expansion of aliases and the asterisk values.
     * Executing a big and complex query may result in building a syntax tree of enormous size.
     * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
     * Value must be greater than **0** (default: **500000**).
     * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_expanded_ast_elements = 38 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The maxExpandedAstElements.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxExpandedAstElements() {
      return maxExpandedAstElements_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxExpandedAstElements_;
    }
    /**
     * <pre>
     * Limits the maximum size of query syntax tree in number of nodes after expansion of aliases and the asterisk values.
     * Executing a big and complex query may result in building a syntax tree of enormous size.
     * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
     * Value must be greater than **0** (default: **500000**).
     * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_expanded_ast_elements = 38 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxExpandedAstElementsOrBuilder() {
      return getMaxExpandedAstElements();
    }

    public static final int MIN_EXECUTION_SPEED_FIELD_NUMBER = 84;
    private com.google.protobuf.Int64Value minExecutionSpeed_;
    /**
     * <pre>
     * Minimal execution speed in rows per second.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_execution_speed = 84 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the minExecutionSpeed field is set.
     */
    @java.lang.Override
    public boolean hasMinExecutionSpeed() {
      return minExecutionSpeed_ != null;
    }
    /**
     * <pre>
     * Minimal execution speed in rows per second.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_execution_speed = 84 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The minExecutionSpeed.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMinExecutionSpeed() {
      return minExecutionSpeed_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : minExecutionSpeed_;
    }
    /**
     * <pre>
     * Minimal execution speed in rows per second.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_execution_speed = 84 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMinExecutionSpeedOrBuilder() {
      return getMinExecutionSpeed();
    }

    public static final int MIN_EXECUTION_SPEED_BYTES_FIELD_NUMBER = 85;
    private com.google.protobuf.Int64Value minExecutionSpeedBytes_;
    /**
     * <pre>
     * Minimal execution speed in bytes per second.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_execution_speed_bytes = 85 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the minExecutionSpeedBytes field is set.
     */
    @java.lang.Override
    public boolean hasMinExecutionSpeedBytes() {
      return minExecutionSpeedBytes_ != null;
    }
    /**
     * <pre>
     * Minimal execution speed in bytes per second.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_execution_speed_bytes = 85 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The minExecutionSpeedBytes.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMinExecutionSpeedBytes() {
      return minExecutionSpeedBytes_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : minExecutionSpeedBytes_;
    }
    /**
     * <pre>
     * Minimal execution speed in bytes per second.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_execution_speed_bytes = 85 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMinExecutionSpeedBytesOrBuilder() {
      return getMinExecutionSpeedBytes();
    }

    public static final int COUNT_DISTINCT_IMPLEMENTATION_FIELD_NUMBER = 86;
    private int countDistinctImplementation_;
    /**
     * <pre>
     * Aggregate function to use for implementation of count(DISTINCT ...).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.CountDistinctImplementation count_distinct_implementation = 86;</code>
     * @return The enum numeric value on the wire for countDistinctImplementation.
     */
    @java.lang.Override public int getCountDistinctImplementationValue() {
      return countDistinctImplementation_;
    }
    /**
     * <pre>
     * Aggregate function to use for implementation of count(DISTINCT ...).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.CountDistinctImplementation count_distinct_implementation = 86;</code>
     * @return The countDistinctImplementation.
     */
    @java.lang.Override public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.CountDistinctImplementation getCountDistinctImplementation() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.CountDistinctImplementation result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.CountDistinctImplementation.valueOf(countDistinctImplementation_);
      return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.CountDistinctImplementation.UNRECOGNIZED : result;
    }

    public static final int INPUT_FORMAT_VALUES_INTERPRET_EXPRESSIONS_FIELD_NUMBER = 61;
    private com.google.protobuf.BoolValue inputFormatValuesInterpretExpressions_;
    /**
     * <pre>
     * Enables or disables SQL parser if the fast stream parser cannot parse the data.
     * Enable this setting, if the data that you want to insert into a table contains SQL expressions.
     * For example, the stream parser is unable to parse a value that contains **now()** expression; therefore an **INSERT** query for this value will fail and no data will be inserted into a table.
     * With enabled SQL parser, this expression is parsed correctly: the **now()** expression will be parsed as SQL function, interpreted, and the current date and time will be inserted into the table as a result.
     * This setting has effect only if you use [Values](https://clickhouse.com/docs/en/interfaces/formats/#data-format-values) format when inserting data.
     * Default value: **true** (SQL parser is enabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-input_format_values_interpret_expressions).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_values_interpret_expressions = 61;</code>
     * @return Whether the inputFormatValuesInterpretExpressions field is set.
     */
    @java.lang.Override
    public boolean hasInputFormatValuesInterpretExpressions() {
      return inputFormatValuesInterpretExpressions_ != null;
    }
    /**
     * <pre>
     * Enables or disables SQL parser if the fast stream parser cannot parse the data.
     * Enable this setting, if the data that you want to insert into a table contains SQL expressions.
     * For example, the stream parser is unable to parse a value that contains **now()** expression; therefore an **INSERT** query for this value will fail and no data will be inserted into a table.
     * With enabled SQL parser, this expression is parsed correctly: the **now()** expression will be parsed as SQL function, interpreted, and the current date and time will be inserted into the table as a result.
     * This setting has effect only if you use [Values](https://clickhouse.com/docs/en/interfaces/formats/#data-format-values) format when inserting data.
     * Default value: **true** (SQL parser is enabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-input_format_values_interpret_expressions).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_values_interpret_expressions = 61;</code>
     * @return The inputFormatValuesInterpretExpressions.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getInputFormatValuesInterpretExpressions() {
      return inputFormatValuesInterpretExpressions_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : inputFormatValuesInterpretExpressions_;
    }
    /**
     * <pre>
     * Enables or disables SQL parser if the fast stream parser cannot parse the data.
     * Enable this setting, if the data that you want to insert into a table contains SQL expressions.
     * For example, the stream parser is unable to parse a value that contains **now()** expression; therefore an **INSERT** query for this value will fail and no data will be inserted into a table.
     * With enabled SQL parser, this expression is parsed correctly: the **now()** expression will be parsed as SQL function, interpreted, and the current date and time will be inserted into the table as a result.
     * This setting has effect only if you use [Values](https://clickhouse.com/docs/en/interfaces/formats/#data-format-values) format when inserting data.
     * Default value: **true** (SQL parser is enabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-input_format_values_interpret_expressions).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_values_interpret_expressions = 61;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getInputFormatValuesInterpretExpressionsOrBuilder() {
      return getInputFormatValuesInterpretExpressions();
    }

    public static final int INPUT_FORMAT_DEFAULTS_FOR_OMITTED_FIELDS_FIELD_NUMBER = 62;
    private com.google.protobuf.BoolValue inputFormatDefaultsForOmittedFields_;
    /**
     * <pre>
     * Enables or disables replacing omitted input values with default values of the respective columns when performing **INSERT** queries.
     * Default value: **true** (replacing is enabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_defaults_for_omitted_fields = 62;</code>
     * @return Whether the inputFormatDefaultsForOmittedFields field is set.
     */
    @java.lang.Override
    public boolean hasInputFormatDefaultsForOmittedFields() {
      return inputFormatDefaultsForOmittedFields_ != null;
    }
    /**
     * <pre>
     * Enables or disables replacing omitted input values with default values of the respective columns when performing **INSERT** queries.
     * Default value: **true** (replacing is enabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_defaults_for_omitted_fields = 62;</code>
     * @return The inputFormatDefaultsForOmittedFields.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getInputFormatDefaultsForOmittedFields() {
      return inputFormatDefaultsForOmittedFields_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : inputFormatDefaultsForOmittedFields_;
    }
    /**
     * <pre>
     * Enables or disables replacing omitted input values with default values of the respective columns when performing **INSERT** queries.
     * Default value: **true** (replacing is enabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_defaults_for_omitted_fields = 62;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getInputFormatDefaultsForOmittedFieldsOrBuilder() {
      return getInputFormatDefaultsForOmittedFields();
    }

    public static final int INPUT_FORMAT_NULL_AS_DEFAULT_FIELD_NUMBER = 106;
    private com.google.protobuf.BoolValue inputFormatNullAsDefault_;
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_null_as_default).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_null_as_default = 106;</code>
     * @return Whether the inputFormatNullAsDefault field is set.
     */
    @java.lang.Override
    public boolean hasInputFormatNullAsDefault() {
      return inputFormatNullAsDefault_ != null;
    }
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_null_as_default).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_null_as_default = 106;</code>
     * @return The inputFormatNullAsDefault.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getInputFormatNullAsDefault() {
      return inputFormatNullAsDefault_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : inputFormatNullAsDefault_;
    }
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_null_as_default).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_null_as_default = 106;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getInputFormatNullAsDefaultOrBuilder() {
      return getInputFormatNullAsDefault();
    }

    public static final int DATE_TIME_INPUT_FORMAT_FIELD_NUMBER = 107;
    private int dateTimeInputFormat_;
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#date_time_input_format).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.DateTimeInputFormat date_time_input_format = 107;</code>
     * @return The enum numeric value on the wire for dateTimeInputFormat.
     */
    @java.lang.Override public int getDateTimeInputFormatValue() {
      return dateTimeInputFormat_;
    }
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#date_time_input_format).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.DateTimeInputFormat date_time_input_format = 107;</code>
     * @return The dateTimeInputFormat.
     */
    @java.lang.Override public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DateTimeInputFormat getDateTimeInputFormat() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DateTimeInputFormat result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DateTimeInputFormat.valueOf(dateTimeInputFormat_);
      return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DateTimeInputFormat.UNRECOGNIZED : result;
    }

    public static final int INPUT_FORMAT_WITH_NAMES_USE_HEADER_FIELD_NUMBER = 108;
    private com.google.protobuf.BoolValue inputFormatWithNamesUseHeader_;
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_with_names_use_header).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_with_names_use_header = 108;</code>
     * @return Whether the inputFormatWithNamesUseHeader field is set.
     */
    @java.lang.Override
    public boolean hasInputFormatWithNamesUseHeader() {
      return inputFormatWithNamesUseHeader_ != null;
    }
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_with_names_use_header).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_with_names_use_header = 108;</code>
     * @return The inputFormatWithNamesUseHeader.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getInputFormatWithNamesUseHeader() {
      return inputFormatWithNamesUseHeader_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : inputFormatWithNamesUseHeader_;
    }
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_with_names_use_header).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_with_names_use_header = 108;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getInputFormatWithNamesUseHeaderOrBuilder() {
      return getInputFormatWithNamesUseHeader();
    }

    public static final int OUTPUT_FORMAT_JSON_QUOTE_64BIT_INTEGERS_FIELD_NUMBER = 63;
    private com.google.protobuf.BoolValue outputFormatJsonQuote64BitIntegers_;
    /**
     * <pre>
     * Enables quoting of 64-bit integers in JSON output format.
     * If this setting is enabled, then 64-bit integers (**UInt64** and **Int64**) will be quoted when written to JSON output in order to maintain compatibility with the most of the JavaScript engines.
     * Otherwise, such integers will not be quoted.
     * Default value: **false** (quoting 64-bit integers is disabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue output_format_json_quote_64bit_integers = 63 [json_name = "outputFormatJsonQuote_64bitIntegers"];</code>
     * @return Whether the outputFormatJsonQuote64bitIntegers field is set.
     */
    @java.lang.Override
    public boolean hasOutputFormatJsonQuote64BitIntegers() {
      return outputFormatJsonQuote64BitIntegers_ != null;
    }
    /**
     * <pre>
     * Enables quoting of 64-bit integers in JSON output format.
     * If this setting is enabled, then 64-bit integers (**UInt64** and **Int64**) will be quoted when written to JSON output in order to maintain compatibility with the most of the JavaScript engines.
     * Otherwise, such integers will not be quoted.
     * Default value: **false** (quoting 64-bit integers is disabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue output_format_json_quote_64bit_integers = 63 [json_name = "outputFormatJsonQuote_64bitIntegers"];</code>
     * @return The outputFormatJsonQuote64bitIntegers.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getOutputFormatJsonQuote64BitIntegers() {
      return outputFormatJsonQuote64BitIntegers_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : outputFormatJsonQuote64BitIntegers_;
    }
    /**
     * <pre>
     * Enables quoting of 64-bit integers in JSON output format.
     * If this setting is enabled, then 64-bit integers (**UInt64** and **Int64**) will be quoted when written to JSON output in order to maintain compatibility with the most of the JavaScript engines.
     * Otherwise, such integers will not be quoted.
     * Default value: **false** (quoting 64-bit integers is disabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue output_format_json_quote_64bit_integers = 63 [json_name = "outputFormatJsonQuote_64bitIntegers"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getOutputFormatJsonQuote64BitIntegersOrBuilder() {
      return getOutputFormatJsonQuote64BitIntegers();
    }

    public static final int OUTPUT_FORMAT_JSON_QUOTE_DENORMALS_FIELD_NUMBER = 64;
    private com.google.protobuf.BoolValue outputFormatJsonQuoteDenormals_;
    /**
     * <pre>
     * Enables special floating-point values (**+nan**, **-nan**, **+inf** and **-inf**) in JSON output format.
     * Default value: **false** (special values do not present in output).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue output_format_json_quote_denormals = 64;</code>
     * @return Whether the outputFormatJsonQuoteDenormals field is set.
     */
    @java.lang.Override
    public boolean hasOutputFormatJsonQuoteDenormals() {
      return outputFormatJsonQuoteDenormals_ != null;
    }
    /**
     * <pre>
     * Enables special floating-point values (**+nan**, **-nan**, **+inf** and **-inf**) in JSON output format.
     * Default value: **false** (special values do not present in output).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue output_format_json_quote_denormals = 64;</code>
     * @return The outputFormatJsonQuoteDenormals.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getOutputFormatJsonQuoteDenormals() {
      return outputFormatJsonQuoteDenormals_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : outputFormatJsonQuoteDenormals_;
    }
    /**
     * <pre>
     * Enables special floating-point values (**+nan**, **-nan**, **+inf** and **-inf**) in JSON output format.
     * Default value: **false** (special values do not present in output).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue output_format_json_quote_denormals = 64;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getOutputFormatJsonQuoteDenormalsOrBuilder() {
      return getOutputFormatJsonQuoteDenormals();
    }

    public static final int DATE_TIME_OUTPUT_FORMAT_FIELD_NUMBER = 109;
    private int dateTimeOutputFormat_;
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#date_time_output_format).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.DateTimeOutputFormat date_time_output_format = 109;</code>
     * @return The enum numeric value on the wire for dateTimeOutputFormat.
     */
    @java.lang.Override public int getDateTimeOutputFormatValue() {
      return dateTimeOutputFormat_;
    }
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#date_time_output_format).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.DateTimeOutputFormat date_time_output_format = 109;</code>
     * @return The dateTimeOutputFormat.
     */
    @java.lang.Override public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DateTimeOutputFormat getDateTimeOutputFormat() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DateTimeOutputFormat result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DateTimeOutputFormat.valueOf(dateTimeOutputFormat_);
      return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DateTimeOutputFormat.UNRECOGNIZED : result;
    }

    public static final int LOW_CARDINALITY_ALLOW_IN_NATIVE_FORMAT_FIELD_NUMBER = 78;
    private com.google.protobuf.BoolValue lowCardinalityAllowInNativeFormat_;
    /**
     * <pre>
     * Determines whether to use LowCardinality type in Native format.
     * * **true** (default)-yes, use.
     * * **false**-convert LowCardinality columns to regular columns when doing **SELECT**, and convert regular columns to LowCardinality when doing **INSERT**.
     * LowCardinality columns (aka sparse columns) store data in more effective way, compared to regular columns, by using hash tables.
     * If data to insert suits this storage format, ClickHouse will place them into LowCardinality column.
     * If you use a third-party ClickHouse client that can't work with LowCardinality columns, then this client will not be able to correctly interpret the result of the query that asks for data stored in LowCardinality column.
     * Disable this setting to convert LowCardinality column to regular column when creating the result, so such clients will be able to process the result.
     * Official ClickHouse client works with LowCardinality columns out-of-the-box.
     * Default value: **true** (LowCardinality columns are used in Native format).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue low_cardinality_allow_in_native_format = 78;</code>
     * @return Whether the lowCardinalityAllowInNativeFormat field is set.
     */
    @java.lang.Override
    public boolean hasLowCardinalityAllowInNativeFormat() {
      return lowCardinalityAllowInNativeFormat_ != null;
    }
    /**
     * <pre>
     * Determines whether to use LowCardinality type in Native format.
     * * **true** (default)-yes, use.
     * * **false**-convert LowCardinality columns to regular columns when doing **SELECT**, and convert regular columns to LowCardinality when doing **INSERT**.
     * LowCardinality columns (aka sparse columns) store data in more effective way, compared to regular columns, by using hash tables.
     * If data to insert suits this storage format, ClickHouse will place them into LowCardinality column.
     * If you use a third-party ClickHouse client that can't work with LowCardinality columns, then this client will not be able to correctly interpret the result of the query that asks for data stored in LowCardinality column.
     * Disable this setting to convert LowCardinality column to regular column when creating the result, so such clients will be able to process the result.
     * Official ClickHouse client works with LowCardinality columns out-of-the-box.
     * Default value: **true** (LowCardinality columns are used in Native format).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue low_cardinality_allow_in_native_format = 78;</code>
     * @return The lowCardinalityAllowInNativeFormat.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getLowCardinalityAllowInNativeFormat() {
      return lowCardinalityAllowInNativeFormat_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : lowCardinalityAllowInNativeFormat_;
    }
    /**
     * <pre>
     * Determines whether to use LowCardinality type in Native format.
     * * **true** (default)-yes, use.
     * * **false**-convert LowCardinality columns to regular columns when doing **SELECT**, and convert regular columns to LowCardinality when doing **INSERT**.
     * LowCardinality columns (aka sparse columns) store data in more effective way, compared to regular columns, by using hash tables.
     * If data to insert suits this storage format, ClickHouse will place them into LowCardinality column.
     * If you use a third-party ClickHouse client that can't work with LowCardinality columns, then this client will not be able to correctly interpret the result of the query that asks for data stored in LowCardinality column.
     * Disable this setting to convert LowCardinality column to regular column when creating the result, so such clients will be able to process the result.
     * Official ClickHouse client works with LowCardinality columns out-of-the-box.
     * Default value: **true** (LowCardinality columns are used in Native format).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue low_cardinality_allow_in_native_format = 78;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getLowCardinalityAllowInNativeFormatOrBuilder() {
      return getLowCardinalityAllowInNativeFormat();
    }

    public static final int ALLOW_SUSPICIOUS_LOW_CARDINALITY_TYPES_FIELD_NUMBER = 110;
    private com.google.protobuf.BoolValue allowSuspiciousLowCardinalityTypes_;
    /**
     * <pre>
     * Allows specifying **LowCardinality** modifier for types of small fixed size (8 or less) in CREATE TABLE statements. Enabling this may increase merge times and memory consumption.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#allow_suspicious_low_cardinality_types).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue allow_suspicious_low_cardinality_types = 110;</code>
     * @return Whether the allowSuspiciousLowCardinalityTypes field is set.
     */
    @java.lang.Override
    public boolean hasAllowSuspiciousLowCardinalityTypes() {
      return allowSuspiciousLowCardinalityTypes_ != null;
    }
    /**
     * <pre>
     * Allows specifying **LowCardinality** modifier for types of small fixed size (8 or less) in CREATE TABLE statements. Enabling this may increase merge times and memory consumption.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#allow_suspicious_low_cardinality_types).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue allow_suspicious_low_cardinality_types = 110;</code>
     * @return The allowSuspiciousLowCardinalityTypes.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getAllowSuspiciousLowCardinalityTypes() {
      return allowSuspiciousLowCardinalityTypes_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : allowSuspiciousLowCardinalityTypes_;
    }
    /**
     * <pre>
     * Allows specifying **LowCardinality** modifier for types of small fixed size (8 or less) in CREATE TABLE statements. Enabling this may increase merge times and memory consumption.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#allow_suspicious_low_cardinality_types).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue allow_suspicious_low_cardinality_types = 110;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getAllowSuspiciousLowCardinalityTypesOrBuilder() {
      return getAllowSuspiciousLowCardinalityTypes();
    }

    public static final int EMPTY_RESULT_FOR_AGGREGATION_BY_EMPTY_SET_FIELD_NUMBER = 79;
    private com.google.protobuf.BoolValue emptyResultForAggregationByEmptySet_;
    /**
     * <pre>
     * Enables returning of empty result when aggregating without keys (with **GROUP BY** operation absent) on empty set (e.g., **SELECT count(*) FROM table WHERE 0**).
     * * **true**-ClickHouse will return an empty result for such queries.
     * * **false** (default)-ClickHouse will return a single-line result consisting of **NULL** values for aggregation functions, in accordance with SQL standard.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue empty_result_for_aggregation_by_empty_set = 79;</code>
     * @return Whether the emptyResultForAggregationByEmptySet field is set.
     */
    @java.lang.Override
    public boolean hasEmptyResultForAggregationByEmptySet() {
      return emptyResultForAggregationByEmptySet_ != null;
    }
    /**
     * <pre>
     * Enables returning of empty result when aggregating without keys (with **GROUP BY** operation absent) on empty set (e.g., **SELECT count(*) FROM table WHERE 0**).
     * * **true**-ClickHouse will return an empty result for such queries.
     * * **false** (default)-ClickHouse will return a single-line result consisting of **NULL** values for aggregation functions, in accordance with SQL standard.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue empty_result_for_aggregation_by_empty_set = 79;</code>
     * @return The emptyResultForAggregationByEmptySet.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getEmptyResultForAggregationByEmptySet() {
      return emptyResultForAggregationByEmptySet_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : emptyResultForAggregationByEmptySet_;
    }
    /**
     * <pre>
     * Enables returning of empty result when aggregating without keys (with **GROUP BY** operation absent) on empty set (e.g., **SELECT count(*) FROM table WHERE 0**).
     * * **true**-ClickHouse will return an empty result for such queries.
     * * **false** (default)-ClickHouse will return a single-line result consisting of **NULL** values for aggregation functions, in accordance with SQL standard.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue empty_result_for_aggregation_by_empty_set = 79;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getEmptyResultForAggregationByEmptySetOrBuilder() {
      return getEmptyResultForAggregationByEmptySet();
    }

    public static final int HTTP_CONNECTION_TIMEOUT_FIELD_NUMBER = 65;
    private com.google.protobuf.Int64Value httpConnectionTimeout_;
    /**
     * <pre>
     * HTTP connection timeout, in milliseconds.
     * Value must be greater than **0** (default: **1000**, 1 second).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value http_connection_timeout = 65;</code>
     * @return Whether the httpConnectionTimeout field is set.
     */
    @java.lang.Override
    public boolean hasHttpConnectionTimeout() {
      return httpConnectionTimeout_ != null;
    }
    /**
     * <pre>
     * HTTP connection timeout, in milliseconds.
     * Value must be greater than **0** (default: **1000**, 1 second).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value http_connection_timeout = 65;</code>
     * @return The httpConnectionTimeout.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getHttpConnectionTimeout() {
      return httpConnectionTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : httpConnectionTimeout_;
    }
    /**
     * <pre>
     * HTTP connection timeout, in milliseconds.
     * Value must be greater than **0** (default: **1000**, 1 second).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value http_connection_timeout = 65;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getHttpConnectionTimeoutOrBuilder() {
      return getHttpConnectionTimeout();
    }

    public static final int HTTP_RECEIVE_TIMEOUT_FIELD_NUMBER = 66;
    private com.google.protobuf.Int64Value httpReceiveTimeout_;
    /**
     * <pre>
     * HTTP receive timeout, in milliseconds.
     * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value http_receive_timeout = 66;</code>
     * @return Whether the httpReceiveTimeout field is set.
     */
    @java.lang.Override
    public boolean hasHttpReceiveTimeout() {
      return httpReceiveTimeout_ != null;
    }
    /**
     * <pre>
     * HTTP receive timeout, in milliseconds.
     * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value http_receive_timeout = 66;</code>
     * @return The httpReceiveTimeout.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getHttpReceiveTimeout() {
      return httpReceiveTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : httpReceiveTimeout_;
    }
    /**
     * <pre>
     * HTTP receive timeout, in milliseconds.
     * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value http_receive_timeout = 66;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getHttpReceiveTimeoutOrBuilder() {
      return getHttpReceiveTimeout();
    }

    public static final int HTTP_SEND_TIMEOUT_FIELD_NUMBER = 67;
    private com.google.protobuf.Int64Value httpSendTimeout_;
    /**
     * <pre>
     * HTTP send timeout, in milliseconds.
     * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value http_send_timeout = 67;</code>
     * @return Whether the httpSendTimeout field is set.
     */
    @java.lang.Override
    public boolean hasHttpSendTimeout() {
      return httpSendTimeout_ != null;
    }
    /**
     * <pre>
     * HTTP send timeout, in milliseconds.
     * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value http_send_timeout = 67;</code>
     * @return The httpSendTimeout.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getHttpSendTimeout() {
      return httpSendTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : httpSendTimeout_;
    }
    /**
     * <pre>
     * HTTP send timeout, in milliseconds.
     * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value http_send_timeout = 67;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getHttpSendTimeoutOrBuilder() {
      return getHttpSendTimeout();
    }

    public static final int ENABLE_HTTP_COMPRESSION_FIELD_NUMBER = 68;
    private com.google.protobuf.BoolValue enableHttpCompression_;
    /**
     * <pre>
     * Enables or disables data compression in HTTP responses.
     * By default, ClickHouse stores data compressed. When executing a query, its result is uncompressed.
     * Use this setting to command ClickHouse to compress the result when sending it via HTTP.
     * Enable this setting and add the **Accept-Encoding: &lt;compression method&gt;** HTTP header in a HTTP request to force compression of HTTP response from ClickHouse.
     * ClickHouse support the following compression methods: **gzip**, **br** and **deflate**.
     * Default value: **false** (compression is disabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/interfaces/http/).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue enable_http_compression = 68;</code>
     * @return Whether the enableHttpCompression field is set.
     */
    @java.lang.Override
    public boolean hasEnableHttpCompression() {
      return enableHttpCompression_ != null;
    }
    /**
     * <pre>
     * Enables or disables data compression in HTTP responses.
     * By default, ClickHouse stores data compressed. When executing a query, its result is uncompressed.
     * Use this setting to command ClickHouse to compress the result when sending it via HTTP.
     * Enable this setting and add the **Accept-Encoding: &lt;compression method&gt;** HTTP header in a HTTP request to force compression of HTTP response from ClickHouse.
     * ClickHouse support the following compression methods: **gzip**, **br** and **deflate**.
     * Default value: **false** (compression is disabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/interfaces/http/).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue enable_http_compression = 68;</code>
     * @return The enableHttpCompression.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getEnableHttpCompression() {
      return enableHttpCompression_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : enableHttpCompression_;
    }
    /**
     * <pre>
     * Enables or disables data compression in HTTP responses.
     * By default, ClickHouse stores data compressed. When executing a query, its result is uncompressed.
     * Use this setting to command ClickHouse to compress the result when sending it via HTTP.
     * Enable this setting and add the **Accept-Encoding: &lt;compression method&gt;** HTTP header in a HTTP request to force compression of HTTP response from ClickHouse.
     * ClickHouse support the following compression methods: **gzip**, **br** and **deflate**.
     * Default value: **false** (compression is disabled).
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/interfaces/http/).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue enable_http_compression = 68;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getEnableHttpCompressionOrBuilder() {
      return getEnableHttpCompression();
    }

    public static final int SEND_PROGRESS_IN_HTTP_HEADERS_FIELD_NUMBER = 69;
    private com.google.protobuf.BoolValue sendProgressInHttpHeaders_;
    /**
     * <pre>
     * Enables progress notifications using **X-ClickHouse-Progress** HTTP header.
     * Default value: **false** (notifications disabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue send_progress_in_http_headers = 69;</code>
     * @return Whether the sendProgressInHttpHeaders field is set.
     */
    @java.lang.Override
    public boolean hasSendProgressInHttpHeaders() {
      return sendProgressInHttpHeaders_ != null;
    }
    /**
     * <pre>
     * Enables progress notifications using **X-ClickHouse-Progress** HTTP header.
     * Default value: **false** (notifications disabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue send_progress_in_http_headers = 69;</code>
     * @return The sendProgressInHttpHeaders.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getSendProgressInHttpHeaders() {
      return sendProgressInHttpHeaders_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : sendProgressInHttpHeaders_;
    }
    /**
     * <pre>
     * Enables progress notifications using **X-ClickHouse-Progress** HTTP header.
     * Default value: **false** (notifications disabled).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue send_progress_in_http_headers = 69;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getSendProgressInHttpHeadersOrBuilder() {
      return getSendProgressInHttpHeaders();
    }

    public static final int HTTP_HEADERS_PROGRESS_INTERVAL_FIELD_NUMBER = 70;
    private com.google.protobuf.Int64Value httpHeadersProgressInterval_;
    /**
     * <pre>
     * Minimum interval between progress notifications with **X-ClickHouse-Progress** HTTP header, in milliseconds.
     * Value must be greater than **0** (default: **100**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value http_headers_progress_interval = 70;</code>
     * @return Whether the httpHeadersProgressInterval field is set.
     */
    @java.lang.Override
    public boolean hasHttpHeadersProgressInterval() {
      return httpHeadersProgressInterval_ != null;
    }
    /**
     * <pre>
     * Minimum interval between progress notifications with **X-ClickHouse-Progress** HTTP header, in milliseconds.
     * Value must be greater than **0** (default: **100**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value http_headers_progress_interval = 70;</code>
     * @return The httpHeadersProgressInterval.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getHttpHeadersProgressInterval() {
      return httpHeadersProgressInterval_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : httpHeadersProgressInterval_;
    }
    /**
     * <pre>
     * Minimum interval between progress notifications with **X-ClickHouse-Progress** HTTP header, in milliseconds.
     * Value must be greater than **0** (default: **100**).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value http_headers_progress_interval = 70;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getHttpHeadersProgressIntervalOrBuilder() {
      return getHttpHeadersProgressInterval();
    }

    public static final int ADD_HTTP_CORS_HEADER_FIELD_NUMBER = 71;
    private com.google.protobuf.BoolValue addHttpCorsHeader_;
    /**
     * <pre>
     * Adds CORS header in HTTP responses.
     * Default value: **false** (header is not added).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue add_http_cors_header = 71;</code>
     * @return Whether the addHttpCorsHeader field is set.
     */
    @java.lang.Override
    public boolean hasAddHttpCorsHeader() {
      return addHttpCorsHeader_ != null;
    }
    /**
     * <pre>
     * Adds CORS header in HTTP responses.
     * Default value: **false** (header is not added).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue add_http_cors_header = 71;</code>
     * @return The addHttpCorsHeader.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getAddHttpCorsHeader() {
      return addHttpCorsHeader_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : addHttpCorsHeader_;
    }
    /**
     * <pre>
     * Adds CORS header in HTTP responses.
     * Default value: **false** (header is not added).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue add_http_cors_header = 71;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getAddHttpCorsHeaderOrBuilder() {
      return getAddHttpCorsHeader();
    }

    public static final int CANCEL_HTTP_READONLY_QUERIES_ON_CLIENT_CLOSE_FIELD_NUMBER = 111;
    private com.google.protobuf.BoolValue cancelHttpReadonlyQueriesOnClientClose_;
    /**
     * <pre>
     * Cancels HTTP read-only queries (e.g. SELECT) when a client closes the connection without waiting for the response.
     * Default value: **false**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#cancel-http-readonly-queries-on-client-close).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue cancel_http_readonly_queries_on_client_close = 111;</code>
     * @return Whether the cancelHttpReadonlyQueriesOnClientClose field is set.
     */
    @java.lang.Override
    public boolean hasCancelHttpReadonlyQueriesOnClientClose() {
      return cancelHttpReadonlyQueriesOnClientClose_ != null;
    }
    /**
     * <pre>
     * Cancels HTTP read-only queries (e.g. SELECT) when a client closes the connection without waiting for the response.
     * Default value: **false**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#cancel-http-readonly-queries-on-client-close).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue cancel_http_readonly_queries_on_client_close = 111;</code>
     * @return The cancelHttpReadonlyQueriesOnClientClose.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getCancelHttpReadonlyQueriesOnClientClose() {
      return cancelHttpReadonlyQueriesOnClientClose_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : cancelHttpReadonlyQueriesOnClientClose_;
    }
    /**
     * <pre>
     * Cancels HTTP read-only queries (e.g. SELECT) when a client closes the connection without waiting for the response.
     * Default value: **false**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#cancel-http-readonly-queries-on-client-close).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue cancel_http_readonly_queries_on_client_close = 111;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getCancelHttpReadonlyQueriesOnClientCloseOrBuilder() {
      return getCancelHttpReadonlyQueriesOnClientClose();
    }

    public static final int MAX_HTTP_GET_REDIRECTS_FIELD_NUMBER = 112;
    private com.google.protobuf.Int64Value maxHttpGetRedirects_;
    /**
     * <pre>
     * Limits the maximum number of HTTP GET redirect hops for [URL-engine](https://clickhouse.com/docs/en/engines/table-engines/special/url) tables.
     * If the parameter is set to **0** (default), no hops is allowed.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_http_get_redirects).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_http_get_redirects = 112;</code>
     * @return Whether the maxHttpGetRedirects field is set.
     */
    @java.lang.Override
    public boolean hasMaxHttpGetRedirects() {
      return maxHttpGetRedirects_ != null;
    }
    /**
     * <pre>
     * Limits the maximum number of HTTP GET redirect hops for [URL-engine](https://clickhouse.com/docs/en/engines/table-engines/special/url) tables.
     * If the parameter is set to **0** (default), no hops is allowed.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_http_get_redirects).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_http_get_redirects = 112;</code>
     * @return The maxHttpGetRedirects.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxHttpGetRedirects() {
      return maxHttpGetRedirects_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxHttpGetRedirects_;
    }
    /**
     * <pre>
     * Limits the maximum number of HTTP GET redirect hops for [URL-engine](https://clickhouse.com/docs/en/engines/table-engines/special/url) tables.
     * If the parameter is set to **0** (default), no hops is allowed.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_http_get_redirects).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_http_get_redirects = 112;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxHttpGetRedirectsOrBuilder() {
      return getMaxHttpGetRedirects();
    }

    public static final int JOINED_SUBQUERY_REQUIRES_ALIAS_FIELD_NUMBER = 93;
    private com.google.protobuf.BoolValue joinedSubqueryRequiresAlias_;
    /**
     * <code>.google.protobuf.BoolValue joined_subquery_requires_alias = 93;</code>
     * @return Whether the joinedSubqueryRequiresAlias field is set.
     */
    @java.lang.Override
    public boolean hasJoinedSubqueryRequiresAlias() {
      return joinedSubqueryRequiresAlias_ != null;
    }
    /**
     * <code>.google.protobuf.BoolValue joined_subquery_requires_alias = 93;</code>
     * @return The joinedSubqueryRequiresAlias.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getJoinedSubqueryRequiresAlias() {
      return joinedSubqueryRequiresAlias_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : joinedSubqueryRequiresAlias_;
    }
    /**
     * <code>.google.protobuf.BoolValue joined_subquery_requires_alias = 93;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getJoinedSubqueryRequiresAliasOrBuilder() {
      return getJoinedSubqueryRequiresAlias();
    }

    public static final int JOIN_USE_NULLS_FIELD_NUMBER = 94;
    private com.google.protobuf.BoolValue joinUseNulls_;
    /**
     * <code>.google.protobuf.BoolValue join_use_nulls = 94;</code>
     * @return Whether the joinUseNulls field is set.
     */
    @java.lang.Override
    public boolean hasJoinUseNulls() {
      return joinUseNulls_ != null;
    }
    /**
     * <code>.google.protobuf.BoolValue join_use_nulls = 94;</code>
     * @return The joinUseNulls.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getJoinUseNulls() {
      return joinUseNulls_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : joinUseNulls_;
    }
    /**
     * <code>.google.protobuf.BoolValue join_use_nulls = 94;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getJoinUseNullsOrBuilder() {
      return getJoinUseNulls();
    }

    public static final int TRANSFORM_NULL_IN_FIELD_NUMBER = 95;
    private com.google.protobuf.BoolValue transformNullIn_;
    /**
     * <code>.google.protobuf.BoolValue transform_null_in = 95;</code>
     * @return Whether the transformNullIn field is set.
     */
    @java.lang.Override
    public boolean hasTransformNullIn() {
      return transformNullIn_ != null;
    }
    /**
     * <code>.google.protobuf.BoolValue transform_null_in = 95;</code>
     * @return The transformNullIn.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getTransformNullIn() {
      return transformNullIn_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : transformNullIn_;
    }
    /**
     * <code>.google.protobuf.BoolValue transform_null_in = 95;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getTransformNullInOrBuilder() {
      return getTransformNullIn();
    }

    public static final int QUOTA_MODE_FIELD_NUMBER = 80;
    private int quotaMode_;
    /**
     * <pre>
     * Quota accounting mode. Possible values: QUOTA_MODE_DEFAULT, QUOTA_MODE_KEYED and QUOTA_MODE_KEYED_BY_IP.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.QuotaMode quota_mode = 80;</code>
     * @return The enum numeric value on the wire for quotaMode.
     */
    @java.lang.Override public int getQuotaModeValue() {
      return quotaMode_;
    }
    /**
     * <pre>
     * Quota accounting mode. Possible values: QUOTA_MODE_DEFAULT, QUOTA_MODE_KEYED and QUOTA_MODE_KEYED_BY_IP.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.QuotaMode quota_mode = 80;</code>
     * @return The quotaMode.
     */
    @java.lang.Override public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.QuotaMode getQuotaMode() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.QuotaMode result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.QuotaMode.valueOf(quotaMode_);
      return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.QuotaMode.UNRECOGNIZED : result;
    }

    public static final int FLATTEN_NESTED_FIELD_NUMBER = 113;
    private com.google.protobuf.BoolValue flattenNested_;
    /**
     * <pre>
     * Sets the data format of a [nested](https://clickhouse.com/docs/en/sql-reference/data-types/nested-data-structures/nested) columns.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#flatten-nested).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue flatten_nested = 113;</code>
     * @return Whether the flattenNested field is set.
     */
    @java.lang.Override
    public boolean hasFlattenNested() {
      return flattenNested_ != null;
    }
    /**
     * <pre>
     * Sets the data format of a [nested](https://clickhouse.com/docs/en/sql-reference/data-types/nested-data-structures/nested) columns.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#flatten-nested).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue flatten_nested = 113;</code>
     * @return The flattenNested.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getFlattenNested() {
      return flattenNested_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : flattenNested_;
    }
    /**
     * <pre>
     * Sets the data format of a [nested](https://clickhouse.com/docs/en/sql-reference/data-types/nested-data-structures/nested) columns.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#flatten-nested).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue flatten_nested = 113;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getFlattenNestedOrBuilder() {
      return getFlattenNested();
    }

    public static final int FORMAT_REGEXP_FIELD_NUMBER = 114;
    private volatile java.lang.Object formatRegexp_;
    /**
     * <pre>
     * Regular expression (for Regexp format)
     * </pre>
     *
     * <code>string format_regexp = 114;</code>
     * @return The formatRegexp.
     */
    @java.lang.Override
    public java.lang.String getFormatRegexp() {
      java.lang.Object ref = formatRegexp_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        formatRegexp_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Regular expression (for Regexp format)
     * </pre>
     *
     * <code>string format_regexp = 114;</code>
     * @return The bytes for formatRegexp.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFormatRegexpBytes() {
      java.lang.Object ref = formatRegexp_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        formatRegexp_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FORMAT_REGEXP_ESCAPING_RULE_FIELD_NUMBER = 115;
    private int formatRegexpEscapingRule_;
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#format_regexp_escaping_rule).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.FormatRegexpEscapingRule format_regexp_escaping_rule = 115;</code>
     * @return The enum numeric value on the wire for formatRegexpEscapingRule.
     */
    @java.lang.Override public int getFormatRegexpEscapingRuleValue() {
      return formatRegexpEscapingRule_;
    }
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#format_regexp_escaping_rule).
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.FormatRegexpEscapingRule format_regexp_escaping_rule = 115;</code>
     * @return The formatRegexpEscapingRule.
     */
    @java.lang.Override public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.FormatRegexpEscapingRule getFormatRegexpEscapingRule() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.FormatRegexpEscapingRule result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.FormatRegexpEscapingRule.valueOf(formatRegexpEscapingRule_);
      return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.FormatRegexpEscapingRule.UNRECOGNIZED : result;
    }

    public static final int FORMAT_REGEXP_SKIP_UNMATCHED_FIELD_NUMBER = 116;
    private com.google.protobuf.BoolValue formatRegexpSkipUnmatched_;
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#format_regexp_skip_unmatched).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue format_regexp_skip_unmatched = 116;</code>
     * @return Whether the formatRegexpSkipUnmatched field is set.
     */
    @java.lang.Override
    public boolean hasFormatRegexpSkipUnmatched() {
      return formatRegexpSkipUnmatched_ != null;
    }
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#format_regexp_skip_unmatched).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue format_regexp_skip_unmatched = 116;</code>
     * @return The formatRegexpSkipUnmatched.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getFormatRegexpSkipUnmatched() {
      return formatRegexpSkipUnmatched_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : formatRegexpSkipUnmatched_;
    }
    /**
     * <pre>
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#format_regexp_skip_unmatched).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue format_regexp_skip_unmatched = 116;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getFormatRegexpSkipUnmatchedOrBuilder() {
      return getFormatRegexpSkipUnmatched();
    }

    public static final int ASYNC_INSERT_FIELD_NUMBER = 117;
    private com.google.protobuf.BoolValue asyncInsert_;
    /**
     * <pre>
     * Enables asynchronous inserts.
     * Disabled by default.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue async_insert = 117;</code>
     * @return Whether the asyncInsert field is set.
     */
    @java.lang.Override
    public boolean hasAsyncInsert() {
      return asyncInsert_ != null;
    }
    /**
     * <pre>
     * Enables asynchronous inserts.
     * Disabled by default.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue async_insert = 117;</code>
     * @return The asyncInsert.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getAsyncInsert() {
      return asyncInsert_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : asyncInsert_;
    }
    /**
     * <pre>
     * Enables asynchronous inserts.
     * Disabled by default.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue async_insert = 117;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getAsyncInsertOrBuilder() {
      return getAsyncInsert();
    }

    public static final int ASYNC_INSERT_THREADS_FIELD_NUMBER = 118;
    private com.google.protobuf.Int64Value asyncInsertThreads_;
    /**
     * <pre>
     * The maximum number of threads for background data parsing and insertion.
     * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **16**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-threads).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value async_insert_threads = 118;</code>
     * @return Whether the asyncInsertThreads field is set.
     */
    @java.lang.Override
    public boolean hasAsyncInsertThreads() {
      return asyncInsertThreads_ != null;
    }
    /**
     * <pre>
     * The maximum number of threads for background data parsing and insertion.
     * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **16**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-threads).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value async_insert_threads = 118;</code>
     * @return The asyncInsertThreads.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getAsyncInsertThreads() {
      return asyncInsertThreads_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : asyncInsertThreads_;
    }
    /**
     * <pre>
     * The maximum number of threads for background data parsing and insertion.
     * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **16**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-threads).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value async_insert_threads = 118;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getAsyncInsertThreadsOrBuilder() {
      return getAsyncInsertThreads();
    }

    public static final int WAIT_FOR_ASYNC_INSERT_FIELD_NUMBER = 119;
    private com.google.protobuf.BoolValue waitForAsyncInsert_;
    /**
     * <pre>
     * Enables waiting for processing of asynchronous insertion. If enabled, server returns OK only after the data is inserted.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue wait_for_async_insert = 119;</code>
     * @return Whether the waitForAsyncInsert field is set.
     */
    @java.lang.Override
    public boolean hasWaitForAsyncInsert() {
      return waitForAsyncInsert_ != null;
    }
    /**
     * <pre>
     * Enables waiting for processing of asynchronous insertion. If enabled, server returns OK only after the data is inserted.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue wait_for_async_insert = 119;</code>
     * @return The waitForAsyncInsert.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getWaitForAsyncInsert() {
      return waitForAsyncInsert_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : waitForAsyncInsert_;
    }
    /**
     * <pre>
     * Enables waiting for processing of asynchronous insertion. If enabled, server returns OK only after the data is inserted.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert).
     * </pre>
     *
     * <code>.google.protobuf.BoolValue wait_for_async_insert = 119;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getWaitForAsyncInsertOrBuilder() {
      return getWaitForAsyncInsert();
    }

    public static final int WAIT_FOR_ASYNC_INSERT_TIMEOUT_FIELD_NUMBER = 120;
    private com.google.protobuf.Int64Value waitForAsyncInsertTimeout_;
    /**
     * <pre>
     * The timeout (in seconds) for waiting for processing of asynchronous insertion.
     * Default value: **120**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert-timeout).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value wait_for_async_insert_timeout = 120;</code>
     * @return Whether the waitForAsyncInsertTimeout field is set.
     */
    @java.lang.Override
    public boolean hasWaitForAsyncInsertTimeout() {
      return waitForAsyncInsertTimeout_ != null;
    }
    /**
     * <pre>
     * The timeout (in seconds) for waiting for processing of asynchronous insertion.
     * Default value: **120**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert-timeout).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value wait_for_async_insert_timeout = 120;</code>
     * @return The waitForAsyncInsertTimeout.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getWaitForAsyncInsertTimeout() {
      return waitForAsyncInsertTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : waitForAsyncInsertTimeout_;
    }
    /**
     * <pre>
     * The timeout (in seconds) for waiting for processing of asynchronous insertion.
     * Default value: **120**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert-timeout).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value wait_for_async_insert_timeout = 120;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getWaitForAsyncInsertTimeoutOrBuilder() {
      return getWaitForAsyncInsertTimeout();
    }

    public static final int ASYNC_INSERT_MAX_DATA_SIZE_FIELD_NUMBER = 121;
    private com.google.protobuf.Int64Value asyncInsertMaxDataSize_;
    /**
     * <pre>
     * The maximum size of the unparsed data in bytes collected per query before being inserted.
     * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **100000**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-max-data-size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value async_insert_max_data_size = 121;</code>
     * @return Whether the asyncInsertMaxDataSize field is set.
     */
    @java.lang.Override
    public boolean hasAsyncInsertMaxDataSize() {
      return asyncInsertMaxDataSize_ != null;
    }
    /**
     * <pre>
     * The maximum size of the unparsed data in bytes collected per query before being inserted.
     * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **100000**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-max-data-size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value async_insert_max_data_size = 121;</code>
     * @return The asyncInsertMaxDataSize.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getAsyncInsertMaxDataSize() {
      return asyncInsertMaxDataSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : asyncInsertMaxDataSize_;
    }
    /**
     * <pre>
     * The maximum size of the unparsed data in bytes collected per query before being inserted.
     * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **100000**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-max-data-size).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value async_insert_max_data_size = 121;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getAsyncInsertMaxDataSizeOrBuilder() {
      return getAsyncInsertMaxDataSize();
    }

    public static final int ASYNC_INSERT_BUSY_TIMEOUT_FIELD_NUMBER = 122;
    private com.google.protobuf.Int64Value asyncInsertBusyTimeout_;
    /**
     * <pre>
     * The maximum timeout in milliseconds since the first INSERT query before inserting collected data.
     * If the parameter is set to **0**, the timeout is disabled. Default value: **200**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-busy-timeout-ms).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value async_insert_busy_timeout = 122;</code>
     * @return Whether the asyncInsertBusyTimeout field is set.
     */
    @java.lang.Override
    public boolean hasAsyncInsertBusyTimeout() {
      return asyncInsertBusyTimeout_ != null;
    }
    /**
     * <pre>
     * The maximum timeout in milliseconds since the first INSERT query before inserting collected data.
     * If the parameter is set to **0**, the timeout is disabled. Default value: **200**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-busy-timeout-ms).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value async_insert_busy_timeout = 122;</code>
     * @return The asyncInsertBusyTimeout.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getAsyncInsertBusyTimeout() {
      return asyncInsertBusyTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : asyncInsertBusyTimeout_;
    }
    /**
     * <pre>
     * The maximum timeout in milliseconds since the first INSERT query before inserting collected data.
     * If the parameter is set to **0**, the timeout is disabled. Default value: **200**.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-busy-timeout-ms).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value async_insert_busy_timeout = 122;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getAsyncInsertBusyTimeoutOrBuilder() {
      return getAsyncInsertBusyTimeout();
    }

    public static final int ASYNC_INSERT_STALE_TIMEOUT_FIELD_NUMBER = 123;
    private com.google.protobuf.Int64Value asyncInsertStaleTimeout_;
    /**
     * <pre>
     * The maximum timeout in milliseconds since the last INSERT query before dumping collected data. If enabled, the settings prolongs the [async_insert_busy_timeout] with every INSERT query as long as [async_insert_max_data_size] is not exceeded.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-stale-timeout-ms).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value async_insert_stale_timeout = 123;</code>
     * @return Whether the asyncInsertStaleTimeout field is set.
     */
    @java.lang.Override
    public boolean hasAsyncInsertStaleTimeout() {
      return asyncInsertStaleTimeout_ != null;
    }
    /**
     * <pre>
     * The maximum timeout in milliseconds since the last INSERT query before dumping collected data. If enabled, the settings prolongs the [async_insert_busy_timeout] with every INSERT query as long as [async_insert_max_data_size] is not exceeded.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-stale-timeout-ms).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value async_insert_stale_timeout = 123;</code>
     * @return The asyncInsertStaleTimeout.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getAsyncInsertStaleTimeout() {
      return asyncInsertStaleTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : asyncInsertStaleTimeout_;
    }
    /**
     * <pre>
     * The maximum timeout in milliseconds since the last INSERT query before dumping collected data. If enabled, the settings prolongs the [async_insert_busy_timeout] with every INSERT query as long as [async_insert_max_data_size] is not exceeded.
     * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-stale-timeout-ms).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value async_insert_stale_timeout = 123;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getAsyncInsertStaleTimeoutOrBuilder() {
      return getAsyncInsertStaleTimeout();
    }

    public static final int MEMORY_PROFILER_STEP_FIELD_NUMBER = 124;
    private com.google.protobuf.Int64Value memoryProfilerStep_;
    /**
     * <pre>
     * Memory profiler step (in bytes).
     * If the next query step requires more memory than this parameter specifies, the memory profiler collects the allocating stack trace. Values lower than a few megabytes slow down query processing.
     * Default value: **4194304** (4 MB). Zero means disabled memory profiler.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value memory_profiler_step = 124;</code>
     * @return Whether the memoryProfilerStep field is set.
     */
    @java.lang.Override
    public boolean hasMemoryProfilerStep() {
      return memoryProfilerStep_ != null;
    }
    /**
     * <pre>
     * Memory profiler step (in bytes).
     * If the next query step requires more memory than this parameter specifies, the memory profiler collects the allocating stack trace. Values lower than a few megabytes slow down query processing.
     * Default value: **4194304** (4 MB). Zero means disabled memory profiler.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value memory_profiler_step = 124;</code>
     * @return The memoryProfilerStep.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMemoryProfilerStep() {
      return memoryProfilerStep_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : memoryProfilerStep_;
    }
    /**
     * <pre>
     * Memory profiler step (in bytes).
     * If the next query step requires more memory than this parameter specifies, the memory profiler collects the allocating stack trace. Values lower than a few megabytes slow down query processing.
     * Default value: **4194304** (4 MB). Zero means disabled memory profiler.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value memory_profiler_step = 124;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMemoryProfilerStepOrBuilder() {
      return getMemoryProfilerStep();
    }

    public static final int MEMORY_PROFILER_SAMPLE_PROBABILITY_FIELD_NUMBER = 125;
    private com.google.protobuf.DoubleValue memoryProfilerSampleProbability_;
    /**
     * <pre>
     * Collect random allocations and deallocations and write them into system.trace_log with 'MemorySample' trace_type. The probability is for every alloc/free regardless to the size of the allocation.
     * Possible values: from **0** to **1**. Default: **0**.
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue memory_profiler_sample_probability = 125;</code>
     * @return Whether the memoryProfilerSampleProbability field is set.
     */
    @java.lang.Override
    public boolean hasMemoryProfilerSampleProbability() {
      return memoryProfilerSampleProbability_ != null;
    }
    /**
     * <pre>
     * Collect random allocations and deallocations and write them into system.trace_log with 'MemorySample' trace_type. The probability is for every alloc/free regardless to the size of the allocation.
     * Possible values: from **0** to **1**. Default: **0**.
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue memory_profiler_sample_probability = 125;</code>
     * @return The memoryProfilerSampleProbability.
     */
    @java.lang.Override
    public com.google.protobuf.DoubleValue getMemoryProfilerSampleProbability() {
      return memoryProfilerSampleProbability_ == null ? com.google.protobuf.DoubleValue.getDefaultInstance() : memoryProfilerSampleProbability_;
    }
    /**
     * <pre>
     * Collect random allocations and deallocations and write them into system.trace_log with 'MemorySample' trace_type. The probability is for every alloc/free regardless to the size of the allocation.
     * Possible values: from **0** to **1**. Default: **0**.
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue memory_profiler_sample_probability = 125;</code>
     */
    @java.lang.Override
    public com.google.protobuf.DoubleValueOrBuilder getMemoryProfilerSampleProbabilityOrBuilder() {
      return getMemoryProfilerSampleProbability();
    }

    public static final int MAX_FINAL_THREADS_FIELD_NUMBER = 126;
    private com.google.protobuf.Int64Value maxFinalThreads_;
    /**
     * <pre>
     * Sets the maximum number of parallel threads for the SELECT query data read phase with the FINAL modifier.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max-final-threads).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_final_threads = 126 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxFinalThreads field is set.
     */
    @java.lang.Override
    public boolean hasMaxFinalThreads() {
      return maxFinalThreads_ != null;
    }
    /**
     * <pre>
     * Sets the maximum number of parallel threads for the SELECT query data read phase with the FINAL modifier.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max-final-threads).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_final_threads = 126 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxFinalThreads.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxFinalThreads() {
      return maxFinalThreads_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxFinalThreads_;
    }
    /**
     * <pre>
     * Sets the maximum number of parallel threads for the SELECT query data read phase with the FINAL modifier.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max-final-threads).
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_final_threads = 126 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxFinalThreadsOrBuilder() {
      return getMaxFinalThreads();
    }

    public static final int INPUT_FORMAT_PARALLEL_PARSING_FIELD_NUMBER = 127;
    private com.google.protobuf.BoolValue inputFormatParallelParsing_;
    /**
     * <pre>
     * Enables or disables order-preserving parallel parsing of data formats. Supported only for [TSV](https://clickhouse.com/docs/en/interfaces/formats#tabseparated), [TKSV](https://clickhouse.com/docs/en/interfaces/formats#tskv), [CSV](https://clickhouse.com/docs/en/interfaces/formats#csv) and [JSONEachRow](https://clickhouse.com/docs/en/interfaces/formats#jsoneachrow) formats.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_parallel_parsing = 127;</code>
     * @return Whether the inputFormatParallelParsing field is set.
     */
    @java.lang.Override
    public boolean hasInputFormatParallelParsing() {
      return inputFormatParallelParsing_ != null;
    }
    /**
     * <pre>
     * Enables or disables order-preserving parallel parsing of data formats. Supported only for [TSV](https://clickhouse.com/docs/en/interfaces/formats#tabseparated), [TKSV](https://clickhouse.com/docs/en/interfaces/formats#tskv), [CSV](https://clickhouse.com/docs/en/interfaces/formats#csv) and [JSONEachRow](https://clickhouse.com/docs/en/interfaces/formats#jsoneachrow) formats.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_parallel_parsing = 127;</code>
     * @return The inputFormatParallelParsing.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getInputFormatParallelParsing() {
      return inputFormatParallelParsing_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : inputFormatParallelParsing_;
    }
    /**
     * <pre>
     * Enables or disables order-preserving parallel parsing of data formats. Supported only for [TSV](https://clickhouse.com/docs/en/interfaces/formats#tabseparated), [TKSV](https://clickhouse.com/docs/en/interfaces/formats#tskv), [CSV](https://clickhouse.com/docs/en/interfaces/formats#csv) and [JSONEachRow](https://clickhouse.com/docs/en/interfaces/formats#jsoneachrow) formats.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_parallel_parsing = 127;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getInputFormatParallelParsingOrBuilder() {
      return getInputFormatParallelParsing();
    }

    public static final int INPUT_FORMAT_IMPORT_NESTED_JSON_FIELD_NUMBER = 128;
    private com.google.protobuf.BoolValue inputFormatImportNestedJson_;
    /**
     * <pre>
     * Enables or disables the insertion of JSON data with nested objects.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_import_nested_json = 128;</code>
     * @return Whether the inputFormatImportNestedJson field is set.
     */
    @java.lang.Override
    public boolean hasInputFormatImportNestedJson() {
      return inputFormatImportNestedJson_ != null;
    }
    /**
     * <pre>
     * Enables or disables the insertion of JSON data with nested objects.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_import_nested_json = 128;</code>
     * @return The inputFormatImportNestedJson.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getInputFormatImportNestedJson() {
      return inputFormatImportNestedJson_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : inputFormatImportNestedJson_;
    }
    /**
     * <pre>
     * Enables or disables the insertion of JSON data with nested objects.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue input_format_import_nested_json = 128;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getInputFormatImportNestedJsonOrBuilder() {
      return getInputFormatImportNestedJson();
    }

    public static final int LOCAL_FILESYSTEM_READ_METHOD_FIELD_NUMBER = 129;
    private int localFilesystemReadMethod_;
    /**
     * <pre>
     * Method of reading data from local filesystem, one of: read, pread, mmap, io_uring, pread_threadpool. The 'io_uring' method is experimental and does not work for Log, TinyLog, StripeLog, File, Set and Join, and other tables with append-able files in presence of concurrent reads and writes.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.LocalFilesystemReadMethod local_filesystem_read_method = 129;</code>
     * @return The enum numeric value on the wire for localFilesystemReadMethod.
     */
    @java.lang.Override public int getLocalFilesystemReadMethodValue() {
      return localFilesystemReadMethod_;
    }
    /**
     * <pre>
     * Method of reading data from local filesystem, one of: read, pread, mmap, io_uring, pread_threadpool. The 'io_uring' method is experimental and does not work for Log, TinyLog, StripeLog, File, Set and Join, and other tables with append-able files in presence of concurrent reads and writes.
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.LocalFilesystemReadMethod local_filesystem_read_method = 129;</code>
     * @return The localFilesystemReadMethod.
     */
    @java.lang.Override public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.LocalFilesystemReadMethod getLocalFilesystemReadMethod() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.LocalFilesystemReadMethod result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.LocalFilesystemReadMethod.valueOf(localFilesystemReadMethod_);
      return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.LocalFilesystemReadMethod.UNRECOGNIZED : result;
    }

    public static final int MAX_READ_BUFFER_SIZE_FIELD_NUMBER = 130;
    private com.google.protobuf.Int64Value maxReadBufferSize_;
    /**
     * <pre>
     * The maximum size of the buffer to read from the filesystem.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/codebrowser/ClickHouse/src/Core/Settings.h.html#DB::SettingsTraits::Data::max_read_buffer_size)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_read_buffer_size = 130 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return Whether the maxReadBufferSize field is set.
     */
    @java.lang.Override
    public boolean hasMaxReadBufferSize() {
      return maxReadBufferSize_ != null;
    }
    /**
     * <pre>
     * The maximum size of the buffer to read from the filesystem.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/codebrowser/ClickHouse/src/Core/Settings.h.html#DB::SettingsTraits::Data::max_read_buffer_size)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_read_buffer_size = 130 [(.yandex.cloud.value) = "&gt;0"];</code>
     * @return The maxReadBufferSize.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxReadBufferSize() {
      return maxReadBufferSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxReadBufferSize_;
    }
    /**
     * <pre>
     * The maximum size of the buffer to read from the filesystem.
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/codebrowser/ClickHouse/src/Core/Settings.h.html#DB::SettingsTraits::Data::max_read_buffer_size)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_read_buffer_size = 130 [(.yandex.cloud.value) = "&gt;0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxReadBufferSizeOrBuilder() {
      return getMaxReadBufferSize();
    }

    public static final int INSERT_KEEPER_MAX_RETRIES_FIELD_NUMBER = 131;
    private com.google.protobuf.Int64Value insertKeeperMaxRetries_;
    /**
     * <pre>
     * The setting sets the maximum number of retries for ClickHouse Keeper (or ZooKeeper) requests during insert into replicated MergeTree. Only Keeper requests which failed due to network error, Keeper session timeout, or request timeout are considered for retries.
     * Default: 20 from 23.2, 0(disabled) before
     * Min_version: 22.11
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#insert_keeper_max_retries)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value insert_keeper_max_retries = 131 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the insertKeeperMaxRetries field is set.
     */
    @java.lang.Override
    public boolean hasInsertKeeperMaxRetries() {
      return insertKeeperMaxRetries_ != null;
    }
    /**
     * <pre>
     * The setting sets the maximum number of retries for ClickHouse Keeper (or ZooKeeper) requests during insert into replicated MergeTree. Only Keeper requests which failed due to network error, Keeper session timeout, or request timeout are considered for retries.
     * Default: 20 from 23.2, 0(disabled) before
     * Min_version: 22.11
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#insert_keeper_max_retries)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value insert_keeper_max_retries = 131 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The insertKeeperMaxRetries.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getInsertKeeperMaxRetries() {
      return insertKeeperMaxRetries_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : insertKeeperMaxRetries_;
    }
    /**
     * <pre>
     * The setting sets the maximum number of retries for ClickHouse Keeper (or ZooKeeper) requests during insert into replicated MergeTree. Only Keeper requests which failed due to network error, Keeper session timeout, or request timeout are considered for retries.
     * Default: 20 from 23.2, 0(disabled) before
     * Min_version: 22.11
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#insert_keeper_max_retries)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value insert_keeper_max_retries = 131 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getInsertKeeperMaxRetriesOrBuilder() {
      return getInsertKeeperMaxRetries();
    }

    public static final int MAX_TEMPORARY_DATA_ON_DISK_SIZE_FOR_USER_FIELD_NUMBER = 132;
    private com.google.protobuf.Int64Value maxTemporaryDataOnDiskSizeForUser_;
    /**
     * <pre>
     * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running user queries. Zero means unlimited.
     * Default: 0 - unlimited
     * Min_version: 22.10
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_user)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_user = 132 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxTemporaryDataOnDiskSizeForUser field is set.
     */
    @java.lang.Override
    public boolean hasMaxTemporaryDataOnDiskSizeForUser() {
      return maxTemporaryDataOnDiskSizeForUser_ != null;
    }
    /**
     * <pre>
     * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running user queries. Zero means unlimited.
     * Default: 0 - unlimited
     * Min_version: 22.10
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_user)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_user = 132 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxTemporaryDataOnDiskSizeForUser.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxTemporaryDataOnDiskSizeForUser() {
      return maxTemporaryDataOnDiskSizeForUser_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxTemporaryDataOnDiskSizeForUser_;
    }
    /**
     * <pre>
     * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running user queries. Zero means unlimited.
     * Default: 0 - unlimited
     * Min_version: 22.10
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_user)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_user = 132 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxTemporaryDataOnDiskSizeForUserOrBuilder() {
      return getMaxTemporaryDataOnDiskSizeForUser();
    }

    public static final int MAX_TEMPORARY_DATA_ON_DISK_SIZE_FOR_QUERY_FIELD_NUMBER = 133;
    private com.google.protobuf.Int64Value maxTemporaryDataOnDiskSizeForQuery_;
    /**
     * <pre>
     * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running queries. Zero means unlimited.
     * Default: 0 - unlimited
     * Min_version: 22.10
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_query)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_query = 133 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxTemporaryDataOnDiskSizeForQuery field is set.
     */
    @java.lang.Override
    public boolean hasMaxTemporaryDataOnDiskSizeForQuery() {
      return maxTemporaryDataOnDiskSizeForQuery_ != null;
    }
    /**
     * <pre>
     * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running queries. Zero means unlimited.
     * Default: 0 - unlimited
     * Min_version: 22.10
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_query)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_query = 133 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxTemporaryDataOnDiskSizeForQuery.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxTemporaryDataOnDiskSizeForQuery() {
      return maxTemporaryDataOnDiskSizeForQuery_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxTemporaryDataOnDiskSizeForQuery_;
    }
    /**
     * <pre>
     * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running queries. Zero means unlimited.
     * Default: 0 - unlimited
     * Min_version: 22.10
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_query)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_query = 133 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxTemporaryDataOnDiskSizeForQueryOrBuilder() {
      return getMaxTemporaryDataOnDiskSizeForQuery();
    }

    public static final int MAX_PARSER_DEPTH_FIELD_NUMBER = 134;
    private com.google.protobuf.Int64Value maxParserDepth_;
    /**
     * <pre>
     * Limits maximum recursion depth in the recursive descent parser. Allows controlling the stack size.
     * Default: 1000
     * Special: 0 - unlimited
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_parser_depth)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_parser_depth = 134 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxParserDepth field is set.
     */
    @java.lang.Override
    public boolean hasMaxParserDepth() {
      return maxParserDepth_ != null;
    }
    /**
     * <pre>
     * Limits maximum recursion depth in the recursive descent parser. Allows controlling the stack size.
     * Default: 1000
     * Special: 0 - unlimited
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_parser_depth)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_parser_depth = 134 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxParserDepth.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxParserDepth() {
      return maxParserDepth_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxParserDepth_;
    }
    /**
     * <pre>
     * Limits maximum recursion depth in the recursive descent parser. Allows controlling the stack size.
     * Default: 1000
     * Special: 0 - unlimited
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_parser_depth)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_parser_depth = 134 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxParserDepthOrBuilder() {
      return getMaxParserDepth();
    }

    public static final int REMOTE_FILESYSTEM_READ_METHOD_FIELD_NUMBER = 135;
    private int remoteFilesystemReadMethod_;
    /**
     * <pre>
     * Method of reading data from remote filesystem, one of: read, threadpool.
     * Default: read
     * Min_version: 21.11
     * See in-depth description in [ClickHouse GitHub](https://github.com/ClickHouse/ClickHouse/blob/f9558345e886876b9132d9c018e357f7fa9b22a3/src/Core/Settings.h#L660)
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.RemoteFilesystemReadMethod remote_filesystem_read_method = 135;</code>
     * @return The enum numeric value on the wire for remoteFilesystemReadMethod.
     */
    @java.lang.Override public int getRemoteFilesystemReadMethodValue() {
      return remoteFilesystemReadMethod_;
    }
    /**
     * <pre>
     * Method of reading data from remote filesystem, one of: read, threadpool.
     * Default: read
     * Min_version: 21.11
     * See in-depth description in [ClickHouse GitHub](https://github.com/ClickHouse/ClickHouse/blob/f9558345e886876b9132d9c018e357f7fa9b22a3/src/Core/Settings.h#L660)
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.RemoteFilesystemReadMethod remote_filesystem_read_method = 135;</code>
     * @return The remoteFilesystemReadMethod.
     */
    @java.lang.Override public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.RemoteFilesystemReadMethod getRemoteFilesystemReadMethod() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.RemoteFilesystemReadMethod result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.RemoteFilesystemReadMethod.valueOf(remoteFilesystemReadMethod_);
      return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.RemoteFilesystemReadMethod.UNRECOGNIZED : result;
    }

    public static final int MEMORY_OVERCOMMIT_RATIO_DENOMINATOR_FIELD_NUMBER = 136;
    private com.google.protobuf.Int64Value memoryOvercommitRatioDenominator_;
    /**
     * <pre>
     * It represents soft memory limit in case when hard limit is reached on user level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
     * Default: 1GiB
     * Min_version: 22.5
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator = 136 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the memoryOvercommitRatioDenominator field is set.
     */
    @java.lang.Override
    public boolean hasMemoryOvercommitRatioDenominator() {
      return memoryOvercommitRatioDenominator_ != null;
    }
    /**
     * <pre>
     * It represents soft memory limit in case when hard limit is reached on user level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
     * Default: 1GiB
     * Min_version: 22.5
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator = 136 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The memoryOvercommitRatioDenominator.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMemoryOvercommitRatioDenominator() {
      return memoryOvercommitRatioDenominator_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : memoryOvercommitRatioDenominator_;
    }
    /**
     * <pre>
     * It represents soft memory limit in case when hard limit is reached on user level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
     * Default: 1GiB
     * Min_version: 22.5
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator = 136 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMemoryOvercommitRatioDenominatorOrBuilder() {
      return getMemoryOvercommitRatioDenominator();
    }

    public static final int MEMORY_OVERCOMMIT_RATIO_DENOMINATOR_FOR_USER_FIELD_NUMBER = 137;
    private com.google.protobuf.Int64Value memoryOvercommitRatioDenominatorForUser_;
    /**
     * <pre>
     * It represents soft memory limit in case when hard limit is reached on global level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
     * Default: 1GiB
     * Min_version: 22.5
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator_for_user)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator_for_user = 137 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the memoryOvercommitRatioDenominatorForUser field is set.
     */
    @java.lang.Override
    public boolean hasMemoryOvercommitRatioDenominatorForUser() {
      return memoryOvercommitRatioDenominatorForUser_ != null;
    }
    /**
     * <pre>
     * It represents soft memory limit in case when hard limit is reached on global level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
     * Default: 1GiB
     * Min_version: 22.5
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator_for_user)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator_for_user = 137 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The memoryOvercommitRatioDenominatorForUser.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMemoryOvercommitRatioDenominatorForUser() {
      return memoryOvercommitRatioDenominatorForUser_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : memoryOvercommitRatioDenominatorForUser_;
    }
    /**
     * <pre>
     * It represents soft memory limit in case when hard limit is reached on global level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
     * Default: 1GiB
     * Min_version: 22.5
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator_for_user)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator_for_user = 137 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMemoryOvercommitRatioDenominatorForUserOrBuilder() {
      return getMemoryOvercommitRatioDenominatorForUser();
    }

    public static final int MEMORY_USAGE_OVERCOMMIT_MAX_WAIT_MICROSECONDS_FIELD_NUMBER = 138;
    private com.google.protobuf.Int64Value memoryUsageOvercommitMaxWaitMicroseconds_;
    /**
     * <pre>
     * Maximum time thread will wait for memory to be freed in the case of memory overcommit on a user level. If the timeout is reached and memory is not freed, an exception is thrown.
     * Default: 5000000
     * Min_version: 22.5
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_usage_overcommit_max_wait_microseconds)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value memory_usage_overcommit_max_wait_microseconds = 138 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the memoryUsageOvercommitMaxWaitMicroseconds field is set.
     */
    @java.lang.Override
    public boolean hasMemoryUsageOvercommitMaxWaitMicroseconds() {
      return memoryUsageOvercommitMaxWaitMicroseconds_ != null;
    }
    /**
     * <pre>
     * Maximum time thread will wait for memory to be freed in the case of memory overcommit on a user level. If the timeout is reached and memory is not freed, an exception is thrown.
     * Default: 5000000
     * Min_version: 22.5
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_usage_overcommit_max_wait_microseconds)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value memory_usage_overcommit_max_wait_microseconds = 138 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The memoryUsageOvercommitMaxWaitMicroseconds.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMemoryUsageOvercommitMaxWaitMicroseconds() {
      return memoryUsageOvercommitMaxWaitMicroseconds_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : memoryUsageOvercommitMaxWaitMicroseconds_;
    }
    /**
     * <pre>
     * Maximum time thread will wait for memory to be freed in the case of memory overcommit on a user level. If the timeout is reached and memory is not freed, an exception is thrown.
     * Default: 5000000
     * Min_version: 22.5
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_usage_overcommit_max_wait_microseconds)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value memory_usage_overcommit_max_wait_microseconds = 138 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMemoryUsageOvercommitMaxWaitMicrosecondsOrBuilder() {
      return getMemoryUsageOvercommitMaxWaitMicroseconds();
    }

    public static final int LOG_QUERY_THREADS_FIELD_NUMBER = 139;
    private com.google.protobuf.BoolValue logQueryThreads_;
    /**
     * <pre>
     * Setting up query threads logging. Query threads log into the [system.query_thread_log](https://clickhouse.com/docs/en/operations/system-tables/query_thread_log) table. This setting has effect only when [log_queries](https://clickhouse.com/docs/en/operations/settings/settings#log-queries) is true. Queries threads run by ClickHouse with this setup are logged according to the rules in the [query_thread_log](https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-query_thread_log) server configuration parameter.
     * Default: true
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#log_query_threads)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue log_query_threads = 139;</code>
     * @return Whether the logQueryThreads field is set.
     */
    @java.lang.Override
    public boolean hasLogQueryThreads() {
      return logQueryThreads_ != null;
    }
    /**
     * <pre>
     * Setting up query threads logging. Query threads log into the [system.query_thread_log](https://clickhouse.com/docs/en/operations/system-tables/query_thread_log) table. This setting has effect only when [log_queries](https://clickhouse.com/docs/en/operations/settings/settings#log-queries) is true. Queries threads run by ClickHouse with this setup are logged according to the rules in the [query_thread_log](https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-query_thread_log) server configuration parameter.
     * Default: true
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#log_query_threads)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue log_query_threads = 139;</code>
     * @return The logQueryThreads.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getLogQueryThreads() {
      return logQueryThreads_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : logQueryThreads_;
    }
    /**
     * <pre>
     * Setting up query threads logging. Query threads log into the [system.query_thread_log](https://clickhouse.com/docs/en/operations/system-tables/query_thread_log) table. This setting has effect only when [log_queries](https://clickhouse.com/docs/en/operations/settings/settings#log-queries) is true. Queries threads run by ClickHouse with this setup are logged according to the rules in the [query_thread_log](https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-query_thread_log) server configuration parameter.
     * Default: true
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#log_query_threads)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue log_query_threads = 139;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getLogQueryThreadsOrBuilder() {
      return getLogQueryThreads();
    }

    public static final int MAX_INSERT_THREADS_FIELD_NUMBER = 140;
    private com.google.protobuf.Int64Value maxInsertThreads_;
    /**
     * <pre>
     * The maximum number of threads to execute the INSERT SELECT query.
     * Default: 0
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_insert_threads)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_insert_threads = 140 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the maxInsertThreads field is set.
     */
    @java.lang.Override
    public boolean hasMaxInsertThreads() {
      return maxInsertThreads_ != null;
    }
    /**
     * <pre>
     * The maximum number of threads to execute the INSERT SELECT query.
     * Default: 0
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_insert_threads)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_insert_threads = 140 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The maxInsertThreads.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getMaxInsertThreads() {
      return maxInsertThreads_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxInsertThreads_;
    }
    /**
     * <pre>
     * The maximum number of threads to execute the INSERT SELECT query.
     * Default: 0
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_insert_threads)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value max_insert_threads = 140 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getMaxInsertThreadsOrBuilder() {
      return getMaxInsertThreads();
    }

    public static final int USE_HEDGED_REQUESTS_FIELD_NUMBER = 141;
    private com.google.protobuf.BoolValue useHedgedRequests_;
    /**
     * <pre>
     * Enables hedged requests logic for remote queries. It allows to establish many connections with different replicas for query. New connection is enabled in case existent connection(s) with replica(s) were not established within hedged_connection_timeout or no data was received within receive_data_timeout. Query uses the first connection which send non empty progress packet (or data packet, if allow_changing_replica_until_first_data_packet); other connections are cancelled. Queries with max_parallel_replicas &gt; 1 are supported.
     * Default: true
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#use_hedged_requests)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue use_hedged_requests = 141;</code>
     * @return Whether the useHedgedRequests field is set.
     */
    @java.lang.Override
    public boolean hasUseHedgedRequests() {
      return useHedgedRequests_ != null;
    }
    /**
     * <pre>
     * Enables hedged requests logic for remote queries. It allows to establish many connections with different replicas for query. New connection is enabled in case existent connection(s) with replica(s) were not established within hedged_connection_timeout or no data was received within receive_data_timeout. Query uses the first connection which send non empty progress packet (or data packet, if allow_changing_replica_until_first_data_packet); other connections are cancelled. Queries with max_parallel_replicas &gt; 1 are supported.
     * Default: true
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#use_hedged_requests)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue use_hedged_requests = 141;</code>
     * @return The useHedgedRequests.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getUseHedgedRequests() {
      return useHedgedRequests_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : useHedgedRequests_;
    }
    /**
     * <pre>
     * Enables hedged requests logic for remote queries. It allows to establish many connections with different replicas for query. New connection is enabled in case existent connection(s) with replica(s) were not established within hedged_connection_timeout or no data was received within receive_data_timeout. Query uses the first connection which send non empty progress packet (or data packet, if allow_changing_replica_until_first_data_packet); other connections are cancelled. Queries with max_parallel_replicas &gt; 1 are supported.
     * Default: true
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#use_hedged_requests)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue use_hedged_requests = 141;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getUseHedgedRequestsOrBuilder() {
      return getUseHedgedRequests();
    }

    public static final int IDLE_CONNECTION_TIMEOUT_FIELD_NUMBER = 142;
    private com.google.protobuf.Int64Value idleConnectionTimeout_;
    /**
     * <pre>
     * Timeout to close idle TCP connections after specified number of milliseconds.
     * Default: 360000 (3600 seconds)
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#idle_connection_timeout)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value idle_connection_timeout = 142 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the idleConnectionTimeout field is set.
     */
    @java.lang.Override
    public boolean hasIdleConnectionTimeout() {
      return idleConnectionTimeout_ != null;
    }
    /**
     * <pre>
     * Timeout to close idle TCP connections after specified number of milliseconds.
     * Default: 360000 (3600 seconds)
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#idle_connection_timeout)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value idle_connection_timeout = 142 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The idleConnectionTimeout.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getIdleConnectionTimeout() {
      return idleConnectionTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : idleConnectionTimeout_;
    }
    /**
     * <pre>
     * Timeout to close idle TCP connections after specified number of milliseconds.
     * Default: 360000 (3600 seconds)
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#idle_connection_timeout)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value idle_connection_timeout = 142 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getIdleConnectionTimeoutOrBuilder() {
      return getIdleConnectionTimeout();
    }

    public static final int HEDGED_CONNECTION_TIMEOUT_MS_FIELD_NUMBER = 143;
    private com.google.protobuf.Int64Value hedgedConnectionTimeoutMs_;
    /**
     * <pre>
     * Connection timeout for establishing connection with replica for Hedged requests.
     * Default: 50
     * See in-depth description in [ClickHouse GitHub](https://github.com/ClickHouse/ClickHouse/blob/f9558345e886876b9132d9c018e357f7fa9b22a3/src/Core/Settings.h#L64)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value hedged_connection_timeout_ms = 143 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the hedgedConnectionTimeoutMs field is set.
     */
    @java.lang.Override
    public boolean hasHedgedConnectionTimeoutMs() {
      return hedgedConnectionTimeoutMs_ != null;
    }
    /**
     * <pre>
     * Connection timeout for establishing connection with replica for Hedged requests.
     * Default: 50
     * See in-depth description in [ClickHouse GitHub](https://github.com/ClickHouse/ClickHouse/blob/f9558345e886876b9132d9c018e357f7fa9b22a3/src/Core/Settings.h#L64)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value hedged_connection_timeout_ms = 143 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The hedgedConnectionTimeoutMs.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getHedgedConnectionTimeoutMs() {
      return hedgedConnectionTimeoutMs_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : hedgedConnectionTimeoutMs_;
    }
    /**
     * <pre>
     * Connection timeout for establishing connection with replica for Hedged requests.
     * Default: 50
     * See in-depth description in [ClickHouse GitHub](https://github.com/ClickHouse/ClickHouse/blob/f9558345e886876b9132d9c018e357f7fa9b22a3/src/Core/Settings.h#L64)
     * </pre>
     *
     * <code>.google.protobuf.Int64Value hedged_connection_timeout_ms = 143 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getHedgedConnectionTimeoutMsOrBuilder() {
      return getHedgedConnectionTimeoutMs();
    }

    public static final int LOAD_BALANCING_FIELD_NUMBER = 144;
    private int loadBalancing_;
    /**
     * <pre>
     * Specifies the algorithm of replicas selection that is used for distributed query processing, one of: random, nearest_hostname, in_order, first_or_random, round_robin.
     * Default: random
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#load_balancing)
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.LoadBalancing load_balancing = 144;</code>
     * @return The enum numeric value on the wire for loadBalancing.
     */
    @java.lang.Override public int getLoadBalancingValue() {
      return loadBalancing_;
    }
    /**
     * <pre>
     * Specifies the algorithm of replicas selection that is used for distributed query processing, one of: random, nearest_hostname, in_order, first_or_random, round_robin.
     * Default: random
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#load_balancing)
     * </pre>
     *
     * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.LoadBalancing load_balancing = 144;</code>
     * @return The loadBalancing.
     */
    @java.lang.Override public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.LoadBalancing getLoadBalancing() {
      @SuppressWarnings("deprecation")
      yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.LoadBalancing result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.LoadBalancing.valueOf(loadBalancing_);
      return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.LoadBalancing.UNRECOGNIZED : result;
    }

    public static final int PREFER_LOCALHOST_REPLICA_FIELD_NUMBER = 145;
    private com.google.protobuf.BoolValue preferLocalhostReplica_;
    /**
     * <pre>
     * Enables/disables preferable using the localhost replica when processing distributed queries.
     * Default: true
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#prefer_localhost_replica)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue prefer_localhost_replica = 145;</code>
     * @return Whether the preferLocalhostReplica field is set.
     */
    @java.lang.Override
    public boolean hasPreferLocalhostReplica() {
      return preferLocalhostReplica_ != null;
    }
    /**
     * <pre>
     * Enables/disables preferable using the localhost replica when processing distributed queries.
     * Default: true
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#prefer_localhost_replica)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue prefer_localhost_replica = 145;</code>
     * @return The preferLocalhostReplica.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getPreferLocalhostReplica() {
      return preferLocalhostReplica_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : preferLocalhostReplica_;
    }
    /**
     * <pre>
     * Enables/disables preferable using the localhost replica when processing distributed queries.
     * Default: true
     * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#prefer_localhost_replica)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue prefer_localhost_replica = 145;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getPreferLocalhostReplicaOrBuilder() {
      return getPreferLocalhostReplica();
    }

    public static final int COMPILE_FIELD_NUMBER = 44;
    private com.google.protobuf.BoolValue compile_;
    /**
     * <pre>
     * The setting is deprecated and has no effect.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue compile = 44 [deprecated = true];</code>
     * @deprecated
     * @return Whether the compile field is set.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasCompile() {
      return compile_ != null;
    }
    /**
     * <pre>
     * The setting is deprecated and has no effect.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue compile = 44 [deprecated = true];</code>
     * @deprecated
     * @return The compile.
     */
    @java.lang.Override
    @java.lang.Deprecated public com.google.protobuf.BoolValue getCompile() {
      return compile_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : compile_;
    }
    /**
     * <pre>
     * The setting is deprecated and has no effect.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue compile = 44 [deprecated = true];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated public com.google.protobuf.BoolValueOrBuilder getCompileOrBuilder() {
      return getCompile();
    }

    public static final int MIN_COUNT_TO_COMPILE_FIELD_NUMBER = 45;
    private com.google.protobuf.Int64Value minCountToCompile_;
    /**
     * <pre>
     * The setting is deprecated and has no effect.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_count_to_compile = 45 [deprecated = true];</code>
     * @deprecated
     * @return Whether the minCountToCompile field is set.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasMinCountToCompile() {
      return minCountToCompile_ != null;
    }
    /**
     * <pre>
     * The setting is deprecated and has no effect.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_count_to_compile = 45 [deprecated = true];</code>
     * @deprecated
     * @return The minCountToCompile.
     */
    @java.lang.Override
    @java.lang.Deprecated public com.google.protobuf.Int64Value getMinCountToCompile() {
      return minCountToCompile_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : minCountToCompile_;
    }
    /**
     * <pre>
     * The setting is deprecated and has no effect.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value min_count_to_compile = 45 [deprecated = true];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated public com.google.protobuf.Int64ValueOrBuilder getMinCountToCompileOrBuilder() {
      return getMinCountToCompile();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (readonly_ != null) {
        output.writeMessage(1, getReadonly());
      }
      if (allowDdl_ != null) {
        output.writeMessage(2, getAllowDdl());
      }
      if (insertQuorum_ != null) {
        output.writeMessage(3, getInsertQuorum());
      }
      if (insertQuorumTimeout_ != null) {
        output.writeMessage(4, getInsertQuorumTimeout());
      }
      if (selectSequentialConsistency_ != null) {
        output.writeMessage(5, getSelectSequentialConsistency());
      }
      if (maxReplicaDelayForDistributedQueries_ != null) {
        output.writeMessage(6, getMaxReplicaDelayForDistributedQueries());
      }
      if (fallbackToStaleReplicasForDistributedQueries_ != null) {
        output.writeMessage(7, getFallbackToStaleReplicasForDistributedQueries());
      }
      if (maxThreads_ != null) {
        output.writeMessage(8, getMaxThreads());
      }
      if (maxBlockSize_ != null) {
        output.writeMessage(9, getMaxBlockSize());
      }
      if (maxInsertBlockSize_ != null) {
        output.writeMessage(10, getMaxInsertBlockSize());
      }
      if (maxMemoryUsage_ != null) {
        output.writeMessage(11, getMaxMemoryUsage());
      }
      if (maxMemoryUsageForUser_ != null) {
        output.writeMessage(12, getMaxMemoryUsageForUser());
      }
      if (maxRowsToRead_ != null) {
        output.writeMessage(13, getMaxRowsToRead());
      }
      if (maxBytesToRead_ != null) {
        output.writeMessage(14, getMaxBytesToRead());
      }
      if (readOverflowMode_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.OVERFLOW_MODE_UNSPECIFIED.getNumber()) {
        output.writeEnum(15, readOverflowMode_);
      }
      if (maxRowsToGroupBy_ != null) {
        output.writeMessage(16, getMaxRowsToGroupBy());
      }
      if (groupByOverflowMode_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.GroupByOverflowMode.GROUP_BY_OVERFLOW_MODE_UNSPECIFIED.getNumber()) {
        output.writeEnum(17, groupByOverflowMode_);
      }
      if (maxRowsToSort_ != null) {
        output.writeMessage(18, getMaxRowsToSort());
      }
      if (maxBytesToSort_ != null) {
        output.writeMessage(19, getMaxBytesToSort());
      }
      if (sortOverflowMode_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.OVERFLOW_MODE_UNSPECIFIED.getNumber()) {
        output.writeEnum(20, sortOverflowMode_);
      }
      if (maxResultRows_ != null) {
        output.writeMessage(21, getMaxResultRows());
      }
      if (maxResultBytes_ != null) {
        output.writeMessage(22, getMaxResultBytes());
      }
      if (resultOverflowMode_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.OVERFLOW_MODE_UNSPECIFIED.getNumber()) {
        output.writeEnum(23, resultOverflowMode_);
      }
      if (maxRowsInDistinct_ != null) {
        output.writeMessage(24, getMaxRowsInDistinct());
      }
      if (maxBytesInDistinct_ != null) {
        output.writeMessage(25, getMaxBytesInDistinct());
      }
      if (distinctOverflowMode_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.OVERFLOW_MODE_UNSPECIFIED.getNumber()) {
        output.writeEnum(26, distinctOverflowMode_);
      }
      if (maxRowsToTransfer_ != null) {
        output.writeMessage(27, getMaxRowsToTransfer());
      }
      if (maxBytesToTransfer_ != null) {
        output.writeMessage(28, getMaxBytesToTransfer());
      }
      if (transferOverflowMode_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.OVERFLOW_MODE_UNSPECIFIED.getNumber()) {
        output.writeEnum(29, transferOverflowMode_);
      }
      if (maxExecutionTime_ != null) {
        output.writeMessage(30, getMaxExecutionTime());
      }
      if (timeoutOverflowMode_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.OVERFLOW_MODE_UNSPECIFIED.getNumber()) {
        output.writeEnum(31, timeoutOverflowMode_);
      }
      if (maxColumnsToRead_ != null) {
        output.writeMessage(32, getMaxColumnsToRead());
      }
      if (maxTemporaryColumns_ != null) {
        output.writeMessage(33, getMaxTemporaryColumns());
      }
      if (maxTemporaryNonConstColumns_ != null) {
        output.writeMessage(34, getMaxTemporaryNonConstColumns());
      }
      if (maxQuerySize_ != null) {
        output.writeMessage(35, getMaxQuerySize());
      }
      if (maxAstDepth_ != null) {
        output.writeMessage(36, getMaxAstDepth());
      }
      if (maxAstElements_ != null) {
        output.writeMessage(37, getMaxAstElements());
      }
      if (maxExpandedAstElements_ != null) {
        output.writeMessage(38, getMaxExpandedAstElements());
      }
      if (connectTimeout_ != null) {
        output.writeMessage(39, getConnectTimeout());
      }
      if (receiveTimeout_ != null) {
        output.writeMessage(40, getReceiveTimeout());
      }
      if (sendTimeout_ != null) {
        output.writeMessage(41, getSendTimeout());
      }
      if (replicationAlterPartitionsSync_ != null) {
        output.writeMessage(42, getReplicationAlterPartitionsSync());
      }
      if (distributedProductMode_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DistributedProductMode.DISTRIBUTED_PRODUCT_MODE_UNSPECIFIED.getNumber()) {
        output.writeEnum(43, distributedProductMode_);
      }
      if (compile_ != null) {
        output.writeMessage(44, getCompile());
      }
      if (minCountToCompile_ != null) {
        output.writeMessage(45, getMinCountToCompile());
      }
      if (compileExpressions_ != null) {
        output.writeMessage(46, getCompileExpressions());
      }
      if (minCountToCompileExpression_ != null) {
        output.writeMessage(47, getMinCountToCompileExpression());
      }
      if (minInsertBlockSizeRows_ != null) {
        output.writeMessage(48, getMinInsertBlockSizeRows());
      }
      if (minInsertBlockSizeBytes_ != null) {
        output.writeMessage(49, getMinInsertBlockSizeBytes());
      }
      if (minBytesToUseDirectIo_ != null) {
        output.writeMessage(50, getMinBytesToUseDirectIo());
      }
      if (useUncompressedCache_ != null) {
        output.writeMessage(51, getUseUncompressedCache());
      }
      if (mergeTreeMaxRowsToUseCache_ != null) {
        output.writeMessage(52, getMergeTreeMaxRowsToUseCache());
      }
      if (mergeTreeMaxBytesToUseCache_ != null) {
        output.writeMessage(53, getMergeTreeMaxBytesToUseCache());
      }
      if (mergeTreeMinRowsForConcurrentRead_ != null) {
        output.writeMessage(54, getMergeTreeMinRowsForConcurrentRead());
      }
      if (mergeTreeMinBytesForConcurrentRead_ != null) {
        output.writeMessage(55, getMergeTreeMinBytesForConcurrentRead());
      }
      if (priority_ != null) {
        output.writeMessage(56, getPriority());
      }
      if (maxNetworkBandwidth_ != null) {
        output.writeMessage(57, getMaxNetworkBandwidth());
      }
      if (maxNetworkBandwidthForUser_ != null) {
        output.writeMessage(58, getMaxNetworkBandwidthForUser());
      }
      if (forceIndexByDate_ != null) {
        output.writeMessage(59, getForceIndexByDate());
      }
      if (forcePrimaryKey_ != null) {
        output.writeMessage(60, getForcePrimaryKey());
      }
      if (inputFormatValuesInterpretExpressions_ != null) {
        output.writeMessage(61, getInputFormatValuesInterpretExpressions());
      }
      if (inputFormatDefaultsForOmittedFields_ != null) {
        output.writeMessage(62, getInputFormatDefaultsForOmittedFields());
      }
      if (outputFormatJsonQuote64BitIntegers_ != null) {
        output.writeMessage(63, getOutputFormatJsonQuote64BitIntegers());
      }
      if (outputFormatJsonQuoteDenormals_ != null) {
        output.writeMessage(64, getOutputFormatJsonQuoteDenormals());
      }
      if (httpConnectionTimeout_ != null) {
        output.writeMessage(65, getHttpConnectionTimeout());
      }
      if (httpReceiveTimeout_ != null) {
        output.writeMessage(66, getHttpReceiveTimeout());
      }
      if (httpSendTimeout_ != null) {
        output.writeMessage(67, getHttpSendTimeout());
      }
      if (enableHttpCompression_ != null) {
        output.writeMessage(68, getEnableHttpCompression());
      }
      if (sendProgressInHttpHeaders_ != null) {
        output.writeMessage(69, getSendProgressInHttpHeaders());
      }
      if (httpHeadersProgressInterval_ != null) {
        output.writeMessage(70, getHttpHeadersProgressInterval());
      }
      if (addHttpCorsHeader_ != null) {
        output.writeMessage(71, getAddHttpCorsHeader());
      }
      if (distributedAggregationMemoryEfficient_ != null) {
        output.writeMessage(72, getDistributedAggregationMemoryEfficient());
      }
      if (distributedDdlTaskTimeout_ != null) {
        output.writeMessage(73, getDistributedDdlTaskTimeout());
      }
      if (maxBytesBeforeExternalGroupBy_ != null) {
        output.writeMessage(74, getMaxBytesBeforeExternalGroupBy());
      }
      if (maxBytesBeforeExternalSort_ != null) {
        output.writeMessage(75, getMaxBytesBeforeExternalSort());
      }
      if (groupByTwoLevelThreshold_ != null) {
        output.writeMessage(76, getGroupByTwoLevelThreshold());
      }
      if (groupByTwoLevelThresholdBytes_ != null) {
        output.writeMessage(77, getGroupByTwoLevelThresholdBytes());
      }
      if (lowCardinalityAllowInNativeFormat_ != null) {
        output.writeMessage(78, getLowCardinalityAllowInNativeFormat());
      }
      if (emptyResultForAggregationByEmptySet_ != null) {
        output.writeMessage(79, getEmptyResultForAggregationByEmptySet());
      }
      if (quotaMode_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.QuotaMode.QUOTA_MODE_UNSPECIFIED.getNumber()) {
        output.writeEnum(80, quotaMode_);
      }
      if (skipUnavailableShards_ != null) {
        output.writeMessage(81, getSkipUnavailableShards());
      }
      if (minExecutionSpeed_ != null) {
        output.writeMessage(84, getMinExecutionSpeed());
      }
      if (minExecutionSpeedBytes_ != null) {
        output.writeMessage(85, getMinExecutionSpeedBytes());
      }
      if (countDistinctImplementation_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.CountDistinctImplementation.COUNT_DISTINCT_IMPLEMENTATION_UNSPECIFIED.getNumber()) {
        output.writeEnum(86, countDistinctImplementation_);
      }
      if (maxRowsInSet_ != null) {
        output.writeMessage(87, getMaxRowsInSet());
      }
      if (maxBytesInSet_ != null) {
        output.writeMessage(88, getMaxBytesInSet());
      }
      if (setOverflowMode_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.OVERFLOW_MODE_UNSPECIFIED.getNumber()) {
        output.writeEnum(89, setOverflowMode_);
      }
      if (maxRowsInJoin_ != null) {
        output.writeMessage(90, getMaxRowsInJoin());
      }
      if (maxBytesInJoin_ != null) {
        output.writeMessage(91, getMaxBytesInJoin());
      }
      if (joinOverflowMode_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.OVERFLOW_MODE_UNSPECIFIED.getNumber()) {
        output.writeEnum(92, joinOverflowMode_);
      }
      if (joinedSubqueryRequiresAlias_ != null) {
        output.writeMessage(93, getJoinedSubqueryRequiresAlias());
      }
      if (joinUseNulls_ != null) {
        output.writeMessage(94, getJoinUseNulls());
      }
      if (transformNullIn_ != null) {
        output.writeMessage(95, getTransformNullIn());
      }
      if (allowIntrospectionFunctions_ != null) {
        output.writeMessage(96, getAllowIntrospectionFunctions());
      }
      if (connectTimeoutWithFailover_ != null) {
        output.writeMessage(97, getConnectTimeoutWithFailover());
      }
      if (timeoutBeforeCheckingExecutionSpeed_ != null) {
        output.writeMessage(98, getTimeoutBeforeCheckingExecutionSpeed());
      }
      if (insertQuorumParallel_ != null) {
        output.writeMessage(99, getInsertQuorumParallel());
      }
      if (insertNullAsDefault_ != null) {
        output.writeMessage(100, getInsertNullAsDefault());
      }
      if (deduplicateBlocksInDependentMaterializedViews_ != null) {
        output.writeMessage(101, getDeduplicateBlocksInDependentMaterializedViews());
      }
      if (maxPartitionsPerInsertBlock_ != null) {
        output.writeMessage(102, getMaxPartitionsPerInsertBlock());
      }
      if (maxConcurrentQueriesForUser_ != null) {
        output.writeMessage(103, getMaxConcurrentQueriesForUser());
      }
      if (getJoinAlgorithmList().size() > 0) {
        output.writeUInt32NoTag(834);
        output.writeUInt32NoTag(joinAlgorithmMemoizedSerializedSize);
      }
      for (int i = 0; i < joinAlgorithm_.size(); i++) {
        output.writeEnumNoTag(joinAlgorithm_.get(i));
      }
      if (anyJoinDistinctRightTableKeys_ != null) {
        output.writeMessage(105, getAnyJoinDistinctRightTableKeys());
      }
      if (inputFormatNullAsDefault_ != null) {
        output.writeMessage(106, getInputFormatNullAsDefault());
      }
      if (dateTimeInputFormat_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DateTimeInputFormat.DATE_TIME_INPUT_FORMAT_UNSPECIFIED.getNumber()) {
        output.writeEnum(107, dateTimeInputFormat_);
      }
      if (inputFormatWithNamesUseHeader_ != null) {
        output.writeMessage(108, getInputFormatWithNamesUseHeader());
      }
      if (dateTimeOutputFormat_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DateTimeOutputFormat.DATE_TIME_OUTPUT_FORMAT_UNSPECIFIED.getNumber()) {
        output.writeEnum(109, dateTimeOutputFormat_);
      }
      if (allowSuspiciousLowCardinalityTypes_ != null) {
        output.writeMessage(110, getAllowSuspiciousLowCardinalityTypes());
      }
      if (cancelHttpReadonlyQueriesOnClientClose_ != null) {
        output.writeMessage(111, getCancelHttpReadonlyQueriesOnClientClose());
      }
      if (maxHttpGetRedirects_ != null) {
        output.writeMessage(112, getMaxHttpGetRedirects());
      }
      if (flattenNested_ != null) {
        output.writeMessage(113, getFlattenNested());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(formatRegexp_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 114, formatRegexp_);
      }
      if (formatRegexpEscapingRule_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.FormatRegexpEscapingRule.FORMAT_REGEXP_ESCAPING_RULE_UNSPECIFIED.getNumber()) {
        output.writeEnum(115, formatRegexpEscapingRule_);
      }
      if (formatRegexpSkipUnmatched_ != null) {
        output.writeMessage(116, getFormatRegexpSkipUnmatched());
      }
      if (asyncInsert_ != null) {
        output.writeMessage(117, getAsyncInsert());
      }
      if (asyncInsertThreads_ != null) {
        output.writeMessage(118, getAsyncInsertThreads());
      }
      if (waitForAsyncInsert_ != null) {
        output.writeMessage(119, getWaitForAsyncInsert());
      }
      if (waitForAsyncInsertTimeout_ != null) {
        output.writeMessage(120, getWaitForAsyncInsertTimeout());
      }
      if (asyncInsertMaxDataSize_ != null) {
        output.writeMessage(121, getAsyncInsertMaxDataSize());
      }
      if (asyncInsertBusyTimeout_ != null) {
        output.writeMessage(122, getAsyncInsertBusyTimeout());
      }
      if (asyncInsertStaleTimeout_ != null) {
        output.writeMessage(123, getAsyncInsertStaleTimeout());
      }
      if (memoryProfilerStep_ != null) {
        output.writeMessage(124, getMemoryProfilerStep());
      }
      if (memoryProfilerSampleProbability_ != null) {
        output.writeMessage(125, getMemoryProfilerSampleProbability());
      }
      if (maxFinalThreads_ != null) {
        output.writeMessage(126, getMaxFinalThreads());
      }
      if (inputFormatParallelParsing_ != null) {
        output.writeMessage(127, getInputFormatParallelParsing());
      }
      if (inputFormatImportNestedJson_ != null) {
        output.writeMessage(128, getInputFormatImportNestedJson());
      }
      if (localFilesystemReadMethod_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.LocalFilesystemReadMethod.LOCAL_FILESYSTEM_READ_METHOD_UNSPECIFIED.getNumber()) {
        output.writeEnum(129, localFilesystemReadMethod_);
      }
      if (maxReadBufferSize_ != null) {
        output.writeMessage(130, getMaxReadBufferSize());
      }
      if (insertKeeperMaxRetries_ != null) {
        output.writeMessage(131, getInsertKeeperMaxRetries());
      }
      if (maxTemporaryDataOnDiskSizeForUser_ != null) {
        output.writeMessage(132, getMaxTemporaryDataOnDiskSizeForUser());
      }
      if (maxTemporaryDataOnDiskSizeForQuery_ != null) {
        output.writeMessage(133, getMaxTemporaryDataOnDiskSizeForQuery());
      }
      if (maxParserDepth_ != null) {
        output.writeMessage(134, getMaxParserDepth());
      }
      if (remoteFilesystemReadMethod_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.RemoteFilesystemReadMethod.REMOTE_FILESYSTEM_READ_METHOD_UNSPECIFIED.getNumber()) {
        output.writeEnum(135, remoteFilesystemReadMethod_);
      }
      if (memoryOvercommitRatioDenominator_ != null) {
        output.writeMessage(136, getMemoryOvercommitRatioDenominator());
      }
      if (memoryOvercommitRatioDenominatorForUser_ != null) {
        output.writeMessage(137, getMemoryOvercommitRatioDenominatorForUser());
      }
      if (memoryUsageOvercommitMaxWaitMicroseconds_ != null) {
        output.writeMessage(138, getMemoryUsageOvercommitMaxWaitMicroseconds());
      }
      if (logQueryThreads_ != null) {
        output.writeMessage(139, getLogQueryThreads());
      }
      if (maxInsertThreads_ != null) {
        output.writeMessage(140, getMaxInsertThreads());
      }
      if (useHedgedRequests_ != null) {
        output.writeMessage(141, getUseHedgedRequests());
      }
      if (idleConnectionTimeout_ != null) {
        output.writeMessage(142, getIdleConnectionTimeout());
      }
      if (hedgedConnectionTimeoutMs_ != null) {
        output.writeMessage(143, getHedgedConnectionTimeoutMs());
      }
      if (loadBalancing_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.LoadBalancing.LOAD_BALANCING_UNSPECIFIED.getNumber()) {
        output.writeEnum(144, loadBalancing_);
      }
      if (preferLocalhostReplica_ != null) {
        output.writeMessage(145, getPreferLocalhostReplica());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (readonly_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getReadonly());
      }
      if (allowDdl_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getAllowDdl());
      }
      if (insertQuorum_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getInsertQuorum());
      }
      if (insertQuorumTimeout_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getInsertQuorumTimeout());
      }
      if (selectSequentialConsistency_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getSelectSequentialConsistency());
      }
      if (maxReplicaDelayForDistributedQueries_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getMaxReplicaDelayForDistributedQueries());
      }
      if (fallbackToStaleReplicasForDistributedQueries_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getFallbackToStaleReplicasForDistributedQueries());
      }
      if (maxThreads_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getMaxThreads());
      }
      if (maxBlockSize_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, getMaxBlockSize());
      }
      if (maxInsertBlockSize_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, getMaxInsertBlockSize());
      }
      if (maxMemoryUsage_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, getMaxMemoryUsage());
      }
      if (maxMemoryUsageForUser_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, getMaxMemoryUsageForUser());
      }
      if (maxRowsToRead_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, getMaxRowsToRead());
      }
      if (maxBytesToRead_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, getMaxBytesToRead());
      }
      if (readOverflowMode_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.OVERFLOW_MODE_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(15, readOverflowMode_);
      }
      if (maxRowsToGroupBy_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, getMaxRowsToGroupBy());
      }
      if (groupByOverflowMode_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.GroupByOverflowMode.GROUP_BY_OVERFLOW_MODE_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(17, groupByOverflowMode_);
      }
      if (maxRowsToSort_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, getMaxRowsToSort());
      }
      if (maxBytesToSort_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, getMaxBytesToSort());
      }
      if (sortOverflowMode_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.OVERFLOW_MODE_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(20, sortOverflowMode_);
      }
      if (maxResultRows_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, getMaxResultRows());
      }
      if (maxResultBytes_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(22, getMaxResultBytes());
      }
      if (resultOverflowMode_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.OVERFLOW_MODE_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(23, resultOverflowMode_);
      }
      if (maxRowsInDistinct_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(24, getMaxRowsInDistinct());
      }
      if (maxBytesInDistinct_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(25, getMaxBytesInDistinct());
      }
      if (distinctOverflowMode_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.OVERFLOW_MODE_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(26, distinctOverflowMode_);
      }
      if (maxRowsToTransfer_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(27, getMaxRowsToTransfer());
      }
      if (maxBytesToTransfer_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(28, getMaxBytesToTransfer());
      }
      if (transferOverflowMode_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.OVERFLOW_MODE_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(29, transferOverflowMode_);
      }
      if (maxExecutionTime_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(30, getMaxExecutionTime());
      }
      if (timeoutOverflowMode_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.OVERFLOW_MODE_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(31, timeoutOverflowMode_);
      }
      if (maxColumnsToRead_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(32, getMaxColumnsToRead());
      }
      if (maxTemporaryColumns_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(33, getMaxTemporaryColumns());
      }
      if (maxTemporaryNonConstColumns_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(34, getMaxTemporaryNonConstColumns());
      }
      if (maxQuerySize_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(35, getMaxQuerySize());
      }
      if (maxAstDepth_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(36, getMaxAstDepth());
      }
      if (maxAstElements_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(37, getMaxAstElements());
      }
      if (maxExpandedAstElements_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(38, getMaxExpandedAstElements());
      }
      if (connectTimeout_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(39, getConnectTimeout());
      }
      if (receiveTimeout_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(40, getReceiveTimeout());
      }
      if (sendTimeout_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(41, getSendTimeout());
      }
      if (replicationAlterPartitionsSync_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(42, getReplicationAlterPartitionsSync());
      }
      if (distributedProductMode_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DistributedProductMode.DISTRIBUTED_PRODUCT_MODE_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(43, distributedProductMode_);
      }
      if (compile_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(44, getCompile());
      }
      if (minCountToCompile_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(45, getMinCountToCompile());
      }
      if (compileExpressions_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(46, getCompileExpressions());
      }
      if (minCountToCompileExpression_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(47, getMinCountToCompileExpression());
      }
      if (minInsertBlockSizeRows_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(48, getMinInsertBlockSizeRows());
      }
      if (minInsertBlockSizeBytes_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(49, getMinInsertBlockSizeBytes());
      }
      if (minBytesToUseDirectIo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(50, getMinBytesToUseDirectIo());
      }
      if (useUncompressedCache_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(51, getUseUncompressedCache());
      }
      if (mergeTreeMaxRowsToUseCache_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(52, getMergeTreeMaxRowsToUseCache());
      }
      if (mergeTreeMaxBytesToUseCache_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(53, getMergeTreeMaxBytesToUseCache());
      }
      if (mergeTreeMinRowsForConcurrentRead_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(54, getMergeTreeMinRowsForConcurrentRead());
      }
      if (mergeTreeMinBytesForConcurrentRead_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(55, getMergeTreeMinBytesForConcurrentRead());
      }
      if (priority_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(56, getPriority());
      }
      if (maxNetworkBandwidth_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(57, getMaxNetworkBandwidth());
      }
      if (maxNetworkBandwidthForUser_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(58, getMaxNetworkBandwidthForUser());
      }
      if (forceIndexByDate_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(59, getForceIndexByDate());
      }
      if (forcePrimaryKey_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(60, getForcePrimaryKey());
      }
      if (inputFormatValuesInterpretExpressions_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(61, getInputFormatValuesInterpretExpressions());
      }
      if (inputFormatDefaultsForOmittedFields_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(62, getInputFormatDefaultsForOmittedFields());
      }
      if (outputFormatJsonQuote64BitIntegers_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(63, getOutputFormatJsonQuote64BitIntegers());
      }
      if (outputFormatJsonQuoteDenormals_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(64, getOutputFormatJsonQuoteDenormals());
      }
      if (httpConnectionTimeout_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(65, getHttpConnectionTimeout());
      }
      if (httpReceiveTimeout_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(66, getHttpReceiveTimeout());
      }
      if (httpSendTimeout_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(67, getHttpSendTimeout());
      }
      if (enableHttpCompression_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(68, getEnableHttpCompression());
      }
      if (sendProgressInHttpHeaders_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(69, getSendProgressInHttpHeaders());
      }
      if (httpHeadersProgressInterval_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(70, getHttpHeadersProgressInterval());
      }
      if (addHttpCorsHeader_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(71, getAddHttpCorsHeader());
      }
      if (distributedAggregationMemoryEfficient_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(72, getDistributedAggregationMemoryEfficient());
      }
      if (distributedDdlTaskTimeout_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(73, getDistributedDdlTaskTimeout());
      }
      if (maxBytesBeforeExternalGroupBy_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(74, getMaxBytesBeforeExternalGroupBy());
      }
      if (maxBytesBeforeExternalSort_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(75, getMaxBytesBeforeExternalSort());
      }
      if (groupByTwoLevelThreshold_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(76, getGroupByTwoLevelThreshold());
      }
      if (groupByTwoLevelThresholdBytes_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(77, getGroupByTwoLevelThresholdBytes());
      }
      if (lowCardinalityAllowInNativeFormat_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(78, getLowCardinalityAllowInNativeFormat());
      }
      if (emptyResultForAggregationByEmptySet_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(79, getEmptyResultForAggregationByEmptySet());
      }
      if (quotaMode_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.QuotaMode.QUOTA_MODE_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(80, quotaMode_);
      }
      if (skipUnavailableShards_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(81, getSkipUnavailableShards());
      }
      if (minExecutionSpeed_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(84, getMinExecutionSpeed());
      }
      if (minExecutionSpeedBytes_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(85, getMinExecutionSpeedBytes());
      }
      if (countDistinctImplementation_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.CountDistinctImplementation.COUNT_DISTINCT_IMPLEMENTATION_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(86, countDistinctImplementation_);
      }
      if (maxRowsInSet_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(87, getMaxRowsInSet());
      }
      if (maxBytesInSet_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(88, getMaxBytesInSet());
      }
      if (setOverflowMode_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.OVERFLOW_MODE_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(89, setOverflowMode_);
      }
      if (maxRowsInJoin_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(90, getMaxRowsInJoin());
      }
      if (maxBytesInJoin_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(91, getMaxBytesInJoin());
      }
      if (joinOverflowMode_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.OVERFLOW_MODE_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(92, joinOverflowMode_);
      }
      if (joinedSubqueryRequiresAlias_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(93, getJoinedSubqueryRequiresAlias());
      }
      if (joinUseNulls_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(94, getJoinUseNulls());
      }
      if (transformNullIn_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(95, getTransformNullIn());
      }
      if (allowIntrospectionFunctions_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(96, getAllowIntrospectionFunctions());
      }
      if (connectTimeoutWithFailover_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(97, getConnectTimeoutWithFailover());
      }
      if (timeoutBeforeCheckingExecutionSpeed_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(98, getTimeoutBeforeCheckingExecutionSpeed());
      }
      if (insertQuorumParallel_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(99, getInsertQuorumParallel());
      }
      if (insertNullAsDefault_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(100, getInsertNullAsDefault());
      }
      if (deduplicateBlocksInDependentMaterializedViews_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(101, getDeduplicateBlocksInDependentMaterializedViews());
      }
      if (maxPartitionsPerInsertBlock_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(102, getMaxPartitionsPerInsertBlock());
      }
      if (maxConcurrentQueriesForUser_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(103, getMaxConcurrentQueriesForUser());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < joinAlgorithm_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(joinAlgorithm_.get(i));
        }
        size += dataSize;
        if (!getJoinAlgorithmList().isEmpty()) {  size += 2;
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(dataSize);
        }joinAlgorithmMemoizedSerializedSize = dataSize;
      }
      if (anyJoinDistinctRightTableKeys_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(105, getAnyJoinDistinctRightTableKeys());
      }
      if (inputFormatNullAsDefault_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(106, getInputFormatNullAsDefault());
      }
      if (dateTimeInputFormat_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DateTimeInputFormat.DATE_TIME_INPUT_FORMAT_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(107, dateTimeInputFormat_);
      }
      if (inputFormatWithNamesUseHeader_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(108, getInputFormatWithNamesUseHeader());
      }
      if (dateTimeOutputFormat_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DateTimeOutputFormat.DATE_TIME_OUTPUT_FORMAT_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(109, dateTimeOutputFormat_);
      }
      if (allowSuspiciousLowCardinalityTypes_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(110, getAllowSuspiciousLowCardinalityTypes());
      }
      if (cancelHttpReadonlyQueriesOnClientClose_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(111, getCancelHttpReadonlyQueriesOnClientClose());
      }
      if (maxHttpGetRedirects_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(112, getMaxHttpGetRedirects());
      }
      if (flattenNested_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(113, getFlattenNested());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(formatRegexp_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(114, formatRegexp_);
      }
      if (formatRegexpEscapingRule_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.FormatRegexpEscapingRule.FORMAT_REGEXP_ESCAPING_RULE_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(115, formatRegexpEscapingRule_);
      }
      if (formatRegexpSkipUnmatched_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(116, getFormatRegexpSkipUnmatched());
      }
      if (asyncInsert_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(117, getAsyncInsert());
      }
      if (asyncInsertThreads_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(118, getAsyncInsertThreads());
      }
      if (waitForAsyncInsert_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(119, getWaitForAsyncInsert());
      }
      if (waitForAsyncInsertTimeout_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(120, getWaitForAsyncInsertTimeout());
      }
      if (asyncInsertMaxDataSize_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(121, getAsyncInsertMaxDataSize());
      }
      if (asyncInsertBusyTimeout_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(122, getAsyncInsertBusyTimeout());
      }
      if (asyncInsertStaleTimeout_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(123, getAsyncInsertStaleTimeout());
      }
      if (memoryProfilerStep_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(124, getMemoryProfilerStep());
      }
      if (memoryProfilerSampleProbability_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(125, getMemoryProfilerSampleProbability());
      }
      if (maxFinalThreads_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(126, getMaxFinalThreads());
      }
      if (inputFormatParallelParsing_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(127, getInputFormatParallelParsing());
      }
      if (inputFormatImportNestedJson_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(128, getInputFormatImportNestedJson());
      }
      if (localFilesystemReadMethod_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.LocalFilesystemReadMethod.LOCAL_FILESYSTEM_READ_METHOD_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(129, localFilesystemReadMethod_);
      }
      if (maxReadBufferSize_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(130, getMaxReadBufferSize());
      }
      if (insertKeeperMaxRetries_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(131, getInsertKeeperMaxRetries());
      }
      if (maxTemporaryDataOnDiskSizeForUser_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(132, getMaxTemporaryDataOnDiskSizeForUser());
      }
      if (maxTemporaryDataOnDiskSizeForQuery_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(133, getMaxTemporaryDataOnDiskSizeForQuery());
      }
      if (maxParserDepth_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(134, getMaxParserDepth());
      }
      if (remoteFilesystemReadMethod_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.RemoteFilesystemReadMethod.REMOTE_FILESYSTEM_READ_METHOD_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(135, remoteFilesystemReadMethod_);
      }
      if (memoryOvercommitRatioDenominator_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(136, getMemoryOvercommitRatioDenominator());
      }
      if (memoryOvercommitRatioDenominatorForUser_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(137, getMemoryOvercommitRatioDenominatorForUser());
      }
      if (memoryUsageOvercommitMaxWaitMicroseconds_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(138, getMemoryUsageOvercommitMaxWaitMicroseconds());
      }
      if (logQueryThreads_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(139, getLogQueryThreads());
      }
      if (maxInsertThreads_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(140, getMaxInsertThreads());
      }
      if (useHedgedRequests_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(141, getUseHedgedRequests());
      }
      if (idleConnectionTimeout_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(142, getIdleConnectionTimeout());
      }
      if (hedgedConnectionTimeoutMs_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(143, getHedgedConnectionTimeoutMs());
      }
      if (loadBalancing_ != yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.LoadBalancing.LOAD_BALANCING_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(144, loadBalancing_);
      }
      if (preferLocalhostReplica_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(145, getPreferLocalhostReplica());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings)) {
        return super.equals(obj);
      }
      yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings other = (yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings) obj;

      if (hasReadonly() != other.hasReadonly()) return false;
      if (hasReadonly()) {
        if (!getReadonly()
            .equals(other.getReadonly())) return false;
      }
      if (hasAllowDdl() != other.hasAllowDdl()) return false;
      if (hasAllowDdl()) {
        if (!getAllowDdl()
            .equals(other.getAllowDdl())) return false;
      }
      if (hasAllowIntrospectionFunctions() != other.hasAllowIntrospectionFunctions()) return false;
      if (hasAllowIntrospectionFunctions()) {
        if (!getAllowIntrospectionFunctions()
            .equals(other.getAllowIntrospectionFunctions())) return false;
      }
      if (hasConnectTimeout() != other.hasConnectTimeout()) return false;
      if (hasConnectTimeout()) {
        if (!getConnectTimeout()
            .equals(other.getConnectTimeout())) return false;
      }
      if (hasConnectTimeoutWithFailover() != other.hasConnectTimeoutWithFailover()) return false;
      if (hasConnectTimeoutWithFailover()) {
        if (!getConnectTimeoutWithFailover()
            .equals(other.getConnectTimeoutWithFailover())) return false;
      }
      if (hasReceiveTimeout() != other.hasReceiveTimeout()) return false;
      if (hasReceiveTimeout()) {
        if (!getReceiveTimeout()
            .equals(other.getReceiveTimeout())) return false;
      }
      if (hasSendTimeout() != other.hasSendTimeout()) return false;
      if (hasSendTimeout()) {
        if (!getSendTimeout()
            .equals(other.getSendTimeout())) return false;
      }
      if (hasTimeoutBeforeCheckingExecutionSpeed() != other.hasTimeoutBeforeCheckingExecutionSpeed()) return false;
      if (hasTimeoutBeforeCheckingExecutionSpeed()) {
        if (!getTimeoutBeforeCheckingExecutionSpeed()
            .equals(other.getTimeoutBeforeCheckingExecutionSpeed())) return false;
      }
      if (hasInsertQuorum() != other.hasInsertQuorum()) return false;
      if (hasInsertQuorum()) {
        if (!getInsertQuorum()
            .equals(other.getInsertQuorum())) return false;
      }
      if (hasInsertQuorumTimeout() != other.hasInsertQuorumTimeout()) return false;
      if (hasInsertQuorumTimeout()) {
        if (!getInsertQuorumTimeout()
            .equals(other.getInsertQuorumTimeout())) return false;
      }
      if (hasInsertQuorumParallel() != other.hasInsertQuorumParallel()) return false;
      if (hasInsertQuorumParallel()) {
        if (!getInsertQuorumParallel()
            .equals(other.getInsertQuorumParallel())) return false;
      }
      if (hasInsertNullAsDefault() != other.hasInsertNullAsDefault()) return false;
      if (hasInsertNullAsDefault()) {
        if (!getInsertNullAsDefault()
            .equals(other.getInsertNullAsDefault())) return false;
      }
      if (hasSelectSequentialConsistency() != other.hasSelectSequentialConsistency()) return false;
      if (hasSelectSequentialConsistency()) {
        if (!getSelectSequentialConsistency()
            .equals(other.getSelectSequentialConsistency())) return false;
      }
      if (hasDeduplicateBlocksInDependentMaterializedViews() != other.hasDeduplicateBlocksInDependentMaterializedViews()) return false;
      if (hasDeduplicateBlocksInDependentMaterializedViews()) {
        if (!getDeduplicateBlocksInDependentMaterializedViews()
            .equals(other.getDeduplicateBlocksInDependentMaterializedViews())) return false;
      }
      if (hasReplicationAlterPartitionsSync() != other.hasReplicationAlterPartitionsSync()) return false;
      if (hasReplicationAlterPartitionsSync()) {
        if (!getReplicationAlterPartitionsSync()
            .equals(other.getReplicationAlterPartitionsSync())) return false;
      }
      if (hasMaxReplicaDelayForDistributedQueries() != other.hasMaxReplicaDelayForDistributedQueries()) return false;
      if (hasMaxReplicaDelayForDistributedQueries()) {
        if (!getMaxReplicaDelayForDistributedQueries()
            .equals(other.getMaxReplicaDelayForDistributedQueries())) return false;
      }
      if (hasFallbackToStaleReplicasForDistributedQueries() != other.hasFallbackToStaleReplicasForDistributedQueries()) return false;
      if (hasFallbackToStaleReplicasForDistributedQueries()) {
        if (!getFallbackToStaleReplicasForDistributedQueries()
            .equals(other.getFallbackToStaleReplicasForDistributedQueries())) return false;
      }
      if (distributedProductMode_ != other.distributedProductMode_) return false;
      if (hasDistributedAggregationMemoryEfficient() != other.hasDistributedAggregationMemoryEfficient()) return false;
      if (hasDistributedAggregationMemoryEfficient()) {
        if (!getDistributedAggregationMemoryEfficient()
            .equals(other.getDistributedAggregationMemoryEfficient())) return false;
      }
      if (hasDistributedDdlTaskTimeout() != other.hasDistributedDdlTaskTimeout()) return false;
      if (hasDistributedDdlTaskTimeout()) {
        if (!getDistributedDdlTaskTimeout()
            .equals(other.getDistributedDdlTaskTimeout())) return false;
      }
      if (hasSkipUnavailableShards() != other.hasSkipUnavailableShards()) return false;
      if (hasSkipUnavailableShards()) {
        if (!getSkipUnavailableShards()
            .equals(other.getSkipUnavailableShards())) return false;
      }
      if (hasCompileExpressions() != other.hasCompileExpressions()) return false;
      if (hasCompileExpressions()) {
        if (!getCompileExpressions()
            .equals(other.getCompileExpressions())) return false;
      }
      if (hasMinCountToCompileExpression() != other.hasMinCountToCompileExpression()) return false;
      if (hasMinCountToCompileExpression()) {
        if (!getMinCountToCompileExpression()
            .equals(other.getMinCountToCompileExpression())) return false;
      }
      if (hasMaxBlockSize() != other.hasMaxBlockSize()) return false;
      if (hasMaxBlockSize()) {
        if (!getMaxBlockSize()
            .equals(other.getMaxBlockSize())) return false;
      }
      if (hasMinInsertBlockSizeRows() != other.hasMinInsertBlockSizeRows()) return false;
      if (hasMinInsertBlockSizeRows()) {
        if (!getMinInsertBlockSizeRows()
            .equals(other.getMinInsertBlockSizeRows())) return false;
      }
      if (hasMinInsertBlockSizeBytes() != other.hasMinInsertBlockSizeBytes()) return false;
      if (hasMinInsertBlockSizeBytes()) {
        if (!getMinInsertBlockSizeBytes()
            .equals(other.getMinInsertBlockSizeBytes())) return false;
      }
      if (hasMaxInsertBlockSize() != other.hasMaxInsertBlockSize()) return false;
      if (hasMaxInsertBlockSize()) {
        if (!getMaxInsertBlockSize()
            .equals(other.getMaxInsertBlockSize())) return false;
      }
      if (hasMinBytesToUseDirectIo() != other.hasMinBytesToUseDirectIo()) return false;
      if (hasMinBytesToUseDirectIo()) {
        if (!getMinBytesToUseDirectIo()
            .equals(other.getMinBytesToUseDirectIo())) return false;
      }
      if (hasUseUncompressedCache() != other.hasUseUncompressedCache()) return false;
      if (hasUseUncompressedCache()) {
        if (!getUseUncompressedCache()
            .equals(other.getUseUncompressedCache())) return false;
      }
      if (hasMergeTreeMaxRowsToUseCache() != other.hasMergeTreeMaxRowsToUseCache()) return false;
      if (hasMergeTreeMaxRowsToUseCache()) {
        if (!getMergeTreeMaxRowsToUseCache()
            .equals(other.getMergeTreeMaxRowsToUseCache())) return false;
      }
      if (hasMergeTreeMaxBytesToUseCache() != other.hasMergeTreeMaxBytesToUseCache()) return false;
      if (hasMergeTreeMaxBytesToUseCache()) {
        if (!getMergeTreeMaxBytesToUseCache()
            .equals(other.getMergeTreeMaxBytesToUseCache())) return false;
      }
      if (hasMergeTreeMinRowsForConcurrentRead() != other.hasMergeTreeMinRowsForConcurrentRead()) return false;
      if (hasMergeTreeMinRowsForConcurrentRead()) {
        if (!getMergeTreeMinRowsForConcurrentRead()
            .equals(other.getMergeTreeMinRowsForConcurrentRead())) return false;
      }
      if (hasMergeTreeMinBytesForConcurrentRead() != other.hasMergeTreeMinBytesForConcurrentRead()) return false;
      if (hasMergeTreeMinBytesForConcurrentRead()) {
        if (!getMergeTreeMinBytesForConcurrentRead()
            .equals(other.getMergeTreeMinBytesForConcurrentRead())) return false;
      }
      if (hasMaxBytesBeforeExternalGroupBy() != other.hasMaxBytesBeforeExternalGroupBy()) return false;
      if (hasMaxBytesBeforeExternalGroupBy()) {
        if (!getMaxBytesBeforeExternalGroupBy()
            .equals(other.getMaxBytesBeforeExternalGroupBy())) return false;
      }
      if (hasMaxBytesBeforeExternalSort() != other.hasMaxBytesBeforeExternalSort()) return false;
      if (hasMaxBytesBeforeExternalSort()) {
        if (!getMaxBytesBeforeExternalSort()
            .equals(other.getMaxBytesBeforeExternalSort())) return false;
      }
      if (hasGroupByTwoLevelThreshold() != other.hasGroupByTwoLevelThreshold()) return false;
      if (hasGroupByTwoLevelThreshold()) {
        if (!getGroupByTwoLevelThreshold()
            .equals(other.getGroupByTwoLevelThreshold())) return false;
      }
      if (hasGroupByTwoLevelThresholdBytes() != other.hasGroupByTwoLevelThresholdBytes()) return false;
      if (hasGroupByTwoLevelThresholdBytes()) {
        if (!getGroupByTwoLevelThresholdBytes()
            .equals(other.getGroupByTwoLevelThresholdBytes())) return false;
      }
      if (hasPriority() != other.hasPriority()) return false;
      if (hasPriority()) {
        if (!getPriority()
            .equals(other.getPriority())) return false;
      }
      if (hasMaxThreads() != other.hasMaxThreads()) return false;
      if (hasMaxThreads()) {
        if (!getMaxThreads()
            .equals(other.getMaxThreads())) return false;
      }
      if (hasMaxMemoryUsage() != other.hasMaxMemoryUsage()) return false;
      if (hasMaxMemoryUsage()) {
        if (!getMaxMemoryUsage()
            .equals(other.getMaxMemoryUsage())) return false;
      }
      if (hasMaxMemoryUsageForUser() != other.hasMaxMemoryUsageForUser()) return false;
      if (hasMaxMemoryUsageForUser()) {
        if (!getMaxMemoryUsageForUser()
            .equals(other.getMaxMemoryUsageForUser())) return false;
      }
      if (hasMaxNetworkBandwidth() != other.hasMaxNetworkBandwidth()) return false;
      if (hasMaxNetworkBandwidth()) {
        if (!getMaxNetworkBandwidth()
            .equals(other.getMaxNetworkBandwidth())) return false;
      }
      if (hasMaxNetworkBandwidthForUser() != other.hasMaxNetworkBandwidthForUser()) return false;
      if (hasMaxNetworkBandwidthForUser()) {
        if (!getMaxNetworkBandwidthForUser()
            .equals(other.getMaxNetworkBandwidthForUser())) return false;
      }
      if (hasMaxPartitionsPerInsertBlock() != other.hasMaxPartitionsPerInsertBlock()) return false;
      if (hasMaxPartitionsPerInsertBlock()) {
        if (!getMaxPartitionsPerInsertBlock()
            .equals(other.getMaxPartitionsPerInsertBlock())) return false;
      }
      if (hasMaxConcurrentQueriesForUser() != other.hasMaxConcurrentQueriesForUser()) return false;
      if (hasMaxConcurrentQueriesForUser()) {
        if (!getMaxConcurrentQueriesForUser()
            .equals(other.getMaxConcurrentQueriesForUser())) return false;
      }
      if (hasForceIndexByDate() != other.hasForceIndexByDate()) return false;
      if (hasForceIndexByDate()) {
        if (!getForceIndexByDate()
            .equals(other.getForceIndexByDate())) return false;
      }
      if (hasForcePrimaryKey() != other.hasForcePrimaryKey()) return false;
      if (hasForcePrimaryKey()) {
        if (!getForcePrimaryKey()
            .equals(other.getForcePrimaryKey())) return false;
      }
      if (hasMaxRowsToRead() != other.hasMaxRowsToRead()) return false;
      if (hasMaxRowsToRead()) {
        if (!getMaxRowsToRead()
            .equals(other.getMaxRowsToRead())) return false;
      }
      if (hasMaxBytesToRead() != other.hasMaxBytesToRead()) return false;
      if (hasMaxBytesToRead()) {
        if (!getMaxBytesToRead()
            .equals(other.getMaxBytesToRead())) return false;
      }
      if (readOverflowMode_ != other.readOverflowMode_) return false;
      if (hasMaxRowsToGroupBy() != other.hasMaxRowsToGroupBy()) return false;
      if (hasMaxRowsToGroupBy()) {
        if (!getMaxRowsToGroupBy()
            .equals(other.getMaxRowsToGroupBy())) return false;
      }
      if (groupByOverflowMode_ != other.groupByOverflowMode_) return false;
      if (hasMaxRowsToSort() != other.hasMaxRowsToSort()) return false;
      if (hasMaxRowsToSort()) {
        if (!getMaxRowsToSort()
            .equals(other.getMaxRowsToSort())) return false;
      }
      if (hasMaxBytesToSort() != other.hasMaxBytesToSort()) return false;
      if (hasMaxBytesToSort()) {
        if (!getMaxBytesToSort()
            .equals(other.getMaxBytesToSort())) return false;
      }
      if (sortOverflowMode_ != other.sortOverflowMode_) return false;
      if (hasMaxResultRows() != other.hasMaxResultRows()) return false;
      if (hasMaxResultRows()) {
        if (!getMaxResultRows()
            .equals(other.getMaxResultRows())) return false;
      }
      if (hasMaxResultBytes() != other.hasMaxResultBytes()) return false;
      if (hasMaxResultBytes()) {
        if (!getMaxResultBytes()
            .equals(other.getMaxResultBytes())) return false;
      }
      if (resultOverflowMode_ != other.resultOverflowMode_) return false;
      if (hasMaxRowsInDistinct() != other.hasMaxRowsInDistinct()) return false;
      if (hasMaxRowsInDistinct()) {
        if (!getMaxRowsInDistinct()
            .equals(other.getMaxRowsInDistinct())) return false;
      }
      if (hasMaxBytesInDistinct() != other.hasMaxBytesInDistinct()) return false;
      if (hasMaxBytesInDistinct()) {
        if (!getMaxBytesInDistinct()
            .equals(other.getMaxBytesInDistinct())) return false;
      }
      if (distinctOverflowMode_ != other.distinctOverflowMode_) return false;
      if (hasMaxRowsToTransfer() != other.hasMaxRowsToTransfer()) return false;
      if (hasMaxRowsToTransfer()) {
        if (!getMaxRowsToTransfer()
            .equals(other.getMaxRowsToTransfer())) return false;
      }
      if (hasMaxBytesToTransfer() != other.hasMaxBytesToTransfer()) return false;
      if (hasMaxBytesToTransfer()) {
        if (!getMaxBytesToTransfer()
            .equals(other.getMaxBytesToTransfer())) return false;
      }
      if (transferOverflowMode_ != other.transferOverflowMode_) return false;
      if (hasMaxExecutionTime() != other.hasMaxExecutionTime()) return false;
      if (hasMaxExecutionTime()) {
        if (!getMaxExecutionTime()
            .equals(other.getMaxExecutionTime())) return false;
      }
      if (timeoutOverflowMode_ != other.timeoutOverflowMode_) return false;
      if (hasMaxRowsInSet() != other.hasMaxRowsInSet()) return false;
      if (hasMaxRowsInSet()) {
        if (!getMaxRowsInSet()
            .equals(other.getMaxRowsInSet())) return false;
      }
      if (hasMaxBytesInSet() != other.hasMaxBytesInSet()) return false;
      if (hasMaxBytesInSet()) {
        if (!getMaxBytesInSet()
            .equals(other.getMaxBytesInSet())) return false;
      }
      if (setOverflowMode_ != other.setOverflowMode_) return false;
      if (hasMaxRowsInJoin() != other.hasMaxRowsInJoin()) return false;
      if (hasMaxRowsInJoin()) {
        if (!getMaxRowsInJoin()
            .equals(other.getMaxRowsInJoin())) return false;
      }
      if (hasMaxBytesInJoin() != other.hasMaxBytesInJoin()) return false;
      if (hasMaxBytesInJoin()) {
        if (!getMaxBytesInJoin()
            .equals(other.getMaxBytesInJoin())) return false;
      }
      if (joinOverflowMode_ != other.joinOverflowMode_) return false;
      if (!joinAlgorithm_.equals(other.joinAlgorithm_)) return false;
      if (hasAnyJoinDistinctRightTableKeys() != other.hasAnyJoinDistinctRightTableKeys()) return false;
      if (hasAnyJoinDistinctRightTableKeys()) {
        if (!getAnyJoinDistinctRightTableKeys()
            .equals(other.getAnyJoinDistinctRightTableKeys())) return false;
      }
      if (hasMaxColumnsToRead() != other.hasMaxColumnsToRead()) return false;
      if (hasMaxColumnsToRead()) {
        if (!getMaxColumnsToRead()
            .equals(other.getMaxColumnsToRead())) return false;
      }
      if (hasMaxTemporaryColumns() != other.hasMaxTemporaryColumns()) return false;
      if (hasMaxTemporaryColumns()) {
        if (!getMaxTemporaryColumns()
            .equals(other.getMaxTemporaryColumns())) return false;
      }
      if (hasMaxTemporaryNonConstColumns() != other.hasMaxTemporaryNonConstColumns()) return false;
      if (hasMaxTemporaryNonConstColumns()) {
        if (!getMaxTemporaryNonConstColumns()
            .equals(other.getMaxTemporaryNonConstColumns())) return false;
      }
      if (hasMaxQuerySize() != other.hasMaxQuerySize()) return false;
      if (hasMaxQuerySize()) {
        if (!getMaxQuerySize()
            .equals(other.getMaxQuerySize())) return false;
      }
      if (hasMaxAstDepth() != other.hasMaxAstDepth()) return false;
      if (hasMaxAstDepth()) {
        if (!getMaxAstDepth()
            .equals(other.getMaxAstDepth())) return false;
      }
      if (hasMaxAstElements() != other.hasMaxAstElements()) return false;
      if (hasMaxAstElements()) {
        if (!getMaxAstElements()
            .equals(other.getMaxAstElements())) return false;
      }
      if (hasMaxExpandedAstElements() != other.hasMaxExpandedAstElements()) return false;
      if (hasMaxExpandedAstElements()) {
        if (!getMaxExpandedAstElements()
            .equals(other.getMaxExpandedAstElements())) return false;
      }
      if (hasMinExecutionSpeed() != other.hasMinExecutionSpeed()) return false;
      if (hasMinExecutionSpeed()) {
        if (!getMinExecutionSpeed()
            .equals(other.getMinExecutionSpeed())) return false;
      }
      if (hasMinExecutionSpeedBytes() != other.hasMinExecutionSpeedBytes()) return false;
      if (hasMinExecutionSpeedBytes()) {
        if (!getMinExecutionSpeedBytes()
            .equals(other.getMinExecutionSpeedBytes())) return false;
      }
      if (countDistinctImplementation_ != other.countDistinctImplementation_) return false;
      if (hasInputFormatValuesInterpretExpressions() != other.hasInputFormatValuesInterpretExpressions()) return false;
      if (hasInputFormatValuesInterpretExpressions()) {
        if (!getInputFormatValuesInterpretExpressions()
            .equals(other.getInputFormatValuesInterpretExpressions())) return false;
      }
      if (hasInputFormatDefaultsForOmittedFields() != other.hasInputFormatDefaultsForOmittedFields()) return false;
      if (hasInputFormatDefaultsForOmittedFields()) {
        if (!getInputFormatDefaultsForOmittedFields()
            .equals(other.getInputFormatDefaultsForOmittedFields())) return false;
      }
      if (hasInputFormatNullAsDefault() != other.hasInputFormatNullAsDefault()) return false;
      if (hasInputFormatNullAsDefault()) {
        if (!getInputFormatNullAsDefault()
            .equals(other.getInputFormatNullAsDefault())) return false;
      }
      if (dateTimeInputFormat_ != other.dateTimeInputFormat_) return false;
      if (hasInputFormatWithNamesUseHeader() != other.hasInputFormatWithNamesUseHeader()) return false;
      if (hasInputFormatWithNamesUseHeader()) {
        if (!getInputFormatWithNamesUseHeader()
            .equals(other.getInputFormatWithNamesUseHeader())) return false;
      }
      if (hasOutputFormatJsonQuote64BitIntegers() != other.hasOutputFormatJsonQuote64BitIntegers()) return false;
      if (hasOutputFormatJsonQuote64BitIntegers()) {
        if (!getOutputFormatJsonQuote64BitIntegers()
            .equals(other.getOutputFormatJsonQuote64BitIntegers())) return false;
      }
      if (hasOutputFormatJsonQuoteDenormals() != other.hasOutputFormatJsonQuoteDenormals()) return false;
      if (hasOutputFormatJsonQuoteDenormals()) {
        if (!getOutputFormatJsonQuoteDenormals()
            .equals(other.getOutputFormatJsonQuoteDenormals())) return false;
      }
      if (dateTimeOutputFormat_ != other.dateTimeOutputFormat_) return false;
      if (hasLowCardinalityAllowInNativeFormat() != other.hasLowCardinalityAllowInNativeFormat()) return false;
      if (hasLowCardinalityAllowInNativeFormat()) {
        if (!getLowCardinalityAllowInNativeFormat()
            .equals(other.getLowCardinalityAllowInNativeFormat())) return false;
      }
      if (hasAllowSuspiciousLowCardinalityTypes() != other.hasAllowSuspiciousLowCardinalityTypes()) return false;
      if (hasAllowSuspiciousLowCardinalityTypes()) {
        if (!getAllowSuspiciousLowCardinalityTypes()
            .equals(other.getAllowSuspiciousLowCardinalityTypes())) return false;
      }
      if (hasEmptyResultForAggregationByEmptySet() != other.hasEmptyResultForAggregationByEmptySet()) return false;
      if (hasEmptyResultForAggregationByEmptySet()) {
        if (!getEmptyResultForAggregationByEmptySet()
            .equals(other.getEmptyResultForAggregationByEmptySet())) return false;
      }
      if (hasHttpConnectionTimeout() != other.hasHttpConnectionTimeout()) return false;
      if (hasHttpConnectionTimeout()) {
        if (!getHttpConnectionTimeout()
            .equals(other.getHttpConnectionTimeout())) return false;
      }
      if (hasHttpReceiveTimeout() != other.hasHttpReceiveTimeout()) return false;
      if (hasHttpReceiveTimeout()) {
        if (!getHttpReceiveTimeout()
            .equals(other.getHttpReceiveTimeout())) return false;
      }
      if (hasHttpSendTimeout() != other.hasHttpSendTimeout()) return false;
      if (hasHttpSendTimeout()) {
        if (!getHttpSendTimeout()
            .equals(other.getHttpSendTimeout())) return false;
      }
      if (hasEnableHttpCompression() != other.hasEnableHttpCompression()) return false;
      if (hasEnableHttpCompression()) {
        if (!getEnableHttpCompression()
            .equals(other.getEnableHttpCompression())) return false;
      }
      if (hasSendProgressInHttpHeaders() != other.hasSendProgressInHttpHeaders()) return false;
      if (hasSendProgressInHttpHeaders()) {
        if (!getSendProgressInHttpHeaders()
            .equals(other.getSendProgressInHttpHeaders())) return false;
      }
      if (hasHttpHeadersProgressInterval() != other.hasHttpHeadersProgressInterval()) return false;
      if (hasHttpHeadersProgressInterval()) {
        if (!getHttpHeadersProgressInterval()
            .equals(other.getHttpHeadersProgressInterval())) return false;
      }
      if (hasAddHttpCorsHeader() != other.hasAddHttpCorsHeader()) return false;
      if (hasAddHttpCorsHeader()) {
        if (!getAddHttpCorsHeader()
            .equals(other.getAddHttpCorsHeader())) return false;
      }
      if (hasCancelHttpReadonlyQueriesOnClientClose() != other.hasCancelHttpReadonlyQueriesOnClientClose()) return false;
      if (hasCancelHttpReadonlyQueriesOnClientClose()) {
        if (!getCancelHttpReadonlyQueriesOnClientClose()
            .equals(other.getCancelHttpReadonlyQueriesOnClientClose())) return false;
      }
      if (hasMaxHttpGetRedirects() != other.hasMaxHttpGetRedirects()) return false;
      if (hasMaxHttpGetRedirects()) {
        if (!getMaxHttpGetRedirects()
            .equals(other.getMaxHttpGetRedirects())) return false;
      }
      if (hasJoinedSubqueryRequiresAlias() != other.hasJoinedSubqueryRequiresAlias()) return false;
      if (hasJoinedSubqueryRequiresAlias()) {
        if (!getJoinedSubqueryRequiresAlias()
            .equals(other.getJoinedSubqueryRequiresAlias())) return false;
      }
      if (hasJoinUseNulls() != other.hasJoinUseNulls()) return false;
      if (hasJoinUseNulls()) {
        if (!getJoinUseNulls()
            .equals(other.getJoinUseNulls())) return false;
      }
      if (hasTransformNullIn() != other.hasTransformNullIn()) return false;
      if (hasTransformNullIn()) {
        if (!getTransformNullIn()
            .equals(other.getTransformNullIn())) return false;
      }
      if (quotaMode_ != other.quotaMode_) return false;
      if (hasFlattenNested() != other.hasFlattenNested()) return false;
      if (hasFlattenNested()) {
        if (!getFlattenNested()
            .equals(other.getFlattenNested())) return false;
      }
      if (!getFormatRegexp()
          .equals(other.getFormatRegexp())) return false;
      if (formatRegexpEscapingRule_ != other.formatRegexpEscapingRule_) return false;
      if (hasFormatRegexpSkipUnmatched() != other.hasFormatRegexpSkipUnmatched()) return false;
      if (hasFormatRegexpSkipUnmatched()) {
        if (!getFormatRegexpSkipUnmatched()
            .equals(other.getFormatRegexpSkipUnmatched())) return false;
      }
      if (hasAsyncInsert() != other.hasAsyncInsert()) return false;
      if (hasAsyncInsert()) {
        if (!getAsyncInsert()
            .equals(other.getAsyncInsert())) return false;
      }
      if (hasAsyncInsertThreads() != other.hasAsyncInsertThreads()) return false;
      if (hasAsyncInsertThreads()) {
        if (!getAsyncInsertThreads()
            .equals(other.getAsyncInsertThreads())) return false;
      }
      if (hasWaitForAsyncInsert() != other.hasWaitForAsyncInsert()) return false;
      if (hasWaitForAsyncInsert()) {
        if (!getWaitForAsyncInsert()
            .equals(other.getWaitForAsyncInsert())) return false;
      }
      if (hasWaitForAsyncInsertTimeout() != other.hasWaitForAsyncInsertTimeout()) return false;
      if (hasWaitForAsyncInsertTimeout()) {
        if (!getWaitForAsyncInsertTimeout()
            .equals(other.getWaitForAsyncInsertTimeout())) return false;
      }
      if (hasAsyncInsertMaxDataSize() != other.hasAsyncInsertMaxDataSize()) return false;
      if (hasAsyncInsertMaxDataSize()) {
        if (!getAsyncInsertMaxDataSize()
            .equals(other.getAsyncInsertMaxDataSize())) return false;
      }
      if (hasAsyncInsertBusyTimeout() != other.hasAsyncInsertBusyTimeout()) return false;
      if (hasAsyncInsertBusyTimeout()) {
        if (!getAsyncInsertBusyTimeout()
            .equals(other.getAsyncInsertBusyTimeout())) return false;
      }
      if (hasAsyncInsertStaleTimeout() != other.hasAsyncInsertStaleTimeout()) return false;
      if (hasAsyncInsertStaleTimeout()) {
        if (!getAsyncInsertStaleTimeout()
            .equals(other.getAsyncInsertStaleTimeout())) return false;
      }
      if (hasMemoryProfilerStep() != other.hasMemoryProfilerStep()) return false;
      if (hasMemoryProfilerStep()) {
        if (!getMemoryProfilerStep()
            .equals(other.getMemoryProfilerStep())) return false;
      }
      if (hasMemoryProfilerSampleProbability() != other.hasMemoryProfilerSampleProbability()) return false;
      if (hasMemoryProfilerSampleProbability()) {
        if (!getMemoryProfilerSampleProbability()
            .equals(other.getMemoryProfilerSampleProbability())) return false;
      }
      if (hasMaxFinalThreads() != other.hasMaxFinalThreads()) return false;
      if (hasMaxFinalThreads()) {
        if (!getMaxFinalThreads()
            .equals(other.getMaxFinalThreads())) return false;
      }
      if (hasInputFormatParallelParsing() != other.hasInputFormatParallelParsing()) return false;
      if (hasInputFormatParallelParsing()) {
        if (!getInputFormatParallelParsing()
            .equals(other.getInputFormatParallelParsing())) return false;
      }
      if (hasInputFormatImportNestedJson() != other.hasInputFormatImportNestedJson()) return false;
      if (hasInputFormatImportNestedJson()) {
        if (!getInputFormatImportNestedJson()
            .equals(other.getInputFormatImportNestedJson())) return false;
      }
      if (localFilesystemReadMethod_ != other.localFilesystemReadMethod_) return false;
      if (hasMaxReadBufferSize() != other.hasMaxReadBufferSize()) return false;
      if (hasMaxReadBufferSize()) {
        if (!getMaxReadBufferSize()
            .equals(other.getMaxReadBufferSize())) return false;
      }
      if (hasInsertKeeperMaxRetries() != other.hasInsertKeeperMaxRetries()) return false;
      if (hasInsertKeeperMaxRetries()) {
        if (!getInsertKeeperMaxRetries()
            .equals(other.getInsertKeeperMaxRetries())) return false;
      }
      if (hasMaxTemporaryDataOnDiskSizeForUser() != other.hasMaxTemporaryDataOnDiskSizeForUser()) return false;
      if (hasMaxTemporaryDataOnDiskSizeForUser()) {
        if (!getMaxTemporaryDataOnDiskSizeForUser()
            .equals(other.getMaxTemporaryDataOnDiskSizeForUser())) return false;
      }
      if (hasMaxTemporaryDataOnDiskSizeForQuery() != other.hasMaxTemporaryDataOnDiskSizeForQuery()) return false;
      if (hasMaxTemporaryDataOnDiskSizeForQuery()) {
        if (!getMaxTemporaryDataOnDiskSizeForQuery()
            .equals(other.getMaxTemporaryDataOnDiskSizeForQuery())) return false;
      }
      if (hasMaxParserDepth() != other.hasMaxParserDepth()) return false;
      if (hasMaxParserDepth()) {
        if (!getMaxParserDepth()
            .equals(other.getMaxParserDepth())) return false;
      }
      if (remoteFilesystemReadMethod_ != other.remoteFilesystemReadMethod_) return false;
      if (hasMemoryOvercommitRatioDenominator() != other.hasMemoryOvercommitRatioDenominator()) return false;
      if (hasMemoryOvercommitRatioDenominator()) {
        if (!getMemoryOvercommitRatioDenominator()
            .equals(other.getMemoryOvercommitRatioDenominator())) return false;
      }
      if (hasMemoryOvercommitRatioDenominatorForUser() != other.hasMemoryOvercommitRatioDenominatorForUser()) return false;
      if (hasMemoryOvercommitRatioDenominatorForUser()) {
        if (!getMemoryOvercommitRatioDenominatorForUser()
            .equals(other.getMemoryOvercommitRatioDenominatorForUser())) return false;
      }
      if (hasMemoryUsageOvercommitMaxWaitMicroseconds() != other.hasMemoryUsageOvercommitMaxWaitMicroseconds()) return false;
      if (hasMemoryUsageOvercommitMaxWaitMicroseconds()) {
        if (!getMemoryUsageOvercommitMaxWaitMicroseconds()
            .equals(other.getMemoryUsageOvercommitMaxWaitMicroseconds())) return false;
      }
      if (hasLogQueryThreads() != other.hasLogQueryThreads()) return false;
      if (hasLogQueryThreads()) {
        if (!getLogQueryThreads()
            .equals(other.getLogQueryThreads())) return false;
      }
      if (hasMaxInsertThreads() != other.hasMaxInsertThreads()) return false;
      if (hasMaxInsertThreads()) {
        if (!getMaxInsertThreads()
            .equals(other.getMaxInsertThreads())) return false;
      }
      if (hasUseHedgedRequests() != other.hasUseHedgedRequests()) return false;
      if (hasUseHedgedRequests()) {
        if (!getUseHedgedRequests()
            .equals(other.getUseHedgedRequests())) return false;
      }
      if (hasIdleConnectionTimeout() != other.hasIdleConnectionTimeout()) return false;
      if (hasIdleConnectionTimeout()) {
        if (!getIdleConnectionTimeout()
            .equals(other.getIdleConnectionTimeout())) return false;
      }
      if (hasHedgedConnectionTimeoutMs() != other.hasHedgedConnectionTimeoutMs()) return false;
      if (hasHedgedConnectionTimeoutMs()) {
        if (!getHedgedConnectionTimeoutMs()
            .equals(other.getHedgedConnectionTimeoutMs())) return false;
      }
      if (loadBalancing_ != other.loadBalancing_) return false;
      if (hasPreferLocalhostReplica() != other.hasPreferLocalhostReplica()) return false;
      if (hasPreferLocalhostReplica()) {
        if (!getPreferLocalhostReplica()
            .equals(other.getPreferLocalhostReplica())) return false;
      }
      if (hasCompile() != other.hasCompile()) return false;
      if (hasCompile()) {
        if (!getCompile()
            .equals(other.getCompile())) return false;
      }
      if (hasMinCountToCompile() != other.hasMinCountToCompile()) return false;
      if (hasMinCountToCompile()) {
        if (!getMinCountToCompile()
            .equals(other.getMinCountToCompile())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasReadonly()) {
        hash = (37 * hash) + READONLY_FIELD_NUMBER;
        hash = (53 * hash) + getReadonly().hashCode();
      }
      if (hasAllowDdl()) {
        hash = (37 * hash) + ALLOW_DDL_FIELD_NUMBER;
        hash = (53 * hash) + getAllowDdl().hashCode();
      }
      if (hasAllowIntrospectionFunctions()) {
        hash = (37 * hash) + ALLOW_INTROSPECTION_FUNCTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getAllowIntrospectionFunctions().hashCode();
      }
      if (hasConnectTimeout()) {
        hash = (37 * hash) + CONNECT_TIMEOUT_FIELD_NUMBER;
        hash = (53 * hash) + getConnectTimeout().hashCode();
      }
      if (hasConnectTimeoutWithFailover()) {
        hash = (37 * hash) + CONNECT_TIMEOUT_WITH_FAILOVER_FIELD_NUMBER;
        hash = (53 * hash) + getConnectTimeoutWithFailover().hashCode();
      }
      if (hasReceiveTimeout()) {
        hash = (37 * hash) + RECEIVE_TIMEOUT_FIELD_NUMBER;
        hash = (53 * hash) + getReceiveTimeout().hashCode();
      }
      if (hasSendTimeout()) {
        hash = (37 * hash) + SEND_TIMEOUT_FIELD_NUMBER;
        hash = (53 * hash) + getSendTimeout().hashCode();
      }
      if (hasTimeoutBeforeCheckingExecutionSpeed()) {
        hash = (37 * hash) + TIMEOUT_BEFORE_CHECKING_EXECUTION_SPEED_FIELD_NUMBER;
        hash = (53 * hash) + getTimeoutBeforeCheckingExecutionSpeed().hashCode();
      }
      if (hasInsertQuorum()) {
        hash = (37 * hash) + INSERT_QUORUM_FIELD_NUMBER;
        hash = (53 * hash) + getInsertQuorum().hashCode();
      }
      if (hasInsertQuorumTimeout()) {
        hash = (37 * hash) + INSERT_QUORUM_TIMEOUT_FIELD_NUMBER;
        hash = (53 * hash) + getInsertQuorumTimeout().hashCode();
      }
      if (hasInsertQuorumParallel()) {
        hash = (37 * hash) + INSERT_QUORUM_PARALLEL_FIELD_NUMBER;
        hash = (53 * hash) + getInsertQuorumParallel().hashCode();
      }
      if (hasInsertNullAsDefault()) {
        hash = (37 * hash) + INSERT_NULL_AS_DEFAULT_FIELD_NUMBER;
        hash = (53 * hash) + getInsertNullAsDefault().hashCode();
      }
      if (hasSelectSequentialConsistency()) {
        hash = (37 * hash) + SELECT_SEQUENTIAL_CONSISTENCY_FIELD_NUMBER;
        hash = (53 * hash) + getSelectSequentialConsistency().hashCode();
      }
      if (hasDeduplicateBlocksInDependentMaterializedViews()) {
        hash = (37 * hash) + DEDUPLICATE_BLOCKS_IN_DEPENDENT_MATERIALIZED_VIEWS_FIELD_NUMBER;
        hash = (53 * hash) + getDeduplicateBlocksInDependentMaterializedViews().hashCode();
      }
      if (hasReplicationAlterPartitionsSync()) {
        hash = (37 * hash) + REPLICATION_ALTER_PARTITIONS_SYNC_FIELD_NUMBER;
        hash = (53 * hash) + getReplicationAlterPartitionsSync().hashCode();
      }
      if (hasMaxReplicaDelayForDistributedQueries()) {
        hash = (37 * hash) + MAX_REPLICA_DELAY_FOR_DISTRIBUTED_QUERIES_FIELD_NUMBER;
        hash = (53 * hash) + getMaxReplicaDelayForDistributedQueries().hashCode();
      }
      if (hasFallbackToStaleReplicasForDistributedQueries()) {
        hash = (37 * hash) + FALLBACK_TO_STALE_REPLICAS_FOR_DISTRIBUTED_QUERIES_FIELD_NUMBER;
        hash = (53 * hash) + getFallbackToStaleReplicasForDistributedQueries().hashCode();
      }
      hash = (37 * hash) + DISTRIBUTED_PRODUCT_MODE_FIELD_NUMBER;
      hash = (53 * hash) + distributedProductMode_;
      if (hasDistributedAggregationMemoryEfficient()) {
        hash = (37 * hash) + DISTRIBUTED_AGGREGATION_MEMORY_EFFICIENT_FIELD_NUMBER;
        hash = (53 * hash) + getDistributedAggregationMemoryEfficient().hashCode();
      }
      if (hasDistributedDdlTaskTimeout()) {
        hash = (37 * hash) + DISTRIBUTED_DDL_TASK_TIMEOUT_FIELD_NUMBER;
        hash = (53 * hash) + getDistributedDdlTaskTimeout().hashCode();
      }
      if (hasSkipUnavailableShards()) {
        hash = (37 * hash) + SKIP_UNAVAILABLE_SHARDS_FIELD_NUMBER;
        hash = (53 * hash) + getSkipUnavailableShards().hashCode();
      }
      if (hasCompileExpressions()) {
        hash = (37 * hash) + COMPILE_EXPRESSIONS_FIELD_NUMBER;
        hash = (53 * hash) + getCompileExpressions().hashCode();
      }
      if (hasMinCountToCompileExpression()) {
        hash = (37 * hash) + MIN_COUNT_TO_COMPILE_EXPRESSION_FIELD_NUMBER;
        hash = (53 * hash) + getMinCountToCompileExpression().hashCode();
      }
      if (hasMaxBlockSize()) {
        hash = (37 * hash) + MAX_BLOCK_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getMaxBlockSize().hashCode();
      }
      if (hasMinInsertBlockSizeRows()) {
        hash = (37 * hash) + MIN_INSERT_BLOCK_SIZE_ROWS_FIELD_NUMBER;
        hash = (53 * hash) + getMinInsertBlockSizeRows().hashCode();
      }
      if (hasMinInsertBlockSizeBytes()) {
        hash = (37 * hash) + MIN_INSERT_BLOCK_SIZE_BYTES_FIELD_NUMBER;
        hash = (53 * hash) + getMinInsertBlockSizeBytes().hashCode();
      }
      if (hasMaxInsertBlockSize()) {
        hash = (37 * hash) + MAX_INSERT_BLOCK_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getMaxInsertBlockSize().hashCode();
      }
      if (hasMinBytesToUseDirectIo()) {
        hash = (37 * hash) + MIN_BYTES_TO_USE_DIRECT_IO_FIELD_NUMBER;
        hash = (53 * hash) + getMinBytesToUseDirectIo().hashCode();
      }
      if (hasUseUncompressedCache()) {
        hash = (37 * hash) + USE_UNCOMPRESSED_CACHE_FIELD_NUMBER;
        hash = (53 * hash) + getUseUncompressedCache().hashCode();
      }
      if (hasMergeTreeMaxRowsToUseCache()) {
        hash = (37 * hash) + MERGE_TREE_MAX_ROWS_TO_USE_CACHE_FIELD_NUMBER;
        hash = (53 * hash) + getMergeTreeMaxRowsToUseCache().hashCode();
      }
      if (hasMergeTreeMaxBytesToUseCache()) {
        hash = (37 * hash) + MERGE_TREE_MAX_BYTES_TO_USE_CACHE_FIELD_NUMBER;
        hash = (53 * hash) + getMergeTreeMaxBytesToUseCache().hashCode();
      }
      if (hasMergeTreeMinRowsForConcurrentRead()) {
        hash = (37 * hash) + MERGE_TREE_MIN_ROWS_FOR_CONCURRENT_READ_FIELD_NUMBER;
        hash = (53 * hash) + getMergeTreeMinRowsForConcurrentRead().hashCode();
      }
      if (hasMergeTreeMinBytesForConcurrentRead()) {
        hash = (37 * hash) + MERGE_TREE_MIN_BYTES_FOR_CONCURRENT_READ_FIELD_NUMBER;
        hash = (53 * hash) + getMergeTreeMinBytesForConcurrentRead().hashCode();
      }
      if (hasMaxBytesBeforeExternalGroupBy()) {
        hash = (37 * hash) + MAX_BYTES_BEFORE_EXTERNAL_GROUP_BY_FIELD_NUMBER;
        hash = (53 * hash) + getMaxBytesBeforeExternalGroupBy().hashCode();
      }
      if (hasMaxBytesBeforeExternalSort()) {
        hash = (37 * hash) + MAX_BYTES_BEFORE_EXTERNAL_SORT_FIELD_NUMBER;
        hash = (53 * hash) + getMaxBytesBeforeExternalSort().hashCode();
      }
      if (hasGroupByTwoLevelThreshold()) {
        hash = (37 * hash) + GROUP_BY_TWO_LEVEL_THRESHOLD_FIELD_NUMBER;
        hash = (53 * hash) + getGroupByTwoLevelThreshold().hashCode();
      }
      if (hasGroupByTwoLevelThresholdBytes()) {
        hash = (37 * hash) + GROUP_BY_TWO_LEVEL_THRESHOLD_BYTES_FIELD_NUMBER;
        hash = (53 * hash) + getGroupByTwoLevelThresholdBytes().hashCode();
      }
      if (hasPriority()) {
        hash = (37 * hash) + PRIORITY_FIELD_NUMBER;
        hash = (53 * hash) + getPriority().hashCode();
      }
      if (hasMaxThreads()) {
        hash = (37 * hash) + MAX_THREADS_FIELD_NUMBER;
        hash = (53 * hash) + getMaxThreads().hashCode();
      }
      if (hasMaxMemoryUsage()) {
        hash = (37 * hash) + MAX_MEMORY_USAGE_FIELD_NUMBER;
        hash = (53 * hash) + getMaxMemoryUsage().hashCode();
      }
      if (hasMaxMemoryUsageForUser()) {
        hash = (37 * hash) + MAX_MEMORY_USAGE_FOR_USER_FIELD_NUMBER;
        hash = (53 * hash) + getMaxMemoryUsageForUser().hashCode();
      }
      if (hasMaxNetworkBandwidth()) {
        hash = (37 * hash) + MAX_NETWORK_BANDWIDTH_FIELD_NUMBER;
        hash = (53 * hash) + getMaxNetworkBandwidth().hashCode();
      }
      if (hasMaxNetworkBandwidthForUser()) {
        hash = (37 * hash) + MAX_NETWORK_BANDWIDTH_FOR_USER_FIELD_NUMBER;
        hash = (53 * hash) + getMaxNetworkBandwidthForUser().hashCode();
      }
      if (hasMaxPartitionsPerInsertBlock()) {
        hash = (37 * hash) + MAX_PARTITIONS_PER_INSERT_BLOCK_FIELD_NUMBER;
        hash = (53 * hash) + getMaxPartitionsPerInsertBlock().hashCode();
      }
      if (hasMaxConcurrentQueriesForUser()) {
        hash = (37 * hash) + MAX_CONCURRENT_QUERIES_FOR_USER_FIELD_NUMBER;
        hash = (53 * hash) + getMaxConcurrentQueriesForUser().hashCode();
      }
      if (hasForceIndexByDate()) {
        hash = (37 * hash) + FORCE_INDEX_BY_DATE_FIELD_NUMBER;
        hash = (53 * hash) + getForceIndexByDate().hashCode();
      }
      if (hasForcePrimaryKey()) {
        hash = (37 * hash) + FORCE_PRIMARY_KEY_FIELD_NUMBER;
        hash = (53 * hash) + getForcePrimaryKey().hashCode();
      }
      if (hasMaxRowsToRead()) {
        hash = (37 * hash) + MAX_ROWS_TO_READ_FIELD_NUMBER;
        hash = (53 * hash) + getMaxRowsToRead().hashCode();
      }
      if (hasMaxBytesToRead()) {
        hash = (37 * hash) + MAX_BYTES_TO_READ_FIELD_NUMBER;
        hash = (53 * hash) + getMaxBytesToRead().hashCode();
      }
      hash = (37 * hash) + READ_OVERFLOW_MODE_FIELD_NUMBER;
      hash = (53 * hash) + readOverflowMode_;
      if (hasMaxRowsToGroupBy()) {
        hash = (37 * hash) + MAX_ROWS_TO_GROUP_BY_FIELD_NUMBER;
        hash = (53 * hash) + getMaxRowsToGroupBy().hashCode();
      }
      hash = (37 * hash) + GROUP_BY_OVERFLOW_MODE_FIELD_NUMBER;
      hash = (53 * hash) + groupByOverflowMode_;
      if (hasMaxRowsToSort()) {
        hash = (37 * hash) + MAX_ROWS_TO_SORT_FIELD_NUMBER;
        hash = (53 * hash) + getMaxRowsToSort().hashCode();
      }
      if (hasMaxBytesToSort()) {
        hash = (37 * hash) + MAX_BYTES_TO_SORT_FIELD_NUMBER;
        hash = (53 * hash) + getMaxBytesToSort().hashCode();
      }
      hash = (37 * hash) + SORT_OVERFLOW_MODE_FIELD_NUMBER;
      hash = (53 * hash) + sortOverflowMode_;
      if (hasMaxResultRows()) {
        hash = (37 * hash) + MAX_RESULT_ROWS_FIELD_NUMBER;
        hash = (53 * hash) + getMaxResultRows().hashCode();
      }
      if (hasMaxResultBytes()) {
        hash = (37 * hash) + MAX_RESULT_BYTES_FIELD_NUMBER;
        hash = (53 * hash) + getMaxResultBytes().hashCode();
      }
      hash = (37 * hash) + RESULT_OVERFLOW_MODE_FIELD_NUMBER;
      hash = (53 * hash) + resultOverflowMode_;
      if (hasMaxRowsInDistinct()) {
        hash = (37 * hash) + MAX_ROWS_IN_DISTINCT_FIELD_NUMBER;
        hash = (53 * hash) + getMaxRowsInDistinct().hashCode();
      }
      if (hasMaxBytesInDistinct()) {
        hash = (37 * hash) + MAX_BYTES_IN_DISTINCT_FIELD_NUMBER;
        hash = (53 * hash) + getMaxBytesInDistinct().hashCode();
      }
      hash = (37 * hash) + DISTINCT_OVERFLOW_MODE_FIELD_NUMBER;
      hash = (53 * hash) + distinctOverflowMode_;
      if (hasMaxRowsToTransfer()) {
        hash = (37 * hash) + MAX_ROWS_TO_TRANSFER_FIELD_NUMBER;
        hash = (53 * hash) + getMaxRowsToTransfer().hashCode();
      }
      if (hasMaxBytesToTransfer()) {
        hash = (37 * hash) + MAX_BYTES_TO_TRANSFER_FIELD_NUMBER;
        hash = (53 * hash) + getMaxBytesToTransfer().hashCode();
      }
      hash = (37 * hash) + TRANSFER_OVERFLOW_MODE_FIELD_NUMBER;
      hash = (53 * hash) + transferOverflowMode_;
      if (hasMaxExecutionTime()) {
        hash = (37 * hash) + MAX_EXECUTION_TIME_FIELD_NUMBER;
        hash = (53 * hash) + getMaxExecutionTime().hashCode();
      }
      hash = (37 * hash) + TIMEOUT_OVERFLOW_MODE_FIELD_NUMBER;
      hash = (53 * hash) + timeoutOverflowMode_;
      if (hasMaxRowsInSet()) {
        hash = (37 * hash) + MAX_ROWS_IN_SET_FIELD_NUMBER;
        hash = (53 * hash) + getMaxRowsInSet().hashCode();
      }
      if (hasMaxBytesInSet()) {
        hash = (37 * hash) + MAX_BYTES_IN_SET_FIELD_NUMBER;
        hash = (53 * hash) + getMaxBytesInSet().hashCode();
      }
      hash = (37 * hash) + SET_OVERFLOW_MODE_FIELD_NUMBER;
      hash = (53 * hash) + setOverflowMode_;
      if (hasMaxRowsInJoin()) {
        hash = (37 * hash) + MAX_ROWS_IN_JOIN_FIELD_NUMBER;
        hash = (53 * hash) + getMaxRowsInJoin().hashCode();
      }
      if (hasMaxBytesInJoin()) {
        hash = (37 * hash) + MAX_BYTES_IN_JOIN_FIELD_NUMBER;
        hash = (53 * hash) + getMaxBytesInJoin().hashCode();
      }
      hash = (37 * hash) + JOIN_OVERFLOW_MODE_FIELD_NUMBER;
      hash = (53 * hash) + joinOverflowMode_;
      if (getJoinAlgorithmCount() > 0) {
        hash = (37 * hash) + JOIN_ALGORITHM_FIELD_NUMBER;
        hash = (53 * hash) + joinAlgorithm_.hashCode();
      }
      if (hasAnyJoinDistinctRightTableKeys()) {
        hash = (37 * hash) + ANY_JOIN_DISTINCT_RIGHT_TABLE_KEYS_FIELD_NUMBER;
        hash = (53 * hash) + getAnyJoinDistinctRightTableKeys().hashCode();
      }
      if (hasMaxColumnsToRead()) {
        hash = (37 * hash) + MAX_COLUMNS_TO_READ_FIELD_NUMBER;
        hash = (53 * hash) + getMaxColumnsToRead().hashCode();
      }
      if (hasMaxTemporaryColumns()) {
        hash = (37 * hash) + MAX_TEMPORARY_COLUMNS_FIELD_NUMBER;
        hash = (53 * hash) + getMaxTemporaryColumns().hashCode();
      }
      if (hasMaxTemporaryNonConstColumns()) {
        hash = (37 * hash) + MAX_TEMPORARY_NON_CONST_COLUMNS_FIELD_NUMBER;
        hash = (53 * hash) + getMaxTemporaryNonConstColumns().hashCode();
      }
      if (hasMaxQuerySize()) {
        hash = (37 * hash) + MAX_QUERY_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getMaxQuerySize().hashCode();
      }
      if (hasMaxAstDepth()) {
        hash = (37 * hash) + MAX_AST_DEPTH_FIELD_NUMBER;
        hash = (53 * hash) + getMaxAstDepth().hashCode();
      }
      if (hasMaxAstElements()) {
        hash = (37 * hash) + MAX_AST_ELEMENTS_FIELD_NUMBER;
        hash = (53 * hash) + getMaxAstElements().hashCode();
      }
      if (hasMaxExpandedAstElements()) {
        hash = (37 * hash) + MAX_EXPANDED_AST_ELEMENTS_FIELD_NUMBER;
        hash = (53 * hash) + getMaxExpandedAstElements().hashCode();
      }
      if (hasMinExecutionSpeed()) {
        hash = (37 * hash) + MIN_EXECUTION_SPEED_FIELD_NUMBER;
        hash = (53 * hash) + getMinExecutionSpeed().hashCode();
      }
      if (hasMinExecutionSpeedBytes()) {
        hash = (37 * hash) + MIN_EXECUTION_SPEED_BYTES_FIELD_NUMBER;
        hash = (53 * hash) + getMinExecutionSpeedBytes().hashCode();
      }
      hash = (37 * hash) + COUNT_DISTINCT_IMPLEMENTATION_FIELD_NUMBER;
      hash = (53 * hash) + countDistinctImplementation_;
      if (hasInputFormatValuesInterpretExpressions()) {
        hash = (37 * hash) + INPUT_FORMAT_VALUES_INTERPRET_EXPRESSIONS_FIELD_NUMBER;
        hash = (53 * hash) + getInputFormatValuesInterpretExpressions().hashCode();
      }
      if (hasInputFormatDefaultsForOmittedFields()) {
        hash = (37 * hash) + INPUT_FORMAT_DEFAULTS_FOR_OMITTED_FIELDS_FIELD_NUMBER;
        hash = (53 * hash) + getInputFormatDefaultsForOmittedFields().hashCode();
      }
      if (hasInputFormatNullAsDefault()) {
        hash = (37 * hash) + INPUT_FORMAT_NULL_AS_DEFAULT_FIELD_NUMBER;
        hash = (53 * hash) + getInputFormatNullAsDefault().hashCode();
      }
      hash = (37 * hash) + DATE_TIME_INPUT_FORMAT_FIELD_NUMBER;
      hash = (53 * hash) + dateTimeInputFormat_;
      if (hasInputFormatWithNamesUseHeader()) {
        hash = (37 * hash) + INPUT_FORMAT_WITH_NAMES_USE_HEADER_FIELD_NUMBER;
        hash = (53 * hash) + getInputFormatWithNamesUseHeader().hashCode();
      }
      if (hasOutputFormatJsonQuote64BitIntegers()) {
        hash = (37 * hash) + OUTPUT_FORMAT_JSON_QUOTE_64BIT_INTEGERS_FIELD_NUMBER;
        hash = (53 * hash) + getOutputFormatJsonQuote64BitIntegers().hashCode();
      }
      if (hasOutputFormatJsonQuoteDenormals()) {
        hash = (37 * hash) + OUTPUT_FORMAT_JSON_QUOTE_DENORMALS_FIELD_NUMBER;
        hash = (53 * hash) + getOutputFormatJsonQuoteDenormals().hashCode();
      }
      hash = (37 * hash) + DATE_TIME_OUTPUT_FORMAT_FIELD_NUMBER;
      hash = (53 * hash) + dateTimeOutputFormat_;
      if (hasLowCardinalityAllowInNativeFormat()) {
        hash = (37 * hash) + LOW_CARDINALITY_ALLOW_IN_NATIVE_FORMAT_FIELD_NUMBER;
        hash = (53 * hash) + getLowCardinalityAllowInNativeFormat().hashCode();
      }
      if (hasAllowSuspiciousLowCardinalityTypes()) {
        hash = (37 * hash) + ALLOW_SUSPICIOUS_LOW_CARDINALITY_TYPES_FIELD_NUMBER;
        hash = (53 * hash) + getAllowSuspiciousLowCardinalityTypes().hashCode();
      }
      if (hasEmptyResultForAggregationByEmptySet()) {
        hash = (37 * hash) + EMPTY_RESULT_FOR_AGGREGATION_BY_EMPTY_SET_FIELD_NUMBER;
        hash = (53 * hash) + getEmptyResultForAggregationByEmptySet().hashCode();
      }
      if (hasHttpConnectionTimeout()) {
        hash = (37 * hash) + HTTP_CONNECTION_TIMEOUT_FIELD_NUMBER;
        hash = (53 * hash) + getHttpConnectionTimeout().hashCode();
      }
      if (hasHttpReceiveTimeout()) {
        hash = (37 * hash) + HTTP_RECEIVE_TIMEOUT_FIELD_NUMBER;
        hash = (53 * hash) + getHttpReceiveTimeout().hashCode();
      }
      if (hasHttpSendTimeout()) {
        hash = (37 * hash) + HTTP_SEND_TIMEOUT_FIELD_NUMBER;
        hash = (53 * hash) + getHttpSendTimeout().hashCode();
      }
      if (hasEnableHttpCompression()) {
        hash = (37 * hash) + ENABLE_HTTP_COMPRESSION_FIELD_NUMBER;
        hash = (53 * hash) + getEnableHttpCompression().hashCode();
      }
      if (hasSendProgressInHttpHeaders()) {
        hash = (37 * hash) + SEND_PROGRESS_IN_HTTP_HEADERS_FIELD_NUMBER;
        hash = (53 * hash) + getSendProgressInHttpHeaders().hashCode();
      }
      if (hasHttpHeadersProgressInterval()) {
        hash = (37 * hash) + HTTP_HEADERS_PROGRESS_INTERVAL_FIELD_NUMBER;
        hash = (53 * hash) + getHttpHeadersProgressInterval().hashCode();
      }
      if (hasAddHttpCorsHeader()) {
        hash = (37 * hash) + ADD_HTTP_CORS_HEADER_FIELD_NUMBER;
        hash = (53 * hash) + getAddHttpCorsHeader().hashCode();
      }
      if (hasCancelHttpReadonlyQueriesOnClientClose()) {
        hash = (37 * hash) + CANCEL_HTTP_READONLY_QUERIES_ON_CLIENT_CLOSE_FIELD_NUMBER;
        hash = (53 * hash) + getCancelHttpReadonlyQueriesOnClientClose().hashCode();
      }
      if (hasMaxHttpGetRedirects()) {
        hash = (37 * hash) + MAX_HTTP_GET_REDIRECTS_FIELD_NUMBER;
        hash = (53 * hash) + getMaxHttpGetRedirects().hashCode();
      }
      if (hasJoinedSubqueryRequiresAlias()) {
        hash = (37 * hash) + JOINED_SUBQUERY_REQUIRES_ALIAS_FIELD_NUMBER;
        hash = (53 * hash) + getJoinedSubqueryRequiresAlias().hashCode();
      }
      if (hasJoinUseNulls()) {
        hash = (37 * hash) + JOIN_USE_NULLS_FIELD_NUMBER;
        hash = (53 * hash) + getJoinUseNulls().hashCode();
      }
      if (hasTransformNullIn()) {
        hash = (37 * hash) + TRANSFORM_NULL_IN_FIELD_NUMBER;
        hash = (53 * hash) + getTransformNullIn().hashCode();
      }
      hash = (37 * hash) + QUOTA_MODE_FIELD_NUMBER;
      hash = (53 * hash) + quotaMode_;
      if (hasFlattenNested()) {
        hash = (37 * hash) + FLATTEN_NESTED_FIELD_NUMBER;
        hash = (53 * hash) + getFlattenNested().hashCode();
      }
      hash = (37 * hash) + FORMAT_REGEXP_FIELD_NUMBER;
      hash = (53 * hash) + getFormatRegexp().hashCode();
      hash = (37 * hash) + FORMAT_REGEXP_ESCAPING_RULE_FIELD_NUMBER;
      hash = (53 * hash) + formatRegexpEscapingRule_;
      if (hasFormatRegexpSkipUnmatched()) {
        hash = (37 * hash) + FORMAT_REGEXP_SKIP_UNMATCHED_FIELD_NUMBER;
        hash = (53 * hash) + getFormatRegexpSkipUnmatched().hashCode();
      }
      if (hasAsyncInsert()) {
        hash = (37 * hash) + ASYNC_INSERT_FIELD_NUMBER;
        hash = (53 * hash) + getAsyncInsert().hashCode();
      }
      if (hasAsyncInsertThreads()) {
        hash = (37 * hash) + ASYNC_INSERT_THREADS_FIELD_NUMBER;
        hash = (53 * hash) + getAsyncInsertThreads().hashCode();
      }
      if (hasWaitForAsyncInsert()) {
        hash = (37 * hash) + WAIT_FOR_ASYNC_INSERT_FIELD_NUMBER;
        hash = (53 * hash) + getWaitForAsyncInsert().hashCode();
      }
      if (hasWaitForAsyncInsertTimeout()) {
        hash = (37 * hash) + WAIT_FOR_ASYNC_INSERT_TIMEOUT_FIELD_NUMBER;
        hash = (53 * hash) + getWaitForAsyncInsertTimeout().hashCode();
      }
      if (hasAsyncInsertMaxDataSize()) {
        hash = (37 * hash) + ASYNC_INSERT_MAX_DATA_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getAsyncInsertMaxDataSize().hashCode();
      }
      if (hasAsyncInsertBusyTimeout()) {
        hash = (37 * hash) + ASYNC_INSERT_BUSY_TIMEOUT_FIELD_NUMBER;
        hash = (53 * hash) + getAsyncInsertBusyTimeout().hashCode();
      }
      if (hasAsyncInsertStaleTimeout()) {
        hash = (37 * hash) + ASYNC_INSERT_STALE_TIMEOUT_FIELD_NUMBER;
        hash = (53 * hash) + getAsyncInsertStaleTimeout().hashCode();
      }
      if (hasMemoryProfilerStep()) {
        hash = (37 * hash) + MEMORY_PROFILER_STEP_FIELD_NUMBER;
        hash = (53 * hash) + getMemoryProfilerStep().hashCode();
      }
      if (hasMemoryProfilerSampleProbability()) {
        hash = (37 * hash) + MEMORY_PROFILER_SAMPLE_PROBABILITY_FIELD_NUMBER;
        hash = (53 * hash) + getMemoryProfilerSampleProbability().hashCode();
      }
      if (hasMaxFinalThreads()) {
        hash = (37 * hash) + MAX_FINAL_THREADS_FIELD_NUMBER;
        hash = (53 * hash) + getMaxFinalThreads().hashCode();
      }
      if (hasInputFormatParallelParsing()) {
        hash = (37 * hash) + INPUT_FORMAT_PARALLEL_PARSING_FIELD_NUMBER;
        hash = (53 * hash) + getInputFormatParallelParsing().hashCode();
      }
      if (hasInputFormatImportNestedJson()) {
        hash = (37 * hash) + INPUT_FORMAT_IMPORT_NESTED_JSON_FIELD_NUMBER;
        hash = (53 * hash) + getInputFormatImportNestedJson().hashCode();
      }
      hash = (37 * hash) + LOCAL_FILESYSTEM_READ_METHOD_FIELD_NUMBER;
      hash = (53 * hash) + localFilesystemReadMethod_;
      if (hasMaxReadBufferSize()) {
        hash = (37 * hash) + MAX_READ_BUFFER_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getMaxReadBufferSize().hashCode();
      }
      if (hasInsertKeeperMaxRetries()) {
        hash = (37 * hash) + INSERT_KEEPER_MAX_RETRIES_FIELD_NUMBER;
        hash = (53 * hash) + getInsertKeeperMaxRetries().hashCode();
      }
      if (hasMaxTemporaryDataOnDiskSizeForUser()) {
        hash = (37 * hash) + MAX_TEMPORARY_DATA_ON_DISK_SIZE_FOR_USER_FIELD_NUMBER;
        hash = (53 * hash) + getMaxTemporaryDataOnDiskSizeForUser().hashCode();
      }
      if (hasMaxTemporaryDataOnDiskSizeForQuery()) {
        hash = (37 * hash) + MAX_TEMPORARY_DATA_ON_DISK_SIZE_FOR_QUERY_FIELD_NUMBER;
        hash = (53 * hash) + getMaxTemporaryDataOnDiskSizeForQuery().hashCode();
      }
      if (hasMaxParserDepth()) {
        hash = (37 * hash) + MAX_PARSER_DEPTH_FIELD_NUMBER;
        hash = (53 * hash) + getMaxParserDepth().hashCode();
      }
      hash = (37 * hash) + REMOTE_FILESYSTEM_READ_METHOD_FIELD_NUMBER;
      hash = (53 * hash) + remoteFilesystemReadMethod_;
      if (hasMemoryOvercommitRatioDenominator()) {
        hash = (37 * hash) + MEMORY_OVERCOMMIT_RATIO_DENOMINATOR_FIELD_NUMBER;
        hash = (53 * hash) + getMemoryOvercommitRatioDenominator().hashCode();
      }
      if (hasMemoryOvercommitRatioDenominatorForUser()) {
        hash = (37 * hash) + MEMORY_OVERCOMMIT_RATIO_DENOMINATOR_FOR_USER_FIELD_NUMBER;
        hash = (53 * hash) + getMemoryOvercommitRatioDenominatorForUser().hashCode();
      }
      if (hasMemoryUsageOvercommitMaxWaitMicroseconds()) {
        hash = (37 * hash) + MEMORY_USAGE_OVERCOMMIT_MAX_WAIT_MICROSECONDS_FIELD_NUMBER;
        hash = (53 * hash) + getMemoryUsageOvercommitMaxWaitMicroseconds().hashCode();
      }
      if (hasLogQueryThreads()) {
        hash = (37 * hash) + LOG_QUERY_THREADS_FIELD_NUMBER;
        hash = (53 * hash) + getLogQueryThreads().hashCode();
      }
      if (hasMaxInsertThreads()) {
        hash = (37 * hash) + MAX_INSERT_THREADS_FIELD_NUMBER;
        hash = (53 * hash) + getMaxInsertThreads().hashCode();
      }
      if (hasUseHedgedRequests()) {
        hash = (37 * hash) + USE_HEDGED_REQUESTS_FIELD_NUMBER;
        hash = (53 * hash) + getUseHedgedRequests().hashCode();
      }
      if (hasIdleConnectionTimeout()) {
        hash = (37 * hash) + IDLE_CONNECTION_TIMEOUT_FIELD_NUMBER;
        hash = (53 * hash) + getIdleConnectionTimeout().hashCode();
      }
      if (hasHedgedConnectionTimeoutMs()) {
        hash = (37 * hash) + HEDGED_CONNECTION_TIMEOUT_MS_FIELD_NUMBER;
        hash = (53 * hash) + getHedgedConnectionTimeoutMs().hashCode();
      }
      hash = (37 * hash) + LOAD_BALANCING_FIELD_NUMBER;
      hash = (53 * hash) + loadBalancing_;
      if (hasPreferLocalhostReplica()) {
        hash = (37 * hash) + PREFER_LOCALHOST_REPLICA_FIELD_NUMBER;
        hash = (53 * hash) + getPreferLocalhostReplica().hashCode();
      }
      if (hasCompile()) {
        hash = (37 * hash) + COMPILE_FIELD_NUMBER;
        hash = (53 * hash) + getCompile().hashCode();
      }
      if (hasMinCountToCompile()) {
        hash = (37 * hash) + MIN_COUNT_TO_COMPILE_FIELD_NUMBER;
        hash = (53 * hash) + getMinCountToCompile().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * ClickHouse user settings. Supported settings are a limited subset of all settings
     * described in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/).
     * </pre>
     *
     * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.UserSettings}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.clickhouse.v1.UserSettings)
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettingsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.internal_static_yandex_cloud_mdb_clickhouse_v1_UserSettings_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.internal_static_yandex_cloud_mdb_clickhouse_v1_UserSettings_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.class, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.Builder.class);
      }

      // Construct using yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (readonlyBuilder_ == null) {
          readonly_ = null;
        } else {
          readonly_ = null;
          readonlyBuilder_ = null;
        }
        if (allowDdlBuilder_ == null) {
          allowDdl_ = null;
        } else {
          allowDdl_ = null;
          allowDdlBuilder_ = null;
        }
        if (allowIntrospectionFunctionsBuilder_ == null) {
          allowIntrospectionFunctions_ = null;
        } else {
          allowIntrospectionFunctions_ = null;
          allowIntrospectionFunctionsBuilder_ = null;
        }
        if (connectTimeoutBuilder_ == null) {
          connectTimeout_ = null;
        } else {
          connectTimeout_ = null;
          connectTimeoutBuilder_ = null;
        }
        if (connectTimeoutWithFailoverBuilder_ == null) {
          connectTimeoutWithFailover_ = null;
        } else {
          connectTimeoutWithFailover_ = null;
          connectTimeoutWithFailoverBuilder_ = null;
        }
        if (receiveTimeoutBuilder_ == null) {
          receiveTimeout_ = null;
        } else {
          receiveTimeout_ = null;
          receiveTimeoutBuilder_ = null;
        }
        if (sendTimeoutBuilder_ == null) {
          sendTimeout_ = null;
        } else {
          sendTimeout_ = null;
          sendTimeoutBuilder_ = null;
        }
        if (timeoutBeforeCheckingExecutionSpeedBuilder_ == null) {
          timeoutBeforeCheckingExecutionSpeed_ = null;
        } else {
          timeoutBeforeCheckingExecutionSpeed_ = null;
          timeoutBeforeCheckingExecutionSpeedBuilder_ = null;
        }
        if (insertQuorumBuilder_ == null) {
          insertQuorum_ = null;
        } else {
          insertQuorum_ = null;
          insertQuorumBuilder_ = null;
        }
        if (insertQuorumTimeoutBuilder_ == null) {
          insertQuorumTimeout_ = null;
        } else {
          insertQuorumTimeout_ = null;
          insertQuorumTimeoutBuilder_ = null;
        }
        if (insertQuorumParallelBuilder_ == null) {
          insertQuorumParallel_ = null;
        } else {
          insertQuorumParallel_ = null;
          insertQuorumParallelBuilder_ = null;
        }
        if (insertNullAsDefaultBuilder_ == null) {
          insertNullAsDefault_ = null;
        } else {
          insertNullAsDefault_ = null;
          insertNullAsDefaultBuilder_ = null;
        }
        if (selectSequentialConsistencyBuilder_ == null) {
          selectSequentialConsistency_ = null;
        } else {
          selectSequentialConsistency_ = null;
          selectSequentialConsistencyBuilder_ = null;
        }
        if (deduplicateBlocksInDependentMaterializedViewsBuilder_ == null) {
          deduplicateBlocksInDependentMaterializedViews_ = null;
        } else {
          deduplicateBlocksInDependentMaterializedViews_ = null;
          deduplicateBlocksInDependentMaterializedViewsBuilder_ = null;
        }
        if (replicationAlterPartitionsSyncBuilder_ == null) {
          replicationAlterPartitionsSync_ = null;
        } else {
          replicationAlterPartitionsSync_ = null;
          replicationAlterPartitionsSyncBuilder_ = null;
        }
        if (maxReplicaDelayForDistributedQueriesBuilder_ == null) {
          maxReplicaDelayForDistributedQueries_ = null;
        } else {
          maxReplicaDelayForDistributedQueries_ = null;
          maxReplicaDelayForDistributedQueriesBuilder_ = null;
        }
        if (fallbackToStaleReplicasForDistributedQueriesBuilder_ == null) {
          fallbackToStaleReplicasForDistributedQueries_ = null;
        } else {
          fallbackToStaleReplicasForDistributedQueries_ = null;
          fallbackToStaleReplicasForDistributedQueriesBuilder_ = null;
        }
        distributedProductMode_ = 0;

        if (distributedAggregationMemoryEfficientBuilder_ == null) {
          distributedAggregationMemoryEfficient_ = null;
        } else {
          distributedAggregationMemoryEfficient_ = null;
          distributedAggregationMemoryEfficientBuilder_ = null;
        }
        if (distributedDdlTaskTimeoutBuilder_ == null) {
          distributedDdlTaskTimeout_ = null;
        } else {
          distributedDdlTaskTimeout_ = null;
          distributedDdlTaskTimeoutBuilder_ = null;
        }
        if (skipUnavailableShardsBuilder_ == null) {
          skipUnavailableShards_ = null;
        } else {
          skipUnavailableShards_ = null;
          skipUnavailableShardsBuilder_ = null;
        }
        if (compileExpressionsBuilder_ == null) {
          compileExpressions_ = null;
        } else {
          compileExpressions_ = null;
          compileExpressionsBuilder_ = null;
        }
        if (minCountToCompileExpressionBuilder_ == null) {
          minCountToCompileExpression_ = null;
        } else {
          minCountToCompileExpression_ = null;
          minCountToCompileExpressionBuilder_ = null;
        }
        if (maxBlockSizeBuilder_ == null) {
          maxBlockSize_ = null;
        } else {
          maxBlockSize_ = null;
          maxBlockSizeBuilder_ = null;
        }
        if (minInsertBlockSizeRowsBuilder_ == null) {
          minInsertBlockSizeRows_ = null;
        } else {
          minInsertBlockSizeRows_ = null;
          minInsertBlockSizeRowsBuilder_ = null;
        }
        if (minInsertBlockSizeBytesBuilder_ == null) {
          minInsertBlockSizeBytes_ = null;
        } else {
          minInsertBlockSizeBytes_ = null;
          minInsertBlockSizeBytesBuilder_ = null;
        }
        if (maxInsertBlockSizeBuilder_ == null) {
          maxInsertBlockSize_ = null;
        } else {
          maxInsertBlockSize_ = null;
          maxInsertBlockSizeBuilder_ = null;
        }
        if (minBytesToUseDirectIoBuilder_ == null) {
          minBytesToUseDirectIo_ = null;
        } else {
          minBytesToUseDirectIo_ = null;
          minBytesToUseDirectIoBuilder_ = null;
        }
        if (useUncompressedCacheBuilder_ == null) {
          useUncompressedCache_ = null;
        } else {
          useUncompressedCache_ = null;
          useUncompressedCacheBuilder_ = null;
        }
        if (mergeTreeMaxRowsToUseCacheBuilder_ == null) {
          mergeTreeMaxRowsToUseCache_ = null;
        } else {
          mergeTreeMaxRowsToUseCache_ = null;
          mergeTreeMaxRowsToUseCacheBuilder_ = null;
        }
        if (mergeTreeMaxBytesToUseCacheBuilder_ == null) {
          mergeTreeMaxBytesToUseCache_ = null;
        } else {
          mergeTreeMaxBytesToUseCache_ = null;
          mergeTreeMaxBytesToUseCacheBuilder_ = null;
        }
        if (mergeTreeMinRowsForConcurrentReadBuilder_ == null) {
          mergeTreeMinRowsForConcurrentRead_ = null;
        } else {
          mergeTreeMinRowsForConcurrentRead_ = null;
          mergeTreeMinRowsForConcurrentReadBuilder_ = null;
        }
        if (mergeTreeMinBytesForConcurrentReadBuilder_ == null) {
          mergeTreeMinBytesForConcurrentRead_ = null;
        } else {
          mergeTreeMinBytesForConcurrentRead_ = null;
          mergeTreeMinBytesForConcurrentReadBuilder_ = null;
        }
        if (maxBytesBeforeExternalGroupByBuilder_ == null) {
          maxBytesBeforeExternalGroupBy_ = null;
        } else {
          maxBytesBeforeExternalGroupBy_ = null;
          maxBytesBeforeExternalGroupByBuilder_ = null;
        }
        if (maxBytesBeforeExternalSortBuilder_ == null) {
          maxBytesBeforeExternalSort_ = null;
        } else {
          maxBytesBeforeExternalSort_ = null;
          maxBytesBeforeExternalSortBuilder_ = null;
        }
        if (groupByTwoLevelThresholdBuilder_ == null) {
          groupByTwoLevelThreshold_ = null;
        } else {
          groupByTwoLevelThreshold_ = null;
          groupByTwoLevelThresholdBuilder_ = null;
        }
        if (groupByTwoLevelThresholdBytesBuilder_ == null) {
          groupByTwoLevelThresholdBytes_ = null;
        } else {
          groupByTwoLevelThresholdBytes_ = null;
          groupByTwoLevelThresholdBytesBuilder_ = null;
        }
        if (priorityBuilder_ == null) {
          priority_ = null;
        } else {
          priority_ = null;
          priorityBuilder_ = null;
        }
        if (maxThreadsBuilder_ == null) {
          maxThreads_ = null;
        } else {
          maxThreads_ = null;
          maxThreadsBuilder_ = null;
        }
        if (maxMemoryUsageBuilder_ == null) {
          maxMemoryUsage_ = null;
        } else {
          maxMemoryUsage_ = null;
          maxMemoryUsageBuilder_ = null;
        }
        if (maxMemoryUsageForUserBuilder_ == null) {
          maxMemoryUsageForUser_ = null;
        } else {
          maxMemoryUsageForUser_ = null;
          maxMemoryUsageForUserBuilder_ = null;
        }
        if (maxNetworkBandwidthBuilder_ == null) {
          maxNetworkBandwidth_ = null;
        } else {
          maxNetworkBandwidth_ = null;
          maxNetworkBandwidthBuilder_ = null;
        }
        if (maxNetworkBandwidthForUserBuilder_ == null) {
          maxNetworkBandwidthForUser_ = null;
        } else {
          maxNetworkBandwidthForUser_ = null;
          maxNetworkBandwidthForUserBuilder_ = null;
        }
        if (maxPartitionsPerInsertBlockBuilder_ == null) {
          maxPartitionsPerInsertBlock_ = null;
        } else {
          maxPartitionsPerInsertBlock_ = null;
          maxPartitionsPerInsertBlockBuilder_ = null;
        }
        if (maxConcurrentQueriesForUserBuilder_ == null) {
          maxConcurrentQueriesForUser_ = null;
        } else {
          maxConcurrentQueriesForUser_ = null;
          maxConcurrentQueriesForUserBuilder_ = null;
        }
        if (forceIndexByDateBuilder_ == null) {
          forceIndexByDate_ = null;
        } else {
          forceIndexByDate_ = null;
          forceIndexByDateBuilder_ = null;
        }
        if (forcePrimaryKeyBuilder_ == null) {
          forcePrimaryKey_ = null;
        } else {
          forcePrimaryKey_ = null;
          forcePrimaryKeyBuilder_ = null;
        }
        if (maxRowsToReadBuilder_ == null) {
          maxRowsToRead_ = null;
        } else {
          maxRowsToRead_ = null;
          maxRowsToReadBuilder_ = null;
        }
        if (maxBytesToReadBuilder_ == null) {
          maxBytesToRead_ = null;
        } else {
          maxBytesToRead_ = null;
          maxBytesToReadBuilder_ = null;
        }
        readOverflowMode_ = 0;

        if (maxRowsToGroupByBuilder_ == null) {
          maxRowsToGroupBy_ = null;
        } else {
          maxRowsToGroupBy_ = null;
          maxRowsToGroupByBuilder_ = null;
        }
        groupByOverflowMode_ = 0;

        if (maxRowsToSortBuilder_ == null) {
          maxRowsToSort_ = null;
        } else {
          maxRowsToSort_ = null;
          maxRowsToSortBuilder_ = null;
        }
        if (maxBytesToSortBuilder_ == null) {
          maxBytesToSort_ = null;
        } else {
          maxBytesToSort_ = null;
          maxBytesToSortBuilder_ = null;
        }
        sortOverflowMode_ = 0;

        if (maxResultRowsBuilder_ == null) {
          maxResultRows_ = null;
        } else {
          maxResultRows_ = null;
          maxResultRowsBuilder_ = null;
        }
        if (maxResultBytesBuilder_ == null) {
          maxResultBytes_ = null;
        } else {
          maxResultBytes_ = null;
          maxResultBytesBuilder_ = null;
        }
        resultOverflowMode_ = 0;

        if (maxRowsInDistinctBuilder_ == null) {
          maxRowsInDistinct_ = null;
        } else {
          maxRowsInDistinct_ = null;
          maxRowsInDistinctBuilder_ = null;
        }
        if (maxBytesInDistinctBuilder_ == null) {
          maxBytesInDistinct_ = null;
        } else {
          maxBytesInDistinct_ = null;
          maxBytesInDistinctBuilder_ = null;
        }
        distinctOverflowMode_ = 0;

        if (maxRowsToTransferBuilder_ == null) {
          maxRowsToTransfer_ = null;
        } else {
          maxRowsToTransfer_ = null;
          maxRowsToTransferBuilder_ = null;
        }
        if (maxBytesToTransferBuilder_ == null) {
          maxBytesToTransfer_ = null;
        } else {
          maxBytesToTransfer_ = null;
          maxBytesToTransferBuilder_ = null;
        }
        transferOverflowMode_ = 0;

        if (maxExecutionTimeBuilder_ == null) {
          maxExecutionTime_ = null;
        } else {
          maxExecutionTime_ = null;
          maxExecutionTimeBuilder_ = null;
        }
        timeoutOverflowMode_ = 0;

        if (maxRowsInSetBuilder_ == null) {
          maxRowsInSet_ = null;
        } else {
          maxRowsInSet_ = null;
          maxRowsInSetBuilder_ = null;
        }
        if (maxBytesInSetBuilder_ == null) {
          maxBytesInSet_ = null;
        } else {
          maxBytesInSet_ = null;
          maxBytesInSetBuilder_ = null;
        }
        setOverflowMode_ = 0;

        if (maxRowsInJoinBuilder_ == null) {
          maxRowsInJoin_ = null;
        } else {
          maxRowsInJoin_ = null;
          maxRowsInJoinBuilder_ = null;
        }
        if (maxBytesInJoinBuilder_ == null) {
          maxBytesInJoin_ = null;
        } else {
          maxBytesInJoin_ = null;
          maxBytesInJoinBuilder_ = null;
        }
        joinOverflowMode_ = 0;

        joinAlgorithm_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        if (anyJoinDistinctRightTableKeysBuilder_ == null) {
          anyJoinDistinctRightTableKeys_ = null;
        } else {
          anyJoinDistinctRightTableKeys_ = null;
          anyJoinDistinctRightTableKeysBuilder_ = null;
        }
        if (maxColumnsToReadBuilder_ == null) {
          maxColumnsToRead_ = null;
        } else {
          maxColumnsToRead_ = null;
          maxColumnsToReadBuilder_ = null;
        }
        if (maxTemporaryColumnsBuilder_ == null) {
          maxTemporaryColumns_ = null;
        } else {
          maxTemporaryColumns_ = null;
          maxTemporaryColumnsBuilder_ = null;
        }
        if (maxTemporaryNonConstColumnsBuilder_ == null) {
          maxTemporaryNonConstColumns_ = null;
        } else {
          maxTemporaryNonConstColumns_ = null;
          maxTemporaryNonConstColumnsBuilder_ = null;
        }
        if (maxQuerySizeBuilder_ == null) {
          maxQuerySize_ = null;
        } else {
          maxQuerySize_ = null;
          maxQuerySizeBuilder_ = null;
        }
        if (maxAstDepthBuilder_ == null) {
          maxAstDepth_ = null;
        } else {
          maxAstDepth_ = null;
          maxAstDepthBuilder_ = null;
        }
        if (maxAstElementsBuilder_ == null) {
          maxAstElements_ = null;
        } else {
          maxAstElements_ = null;
          maxAstElementsBuilder_ = null;
        }
        if (maxExpandedAstElementsBuilder_ == null) {
          maxExpandedAstElements_ = null;
        } else {
          maxExpandedAstElements_ = null;
          maxExpandedAstElementsBuilder_ = null;
        }
        if (minExecutionSpeedBuilder_ == null) {
          minExecutionSpeed_ = null;
        } else {
          minExecutionSpeed_ = null;
          minExecutionSpeedBuilder_ = null;
        }
        if (minExecutionSpeedBytesBuilder_ == null) {
          minExecutionSpeedBytes_ = null;
        } else {
          minExecutionSpeedBytes_ = null;
          minExecutionSpeedBytesBuilder_ = null;
        }
        countDistinctImplementation_ = 0;

        if (inputFormatValuesInterpretExpressionsBuilder_ == null) {
          inputFormatValuesInterpretExpressions_ = null;
        } else {
          inputFormatValuesInterpretExpressions_ = null;
          inputFormatValuesInterpretExpressionsBuilder_ = null;
        }
        if (inputFormatDefaultsForOmittedFieldsBuilder_ == null) {
          inputFormatDefaultsForOmittedFields_ = null;
        } else {
          inputFormatDefaultsForOmittedFields_ = null;
          inputFormatDefaultsForOmittedFieldsBuilder_ = null;
        }
        if (inputFormatNullAsDefaultBuilder_ == null) {
          inputFormatNullAsDefault_ = null;
        } else {
          inputFormatNullAsDefault_ = null;
          inputFormatNullAsDefaultBuilder_ = null;
        }
        dateTimeInputFormat_ = 0;

        if (inputFormatWithNamesUseHeaderBuilder_ == null) {
          inputFormatWithNamesUseHeader_ = null;
        } else {
          inputFormatWithNamesUseHeader_ = null;
          inputFormatWithNamesUseHeaderBuilder_ = null;
        }
        if (outputFormatJsonQuote64BitIntegersBuilder_ == null) {
          outputFormatJsonQuote64BitIntegers_ = null;
        } else {
          outputFormatJsonQuote64BitIntegers_ = null;
          outputFormatJsonQuote64BitIntegersBuilder_ = null;
        }
        if (outputFormatJsonQuoteDenormalsBuilder_ == null) {
          outputFormatJsonQuoteDenormals_ = null;
        } else {
          outputFormatJsonQuoteDenormals_ = null;
          outputFormatJsonQuoteDenormalsBuilder_ = null;
        }
        dateTimeOutputFormat_ = 0;

        if (lowCardinalityAllowInNativeFormatBuilder_ == null) {
          lowCardinalityAllowInNativeFormat_ = null;
        } else {
          lowCardinalityAllowInNativeFormat_ = null;
          lowCardinalityAllowInNativeFormatBuilder_ = null;
        }
        if (allowSuspiciousLowCardinalityTypesBuilder_ == null) {
          allowSuspiciousLowCardinalityTypes_ = null;
        } else {
          allowSuspiciousLowCardinalityTypes_ = null;
          allowSuspiciousLowCardinalityTypesBuilder_ = null;
        }
        if (emptyResultForAggregationByEmptySetBuilder_ == null) {
          emptyResultForAggregationByEmptySet_ = null;
        } else {
          emptyResultForAggregationByEmptySet_ = null;
          emptyResultForAggregationByEmptySetBuilder_ = null;
        }
        if (httpConnectionTimeoutBuilder_ == null) {
          httpConnectionTimeout_ = null;
        } else {
          httpConnectionTimeout_ = null;
          httpConnectionTimeoutBuilder_ = null;
        }
        if (httpReceiveTimeoutBuilder_ == null) {
          httpReceiveTimeout_ = null;
        } else {
          httpReceiveTimeout_ = null;
          httpReceiveTimeoutBuilder_ = null;
        }
        if (httpSendTimeoutBuilder_ == null) {
          httpSendTimeout_ = null;
        } else {
          httpSendTimeout_ = null;
          httpSendTimeoutBuilder_ = null;
        }
        if (enableHttpCompressionBuilder_ == null) {
          enableHttpCompression_ = null;
        } else {
          enableHttpCompression_ = null;
          enableHttpCompressionBuilder_ = null;
        }
        if (sendProgressInHttpHeadersBuilder_ == null) {
          sendProgressInHttpHeaders_ = null;
        } else {
          sendProgressInHttpHeaders_ = null;
          sendProgressInHttpHeadersBuilder_ = null;
        }
        if (httpHeadersProgressIntervalBuilder_ == null) {
          httpHeadersProgressInterval_ = null;
        } else {
          httpHeadersProgressInterval_ = null;
          httpHeadersProgressIntervalBuilder_ = null;
        }
        if (addHttpCorsHeaderBuilder_ == null) {
          addHttpCorsHeader_ = null;
        } else {
          addHttpCorsHeader_ = null;
          addHttpCorsHeaderBuilder_ = null;
        }
        if (cancelHttpReadonlyQueriesOnClientCloseBuilder_ == null) {
          cancelHttpReadonlyQueriesOnClientClose_ = null;
        } else {
          cancelHttpReadonlyQueriesOnClientClose_ = null;
          cancelHttpReadonlyQueriesOnClientCloseBuilder_ = null;
        }
        if (maxHttpGetRedirectsBuilder_ == null) {
          maxHttpGetRedirects_ = null;
        } else {
          maxHttpGetRedirects_ = null;
          maxHttpGetRedirectsBuilder_ = null;
        }
        if (joinedSubqueryRequiresAliasBuilder_ == null) {
          joinedSubqueryRequiresAlias_ = null;
        } else {
          joinedSubqueryRequiresAlias_ = null;
          joinedSubqueryRequiresAliasBuilder_ = null;
        }
        if (joinUseNullsBuilder_ == null) {
          joinUseNulls_ = null;
        } else {
          joinUseNulls_ = null;
          joinUseNullsBuilder_ = null;
        }
        if (transformNullInBuilder_ == null) {
          transformNullIn_ = null;
        } else {
          transformNullIn_ = null;
          transformNullInBuilder_ = null;
        }
        quotaMode_ = 0;

        if (flattenNestedBuilder_ == null) {
          flattenNested_ = null;
        } else {
          flattenNested_ = null;
          flattenNestedBuilder_ = null;
        }
        formatRegexp_ = "";

        formatRegexpEscapingRule_ = 0;

        if (formatRegexpSkipUnmatchedBuilder_ == null) {
          formatRegexpSkipUnmatched_ = null;
        } else {
          formatRegexpSkipUnmatched_ = null;
          formatRegexpSkipUnmatchedBuilder_ = null;
        }
        if (asyncInsertBuilder_ == null) {
          asyncInsert_ = null;
        } else {
          asyncInsert_ = null;
          asyncInsertBuilder_ = null;
        }
        if (asyncInsertThreadsBuilder_ == null) {
          asyncInsertThreads_ = null;
        } else {
          asyncInsertThreads_ = null;
          asyncInsertThreadsBuilder_ = null;
        }
        if (waitForAsyncInsertBuilder_ == null) {
          waitForAsyncInsert_ = null;
        } else {
          waitForAsyncInsert_ = null;
          waitForAsyncInsertBuilder_ = null;
        }
        if (waitForAsyncInsertTimeoutBuilder_ == null) {
          waitForAsyncInsertTimeout_ = null;
        } else {
          waitForAsyncInsertTimeout_ = null;
          waitForAsyncInsertTimeoutBuilder_ = null;
        }
        if (asyncInsertMaxDataSizeBuilder_ == null) {
          asyncInsertMaxDataSize_ = null;
        } else {
          asyncInsertMaxDataSize_ = null;
          asyncInsertMaxDataSizeBuilder_ = null;
        }
        if (asyncInsertBusyTimeoutBuilder_ == null) {
          asyncInsertBusyTimeout_ = null;
        } else {
          asyncInsertBusyTimeout_ = null;
          asyncInsertBusyTimeoutBuilder_ = null;
        }
        if (asyncInsertStaleTimeoutBuilder_ == null) {
          asyncInsertStaleTimeout_ = null;
        } else {
          asyncInsertStaleTimeout_ = null;
          asyncInsertStaleTimeoutBuilder_ = null;
        }
        if (memoryProfilerStepBuilder_ == null) {
          memoryProfilerStep_ = null;
        } else {
          memoryProfilerStep_ = null;
          memoryProfilerStepBuilder_ = null;
        }
        if (memoryProfilerSampleProbabilityBuilder_ == null) {
          memoryProfilerSampleProbability_ = null;
        } else {
          memoryProfilerSampleProbability_ = null;
          memoryProfilerSampleProbabilityBuilder_ = null;
        }
        if (maxFinalThreadsBuilder_ == null) {
          maxFinalThreads_ = null;
        } else {
          maxFinalThreads_ = null;
          maxFinalThreadsBuilder_ = null;
        }
        if (inputFormatParallelParsingBuilder_ == null) {
          inputFormatParallelParsing_ = null;
        } else {
          inputFormatParallelParsing_ = null;
          inputFormatParallelParsingBuilder_ = null;
        }
        if (inputFormatImportNestedJsonBuilder_ == null) {
          inputFormatImportNestedJson_ = null;
        } else {
          inputFormatImportNestedJson_ = null;
          inputFormatImportNestedJsonBuilder_ = null;
        }
        localFilesystemReadMethod_ = 0;

        if (maxReadBufferSizeBuilder_ == null) {
          maxReadBufferSize_ = null;
        } else {
          maxReadBufferSize_ = null;
          maxReadBufferSizeBuilder_ = null;
        }
        if (insertKeeperMaxRetriesBuilder_ == null) {
          insertKeeperMaxRetries_ = null;
        } else {
          insertKeeperMaxRetries_ = null;
          insertKeeperMaxRetriesBuilder_ = null;
        }
        if (maxTemporaryDataOnDiskSizeForUserBuilder_ == null) {
          maxTemporaryDataOnDiskSizeForUser_ = null;
        } else {
          maxTemporaryDataOnDiskSizeForUser_ = null;
          maxTemporaryDataOnDiskSizeForUserBuilder_ = null;
        }
        if (maxTemporaryDataOnDiskSizeForQueryBuilder_ == null) {
          maxTemporaryDataOnDiskSizeForQuery_ = null;
        } else {
          maxTemporaryDataOnDiskSizeForQuery_ = null;
          maxTemporaryDataOnDiskSizeForQueryBuilder_ = null;
        }
        if (maxParserDepthBuilder_ == null) {
          maxParserDepth_ = null;
        } else {
          maxParserDepth_ = null;
          maxParserDepthBuilder_ = null;
        }
        remoteFilesystemReadMethod_ = 0;

        if (memoryOvercommitRatioDenominatorBuilder_ == null) {
          memoryOvercommitRatioDenominator_ = null;
        } else {
          memoryOvercommitRatioDenominator_ = null;
          memoryOvercommitRatioDenominatorBuilder_ = null;
        }
        if (memoryOvercommitRatioDenominatorForUserBuilder_ == null) {
          memoryOvercommitRatioDenominatorForUser_ = null;
        } else {
          memoryOvercommitRatioDenominatorForUser_ = null;
          memoryOvercommitRatioDenominatorForUserBuilder_ = null;
        }
        if (memoryUsageOvercommitMaxWaitMicrosecondsBuilder_ == null) {
          memoryUsageOvercommitMaxWaitMicroseconds_ = null;
        } else {
          memoryUsageOvercommitMaxWaitMicroseconds_ = null;
          memoryUsageOvercommitMaxWaitMicrosecondsBuilder_ = null;
        }
        if (logQueryThreadsBuilder_ == null) {
          logQueryThreads_ = null;
        } else {
          logQueryThreads_ = null;
          logQueryThreadsBuilder_ = null;
        }
        if (maxInsertThreadsBuilder_ == null) {
          maxInsertThreads_ = null;
        } else {
          maxInsertThreads_ = null;
          maxInsertThreadsBuilder_ = null;
        }
        if (useHedgedRequestsBuilder_ == null) {
          useHedgedRequests_ = null;
        } else {
          useHedgedRequests_ = null;
          useHedgedRequestsBuilder_ = null;
        }
        if (idleConnectionTimeoutBuilder_ == null) {
          idleConnectionTimeout_ = null;
        } else {
          idleConnectionTimeout_ = null;
          idleConnectionTimeoutBuilder_ = null;
        }
        if (hedgedConnectionTimeoutMsBuilder_ == null) {
          hedgedConnectionTimeoutMs_ = null;
        } else {
          hedgedConnectionTimeoutMs_ = null;
          hedgedConnectionTimeoutMsBuilder_ = null;
        }
        loadBalancing_ = 0;

        if (preferLocalhostReplicaBuilder_ == null) {
          preferLocalhostReplica_ = null;
        } else {
          preferLocalhostReplica_ = null;
          preferLocalhostReplicaBuilder_ = null;
        }
        if (compileBuilder_ == null) {
          compile_ = null;
        } else {
          compile_ = null;
          compileBuilder_ = null;
        }
        if (minCountToCompileBuilder_ == null) {
          minCountToCompile_ = null;
        } else {
          minCountToCompile_ = null;
          minCountToCompileBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.internal_static_yandex_cloud_mdb_clickhouse_v1_UserSettings_descriptor;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings getDefaultInstanceForType() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.getDefaultInstance();
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings build() {
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings buildPartial() {
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings result = new yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings(this);
        int from_bitField0_ = bitField0_;
        if (readonlyBuilder_ == null) {
          result.readonly_ = readonly_;
        } else {
          result.readonly_ = readonlyBuilder_.build();
        }
        if (allowDdlBuilder_ == null) {
          result.allowDdl_ = allowDdl_;
        } else {
          result.allowDdl_ = allowDdlBuilder_.build();
        }
        if (allowIntrospectionFunctionsBuilder_ == null) {
          result.allowIntrospectionFunctions_ = allowIntrospectionFunctions_;
        } else {
          result.allowIntrospectionFunctions_ = allowIntrospectionFunctionsBuilder_.build();
        }
        if (connectTimeoutBuilder_ == null) {
          result.connectTimeout_ = connectTimeout_;
        } else {
          result.connectTimeout_ = connectTimeoutBuilder_.build();
        }
        if (connectTimeoutWithFailoverBuilder_ == null) {
          result.connectTimeoutWithFailover_ = connectTimeoutWithFailover_;
        } else {
          result.connectTimeoutWithFailover_ = connectTimeoutWithFailoverBuilder_.build();
        }
        if (receiveTimeoutBuilder_ == null) {
          result.receiveTimeout_ = receiveTimeout_;
        } else {
          result.receiveTimeout_ = receiveTimeoutBuilder_.build();
        }
        if (sendTimeoutBuilder_ == null) {
          result.sendTimeout_ = sendTimeout_;
        } else {
          result.sendTimeout_ = sendTimeoutBuilder_.build();
        }
        if (timeoutBeforeCheckingExecutionSpeedBuilder_ == null) {
          result.timeoutBeforeCheckingExecutionSpeed_ = timeoutBeforeCheckingExecutionSpeed_;
        } else {
          result.timeoutBeforeCheckingExecutionSpeed_ = timeoutBeforeCheckingExecutionSpeedBuilder_.build();
        }
        if (insertQuorumBuilder_ == null) {
          result.insertQuorum_ = insertQuorum_;
        } else {
          result.insertQuorum_ = insertQuorumBuilder_.build();
        }
        if (insertQuorumTimeoutBuilder_ == null) {
          result.insertQuorumTimeout_ = insertQuorumTimeout_;
        } else {
          result.insertQuorumTimeout_ = insertQuorumTimeoutBuilder_.build();
        }
        if (insertQuorumParallelBuilder_ == null) {
          result.insertQuorumParallel_ = insertQuorumParallel_;
        } else {
          result.insertQuorumParallel_ = insertQuorumParallelBuilder_.build();
        }
        if (insertNullAsDefaultBuilder_ == null) {
          result.insertNullAsDefault_ = insertNullAsDefault_;
        } else {
          result.insertNullAsDefault_ = insertNullAsDefaultBuilder_.build();
        }
        if (selectSequentialConsistencyBuilder_ == null) {
          result.selectSequentialConsistency_ = selectSequentialConsistency_;
        } else {
          result.selectSequentialConsistency_ = selectSequentialConsistencyBuilder_.build();
        }
        if (deduplicateBlocksInDependentMaterializedViewsBuilder_ == null) {
          result.deduplicateBlocksInDependentMaterializedViews_ = deduplicateBlocksInDependentMaterializedViews_;
        } else {
          result.deduplicateBlocksInDependentMaterializedViews_ = deduplicateBlocksInDependentMaterializedViewsBuilder_.build();
        }
        if (replicationAlterPartitionsSyncBuilder_ == null) {
          result.replicationAlterPartitionsSync_ = replicationAlterPartitionsSync_;
        } else {
          result.replicationAlterPartitionsSync_ = replicationAlterPartitionsSyncBuilder_.build();
        }
        if (maxReplicaDelayForDistributedQueriesBuilder_ == null) {
          result.maxReplicaDelayForDistributedQueries_ = maxReplicaDelayForDistributedQueries_;
        } else {
          result.maxReplicaDelayForDistributedQueries_ = maxReplicaDelayForDistributedQueriesBuilder_.build();
        }
        if (fallbackToStaleReplicasForDistributedQueriesBuilder_ == null) {
          result.fallbackToStaleReplicasForDistributedQueries_ = fallbackToStaleReplicasForDistributedQueries_;
        } else {
          result.fallbackToStaleReplicasForDistributedQueries_ = fallbackToStaleReplicasForDistributedQueriesBuilder_.build();
        }
        result.distributedProductMode_ = distributedProductMode_;
        if (distributedAggregationMemoryEfficientBuilder_ == null) {
          result.distributedAggregationMemoryEfficient_ = distributedAggregationMemoryEfficient_;
        } else {
          result.distributedAggregationMemoryEfficient_ = distributedAggregationMemoryEfficientBuilder_.build();
        }
        if (distributedDdlTaskTimeoutBuilder_ == null) {
          result.distributedDdlTaskTimeout_ = distributedDdlTaskTimeout_;
        } else {
          result.distributedDdlTaskTimeout_ = distributedDdlTaskTimeoutBuilder_.build();
        }
        if (skipUnavailableShardsBuilder_ == null) {
          result.skipUnavailableShards_ = skipUnavailableShards_;
        } else {
          result.skipUnavailableShards_ = skipUnavailableShardsBuilder_.build();
        }
        if (compileExpressionsBuilder_ == null) {
          result.compileExpressions_ = compileExpressions_;
        } else {
          result.compileExpressions_ = compileExpressionsBuilder_.build();
        }
        if (minCountToCompileExpressionBuilder_ == null) {
          result.minCountToCompileExpression_ = minCountToCompileExpression_;
        } else {
          result.minCountToCompileExpression_ = minCountToCompileExpressionBuilder_.build();
        }
        if (maxBlockSizeBuilder_ == null) {
          result.maxBlockSize_ = maxBlockSize_;
        } else {
          result.maxBlockSize_ = maxBlockSizeBuilder_.build();
        }
        if (minInsertBlockSizeRowsBuilder_ == null) {
          result.minInsertBlockSizeRows_ = minInsertBlockSizeRows_;
        } else {
          result.minInsertBlockSizeRows_ = minInsertBlockSizeRowsBuilder_.build();
        }
        if (minInsertBlockSizeBytesBuilder_ == null) {
          result.minInsertBlockSizeBytes_ = minInsertBlockSizeBytes_;
        } else {
          result.minInsertBlockSizeBytes_ = minInsertBlockSizeBytesBuilder_.build();
        }
        if (maxInsertBlockSizeBuilder_ == null) {
          result.maxInsertBlockSize_ = maxInsertBlockSize_;
        } else {
          result.maxInsertBlockSize_ = maxInsertBlockSizeBuilder_.build();
        }
        if (minBytesToUseDirectIoBuilder_ == null) {
          result.minBytesToUseDirectIo_ = minBytesToUseDirectIo_;
        } else {
          result.minBytesToUseDirectIo_ = minBytesToUseDirectIoBuilder_.build();
        }
        if (useUncompressedCacheBuilder_ == null) {
          result.useUncompressedCache_ = useUncompressedCache_;
        } else {
          result.useUncompressedCache_ = useUncompressedCacheBuilder_.build();
        }
        if (mergeTreeMaxRowsToUseCacheBuilder_ == null) {
          result.mergeTreeMaxRowsToUseCache_ = mergeTreeMaxRowsToUseCache_;
        } else {
          result.mergeTreeMaxRowsToUseCache_ = mergeTreeMaxRowsToUseCacheBuilder_.build();
        }
        if (mergeTreeMaxBytesToUseCacheBuilder_ == null) {
          result.mergeTreeMaxBytesToUseCache_ = mergeTreeMaxBytesToUseCache_;
        } else {
          result.mergeTreeMaxBytesToUseCache_ = mergeTreeMaxBytesToUseCacheBuilder_.build();
        }
        if (mergeTreeMinRowsForConcurrentReadBuilder_ == null) {
          result.mergeTreeMinRowsForConcurrentRead_ = mergeTreeMinRowsForConcurrentRead_;
        } else {
          result.mergeTreeMinRowsForConcurrentRead_ = mergeTreeMinRowsForConcurrentReadBuilder_.build();
        }
        if (mergeTreeMinBytesForConcurrentReadBuilder_ == null) {
          result.mergeTreeMinBytesForConcurrentRead_ = mergeTreeMinBytesForConcurrentRead_;
        } else {
          result.mergeTreeMinBytesForConcurrentRead_ = mergeTreeMinBytesForConcurrentReadBuilder_.build();
        }
        if (maxBytesBeforeExternalGroupByBuilder_ == null) {
          result.maxBytesBeforeExternalGroupBy_ = maxBytesBeforeExternalGroupBy_;
        } else {
          result.maxBytesBeforeExternalGroupBy_ = maxBytesBeforeExternalGroupByBuilder_.build();
        }
        if (maxBytesBeforeExternalSortBuilder_ == null) {
          result.maxBytesBeforeExternalSort_ = maxBytesBeforeExternalSort_;
        } else {
          result.maxBytesBeforeExternalSort_ = maxBytesBeforeExternalSortBuilder_.build();
        }
        if (groupByTwoLevelThresholdBuilder_ == null) {
          result.groupByTwoLevelThreshold_ = groupByTwoLevelThreshold_;
        } else {
          result.groupByTwoLevelThreshold_ = groupByTwoLevelThresholdBuilder_.build();
        }
        if (groupByTwoLevelThresholdBytesBuilder_ == null) {
          result.groupByTwoLevelThresholdBytes_ = groupByTwoLevelThresholdBytes_;
        } else {
          result.groupByTwoLevelThresholdBytes_ = groupByTwoLevelThresholdBytesBuilder_.build();
        }
        if (priorityBuilder_ == null) {
          result.priority_ = priority_;
        } else {
          result.priority_ = priorityBuilder_.build();
        }
        if (maxThreadsBuilder_ == null) {
          result.maxThreads_ = maxThreads_;
        } else {
          result.maxThreads_ = maxThreadsBuilder_.build();
        }
        if (maxMemoryUsageBuilder_ == null) {
          result.maxMemoryUsage_ = maxMemoryUsage_;
        } else {
          result.maxMemoryUsage_ = maxMemoryUsageBuilder_.build();
        }
        if (maxMemoryUsageForUserBuilder_ == null) {
          result.maxMemoryUsageForUser_ = maxMemoryUsageForUser_;
        } else {
          result.maxMemoryUsageForUser_ = maxMemoryUsageForUserBuilder_.build();
        }
        if (maxNetworkBandwidthBuilder_ == null) {
          result.maxNetworkBandwidth_ = maxNetworkBandwidth_;
        } else {
          result.maxNetworkBandwidth_ = maxNetworkBandwidthBuilder_.build();
        }
        if (maxNetworkBandwidthForUserBuilder_ == null) {
          result.maxNetworkBandwidthForUser_ = maxNetworkBandwidthForUser_;
        } else {
          result.maxNetworkBandwidthForUser_ = maxNetworkBandwidthForUserBuilder_.build();
        }
        if (maxPartitionsPerInsertBlockBuilder_ == null) {
          result.maxPartitionsPerInsertBlock_ = maxPartitionsPerInsertBlock_;
        } else {
          result.maxPartitionsPerInsertBlock_ = maxPartitionsPerInsertBlockBuilder_.build();
        }
        if (maxConcurrentQueriesForUserBuilder_ == null) {
          result.maxConcurrentQueriesForUser_ = maxConcurrentQueriesForUser_;
        } else {
          result.maxConcurrentQueriesForUser_ = maxConcurrentQueriesForUserBuilder_.build();
        }
        if (forceIndexByDateBuilder_ == null) {
          result.forceIndexByDate_ = forceIndexByDate_;
        } else {
          result.forceIndexByDate_ = forceIndexByDateBuilder_.build();
        }
        if (forcePrimaryKeyBuilder_ == null) {
          result.forcePrimaryKey_ = forcePrimaryKey_;
        } else {
          result.forcePrimaryKey_ = forcePrimaryKeyBuilder_.build();
        }
        if (maxRowsToReadBuilder_ == null) {
          result.maxRowsToRead_ = maxRowsToRead_;
        } else {
          result.maxRowsToRead_ = maxRowsToReadBuilder_.build();
        }
        if (maxBytesToReadBuilder_ == null) {
          result.maxBytesToRead_ = maxBytesToRead_;
        } else {
          result.maxBytesToRead_ = maxBytesToReadBuilder_.build();
        }
        result.readOverflowMode_ = readOverflowMode_;
        if (maxRowsToGroupByBuilder_ == null) {
          result.maxRowsToGroupBy_ = maxRowsToGroupBy_;
        } else {
          result.maxRowsToGroupBy_ = maxRowsToGroupByBuilder_.build();
        }
        result.groupByOverflowMode_ = groupByOverflowMode_;
        if (maxRowsToSortBuilder_ == null) {
          result.maxRowsToSort_ = maxRowsToSort_;
        } else {
          result.maxRowsToSort_ = maxRowsToSortBuilder_.build();
        }
        if (maxBytesToSortBuilder_ == null) {
          result.maxBytesToSort_ = maxBytesToSort_;
        } else {
          result.maxBytesToSort_ = maxBytesToSortBuilder_.build();
        }
        result.sortOverflowMode_ = sortOverflowMode_;
        if (maxResultRowsBuilder_ == null) {
          result.maxResultRows_ = maxResultRows_;
        } else {
          result.maxResultRows_ = maxResultRowsBuilder_.build();
        }
        if (maxResultBytesBuilder_ == null) {
          result.maxResultBytes_ = maxResultBytes_;
        } else {
          result.maxResultBytes_ = maxResultBytesBuilder_.build();
        }
        result.resultOverflowMode_ = resultOverflowMode_;
        if (maxRowsInDistinctBuilder_ == null) {
          result.maxRowsInDistinct_ = maxRowsInDistinct_;
        } else {
          result.maxRowsInDistinct_ = maxRowsInDistinctBuilder_.build();
        }
        if (maxBytesInDistinctBuilder_ == null) {
          result.maxBytesInDistinct_ = maxBytesInDistinct_;
        } else {
          result.maxBytesInDistinct_ = maxBytesInDistinctBuilder_.build();
        }
        result.distinctOverflowMode_ = distinctOverflowMode_;
        if (maxRowsToTransferBuilder_ == null) {
          result.maxRowsToTransfer_ = maxRowsToTransfer_;
        } else {
          result.maxRowsToTransfer_ = maxRowsToTransferBuilder_.build();
        }
        if (maxBytesToTransferBuilder_ == null) {
          result.maxBytesToTransfer_ = maxBytesToTransfer_;
        } else {
          result.maxBytesToTransfer_ = maxBytesToTransferBuilder_.build();
        }
        result.transferOverflowMode_ = transferOverflowMode_;
        if (maxExecutionTimeBuilder_ == null) {
          result.maxExecutionTime_ = maxExecutionTime_;
        } else {
          result.maxExecutionTime_ = maxExecutionTimeBuilder_.build();
        }
        result.timeoutOverflowMode_ = timeoutOverflowMode_;
        if (maxRowsInSetBuilder_ == null) {
          result.maxRowsInSet_ = maxRowsInSet_;
        } else {
          result.maxRowsInSet_ = maxRowsInSetBuilder_.build();
        }
        if (maxBytesInSetBuilder_ == null) {
          result.maxBytesInSet_ = maxBytesInSet_;
        } else {
          result.maxBytesInSet_ = maxBytesInSetBuilder_.build();
        }
        result.setOverflowMode_ = setOverflowMode_;
        if (maxRowsInJoinBuilder_ == null) {
          result.maxRowsInJoin_ = maxRowsInJoin_;
        } else {
          result.maxRowsInJoin_ = maxRowsInJoinBuilder_.build();
        }
        if (maxBytesInJoinBuilder_ == null) {
          result.maxBytesInJoin_ = maxBytesInJoin_;
        } else {
          result.maxBytesInJoin_ = maxBytesInJoinBuilder_.build();
        }
        result.joinOverflowMode_ = joinOverflowMode_;
        if (((bitField0_ & 0x00000001) != 0)) {
          joinAlgorithm_ = java.util.Collections.unmodifiableList(joinAlgorithm_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.joinAlgorithm_ = joinAlgorithm_;
        if (anyJoinDistinctRightTableKeysBuilder_ == null) {
          result.anyJoinDistinctRightTableKeys_ = anyJoinDistinctRightTableKeys_;
        } else {
          result.anyJoinDistinctRightTableKeys_ = anyJoinDistinctRightTableKeysBuilder_.build();
        }
        if (maxColumnsToReadBuilder_ == null) {
          result.maxColumnsToRead_ = maxColumnsToRead_;
        } else {
          result.maxColumnsToRead_ = maxColumnsToReadBuilder_.build();
        }
        if (maxTemporaryColumnsBuilder_ == null) {
          result.maxTemporaryColumns_ = maxTemporaryColumns_;
        } else {
          result.maxTemporaryColumns_ = maxTemporaryColumnsBuilder_.build();
        }
        if (maxTemporaryNonConstColumnsBuilder_ == null) {
          result.maxTemporaryNonConstColumns_ = maxTemporaryNonConstColumns_;
        } else {
          result.maxTemporaryNonConstColumns_ = maxTemporaryNonConstColumnsBuilder_.build();
        }
        if (maxQuerySizeBuilder_ == null) {
          result.maxQuerySize_ = maxQuerySize_;
        } else {
          result.maxQuerySize_ = maxQuerySizeBuilder_.build();
        }
        if (maxAstDepthBuilder_ == null) {
          result.maxAstDepth_ = maxAstDepth_;
        } else {
          result.maxAstDepth_ = maxAstDepthBuilder_.build();
        }
        if (maxAstElementsBuilder_ == null) {
          result.maxAstElements_ = maxAstElements_;
        } else {
          result.maxAstElements_ = maxAstElementsBuilder_.build();
        }
        if (maxExpandedAstElementsBuilder_ == null) {
          result.maxExpandedAstElements_ = maxExpandedAstElements_;
        } else {
          result.maxExpandedAstElements_ = maxExpandedAstElementsBuilder_.build();
        }
        if (minExecutionSpeedBuilder_ == null) {
          result.minExecutionSpeed_ = minExecutionSpeed_;
        } else {
          result.minExecutionSpeed_ = minExecutionSpeedBuilder_.build();
        }
        if (minExecutionSpeedBytesBuilder_ == null) {
          result.minExecutionSpeedBytes_ = minExecutionSpeedBytes_;
        } else {
          result.minExecutionSpeedBytes_ = minExecutionSpeedBytesBuilder_.build();
        }
        result.countDistinctImplementation_ = countDistinctImplementation_;
        if (inputFormatValuesInterpretExpressionsBuilder_ == null) {
          result.inputFormatValuesInterpretExpressions_ = inputFormatValuesInterpretExpressions_;
        } else {
          result.inputFormatValuesInterpretExpressions_ = inputFormatValuesInterpretExpressionsBuilder_.build();
        }
        if (inputFormatDefaultsForOmittedFieldsBuilder_ == null) {
          result.inputFormatDefaultsForOmittedFields_ = inputFormatDefaultsForOmittedFields_;
        } else {
          result.inputFormatDefaultsForOmittedFields_ = inputFormatDefaultsForOmittedFieldsBuilder_.build();
        }
        if (inputFormatNullAsDefaultBuilder_ == null) {
          result.inputFormatNullAsDefault_ = inputFormatNullAsDefault_;
        } else {
          result.inputFormatNullAsDefault_ = inputFormatNullAsDefaultBuilder_.build();
        }
        result.dateTimeInputFormat_ = dateTimeInputFormat_;
        if (inputFormatWithNamesUseHeaderBuilder_ == null) {
          result.inputFormatWithNamesUseHeader_ = inputFormatWithNamesUseHeader_;
        } else {
          result.inputFormatWithNamesUseHeader_ = inputFormatWithNamesUseHeaderBuilder_.build();
        }
        if (outputFormatJsonQuote64BitIntegersBuilder_ == null) {
          result.outputFormatJsonQuote64BitIntegers_ = outputFormatJsonQuote64BitIntegers_;
        } else {
          result.outputFormatJsonQuote64BitIntegers_ = outputFormatJsonQuote64BitIntegersBuilder_.build();
        }
        if (outputFormatJsonQuoteDenormalsBuilder_ == null) {
          result.outputFormatJsonQuoteDenormals_ = outputFormatJsonQuoteDenormals_;
        } else {
          result.outputFormatJsonQuoteDenormals_ = outputFormatJsonQuoteDenormalsBuilder_.build();
        }
        result.dateTimeOutputFormat_ = dateTimeOutputFormat_;
        if (lowCardinalityAllowInNativeFormatBuilder_ == null) {
          result.lowCardinalityAllowInNativeFormat_ = lowCardinalityAllowInNativeFormat_;
        } else {
          result.lowCardinalityAllowInNativeFormat_ = lowCardinalityAllowInNativeFormatBuilder_.build();
        }
        if (allowSuspiciousLowCardinalityTypesBuilder_ == null) {
          result.allowSuspiciousLowCardinalityTypes_ = allowSuspiciousLowCardinalityTypes_;
        } else {
          result.allowSuspiciousLowCardinalityTypes_ = allowSuspiciousLowCardinalityTypesBuilder_.build();
        }
        if (emptyResultForAggregationByEmptySetBuilder_ == null) {
          result.emptyResultForAggregationByEmptySet_ = emptyResultForAggregationByEmptySet_;
        } else {
          result.emptyResultForAggregationByEmptySet_ = emptyResultForAggregationByEmptySetBuilder_.build();
        }
        if (httpConnectionTimeoutBuilder_ == null) {
          result.httpConnectionTimeout_ = httpConnectionTimeout_;
        } else {
          result.httpConnectionTimeout_ = httpConnectionTimeoutBuilder_.build();
        }
        if (httpReceiveTimeoutBuilder_ == null) {
          result.httpReceiveTimeout_ = httpReceiveTimeout_;
        } else {
          result.httpReceiveTimeout_ = httpReceiveTimeoutBuilder_.build();
        }
        if (httpSendTimeoutBuilder_ == null) {
          result.httpSendTimeout_ = httpSendTimeout_;
        } else {
          result.httpSendTimeout_ = httpSendTimeoutBuilder_.build();
        }
        if (enableHttpCompressionBuilder_ == null) {
          result.enableHttpCompression_ = enableHttpCompression_;
        } else {
          result.enableHttpCompression_ = enableHttpCompressionBuilder_.build();
        }
        if (sendProgressInHttpHeadersBuilder_ == null) {
          result.sendProgressInHttpHeaders_ = sendProgressInHttpHeaders_;
        } else {
          result.sendProgressInHttpHeaders_ = sendProgressInHttpHeadersBuilder_.build();
        }
        if (httpHeadersProgressIntervalBuilder_ == null) {
          result.httpHeadersProgressInterval_ = httpHeadersProgressInterval_;
        } else {
          result.httpHeadersProgressInterval_ = httpHeadersProgressIntervalBuilder_.build();
        }
        if (addHttpCorsHeaderBuilder_ == null) {
          result.addHttpCorsHeader_ = addHttpCorsHeader_;
        } else {
          result.addHttpCorsHeader_ = addHttpCorsHeaderBuilder_.build();
        }
        if (cancelHttpReadonlyQueriesOnClientCloseBuilder_ == null) {
          result.cancelHttpReadonlyQueriesOnClientClose_ = cancelHttpReadonlyQueriesOnClientClose_;
        } else {
          result.cancelHttpReadonlyQueriesOnClientClose_ = cancelHttpReadonlyQueriesOnClientCloseBuilder_.build();
        }
        if (maxHttpGetRedirectsBuilder_ == null) {
          result.maxHttpGetRedirects_ = maxHttpGetRedirects_;
        } else {
          result.maxHttpGetRedirects_ = maxHttpGetRedirectsBuilder_.build();
        }
        if (joinedSubqueryRequiresAliasBuilder_ == null) {
          result.joinedSubqueryRequiresAlias_ = joinedSubqueryRequiresAlias_;
        } else {
          result.joinedSubqueryRequiresAlias_ = joinedSubqueryRequiresAliasBuilder_.build();
        }
        if (joinUseNullsBuilder_ == null) {
          result.joinUseNulls_ = joinUseNulls_;
        } else {
          result.joinUseNulls_ = joinUseNullsBuilder_.build();
        }
        if (transformNullInBuilder_ == null) {
          result.transformNullIn_ = transformNullIn_;
        } else {
          result.transformNullIn_ = transformNullInBuilder_.build();
        }
        result.quotaMode_ = quotaMode_;
        if (flattenNestedBuilder_ == null) {
          result.flattenNested_ = flattenNested_;
        } else {
          result.flattenNested_ = flattenNestedBuilder_.build();
        }
        result.formatRegexp_ = formatRegexp_;
        result.formatRegexpEscapingRule_ = formatRegexpEscapingRule_;
        if (formatRegexpSkipUnmatchedBuilder_ == null) {
          result.formatRegexpSkipUnmatched_ = formatRegexpSkipUnmatched_;
        } else {
          result.formatRegexpSkipUnmatched_ = formatRegexpSkipUnmatchedBuilder_.build();
        }
        if (asyncInsertBuilder_ == null) {
          result.asyncInsert_ = asyncInsert_;
        } else {
          result.asyncInsert_ = asyncInsertBuilder_.build();
        }
        if (asyncInsertThreadsBuilder_ == null) {
          result.asyncInsertThreads_ = asyncInsertThreads_;
        } else {
          result.asyncInsertThreads_ = asyncInsertThreadsBuilder_.build();
        }
        if (waitForAsyncInsertBuilder_ == null) {
          result.waitForAsyncInsert_ = waitForAsyncInsert_;
        } else {
          result.waitForAsyncInsert_ = waitForAsyncInsertBuilder_.build();
        }
        if (waitForAsyncInsertTimeoutBuilder_ == null) {
          result.waitForAsyncInsertTimeout_ = waitForAsyncInsertTimeout_;
        } else {
          result.waitForAsyncInsertTimeout_ = waitForAsyncInsertTimeoutBuilder_.build();
        }
        if (asyncInsertMaxDataSizeBuilder_ == null) {
          result.asyncInsertMaxDataSize_ = asyncInsertMaxDataSize_;
        } else {
          result.asyncInsertMaxDataSize_ = asyncInsertMaxDataSizeBuilder_.build();
        }
        if (asyncInsertBusyTimeoutBuilder_ == null) {
          result.asyncInsertBusyTimeout_ = asyncInsertBusyTimeout_;
        } else {
          result.asyncInsertBusyTimeout_ = asyncInsertBusyTimeoutBuilder_.build();
        }
        if (asyncInsertStaleTimeoutBuilder_ == null) {
          result.asyncInsertStaleTimeout_ = asyncInsertStaleTimeout_;
        } else {
          result.asyncInsertStaleTimeout_ = asyncInsertStaleTimeoutBuilder_.build();
        }
        if (memoryProfilerStepBuilder_ == null) {
          result.memoryProfilerStep_ = memoryProfilerStep_;
        } else {
          result.memoryProfilerStep_ = memoryProfilerStepBuilder_.build();
        }
        if (memoryProfilerSampleProbabilityBuilder_ == null) {
          result.memoryProfilerSampleProbability_ = memoryProfilerSampleProbability_;
        } else {
          result.memoryProfilerSampleProbability_ = memoryProfilerSampleProbabilityBuilder_.build();
        }
        if (maxFinalThreadsBuilder_ == null) {
          result.maxFinalThreads_ = maxFinalThreads_;
        } else {
          result.maxFinalThreads_ = maxFinalThreadsBuilder_.build();
        }
        if (inputFormatParallelParsingBuilder_ == null) {
          result.inputFormatParallelParsing_ = inputFormatParallelParsing_;
        } else {
          result.inputFormatParallelParsing_ = inputFormatParallelParsingBuilder_.build();
        }
        if (inputFormatImportNestedJsonBuilder_ == null) {
          result.inputFormatImportNestedJson_ = inputFormatImportNestedJson_;
        } else {
          result.inputFormatImportNestedJson_ = inputFormatImportNestedJsonBuilder_.build();
        }
        result.localFilesystemReadMethod_ = localFilesystemReadMethod_;
        if (maxReadBufferSizeBuilder_ == null) {
          result.maxReadBufferSize_ = maxReadBufferSize_;
        } else {
          result.maxReadBufferSize_ = maxReadBufferSizeBuilder_.build();
        }
        if (insertKeeperMaxRetriesBuilder_ == null) {
          result.insertKeeperMaxRetries_ = insertKeeperMaxRetries_;
        } else {
          result.insertKeeperMaxRetries_ = insertKeeperMaxRetriesBuilder_.build();
        }
        if (maxTemporaryDataOnDiskSizeForUserBuilder_ == null) {
          result.maxTemporaryDataOnDiskSizeForUser_ = maxTemporaryDataOnDiskSizeForUser_;
        } else {
          result.maxTemporaryDataOnDiskSizeForUser_ = maxTemporaryDataOnDiskSizeForUserBuilder_.build();
        }
        if (maxTemporaryDataOnDiskSizeForQueryBuilder_ == null) {
          result.maxTemporaryDataOnDiskSizeForQuery_ = maxTemporaryDataOnDiskSizeForQuery_;
        } else {
          result.maxTemporaryDataOnDiskSizeForQuery_ = maxTemporaryDataOnDiskSizeForQueryBuilder_.build();
        }
        if (maxParserDepthBuilder_ == null) {
          result.maxParserDepth_ = maxParserDepth_;
        } else {
          result.maxParserDepth_ = maxParserDepthBuilder_.build();
        }
        result.remoteFilesystemReadMethod_ = remoteFilesystemReadMethod_;
        if (memoryOvercommitRatioDenominatorBuilder_ == null) {
          result.memoryOvercommitRatioDenominator_ = memoryOvercommitRatioDenominator_;
        } else {
          result.memoryOvercommitRatioDenominator_ = memoryOvercommitRatioDenominatorBuilder_.build();
        }
        if (memoryOvercommitRatioDenominatorForUserBuilder_ == null) {
          result.memoryOvercommitRatioDenominatorForUser_ = memoryOvercommitRatioDenominatorForUser_;
        } else {
          result.memoryOvercommitRatioDenominatorForUser_ = memoryOvercommitRatioDenominatorForUserBuilder_.build();
        }
        if (memoryUsageOvercommitMaxWaitMicrosecondsBuilder_ == null) {
          result.memoryUsageOvercommitMaxWaitMicroseconds_ = memoryUsageOvercommitMaxWaitMicroseconds_;
        } else {
          result.memoryUsageOvercommitMaxWaitMicroseconds_ = memoryUsageOvercommitMaxWaitMicrosecondsBuilder_.build();
        }
        if (logQueryThreadsBuilder_ == null) {
          result.logQueryThreads_ = logQueryThreads_;
        } else {
          result.logQueryThreads_ = logQueryThreadsBuilder_.build();
        }
        if (maxInsertThreadsBuilder_ == null) {
          result.maxInsertThreads_ = maxInsertThreads_;
        } else {
          result.maxInsertThreads_ = maxInsertThreadsBuilder_.build();
        }
        if (useHedgedRequestsBuilder_ == null) {
          result.useHedgedRequests_ = useHedgedRequests_;
        } else {
          result.useHedgedRequests_ = useHedgedRequestsBuilder_.build();
        }
        if (idleConnectionTimeoutBuilder_ == null) {
          result.idleConnectionTimeout_ = idleConnectionTimeout_;
        } else {
          result.idleConnectionTimeout_ = idleConnectionTimeoutBuilder_.build();
        }
        if (hedgedConnectionTimeoutMsBuilder_ == null) {
          result.hedgedConnectionTimeoutMs_ = hedgedConnectionTimeoutMs_;
        } else {
          result.hedgedConnectionTimeoutMs_ = hedgedConnectionTimeoutMsBuilder_.build();
        }
        result.loadBalancing_ = loadBalancing_;
        if (preferLocalhostReplicaBuilder_ == null) {
          result.preferLocalhostReplica_ = preferLocalhostReplica_;
        } else {
          result.preferLocalhostReplica_ = preferLocalhostReplicaBuilder_.build();
        }
        if (compileBuilder_ == null) {
          result.compile_ = compile_;
        } else {
          result.compile_ = compileBuilder_.build();
        }
        if (minCountToCompileBuilder_ == null) {
          result.minCountToCompile_ = minCountToCompile_;
        } else {
          result.minCountToCompile_ = minCountToCompileBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings) {
          return mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings other) {
        if (other == yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.getDefaultInstance()) return this;
        if (other.hasReadonly()) {
          mergeReadonly(other.getReadonly());
        }
        if (other.hasAllowDdl()) {
          mergeAllowDdl(other.getAllowDdl());
        }
        if (other.hasAllowIntrospectionFunctions()) {
          mergeAllowIntrospectionFunctions(other.getAllowIntrospectionFunctions());
        }
        if (other.hasConnectTimeout()) {
          mergeConnectTimeout(other.getConnectTimeout());
        }
        if (other.hasConnectTimeoutWithFailover()) {
          mergeConnectTimeoutWithFailover(other.getConnectTimeoutWithFailover());
        }
        if (other.hasReceiveTimeout()) {
          mergeReceiveTimeout(other.getReceiveTimeout());
        }
        if (other.hasSendTimeout()) {
          mergeSendTimeout(other.getSendTimeout());
        }
        if (other.hasTimeoutBeforeCheckingExecutionSpeed()) {
          mergeTimeoutBeforeCheckingExecutionSpeed(other.getTimeoutBeforeCheckingExecutionSpeed());
        }
        if (other.hasInsertQuorum()) {
          mergeInsertQuorum(other.getInsertQuorum());
        }
        if (other.hasInsertQuorumTimeout()) {
          mergeInsertQuorumTimeout(other.getInsertQuorumTimeout());
        }
        if (other.hasInsertQuorumParallel()) {
          mergeInsertQuorumParallel(other.getInsertQuorumParallel());
        }
        if (other.hasInsertNullAsDefault()) {
          mergeInsertNullAsDefault(other.getInsertNullAsDefault());
        }
        if (other.hasSelectSequentialConsistency()) {
          mergeSelectSequentialConsistency(other.getSelectSequentialConsistency());
        }
        if (other.hasDeduplicateBlocksInDependentMaterializedViews()) {
          mergeDeduplicateBlocksInDependentMaterializedViews(other.getDeduplicateBlocksInDependentMaterializedViews());
        }
        if (other.hasReplicationAlterPartitionsSync()) {
          mergeReplicationAlterPartitionsSync(other.getReplicationAlterPartitionsSync());
        }
        if (other.hasMaxReplicaDelayForDistributedQueries()) {
          mergeMaxReplicaDelayForDistributedQueries(other.getMaxReplicaDelayForDistributedQueries());
        }
        if (other.hasFallbackToStaleReplicasForDistributedQueries()) {
          mergeFallbackToStaleReplicasForDistributedQueries(other.getFallbackToStaleReplicasForDistributedQueries());
        }
        if (other.distributedProductMode_ != 0) {
          setDistributedProductModeValue(other.getDistributedProductModeValue());
        }
        if (other.hasDistributedAggregationMemoryEfficient()) {
          mergeDistributedAggregationMemoryEfficient(other.getDistributedAggregationMemoryEfficient());
        }
        if (other.hasDistributedDdlTaskTimeout()) {
          mergeDistributedDdlTaskTimeout(other.getDistributedDdlTaskTimeout());
        }
        if (other.hasSkipUnavailableShards()) {
          mergeSkipUnavailableShards(other.getSkipUnavailableShards());
        }
        if (other.hasCompileExpressions()) {
          mergeCompileExpressions(other.getCompileExpressions());
        }
        if (other.hasMinCountToCompileExpression()) {
          mergeMinCountToCompileExpression(other.getMinCountToCompileExpression());
        }
        if (other.hasMaxBlockSize()) {
          mergeMaxBlockSize(other.getMaxBlockSize());
        }
        if (other.hasMinInsertBlockSizeRows()) {
          mergeMinInsertBlockSizeRows(other.getMinInsertBlockSizeRows());
        }
        if (other.hasMinInsertBlockSizeBytes()) {
          mergeMinInsertBlockSizeBytes(other.getMinInsertBlockSizeBytes());
        }
        if (other.hasMaxInsertBlockSize()) {
          mergeMaxInsertBlockSize(other.getMaxInsertBlockSize());
        }
        if (other.hasMinBytesToUseDirectIo()) {
          mergeMinBytesToUseDirectIo(other.getMinBytesToUseDirectIo());
        }
        if (other.hasUseUncompressedCache()) {
          mergeUseUncompressedCache(other.getUseUncompressedCache());
        }
        if (other.hasMergeTreeMaxRowsToUseCache()) {
          mergeMergeTreeMaxRowsToUseCache(other.getMergeTreeMaxRowsToUseCache());
        }
        if (other.hasMergeTreeMaxBytesToUseCache()) {
          mergeMergeTreeMaxBytesToUseCache(other.getMergeTreeMaxBytesToUseCache());
        }
        if (other.hasMergeTreeMinRowsForConcurrentRead()) {
          mergeMergeTreeMinRowsForConcurrentRead(other.getMergeTreeMinRowsForConcurrentRead());
        }
        if (other.hasMergeTreeMinBytesForConcurrentRead()) {
          mergeMergeTreeMinBytesForConcurrentRead(other.getMergeTreeMinBytesForConcurrentRead());
        }
        if (other.hasMaxBytesBeforeExternalGroupBy()) {
          mergeMaxBytesBeforeExternalGroupBy(other.getMaxBytesBeforeExternalGroupBy());
        }
        if (other.hasMaxBytesBeforeExternalSort()) {
          mergeMaxBytesBeforeExternalSort(other.getMaxBytesBeforeExternalSort());
        }
        if (other.hasGroupByTwoLevelThreshold()) {
          mergeGroupByTwoLevelThreshold(other.getGroupByTwoLevelThreshold());
        }
        if (other.hasGroupByTwoLevelThresholdBytes()) {
          mergeGroupByTwoLevelThresholdBytes(other.getGroupByTwoLevelThresholdBytes());
        }
        if (other.hasPriority()) {
          mergePriority(other.getPriority());
        }
        if (other.hasMaxThreads()) {
          mergeMaxThreads(other.getMaxThreads());
        }
        if (other.hasMaxMemoryUsage()) {
          mergeMaxMemoryUsage(other.getMaxMemoryUsage());
        }
        if (other.hasMaxMemoryUsageForUser()) {
          mergeMaxMemoryUsageForUser(other.getMaxMemoryUsageForUser());
        }
        if (other.hasMaxNetworkBandwidth()) {
          mergeMaxNetworkBandwidth(other.getMaxNetworkBandwidth());
        }
        if (other.hasMaxNetworkBandwidthForUser()) {
          mergeMaxNetworkBandwidthForUser(other.getMaxNetworkBandwidthForUser());
        }
        if (other.hasMaxPartitionsPerInsertBlock()) {
          mergeMaxPartitionsPerInsertBlock(other.getMaxPartitionsPerInsertBlock());
        }
        if (other.hasMaxConcurrentQueriesForUser()) {
          mergeMaxConcurrentQueriesForUser(other.getMaxConcurrentQueriesForUser());
        }
        if (other.hasForceIndexByDate()) {
          mergeForceIndexByDate(other.getForceIndexByDate());
        }
        if (other.hasForcePrimaryKey()) {
          mergeForcePrimaryKey(other.getForcePrimaryKey());
        }
        if (other.hasMaxRowsToRead()) {
          mergeMaxRowsToRead(other.getMaxRowsToRead());
        }
        if (other.hasMaxBytesToRead()) {
          mergeMaxBytesToRead(other.getMaxBytesToRead());
        }
        if (other.readOverflowMode_ != 0) {
          setReadOverflowModeValue(other.getReadOverflowModeValue());
        }
        if (other.hasMaxRowsToGroupBy()) {
          mergeMaxRowsToGroupBy(other.getMaxRowsToGroupBy());
        }
        if (other.groupByOverflowMode_ != 0) {
          setGroupByOverflowModeValue(other.getGroupByOverflowModeValue());
        }
        if (other.hasMaxRowsToSort()) {
          mergeMaxRowsToSort(other.getMaxRowsToSort());
        }
        if (other.hasMaxBytesToSort()) {
          mergeMaxBytesToSort(other.getMaxBytesToSort());
        }
        if (other.sortOverflowMode_ != 0) {
          setSortOverflowModeValue(other.getSortOverflowModeValue());
        }
        if (other.hasMaxResultRows()) {
          mergeMaxResultRows(other.getMaxResultRows());
        }
        if (other.hasMaxResultBytes()) {
          mergeMaxResultBytes(other.getMaxResultBytes());
        }
        if (other.resultOverflowMode_ != 0) {
          setResultOverflowModeValue(other.getResultOverflowModeValue());
        }
        if (other.hasMaxRowsInDistinct()) {
          mergeMaxRowsInDistinct(other.getMaxRowsInDistinct());
        }
        if (other.hasMaxBytesInDistinct()) {
          mergeMaxBytesInDistinct(other.getMaxBytesInDistinct());
        }
        if (other.distinctOverflowMode_ != 0) {
          setDistinctOverflowModeValue(other.getDistinctOverflowModeValue());
        }
        if (other.hasMaxRowsToTransfer()) {
          mergeMaxRowsToTransfer(other.getMaxRowsToTransfer());
        }
        if (other.hasMaxBytesToTransfer()) {
          mergeMaxBytesToTransfer(other.getMaxBytesToTransfer());
        }
        if (other.transferOverflowMode_ != 0) {
          setTransferOverflowModeValue(other.getTransferOverflowModeValue());
        }
        if (other.hasMaxExecutionTime()) {
          mergeMaxExecutionTime(other.getMaxExecutionTime());
        }
        if (other.timeoutOverflowMode_ != 0) {
          setTimeoutOverflowModeValue(other.getTimeoutOverflowModeValue());
        }
        if (other.hasMaxRowsInSet()) {
          mergeMaxRowsInSet(other.getMaxRowsInSet());
        }
        if (other.hasMaxBytesInSet()) {
          mergeMaxBytesInSet(other.getMaxBytesInSet());
        }
        if (other.setOverflowMode_ != 0) {
          setSetOverflowModeValue(other.getSetOverflowModeValue());
        }
        if (other.hasMaxRowsInJoin()) {
          mergeMaxRowsInJoin(other.getMaxRowsInJoin());
        }
        if (other.hasMaxBytesInJoin()) {
          mergeMaxBytesInJoin(other.getMaxBytesInJoin());
        }
        if (other.joinOverflowMode_ != 0) {
          setJoinOverflowModeValue(other.getJoinOverflowModeValue());
        }
        if (!other.joinAlgorithm_.isEmpty()) {
          if (joinAlgorithm_.isEmpty()) {
            joinAlgorithm_ = other.joinAlgorithm_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureJoinAlgorithmIsMutable();
            joinAlgorithm_.addAll(other.joinAlgorithm_);
          }
          onChanged();
        }
        if (other.hasAnyJoinDistinctRightTableKeys()) {
          mergeAnyJoinDistinctRightTableKeys(other.getAnyJoinDistinctRightTableKeys());
        }
        if (other.hasMaxColumnsToRead()) {
          mergeMaxColumnsToRead(other.getMaxColumnsToRead());
        }
        if (other.hasMaxTemporaryColumns()) {
          mergeMaxTemporaryColumns(other.getMaxTemporaryColumns());
        }
        if (other.hasMaxTemporaryNonConstColumns()) {
          mergeMaxTemporaryNonConstColumns(other.getMaxTemporaryNonConstColumns());
        }
        if (other.hasMaxQuerySize()) {
          mergeMaxQuerySize(other.getMaxQuerySize());
        }
        if (other.hasMaxAstDepth()) {
          mergeMaxAstDepth(other.getMaxAstDepth());
        }
        if (other.hasMaxAstElements()) {
          mergeMaxAstElements(other.getMaxAstElements());
        }
        if (other.hasMaxExpandedAstElements()) {
          mergeMaxExpandedAstElements(other.getMaxExpandedAstElements());
        }
        if (other.hasMinExecutionSpeed()) {
          mergeMinExecutionSpeed(other.getMinExecutionSpeed());
        }
        if (other.hasMinExecutionSpeedBytes()) {
          mergeMinExecutionSpeedBytes(other.getMinExecutionSpeedBytes());
        }
        if (other.countDistinctImplementation_ != 0) {
          setCountDistinctImplementationValue(other.getCountDistinctImplementationValue());
        }
        if (other.hasInputFormatValuesInterpretExpressions()) {
          mergeInputFormatValuesInterpretExpressions(other.getInputFormatValuesInterpretExpressions());
        }
        if (other.hasInputFormatDefaultsForOmittedFields()) {
          mergeInputFormatDefaultsForOmittedFields(other.getInputFormatDefaultsForOmittedFields());
        }
        if (other.hasInputFormatNullAsDefault()) {
          mergeInputFormatNullAsDefault(other.getInputFormatNullAsDefault());
        }
        if (other.dateTimeInputFormat_ != 0) {
          setDateTimeInputFormatValue(other.getDateTimeInputFormatValue());
        }
        if (other.hasInputFormatWithNamesUseHeader()) {
          mergeInputFormatWithNamesUseHeader(other.getInputFormatWithNamesUseHeader());
        }
        if (other.hasOutputFormatJsonQuote64BitIntegers()) {
          mergeOutputFormatJsonQuote64BitIntegers(other.getOutputFormatJsonQuote64BitIntegers());
        }
        if (other.hasOutputFormatJsonQuoteDenormals()) {
          mergeOutputFormatJsonQuoteDenormals(other.getOutputFormatJsonQuoteDenormals());
        }
        if (other.dateTimeOutputFormat_ != 0) {
          setDateTimeOutputFormatValue(other.getDateTimeOutputFormatValue());
        }
        if (other.hasLowCardinalityAllowInNativeFormat()) {
          mergeLowCardinalityAllowInNativeFormat(other.getLowCardinalityAllowInNativeFormat());
        }
        if (other.hasAllowSuspiciousLowCardinalityTypes()) {
          mergeAllowSuspiciousLowCardinalityTypes(other.getAllowSuspiciousLowCardinalityTypes());
        }
        if (other.hasEmptyResultForAggregationByEmptySet()) {
          mergeEmptyResultForAggregationByEmptySet(other.getEmptyResultForAggregationByEmptySet());
        }
        if (other.hasHttpConnectionTimeout()) {
          mergeHttpConnectionTimeout(other.getHttpConnectionTimeout());
        }
        if (other.hasHttpReceiveTimeout()) {
          mergeHttpReceiveTimeout(other.getHttpReceiveTimeout());
        }
        if (other.hasHttpSendTimeout()) {
          mergeHttpSendTimeout(other.getHttpSendTimeout());
        }
        if (other.hasEnableHttpCompression()) {
          mergeEnableHttpCompression(other.getEnableHttpCompression());
        }
        if (other.hasSendProgressInHttpHeaders()) {
          mergeSendProgressInHttpHeaders(other.getSendProgressInHttpHeaders());
        }
        if (other.hasHttpHeadersProgressInterval()) {
          mergeHttpHeadersProgressInterval(other.getHttpHeadersProgressInterval());
        }
        if (other.hasAddHttpCorsHeader()) {
          mergeAddHttpCorsHeader(other.getAddHttpCorsHeader());
        }
        if (other.hasCancelHttpReadonlyQueriesOnClientClose()) {
          mergeCancelHttpReadonlyQueriesOnClientClose(other.getCancelHttpReadonlyQueriesOnClientClose());
        }
        if (other.hasMaxHttpGetRedirects()) {
          mergeMaxHttpGetRedirects(other.getMaxHttpGetRedirects());
        }
        if (other.hasJoinedSubqueryRequiresAlias()) {
          mergeJoinedSubqueryRequiresAlias(other.getJoinedSubqueryRequiresAlias());
        }
        if (other.hasJoinUseNulls()) {
          mergeJoinUseNulls(other.getJoinUseNulls());
        }
        if (other.hasTransformNullIn()) {
          mergeTransformNullIn(other.getTransformNullIn());
        }
        if (other.quotaMode_ != 0) {
          setQuotaModeValue(other.getQuotaModeValue());
        }
        if (other.hasFlattenNested()) {
          mergeFlattenNested(other.getFlattenNested());
        }
        if (!other.getFormatRegexp().isEmpty()) {
          formatRegexp_ = other.formatRegexp_;
          onChanged();
        }
        if (other.formatRegexpEscapingRule_ != 0) {
          setFormatRegexpEscapingRuleValue(other.getFormatRegexpEscapingRuleValue());
        }
        if (other.hasFormatRegexpSkipUnmatched()) {
          mergeFormatRegexpSkipUnmatched(other.getFormatRegexpSkipUnmatched());
        }
        if (other.hasAsyncInsert()) {
          mergeAsyncInsert(other.getAsyncInsert());
        }
        if (other.hasAsyncInsertThreads()) {
          mergeAsyncInsertThreads(other.getAsyncInsertThreads());
        }
        if (other.hasWaitForAsyncInsert()) {
          mergeWaitForAsyncInsert(other.getWaitForAsyncInsert());
        }
        if (other.hasWaitForAsyncInsertTimeout()) {
          mergeWaitForAsyncInsertTimeout(other.getWaitForAsyncInsertTimeout());
        }
        if (other.hasAsyncInsertMaxDataSize()) {
          mergeAsyncInsertMaxDataSize(other.getAsyncInsertMaxDataSize());
        }
        if (other.hasAsyncInsertBusyTimeout()) {
          mergeAsyncInsertBusyTimeout(other.getAsyncInsertBusyTimeout());
        }
        if (other.hasAsyncInsertStaleTimeout()) {
          mergeAsyncInsertStaleTimeout(other.getAsyncInsertStaleTimeout());
        }
        if (other.hasMemoryProfilerStep()) {
          mergeMemoryProfilerStep(other.getMemoryProfilerStep());
        }
        if (other.hasMemoryProfilerSampleProbability()) {
          mergeMemoryProfilerSampleProbability(other.getMemoryProfilerSampleProbability());
        }
        if (other.hasMaxFinalThreads()) {
          mergeMaxFinalThreads(other.getMaxFinalThreads());
        }
        if (other.hasInputFormatParallelParsing()) {
          mergeInputFormatParallelParsing(other.getInputFormatParallelParsing());
        }
        if (other.hasInputFormatImportNestedJson()) {
          mergeInputFormatImportNestedJson(other.getInputFormatImportNestedJson());
        }
        if (other.localFilesystemReadMethod_ != 0) {
          setLocalFilesystemReadMethodValue(other.getLocalFilesystemReadMethodValue());
        }
        if (other.hasMaxReadBufferSize()) {
          mergeMaxReadBufferSize(other.getMaxReadBufferSize());
        }
        if (other.hasInsertKeeperMaxRetries()) {
          mergeInsertKeeperMaxRetries(other.getInsertKeeperMaxRetries());
        }
        if (other.hasMaxTemporaryDataOnDiskSizeForUser()) {
          mergeMaxTemporaryDataOnDiskSizeForUser(other.getMaxTemporaryDataOnDiskSizeForUser());
        }
        if (other.hasMaxTemporaryDataOnDiskSizeForQuery()) {
          mergeMaxTemporaryDataOnDiskSizeForQuery(other.getMaxTemporaryDataOnDiskSizeForQuery());
        }
        if (other.hasMaxParserDepth()) {
          mergeMaxParserDepth(other.getMaxParserDepth());
        }
        if (other.remoteFilesystemReadMethod_ != 0) {
          setRemoteFilesystemReadMethodValue(other.getRemoteFilesystemReadMethodValue());
        }
        if (other.hasMemoryOvercommitRatioDenominator()) {
          mergeMemoryOvercommitRatioDenominator(other.getMemoryOvercommitRatioDenominator());
        }
        if (other.hasMemoryOvercommitRatioDenominatorForUser()) {
          mergeMemoryOvercommitRatioDenominatorForUser(other.getMemoryOvercommitRatioDenominatorForUser());
        }
        if (other.hasMemoryUsageOvercommitMaxWaitMicroseconds()) {
          mergeMemoryUsageOvercommitMaxWaitMicroseconds(other.getMemoryUsageOvercommitMaxWaitMicroseconds());
        }
        if (other.hasLogQueryThreads()) {
          mergeLogQueryThreads(other.getLogQueryThreads());
        }
        if (other.hasMaxInsertThreads()) {
          mergeMaxInsertThreads(other.getMaxInsertThreads());
        }
        if (other.hasUseHedgedRequests()) {
          mergeUseHedgedRequests(other.getUseHedgedRequests());
        }
        if (other.hasIdleConnectionTimeout()) {
          mergeIdleConnectionTimeout(other.getIdleConnectionTimeout());
        }
        if (other.hasHedgedConnectionTimeoutMs()) {
          mergeHedgedConnectionTimeoutMs(other.getHedgedConnectionTimeoutMs());
        }
        if (other.loadBalancing_ != 0) {
          setLoadBalancingValue(other.getLoadBalancingValue());
        }
        if (other.hasPreferLocalhostReplica()) {
          mergePreferLocalhostReplica(other.getPreferLocalhostReplica());
        }
        if (other.hasCompile()) {
          mergeCompile(other.getCompile());
        }
        if (other.hasMinCountToCompile()) {
          mergeMinCountToCompile(other.getMinCountToCompile());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Int64Value readonly_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> readonlyBuilder_;
      /**
       * <pre>
       * Restricts permissions for non-DDL queries. To restrict permissions for DDL queries, use [allow_ddl] instead.
       * * **0** (default)-no restrictions.
       * * **1**-only read data queries are allowed.
       * * **2**-read data and change settings queries are allowed.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_readonly).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value readonly = 1 [(.yandex.cloud.value) = "0-2"];</code>
       * @return Whether the readonly field is set.
       */
      public boolean hasReadonly() {
        return readonlyBuilder_ != null || readonly_ != null;
      }
      /**
       * <pre>
       * Restricts permissions for non-DDL queries. To restrict permissions for DDL queries, use [allow_ddl] instead.
       * * **0** (default)-no restrictions.
       * * **1**-only read data queries are allowed.
       * * **2**-read data and change settings queries are allowed.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_readonly).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value readonly = 1 [(.yandex.cloud.value) = "0-2"];</code>
       * @return The readonly.
       */
      public com.google.protobuf.Int64Value getReadonly() {
        if (readonlyBuilder_ == null) {
          return readonly_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : readonly_;
        } else {
          return readonlyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Restricts permissions for non-DDL queries. To restrict permissions for DDL queries, use [allow_ddl] instead.
       * * **0** (default)-no restrictions.
       * * **1**-only read data queries are allowed.
       * * **2**-read data and change settings queries are allowed.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_readonly).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value readonly = 1 [(.yandex.cloud.value) = "0-2"];</code>
       */
      public Builder setReadonly(com.google.protobuf.Int64Value value) {
        if (readonlyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          readonly_ = value;
          onChanged();
        } else {
          readonlyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Restricts permissions for non-DDL queries. To restrict permissions for DDL queries, use [allow_ddl] instead.
       * * **0** (default)-no restrictions.
       * * **1**-only read data queries are allowed.
       * * **2**-read data and change settings queries are allowed.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_readonly).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value readonly = 1 [(.yandex.cloud.value) = "0-2"];</code>
       */
      public Builder setReadonly(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (readonlyBuilder_ == null) {
          readonly_ = builderForValue.build();
          onChanged();
        } else {
          readonlyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Restricts permissions for non-DDL queries. To restrict permissions for DDL queries, use [allow_ddl] instead.
       * * **0** (default)-no restrictions.
       * * **1**-only read data queries are allowed.
       * * **2**-read data and change settings queries are allowed.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_readonly).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value readonly = 1 [(.yandex.cloud.value) = "0-2"];</code>
       */
      public Builder mergeReadonly(com.google.protobuf.Int64Value value) {
        if (readonlyBuilder_ == null) {
          if (readonly_ != null) {
            readonly_ =
              com.google.protobuf.Int64Value.newBuilder(readonly_).mergeFrom(value).buildPartial();
          } else {
            readonly_ = value;
          }
          onChanged();
        } else {
          readonlyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Restricts permissions for non-DDL queries. To restrict permissions for DDL queries, use [allow_ddl] instead.
       * * **0** (default)-no restrictions.
       * * **1**-only read data queries are allowed.
       * * **2**-read data and change settings queries are allowed.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_readonly).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value readonly = 1 [(.yandex.cloud.value) = "0-2"];</code>
       */
      public Builder clearReadonly() {
        if (readonlyBuilder_ == null) {
          readonly_ = null;
          onChanged();
        } else {
          readonly_ = null;
          readonlyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Restricts permissions for non-DDL queries. To restrict permissions for DDL queries, use [allow_ddl] instead.
       * * **0** (default)-no restrictions.
       * * **1**-only read data queries are allowed.
       * * **2**-read data and change settings queries are allowed.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_readonly).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value readonly = 1 [(.yandex.cloud.value) = "0-2"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getReadonlyBuilder() {
        
        onChanged();
        return getReadonlyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Restricts permissions for non-DDL queries. To restrict permissions for DDL queries, use [allow_ddl] instead.
       * * **0** (default)-no restrictions.
       * * **1**-only read data queries are allowed.
       * * **2**-read data and change settings queries are allowed.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_readonly).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value readonly = 1 [(.yandex.cloud.value) = "0-2"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getReadonlyOrBuilder() {
        if (readonlyBuilder_ != null) {
          return readonlyBuilder_.getMessageOrBuilder();
        } else {
          return readonly_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : readonly_;
        }
      }
      /**
       * <pre>
       * Restricts permissions for non-DDL queries. To restrict permissions for DDL queries, use [allow_ddl] instead.
       * * **0** (default)-no restrictions.
       * * **1**-only read data queries are allowed.
       * * **2**-read data and change settings queries are allowed.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_readonly).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value readonly = 1 [(.yandex.cloud.value) = "0-2"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getReadonlyFieldBuilder() {
        if (readonlyBuilder_ == null) {
          readonlyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getReadonly(),
                  getParentForChildren(),
                  isClean());
          readonly_ = null;
        }
        return readonlyBuilder_;
      }

      private com.google.protobuf.BoolValue allowDdl_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> allowDdlBuilder_;
      /**
       * <pre>
       * Determines whether DDL queries are allowed (e.g., **CREATE**, **ALTER**, **RENAME**, etc).
       * Default value: **true**.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_allow_ddl).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue allow_ddl = 2;</code>
       * @return Whether the allowDdl field is set.
       */
      public boolean hasAllowDdl() {
        return allowDdlBuilder_ != null || allowDdl_ != null;
      }
      /**
       * <pre>
       * Determines whether DDL queries are allowed (e.g., **CREATE**, **ALTER**, **RENAME**, etc).
       * Default value: **true**.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_allow_ddl).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue allow_ddl = 2;</code>
       * @return The allowDdl.
       */
      public com.google.protobuf.BoolValue getAllowDdl() {
        if (allowDdlBuilder_ == null) {
          return allowDdl_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : allowDdl_;
        } else {
          return allowDdlBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Determines whether DDL queries are allowed (e.g., **CREATE**, **ALTER**, **RENAME**, etc).
       * Default value: **true**.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_allow_ddl).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue allow_ddl = 2;</code>
       */
      public Builder setAllowDdl(com.google.protobuf.BoolValue value) {
        if (allowDdlBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          allowDdl_ = value;
          onChanged();
        } else {
          allowDdlBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Determines whether DDL queries are allowed (e.g., **CREATE**, **ALTER**, **RENAME**, etc).
       * Default value: **true**.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_allow_ddl).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue allow_ddl = 2;</code>
       */
      public Builder setAllowDdl(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (allowDdlBuilder_ == null) {
          allowDdl_ = builderForValue.build();
          onChanged();
        } else {
          allowDdlBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Determines whether DDL queries are allowed (e.g., **CREATE**, **ALTER**, **RENAME**, etc).
       * Default value: **true**.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_allow_ddl).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue allow_ddl = 2;</code>
       */
      public Builder mergeAllowDdl(com.google.protobuf.BoolValue value) {
        if (allowDdlBuilder_ == null) {
          if (allowDdl_ != null) {
            allowDdl_ =
              com.google.protobuf.BoolValue.newBuilder(allowDdl_).mergeFrom(value).buildPartial();
          } else {
            allowDdl_ = value;
          }
          onChanged();
        } else {
          allowDdlBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Determines whether DDL queries are allowed (e.g., **CREATE**, **ALTER**, **RENAME**, etc).
       * Default value: **true**.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_allow_ddl).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue allow_ddl = 2;</code>
       */
      public Builder clearAllowDdl() {
        if (allowDdlBuilder_ == null) {
          allowDdl_ = null;
          onChanged();
        } else {
          allowDdl_ = null;
          allowDdlBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Determines whether DDL queries are allowed (e.g., **CREATE**, **ALTER**, **RENAME**, etc).
       * Default value: **true**.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_allow_ddl).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue allow_ddl = 2;</code>
       */
      public com.google.protobuf.BoolValue.Builder getAllowDdlBuilder() {
        
        onChanged();
        return getAllowDdlFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Determines whether DDL queries are allowed (e.g., **CREATE**, **ALTER**, **RENAME**, etc).
       * Default value: **true**.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_allow_ddl).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue allow_ddl = 2;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getAllowDdlOrBuilder() {
        if (allowDdlBuilder_ != null) {
          return allowDdlBuilder_.getMessageOrBuilder();
        } else {
          return allowDdl_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : allowDdl_;
        }
      }
      /**
       * <pre>
       * Determines whether DDL queries are allowed (e.g., **CREATE**, **ALTER**, **RENAME**, etc).
       * Default value: **true**.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_allow_ddl).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue allow_ddl = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getAllowDdlFieldBuilder() {
        if (allowDdlBuilder_ == null) {
          allowDdlBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getAllowDdl(),
                  getParentForChildren(),
                  isClean());
          allowDdl_ = null;
        }
        return allowDdlBuilder_;
      }

      private com.google.protobuf.BoolValue allowIntrospectionFunctions_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> allowIntrospectionFunctionsBuilder_;
      /**
       * <pre>
       * Enables [introspections functions](https://clickhouse.com/docs/en/sql-reference/functions/introspection) for query profiling.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-allow_introspection_functions).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue allow_introspection_functions = 96;</code>
       * @return Whether the allowIntrospectionFunctions field is set.
       */
      public boolean hasAllowIntrospectionFunctions() {
        return allowIntrospectionFunctionsBuilder_ != null || allowIntrospectionFunctions_ != null;
      }
      /**
       * <pre>
       * Enables [introspections functions](https://clickhouse.com/docs/en/sql-reference/functions/introspection) for query profiling.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-allow_introspection_functions).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue allow_introspection_functions = 96;</code>
       * @return The allowIntrospectionFunctions.
       */
      public com.google.protobuf.BoolValue getAllowIntrospectionFunctions() {
        if (allowIntrospectionFunctionsBuilder_ == null) {
          return allowIntrospectionFunctions_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : allowIntrospectionFunctions_;
        } else {
          return allowIntrospectionFunctionsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enables [introspections functions](https://clickhouse.com/docs/en/sql-reference/functions/introspection) for query profiling.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-allow_introspection_functions).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue allow_introspection_functions = 96;</code>
       */
      public Builder setAllowIntrospectionFunctions(com.google.protobuf.BoolValue value) {
        if (allowIntrospectionFunctionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          allowIntrospectionFunctions_ = value;
          onChanged();
        } else {
          allowIntrospectionFunctionsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables [introspections functions](https://clickhouse.com/docs/en/sql-reference/functions/introspection) for query profiling.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-allow_introspection_functions).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue allow_introspection_functions = 96;</code>
       */
      public Builder setAllowIntrospectionFunctions(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (allowIntrospectionFunctionsBuilder_ == null) {
          allowIntrospectionFunctions_ = builderForValue.build();
          onChanged();
        } else {
          allowIntrospectionFunctionsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enables [introspections functions](https://clickhouse.com/docs/en/sql-reference/functions/introspection) for query profiling.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-allow_introspection_functions).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue allow_introspection_functions = 96;</code>
       */
      public Builder mergeAllowIntrospectionFunctions(com.google.protobuf.BoolValue value) {
        if (allowIntrospectionFunctionsBuilder_ == null) {
          if (allowIntrospectionFunctions_ != null) {
            allowIntrospectionFunctions_ =
              com.google.protobuf.BoolValue.newBuilder(allowIntrospectionFunctions_).mergeFrom(value).buildPartial();
          } else {
            allowIntrospectionFunctions_ = value;
          }
          onChanged();
        } else {
          allowIntrospectionFunctionsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables [introspections functions](https://clickhouse.com/docs/en/sql-reference/functions/introspection) for query profiling.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-allow_introspection_functions).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue allow_introspection_functions = 96;</code>
       */
      public Builder clearAllowIntrospectionFunctions() {
        if (allowIntrospectionFunctionsBuilder_ == null) {
          allowIntrospectionFunctions_ = null;
          onChanged();
        } else {
          allowIntrospectionFunctions_ = null;
          allowIntrospectionFunctionsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enables [introspections functions](https://clickhouse.com/docs/en/sql-reference/functions/introspection) for query profiling.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-allow_introspection_functions).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue allow_introspection_functions = 96;</code>
       */
      public com.google.protobuf.BoolValue.Builder getAllowIntrospectionFunctionsBuilder() {
        
        onChanged();
        return getAllowIntrospectionFunctionsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enables [introspections functions](https://clickhouse.com/docs/en/sql-reference/functions/introspection) for query profiling.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-allow_introspection_functions).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue allow_introspection_functions = 96;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getAllowIntrospectionFunctionsOrBuilder() {
        if (allowIntrospectionFunctionsBuilder_ != null) {
          return allowIntrospectionFunctionsBuilder_.getMessageOrBuilder();
        } else {
          return allowIntrospectionFunctions_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : allowIntrospectionFunctions_;
        }
      }
      /**
       * <pre>
       * Enables [introspections functions](https://clickhouse.com/docs/en/sql-reference/functions/introspection) for query profiling.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-allow_introspection_functions).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue allow_introspection_functions = 96;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getAllowIntrospectionFunctionsFieldBuilder() {
        if (allowIntrospectionFunctionsBuilder_ == null) {
          allowIntrospectionFunctionsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getAllowIntrospectionFunctions(),
                  getParentForChildren(),
                  isClean());
          allowIntrospectionFunctions_ = null;
        }
        return allowIntrospectionFunctionsBuilder_;
      }

      private com.google.protobuf.Int64Value connectTimeout_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> connectTimeoutBuilder_;
      /**
       * <pre>
       * Connection timeout in milliseconds.
       * Value must be greater than **0** (default: **10000**, 10 seconds).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value connect_timeout = 39 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return Whether the connectTimeout field is set.
       */
      public boolean hasConnectTimeout() {
        return connectTimeoutBuilder_ != null || connectTimeout_ != null;
      }
      /**
       * <pre>
       * Connection timeout in milliseconds.
       * Value must be greater than **0** (default: **10000**, 10 seconds).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value connect_timeout = 39 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return The connectTimeout.
       */
      public com.google.protobuf.Int64Value getConnectTimeout() {
        if (connectTimeoutBuilder_ == null) {
          return connectTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : connectTimeout_;
        } else {
          return connectTimeoutBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Connection timeout in milliseconds.
       * Value must be greater than **0** (default: **10000**, 10 seconds).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value connect_timeout = 39 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setConnectTimeout(com.google.protobuf.Int64Value value) {
        if (connectTimeoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          connectTimeout_ = value;
          onChanged();
        } else {
          connectTimeoutBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Connection timeout in milliseconds.
       * Value must be greater than **0** (default: **10000**, 10 seconds).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value connect_timeout = 39 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setConnectTimeout(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (connectTimeoutBuilder_ == null) {
          connectTimeout_ = builderForValue.build();
          onChanged();
        } else {
          connectTimeoutBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Connection timeout in milliseconds.
       * Value must be greater than **0** (default: **10000**, 10 seconds).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value connect_timeout = 39 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder mergeConnectTimeout(com.google.protobuf.Int64Value value) {
        if (connectTimeoutBuilder_ == null) {
          if (connectTimeout_ != null) {
            connectTimeout_ =
              com.google.protobuf.Int64Value.newBuilder(connectTimeout_).mergeFrom(value).buildPartial();
          } else {
            connectTimeout_ = value;
          }
          onChanged();
        } else {
          connectTimeoutBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Connection timeout in milliseconds.
       * Value must be greater than **0** (default: **10000**, 10 seconds).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value connect_timeout = 39 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder clearConnectTimeout() {
        if (connectTimeoutBuilder_ == null) {
          connectTimeout_ = null;
          onChanged();
        } else {
          connectTimeout_ = null;
          connectTimeoutBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Connection timeout in milliseconds.
       * Value must be greater than **0** (default: **10000**, 10 seconds).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value connect_timeout = 39 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getConnectTimeoutBuilder() {
        
        onChanged();
        return getConnectTimeoutFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Connection timeout in milliseconds.
       * Value must be greater than **0** (default: **10000**, 10 seconds).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value connect_timeout = 39 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getConnectTimeoutOrBuilder() {
        if (connectTimeoutBuilder_ != null) {
          return connectTimeoutBuilder_.getMessageOrBuilder();
        } else {
          return connectTimeout_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : connectTimeout_;
        }
      }
      /**
       * <pre>
       * Connection timeout in milliseconds.
       * Value must be greater than **0** (default: **10000**, 10 seconds).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value connect_timeout = 39 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getConnectTimeoutFieldBuilder() {
        if (connectTimeoutBuilder_ == null) {
          connectTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getConnectTimeout(),
                  getParentForChildren(),
                  isClean());
          connectTimeout_ = null;
        }
        return connectTimeoutBuilder_;
      }

      private com.google.protobuf.Int64Value connectTimeoutWithFailover_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> connectTimeoutWithFailoverBuilder_;
      /**
       * <pre>
       * The timeout in milliseconds for connecting to a remote server for a Distributed table engine. Applies only if the cluster uses sharding and replication. If unsuccessful, several attempts are made to connect to various replicas.
       * Default value: **50**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#connect-timeout-with-failover-ms).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value connect_timeout_with_failover = 97 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return Whether the connectTimeoutWithFailover field is set.
       */
      public boolean hasConnectTimeoutWithFailover() {
        return connectTimeoutWithFailoverBuilder_ != null || connectTimeoutWithFailover_ != null;
      }
      /**
       * <pre>
       * The timeout in milliseconds for connecting to a remote server for a Distributed table engine. Applies only if the cluster uses sharding and replication. If unsuccessful, several attempts are made to connect to various replicas.
       * Default value: **50**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#connect-timeout-with-failover-ms).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value connect_timeout_with_failover = 97 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return The connectTimeoutWithFailover.
       */
      public com.google.protobuf.Int64Value getConnectTimeoutWithFailover() {
        if (connectTimeoutWithFailoverBuilder_ == null) {
          return connectTimeoutWithFailover_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : connectTimeoutWithFailover_;
        } else {
          return connectTimeoutWithFailoverBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The timeout in milliseconds for connecting to a remote server for a Distributed table engine. Applies only if the cluster uses sharding and replication. If unsuccessful, several attempts are made to connect to various replicas.
       * Default value: **50**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#connect-timeout-with-failover-ms).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value connect_timeout_with_failover = 97 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setConnectTimeoutWithFailover(com.google.protobuf.Int64Value value) {
        if (connectTimeoutWithFailoverBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          connectTimeoutWithFailover_ = value;
          onChanged();
        } else {
          connectTimeoutWithFailoverBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The timeout in milliseconds for connecting to a remote server for a Distributed table engine. Applies only if the cluster uses sharding and replication. If unsuccessful, several attempts are made to connect to various replicas.
       * Default value: **50**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#connect-timeout-with-failover-ms).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value connect_timeout_with_failover = 97 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setConnectTimeoutWithFailover(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (connectTimeoutWithFailoverBuilder_ == null) {
          connectTimeoutWithFailover_ = builderForValue.build();
          onChanged();
        } else {
          connectTimeoutWithFailoverBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The timeout in milliseconds for connecting to a remote server for a Distributed table engine. Applies only if the cluster uses sharding and replication. If unsuccessful, several attempts are made to connect to various replicas.
       * Default value: **50**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#connect-timeout-with-failover-ms).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value connect_timeout_with_failover = 97 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder mergeConnectTimeoutWithFailover(com.google.protobuf.Int64Value value) {
        if (connectTimeoutWithFailoverBuilder_ == null) {
          if (connectTimeoutWithFailover_ != null) {
            connectTimeoutWithFailover_ =
              com.google.protobuf.Int64Value.newBuilder(connectTimeoutWithFailover_).mergeFrom(value).buildPartial();
          } else {
            connectTimeoutWithFailover_ = value;
          }
          onChanged();
        } else {
          connectTimeoutWithFailoverBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The timeout in milliseconds for connecting to a remote server for a Distributed table engine. Applies only if the cluster uses sharding and replication. If unsuccessful, several attempts are made to connect to various replicas.
       * Default value: **50**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#connect-timeout-with-failover-ms).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value connect_timeout_with_failover = 97 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder clearConnectTimeoutWithFailover() {
        if (connectTimeoutWithFailoverBuilder_ == null) {
          connectTimeoutWithFailover_ = null;
          onChanged();
        } else {
          connectTimeoutWithFailover_ = null;
          connectTimeoutWithFailoverBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The timeout in milliseconds for connecting to a remote server for a Distributed table engine. Applies only if the cluster uses sharding and replication. If unsuccessful, several attempts are made to connect to various replicas.
       * Default value: **50**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#connect-timeout-with-failover-ms).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value connect_timeout_with_failover = 97 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getConnectTimeoutWithFailoverBuilder() {
        
        onChanged();
        return getConnectTimeoutWithFailoverFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The timeout in milliseconds for connecting to a remote server for a Distributed table engine. Applies only if the cluster uses sharding and replication. If unsuccessful, several attempts are made to connect to various replicas.
       * Default value: **50**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#connect-timeout-with-failover-ms).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value connect_timeout_with_failover = 97 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getConnectTimeoutWithFailoverOrBuilder() {
        if (connectTimeoutWithFailoverBuilder_ != null) {
          return connectTimeoutWithFailoverBuilder_.getMessageOrBuilder();
        } else {
          return connectTimeoutWithFailover_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : connectTimeoutWithFailover_;
        }
      }
      /**
       * <pre>
       * The timeout in milliseconds for connecting to a remote server for a Distributed table engine. Applies only if the cluster uses sharding and replication. If unsuccessful, several attempts are made to connect to various replicas.
       * Default value: **50**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#connect-timeout-with-failover-ms).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value connect_timeout_with_failover = 97 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getConnectTimeoutWithFailoverFieldBuilder() {
        if (connectTimeoutWithFailoverBuilder_ == null) {
          connectTimeoutWithFailoverBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getConnectTimeoutWithFailover(),
                  getParentForChildren(),
                  isClean());
          connectTimeoutWithFailover_ = null;
        }
        return connectTimeoutWithFailoverBuilder_;
      }

      private com.google.protobuf.Int64Value receiveTimeout_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> receiveTimeoutBuilder_;
      /**
       * <pre>
       * Receive timeout in milliseconds.
       * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value receive_timeout = 40 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return Whether the receiveTimeout field is set.
       */
      public boolean hasReceiveTimeout() {
        return receiveTimeoutBuilder_ != null || receiveTimeout_ != null;
      }
      /**
       * <pre>
       * Receive timeout in milliseconds.
       * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value receive_timeout = 40 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return The receiveTimeout.
       */
      public com.google.protobuf.Int64Value getReceiveTimeout() {
        if (receiveTimeoutBuilder_ == null) {
          return receiveTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : receiveTimeout_;
        } else {
          return receiveTimeoutBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Receive timeout in milliseconds.
       * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value receive_timeout = 40 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setReceiveTimeout(com.google.protobuf.Int64Value value) {
        if (receiveTimeoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          receiveTimeout_ = value;
          onChanged();
        } else {
          receiveTimeoutBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Receive timeout in milliseconds.
       * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value receive_timeout = 40 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setReceiveTimeout(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (receiveTimeoutBuilder_ == null) {
          receiveTimeout_ = builderForValue.build();
          onChanged();
        } else {
          receiveTimeoutBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Receive timeout in milliseconds.
       * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value receive_timeout = 40 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder mergeReceiveTimeout(com.google.protobuf.Int64Value value) {
        if (receiveTimeoutBuilder_ == null) {
          if (receiveTimeout_ != null) {
            receiveTimeout_ =
              com.google.protobuf.Int64Value.newBuilder(receiveTimeout_).mergeFrom(value).buildPartial();
          } else {
            receiveTimeout_ = value;
          }
          onChanged();
        } else {
          receiveTimeoutBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Receive timeout in milliseconds.
       * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value receive_timeout = 40 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder clearReceiveTimeout() {
        if (receiveTimeoutBuilder_ == null) {
          receiveTimeout_ = null;
          onChanged();
        } else {
          receiveTimeout_ = null;
          receiveTimeoutBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Receive timeout in milliseconds.
       * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value receive_timeout = 40 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getReceiveTimeoutBuilder() {
        
        onChanged();
        return getReceiveTimeoutFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Receive timeout in milliseconds.
       * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value receive_timeout = 40 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getReceiveTimeoutOrBuilder() {
        if (receiveTimeoutBuilder_ != null) {
          return receiveTimeoutBuilder_.getMessageOrBuilder();
        } else {
          return receiveTimeout_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : receiveTimeout_;
        }
      }
      /**
       * <pre>
       * Receive timeout in milliseconds.
       * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value receive_timeout = 40 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getReceiveTimeoutFieldBuilder() {
        if (receiveTimeoutBuilder_ == null) {
          receiveTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getReceiveTimeout(),
                  getParentForChildren(),
                  isClean());
          receiveTimeout_ = null;
        }
        return receiveTimeoutBuilder_;
      }

      private com.google.protobuf.Int64Value sendTimeout_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> sendTimeoutBuilder_;
      /**
       * <pre>
       * Send timeout in milliseconds.
       * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value send_timeout = 41 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return Whether the sendTimeout field is set.
       */
      public boolean hasSendTimeout() {
        return sendTimeoutBuilder_ != null || sendTimeout_ != null;
      }
      /**
       * <pre>
       * Send timeout in milliseconds.
       * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value send_timeout = 41 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return The sendTimeout.
       */
      public com.google.protobuf.Int64Value getSendTimeout() {
        if (sendTimeoutBuilder_ == null) {
          return sendTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : sendTimeout_;
        } else {
          return sendTimeoutBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Send timeout in milliseconds.
       * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value send_timeout = 41 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setSendTimeout(com.google.protobuf.Int64Value value) {
        if (sendTimeoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sendTimeout_ = value;
          onChanged();
        } else {
          sendTimeoutBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Send timeout in milliseconds.
       * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value send_timeout = 41 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setSendTimeout(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (sendTimeoutBuilder_ == null) {
          sendTimeout_ = builderForValue.build();
          onChanged();
        } else {
          sendTimeoutBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Send timeout in milliseconds.
       * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value send_timeout = 41 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder mergeSendTimeout(com.google.protobuf.Int64Value value) {
        if (sendTimeoutBuilder_ == null) {
          if (sendTimeout_ != null) {
            sendTimeout_ =
              com.google.protobuf.Int64Value.newBuilder(sendTimeout_).mergeFrom(value).buildPartial();
          } else {
            sendTimeout_ = value;
          }
          onChanged();
        } else {
          sendTimeoutBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Send timeout in milliseconds.
       * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value send_timeout = 41 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder clearSendTimeout() {
        if (sendTimeoutBuilder_ == null) {
          sendTimeout_ = null;
          onChanged();
        } else {
          sendTimeout_ = null;
          sendTimeoutBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Send timeout in milliseconds.
       * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value send_timeout = 41 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getSendTimeoutBuilder() {
        
        onChanged();
        return getSendTimeoutFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Send timeout in milliseconds.
       * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value send_timeout = 41 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getSendTimeoutOrBuilder() {
        if (sendTimeoutBuilder_ != null) {
          return sendTimeoutBuilder_.getMessageOrBuilder();
        } else {
          return sendTimeout_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : sendTimeout_;
        }
      }
      /**
       * <pre>
       * Send timeout in milliseconds.
       * Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value send_timeout = 41 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getSendTimeoutFieldBuilder() {
        if (sendTimeoutBuilder_ == null) {
          sendTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getSendTimeout(),
                  getParentForChildren(),
                  isClean());
          sendTimeout_ = null;
        }
        return sendTimeoutBuilder_;
      }

      private com.google.protobuf.Int64Value timeoutBeforeCheckingExecutionSpeed_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> timeoutBeforeCheckingExecutionSpeedBuilder_;
      /**
       * <pre>
       * Timeout (in seconds) between checks of execution speed. It is checked that execution speed is not less that specified in [min_execution_speed] parameter.
       * Default value: **10**.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value timeout_before_checking_execution_speed = 98;</code>
       * @return Whether the timeoutBeforeCheckingExecutionSpeed field is set.
       */
      public boolean hasTimeoutBeforeCheckingExecutionSpeed() {
        return timeoutBeforeCheckingExecutionSpeedBuilder_ != null || timeoutBeforeCheckingExecutionSpeed_ != null;
      }
      /**
       * <pre>
       * Timeout (in seconds) between checks of execution speed. It is checked that execution speed is not less that specified in [min_execution_speed] parameter.
       * Default value: **10**.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value timeout_before_checking_execution_speed = 98;</code>
       * @return The timeoutBeforeCheckingExecutionSpeed.
       */
      public com.google.protobuf.Int64Value getTimeoutBeforeCheckingExecutionSpeed() {
        if (timeoutBeforeCheckingExecutionSpeedBuilder_ == null) {
          return timeoutBeforeCheckingExecutionSpeed_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : timeoutBeforeCheckingExecutionSpeed_;
        } else {
          return timeoutBeforeCheckingExecutionSpeedBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Timeout (in seconds) between checks of execution speed. It is checked that execution speed is not less that specified in [min_execution_speed] parameter.
       * Default value: **10**.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value timeout_before_checking_execution_speed = 98;</code>
       */
      public Builder setTimeoutBeforeCheckingExecutionSpeed(com.google.protobuf.Int64Value value) {
        if (timeoutBeforeCheckingExecutionSpeedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          timeoutBeforeCheckingExecutionSpeed_ = value;
          onChanged();
        } else {
          timeoutBeforeCheckingExecutionSpeedBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timeout (in seconds) between checks of execution speed. It is checked that execution speed is not less that specified in [min_execution_speed] parameter.
       * Default value: **10**.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value timeout_before_checking_execution_speed = 98;</code>
       */
      public Builder setTimeoutBeforeCheckingExecutionSpeed(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (timeoutBeforeCheckingExecutionSpeedBuilder_ == null) {
          timeoutBeforeCheckingExecutionSpeed_ = builderForValue.build();
          onChanged();
        } else {
          timeoutBeforeCheckingExecutionSpeedBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Timeout (in seconds) between checks of execution speed. It is checked that execution speed is not less that specified in [min_execution_speed] parameter.
       * Default value: **10**.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value timeout_before_checking_execution_speed = 98;</code>
       */
      public Builder mergeTimeoutBeforeCheckingExecutionSpeed(com.google.protobuf.Int64Value value) {
        if (timeoutBeforeCheckingExecutionSpeedBuilder_ == null) {
          if (timeoutBeforeCheckingExecutionSpeed_ != null) {
            timeoutBeforeCheckingExecutionSpeed_ =
              com.google.protobuf.Int64Value.newBuilder(timeoutBeforeCheckingExecutionSpeed_).mergeFrom(value).buildPartial();
          } else {
            timeoutBeforeCheckingExecutionSpeed_ = value;
          }
          onChanged();
        } else {
          timeoutBeforeCheckingExecutionSpeedBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timeout (in seconds) between checks of execution speed. It is checked that execution speed is not less that specified in [min_execution_speed] parameter.
       * Default value: **10**.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value timeout_before_checking_execution_speed = 98;</code>
       */
      public Builder clearTimeoutBeforeCheckingExecutionSpeed() {
        if (timeoutBeforeCheckingExecutionSpeedBuilder_ == null) {
          timeoutBeforeCheckingExecutionSpeed_ = null;
          onChanged();
        } else {
          timeoutBeforeCheckingExecutionSpeed_ = null;
          timeoutBeforeCheckingExecutionSpeedBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Timeout (in seconds) between checks of execution speed. It is checked that execution speed is not less that specified in [min_execution_speed] parameter.
       * Default value: **10**.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value timeout_before_checking_execution_speed = 98;</code>
       */
      public com.google.protobuf.Int64Value.Builder getTimeoutBeforeCheckingExecutionSpeedBuilder() {
        
        onChanged();
        return getTimeoutBeforeCheckingExecutionSpeedFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Timeout (in seconds) between checks of execution speed. It is checked that execution speed is not less that specified in [min_execution_speed] parameter.
       * Default value: **10**.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value timeout_before_checking_execution_speed = 98;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getTimeoutBeforeCheckingExecutionSpeedOrBuilder() {
        if (timeoutBeforeCheckingExecutionSpeedBuilder_ != null) {
          return timeoutBeforeCheckingExecutionSpeedBuilder_.getMessageOrBuilder();
        } else {
          return timeoutBeforeCheckingExecutionSpeed_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : timeoutBeforeCheckingExecutionSpeed_;
        }
      }
      /**
       * <pre>
       * Timeout (in seconds) between checks of execution speed. It is checked that execution speed is not less that specified in [min_execution_speed] parameter.
       * Default value: **10**.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value timeout_before_checking_execution_speed = 98;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getTimeoutBeforeCheckingExecutionSpeedFieldBuilder() {
        if (timeoutBeforeCheckingExecutionSpeedBuilder_ == null) {
          timeoutBeforeCheckingExecutionSpeedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getTimeoutBeforeCheckingExecutionSpeed(),
                  getParentForChildren(),
                  isClean());
          timeoutBeforeCheckingExecutionSpeed_ = null;
        }
        return timeoutBeforeCheckingExecutionSpeedBuilder_;
      }

      private com.google.protobuf.Int64Value insertQuorum_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> insertQuorumBuilder_;
      /**
       * <pre>
       * Enables or disables write quorum for ClickHouse cluster.
       * If the value is less than **2**, then write quorum is disabled, otherwise it is enabled.
       * When used, write quorum guarantees that ClickHouse has written data to the quorum of **insert_quorum** replicas with no errors until the [insert_quorum_timeout] expires.
       * All replicas in the quorum are in the consistent state, meaning that they contain linearized data from the previous **INSERT** queries.
       * Employ write quorum, if you need the guarantees that the written data would not be lost in case of one or more replicas failure.
       * You can use [select_sequential_consistency] setting to read the data written with write quorum.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value insert_quorum = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the insertQuorum field is set.
       */
      public boolean hasInsertQuorum() {
        return insertQuorumBuilder_ != null || insertQuorum_ != null;
      }
      /**
       * <pre>
       * Enables or disables write quorum for ClickHouse cluster.
       * If the value is less than **2**, then write quorum is disabled, otherwise it is enabled.
       * When used, write quorum guarantees that ClickHouse has written data to the quorum of **insert_quorum** replicas with no errors until the [insert_quorum_timeout] expires.
       * All replicas in the quorum are in the consistent state, meaning that they contain linearized data from the previous **INSERT** queries.
       * Employ write quorum, if you need the guarantees that the written data would not be lost in case of one or more replicas failure.
       * You can use [select_sequential_consistency] setting to read the data written with write quorum.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value insert_quorum = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The insertQuorum.
       */
      public com.google.protobuf.Int64Value getInsertQuorum() {
        if (insertQuorumBuilder_ == null) {
          return insertQuorum_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : insertQuorum_;
        } else {
          return insertQuorumBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enables or disables write quorum for ClickHouse cluster.
       * If the value is less than **2**, then write quorum is disabled, otherwise it is enabled.
       * When used, write quorum guarantees that ClickHouse has written data to the quorum of **insert_quorum** replicas with no errors until the [insert_quorum_timeout] expires.
       * All replicas in the quorum are in the consistent state, meaning that they contain linearized data from the previous **INSERT** queries.
       * Employ write quorum, if you need the guarantees that the written data would not be lost in case of one or more replicas failure.
       * You can use [select_sequential_consistency] setting to read the data written with write quorum.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value insert_quorum = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setInsertQuorum(com.google.protobuf.Int64Value value) {
        if (insertQuorumBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          insertQuorum_ = value;
          onChanged();
        } else {
          insertQuorumBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables write quorum for ClickHouse cluster.
       * If the value is less than **2**, then write quorum is disabled, otherwise it is enabled.
       * When used, write quorum guarantees that ClickHouse has written data to the quorum of **insert_quorum** replicas with no errors until the [insert_quorum_timeout] expires.
       * All replicas in the quorum are in the consistent state, meaning that they contain linearized data from the previous **INSERT** queries.
       * Employ write quorum, if you need the guarantees that the written data would not be lost in case of one or more replicas failure.
       * You can use [select_sequential_consistency] setting to read the data written with write quorum.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value insert_quorum = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setInsertQuorum(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (insertQuorumBuilder_ == null) {
          insertQuorum_ = builderForValue.build();
          onChanged();
        } else {
          insertQuorumBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables write quorum for ClickHouse cluster.
       * If the value is less than **2**, then write quorum is disabled, otherwise it is enabled.
       * When used, write quorum guarantees that ClickHouse has written data to the quorum of **insert_quorum** replicas with no errors until the [insert_quorum_timeout] expires.
       * All replicas in the quorum are in the consistent state, meaning that they contain linearized data from the previous **INSERT** queries.
       * Employ write quorum, if you need the guarantees that the written data would not be lost in case of one or more replicas failure.
       * You can use [select_sequential_consistency] setting to read the data written with write quorum.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value insert_quorum = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeInsertQuorum(com.google.protobuf.Int64Value value) {
        if (insertQuorumBuilder_ == null) {
          if (insertQuorum_ != null) {
            insertQuorum_ =
              com.google.protobuf.Int64Value.newBuilder(insertQuorum_).mergeFrom(value).buildPartial();
          } else {
            insertQuorum_ = value;
          }
          onChanged();
        } else {
          insertQuorumBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables write quorum for ClickHouse cluster.
       * If the value is less than **2**, then write quorum is disabled, otherwise it is enabled.
       * When used, write quorum guarantees that ClickHouse has written data to the quorum of **insert_quorum** replicas with no errors until the [insert_quorum_timeout] expires.
       * All replicas in the quorum are in the consistent state, meaning that they contain linearized data from the previous **INSERT** queries.
       * Employ write quorum, if you need the guarantees that the written data would not be lost in case of one or more replicas failure.
       * You can use [select_sequential_consistency] setting to read the data written with write quorum.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value insert_quorum = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearInsertQuorum() {
        if (insertQuorumBuilder_ == null) {
          insertQuorum_ = null;
          onChanged();
        } else {
          insertQuorum_ = null;
          insertQuorumBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables write quorum for ClickHouse cluster.
       * If the value is less than **2**, then write quorum is disabled, otherwise it is enabled.
       * When used, write quorum guarantees that ClickHouse has written data to the quorum of **insert_quorum** replicas with no errors until the [insert_quorum_timeout] expires.
       * All replicas in the quorum are in the consistent state, meaning that they contain linearized data from the previous **INSERT** queries.
       * Employ write quorum, if you need the guarantees that the written data would not be lost in case of one or more replicas failure.
       * You can use [select_sequential_consistency] setting to read the data written with write quorum.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value insert_quorum = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getInsertQuorumBuilder() {
        
        onChanged();
        return getInsertQuorumFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enables or disables write quorum for ClickHouse cluster.
       * If the value is less than **2**, then write quorum is disabled, otherwise it is enabled.
       * When used, write quorum guarantees that ClickHouse has written data to the quorum of **insert_quorum** replicas with no errors until the [insert_quorum_timeout] expires.
       * All replicas in the quorum are in the consistent state, meaning that they contain linearized data from the previous **INSERT** queries.
       * Employ write quorum, if you need the guarantees that the written data would not be lost in case of one or more replicas failure.
       * You can use [select_sequential_consistency] setting to read the data written with write quorum.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value insert_quorum = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getInsertQuorumOrBuilder() {
        if (insertQuorumBuilder_ != null) {
          return insertQuorumBuilder_.getMessageOrBuilder();
        } else {
          return insertQuorum_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : insertQuorum_;
        }
      }
      /**
       * <pre>
       * Enables or disables write quorum for ClickHouse cluster.
       * If the value is less than **2**, then write quorum is disabled, otherwise it is enabled.
       * When used, write quorum guarantees that ClickHouse has written data to the quorum of **insert_quorum** replicas with no errors until the [insert_quorum_timeout] expires.
       * All replicas in the quorum are in the consistent state, meaning that they contain linearized data from the previous **INSERT** queries.
       * Employ write quorum, if you need the guarantees that the written data would not be lost in case of one or more replicas failure.
       * You can use [select_sequential_consistency] setting to read the data written with write quorum.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value insert_quorum = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getInsertQuorumFieldBuilder() {
        if (insertQuorumBuilder_ == null) {
          insertQuorumBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getInsertQuorum(),
                  getParentForChildren(),
                  isClean());
          insertQuorum_ = null;
        }
        return insertQuorumBuilder_;
      }

      private com.google.protobuf.Int64Value insertQuorumTimeout_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> insertQuorumTimeoutBuilder_;
      /**
       * <pre>
       * Quorum write timeout in milliseconds.
       * If the write quorum is enabled in the cluster, this timeout expires and some data is not written to the [insert_quorum] replicas, then ClickHouse will abort the execution of **INSERT** query and return an error.
       * In this case, the client must send the query again to write the data block into the same or another replica.
       * Minimum value: **1000**, 1 second (default: **60000**, 1 minute).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value insert_quorum_timeout = 4 [(.yandex.cloud.value) = "&gt;=1000"];</code>
       * @return Whether the insertQuorumTimeout field is set.
       */
      public boolean hasInsertQuorumTimeout() {
        return insertQuorumTimeoutBuilder_ != null || insertQuorumTimeout_ != null;
      }
      /**
       * <pre>
       * Quorum write timeout in milliseconds.
       * If the write quorum is enabled in the cluster, this timeout expires and some data is not written to the [insert_quorum] replicas, then ClickHouse will abort the execution of **INSERT** query and return an error.
       * In this case, the client must send the query again to write the data block into the same or another replica.
       * Minimum value: **1000**, 1 second (default: **60000**, 1 minute).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value insert_quorum_timeout = 4 [(.yandex.cloud.value) = "&gt;=1000"];</code>
       * @return The insertQuorumTimeout.
       */
      public com.google.protobuf.Int64Value getInsertQuorumTimeout() {
        if (insertQuorumTimeoutBuilder_ == null) {
          return insertQuorumTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : insertQuorumTimeout_;
        } else {
          return insertQuorumTimeoutBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Quorum write timeout in milliseconds.
       * If the write quorum is enabled in the cluster, this timeout expires and some data is not written to the [insert_quorum] replicas, then ClickHouse will abort the execution of **INSERT** query and return an error.
       * In this case, the client must send the query again to write the data block into the same or another replica.
       * Minimum value: **1000**, 1 second (default: **60000**, 1 minute).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value insert_quorum_timeout = 4 [(.yandex.cloud.value) = "&gt;=1000"];</code>
       */
      public Builder setInsertQuorumTimeout(com.google.protobuf.Int64Value value) {
        if (insertQuorumTimeoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          insertQuorumTimeout_ = value;
          onChanged();
        } else {
          insertQuorumTimeoutBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Quorum write timeout in milliseconds.
       * If the write quorum is enabled in the cluster, this timeout expires and some data is not written to the [insert_quorum] replicas, then ClickHouse will abort the execution of **INSERT** query and return an error.
       * In this case, the client must send the query again to write the data block into the same or another replica.
       * Minimum value: **1000**, 1 second (default: **60000**, 1 minute).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value insert_quorum_timeout = 4 [(.yandex.cloud.value) = "&gt;=1000"];</code>
       */
      public Builder setInsertQuorumTimeout(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (insertQuorumTimeoutBuilder_ == null) {
          insertQuorumTimeout_ = builderForValue.build();
          onChanged();
        } else {
          insertQuorumTimeoutBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Quorum write timeout in milliseconds.
       * If the write quorum is enabled in the cluster, this timeout expires and some data is not written to the [insert_quorum] replicas, then ClickHouse will abort the execution of **INSERT** query and return an error.
       * In this case, the client must send the query again to write the data block into the same or another replica.
       * Minimum value: **1000**, 1 second (default: **60000**, 1 minute).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value insert_quorum_timeout = 4 [(.yandex.cloud.value) = "&gt;=1000"];</code>
       */
      public Builder mergeInsertQuorumTimeout(com.google.protobuf.Int64Value value) {
        if (insertQuorumTimeoutBuilder_ == null) {
          if (insertQuorumTimeout_ != null) {
            insertQuorumTimeout_ =
              com.google.protobuf.Int64Value.newBuilder(insertQuorumTimeout_).mergeFrom(value).buildPartial();
          } else {
            insertQuorumTimeout_ = value;
          }
          onChanged();
        } else {
          insertQuorumTimeoutBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Quorum write timeout in milliseconds.
       * If the write quorum is enabled in the cluster, this timeout expires and some data is not written to the [insert_quorum] replicas, then ClickHouse will abort the execution of **INSERT** query and return an error.
       * In this case, the client must send the query again to write the data block into the same or another replica.
       * Minimum value: **1000**, 1 second (default: **60000**, 1 minute).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value insert_quorum_timeout = 4 [(.yandex.cloud.value) = "&gt;=1000"];</code>
       */
      public Builder clearInsertQuorumTimeout() {
        if (insertQuorumTimeoutBuilder_ == null) {
          insertQuorumTimeout_ = null;
          onChanged();
        } else {
          insertQuorumTimeout_ = null;
          insertQuorumTimeoutBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Quorum write timeout in milliseconds.
       * If the write quorum is enabled in the cluster, this timeout expires and some data is not written to the [insert_quorum] replicas, then ClickHouse will abort the execution of **INSERT** query and return an error.
       * In this case, the client must send the query again to write the data block into the same or another replica.
       * Minimum value: **1000**, 1 second (default: **60000**, 1 minute).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value insert_quorum_timeout = 4 [(.yandex.cloud.value) = "&gt;=1000"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getInsertQuorumTimeoutBuilder() {
        
        onChanged();
        return getInsertQuorumTimeoutFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Quorum write timeout in milliseconds.
       * If the write quorum is enabled in the cluster, this timeout expires and some data is not written to the [insert_quorum] replicas, then ClickHouse will abort the execution of **INSERT** query and return an error.
       * In this case, the client must send the query again to write the data block into the same or another replica.
       * Minimum value: **1000**, 1 second (default: **60000**, 1 minute).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value insert_quorum_timeout = 4 [(.yandex.cloud.value) = "&gt;=1000"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getInsertQuorumTimeoutOrBuilder() {
        if (insertQuorumTimeoutBuilder_ != null) {
          return insertQuorumTimeoutBuilder_.getMessageOrBuilder();
        } else {
          return insertQuorumTimeout_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : insertQuorumTimeout_;
        }
      }
      /**
       * <pre>
       * Quorum write timeout in milliseconds.
       * If the write quorum is enabled in the cluster, this timeout expires and some data is not written to the [insert_quorum] replicas, then ClickHouse will abort the execution of **INSERT** query and return an error.
       * In this case, the client must send the query again to write the data block into the same or another replica.
       * Minimum value: **1000**, 1 second (default: **60000**, 1 minute).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value insert_quorum_timeout = 4 [(.yandex.cloud.value) = "&gt;=1000"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getInsertQuorumTimeoutFieldBuilder() {
        if (insertQuorumTimeoutBuilder_ == null) {
          insertQuorumTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getInsertQuorumTimeout(),
                  getParentForChildren(),
                  isClean());
          insertQuorumTimeout_ = null;
        }
        return insertQuorumTimeoutBuilder_;
      }

      private com.google.protobuf.BoolValue insertQuorumParallel_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> insertQuorumParallelBuilder_;
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum_parallel).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue insert_quorum_parallel = 99;</code>
       * @return Whether the insertQuorumParallel field is set.
       */
      public boolean hasInsertQuorumParallel() {
        return insertQuorumParallelBuilder_ != null || insertQuorumParallel_ != null;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum_parallel).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue insert_quorum_parallel = 99;</code>
       * @return The insertQuorumParallel.
       */
      public com.google.protobuf.BoolValue getInsertQuorumParallel() {
        if (insertQuorumParallelBuilder_ == null) {
          return insertQuorumParallel_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : insertQuorumParallel_;
        } else {
          return insertQuorumParallelBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum_parallel).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue insert_quorum_parallel = 99;</code>
       */
      public Builder setInsertQuorumParallel(com.google.protobuf.BoolValue value) {
        if (insertQuorumParallelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          insertQuorumParallel_ = value;
          onChanged();
        } else {
          insertQuorumParallelBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum_parallel).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue insert_quorum_parallel = 99;</code>
       */
      public Builder setInsertQuorumParallel(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (insertQuorumParallelBuilder_ == null) {
          insertQuorumParallel_ = builderForValue.build();
          onChanged();
        } else {
          insertQuorumParallelBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum_parallel).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue insert_quorum_parallel = 99;</code>
       */
      public Builder mergeInsertQuorumParallel(com.google.protobuf.BoolValue value) {
        if (insertQuorumParallelBuilder_ == null) {
          if (insertQuorumParallel_ != null) {
            insertQuorumParallel_ =
              com.google.protobuf.BoolValue.newBuilder(insertQuorumParallel_).mergeFrom(value).buildPartial();
          } else {
            insertQuorumParallel_ = value;
          }
          onChanged();
        } else {
          insertQuorumParallelBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum_parallel).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue insert_quorum_parallel = 99;</code>
       */
      public Builder clearInsertQuorumParallel() {
        if (insertQuorumParallelBuilder_ == null) {
          insertQuorumParallel_ = null;
          onChanged();
        } else {
          insertQuorumParallel_ = null;
          insertQuorumParallelBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum_parallel).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue insert_quorum_parallel = 99;</code>
       */
      public com.google.protobuf.BoolValue.Builder getInsertQuorumParallelBuilder() {
        
        onChanged();
        return getInsertQuorumParallelFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum_parallel).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue insert_quorum_parallel = 99;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getInsertQuorumParallelOrBuilder() {
        if (insertQuorumParallelBuilder_ != null) {
          return insertQuorumParallelBuilder_.getMessageOrBuilder();
        } else {
          return insertQuorumParallel_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : insertQuorumParallel_;
        }
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum_parallel).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue insert_quorum_parallel = 99;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getInsertQuorumParallelFieldBuilder() {
        if (insertQuorumParallelBuilder_ == null) {
          insertQuorumParallelBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getInsertQuorumParallel(),
                  getParentForChildren(),
                  isClean());
          insertQuorumParallel_ = null;
        }
        return insertQuorumParallelBuilder_;
      }

      private com.google.protobuf.BoolValue insertNullAsDefault_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> insertNullAsDefaultBuilder_;
      /**
       * <pre>
       * Enables the insertion of default values instead of NULL into columns with not nullable data type.
       * Default value: **true**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#insert_null_as_default).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue insert_null_as_default = 100;</code>
       * @return Whether the insertNullAsDefault field is set.
       */
      public boolean hasInsertNullAsDefault() {
        return insertNullAsDefaultBuilder_ != null || insertNullAsDefault_ != null;
      }
      /**
       * <pre>
       * Enables the insertion of default values instead of NULL into columns with not nullable data type.
       * Default value: **true**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#insert_null_as_default).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue insert_null_as_default = 100;</code>
       * @return The insertNullAsDefault.
       */
      public com.google.protobuf.BoolValue getInsertNullAsDefault() {
        if (insertNullAsDefaultBuilder_ == null) {
          return insertNullAsDefault_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : insertNullAsDefault_;
        } else {
          return insertNullAsDefaultBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enables the insertion of default values instead of NULL into columns with not nullable data type.
       * Default value: **true**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#insert_null_as_default).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue insert_null_as_default = 100;</code>
       */
      public Builder setInsertNullAsDefault(com.google.protobuf.BoolValue value) {
        if (insertNullAsDefaultBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          insertNullAsDefault_ = value;
          onChanged();
        } else {
          insertNullAsDefaultBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables the insertion of default values instead of NULL into columns with not nullable data type.
       * Default value: **true**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#insert_null_as_default).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue insert_null_as_default = 100;</code>
       */
      public Builder setInsertNullAsDefault(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (insertNullAsDefaultBuilder_ == null) {
          insertNullAsDefault_ = builderForValue.build();
          onChanged();
        } else {
          insertNullAsDefaultBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enables the insertion of default values instead of NULL into columns with not nullable data type.
       * Default value: **true**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#insert_null_as_default).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue insert_null_as_default = 100;</code>
       */
      public Builder mergeInsertNullAsDefault(com.google.protobuf.BoolValue value) {
        if (insertNullAsDefaultBuilder_ == null) {
          if (insertNullAsDefault_ != null) {
            insertNullAsDefault_ =
              com.google.protobuf.BoolValue.newBuilder(insertNullAsDefault_).mergeFrom(value).buildPartial();
          } else {
            insertNullAsDefault_ = value;
          }
          onChanged();
        } else {
          insertNullAsDefaultBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables the insertion of default values instead of NULL into columns with not nullable data type.
       * Default value: **true**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#insert_null_as_default).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue insert_null_as_default = 100;</code>
       */
      public Builder clearInsertNullAsDefault() {
        if (insertNullAsDefaultBuilder_ == null) {
          insertNullAsDefault_ = null;
          onChanged();
        } else {
          insertNullAsDefault_ = null;
          insertNullAsDefaultBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enables the insertion of default values instead of NULL into columns with not nullable data type.
       * Default value: **true**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#insert_null_as_default).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue insert_null_as_default = 100;</code>
       */
      public com.google.protobuf.BoolValue.Builder getInsertNullAsDefaultBuilder() {
        
        onChanged();
        return getInsertNullAsDefaultFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enables the insertion of default values instead of NULL into columns with not nullable data type.
       * Default value: **true**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#insert_null_as_default).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue insert_null_as_default = 100;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getInsertNullAsDefaultOrBuilder() {
        if (insertNullAsDefaultBuilder_ != null) {
          return insertNullAsDefaultBuilder_.getMessageOrBuilder();
        } else {
          return insertNullAsDefault_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : insertNullAsDefault_;
        }
      }
      /**
       * <pre>
       * Enables the insertion of default values instead of NULL into columns with not nullable data type.
       * Default value: **true**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#insert_null_as_default).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue insert_null_as_default = 100;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getInsertNullAsDefaultFieldBuilder() {
        if (insertNullAsDefaultBuilder_ == null) {
          insertNullAsDefaultBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getInsertNullAsDefault(),
                  getParentForChildren(),
                  isClean());
          insertNullAsDefault_ = null;
        }
        return insertNullAsDefaultBuilder_;
      }

      private com.google.protobuf.BoolValue selectSequentialConsistency_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> selectSequentialConsistencyBuilder_;
      /**
       * <pre>
       * Determines the behavior of **SELECT** queries from the replicated table: if enabled, ClickHouse will terminate a query with error message in case the replica does not have a chunk written with the quorum and will not read the parts that have not yet been written with the quorum.
       * Default value: **false** (sequential consistency is disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue select_sequential_consistency = 5;</code>
       * @return Whether the selectSequentialConsistency field is set.
       */
      public boolean hasSelectSequentialConsistency() {
        return selectSequentialConsistencyBuilder_ != null || selectSequentialConsistency_ != null;
      }
      /**
       * <pre>
       * Determines the behavior of **SELECT** queries from the replicated table: if enabled, ClickHouse will terminate a query with error message in case the replica does not have a chunk written with the quorum and will not read the parts that have not yet been written with the quorum.
       * Default value: **false** (sequential consistency is disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue select_sequential_consistency = 5;</code>
       * @return The selectSequentialConsistency.
       */
      public com.google.protobuf.BoolValue getSelectSequentialConsistency() {
        if (selectSequentialConsistencyBuilder_ == null) {
          return selectSequentialConsistency_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : selectSequentialConsistency_;
        } else {
          return selectSequentialConsistencyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Determines the behavior of **SELECT** queries from the replicated table: if enabled, ClickHouse will terminate a query with error message in case the replica does not have a chunk written with the quorum and will not read the parts that have not yet been written with the quorum.
       * Default value: **false** (sequential consistency is disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue select_sequential_consistency = 5;</code>
       */
      public Builder setSelectSequentialConsistency(com.google.protobuf.BoolValue value) {
        if (selectSequentialConsistencyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          selectSequentialConsistency_ = value;
          onChanged();
        } else {
          selectSequentialConsistencyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Determines the behavior of **SELECT** queries from the replicated table: if enabled, ClickHouse will terminate a query with error message in case the replica does not have a chunk written with the quorum and will not read the parts that have not yet been written with the quorum.
       * Default value: **false** (sequential consistency is disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue select_sequential_consistency = 5;</code>
       */
      public Builder setSelectSequentialConsistency(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (selectSequentialConsistencyBuilder_ == null) {
          selectSequentialConsistency_ = builderForValue.build();
          onChanged();
        } else {
          selectSequentialConsistencyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Determines the behavior of **SELECT** queries from the replicated table: if enabled, ClickHouse will terminate a query with error message in case the replica does not have a chunk written with the quorum and will not read the parts that have not yet been written with the quorum.
       * Default value: **false** (sequential consistency is disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue select_sequential_consistency = 5;</code>
       */
      public Builder mergeSelectSequentialConsistency(com.google.protobuf.BoolValue value) {
        if (selectSequentialConsistencyBuilder_ == null) {
          if (selectSequentialConsistency_ != null) {
            selectSequentialConsistency_ =
              com.google.protobuf.BoolValue.newBuilder(selectSequentialConsistency_).mergeFrom(value).buildPartial();
          } else {
            selectSequentialConsistency_ = value;
          }
          onChanged();
        } else {
          selectSequentialConsistencyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Determines the behavior of **SELECT** queries from the replicated table: if enabled, ClickHouse will terminate a query with error message in case the replica does not have a chunk written with the quorum and will not read the parts that have not yet been written with the quorum.
       * Default value: **false** (sequential consistency is disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue select_sequential_consistency = 5;</code>
       */
      public Builder clearSelectSequentialConsistency() {
        if (selectSequentialConsistencyBuilder_ == null) {
          selectSequentialConsistency_ = null;
          onChanged();
        } else {
          selectSequentialConsistency_ = null;
          selectSequentialConsistencyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Determines the behavior of **SELECT** queries from the replicated table: if enabled, ClickHouse will terminate a query with error message in case the replica does not have a chunk written with the quorum and will not read the parts that have not yet been written with the quorum.
       * Default value: **false** (sequential consistency is disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue select_sequential_consistency = 5;</code>
       */
      public com.google.protobuf.BoolValue.Builder getSelectSequentialConsistencyBuilder() {
        
        onChanged();
        return getSelectSequentialConsistencyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Determines the behavior of **SELECT** queries from the replicated table: if enabled, ClickHouse will terminate a query with error message in case the replica does not have a chunk written with the quorum and will not read the parts that have not yet been written with the quorum.
       * Default value: **false** (sequential consistency is disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue select_sequential_consistency = 5;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getSelectSequentialConsistencyOrBuilder() {
        if (selectSequentialConsistencyBuilder_ != null) {
          return selectSequentialConsistencyBuilder_.getMessageOrBuilder();
        } else {
          return selectSequentialConsistency_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : selectSequentialConsistency_;
        }
      }
      /**
       * <pre>
       * Determines the behavior of **SELECT** queries from the replicated table: if enabled, ClickHouse will terminate a query with error message in case the replica does not have a chunk written with the quorum and will not read the parts that have not yet been written with the quorum.
       * Default value: **false** (sequential consistency is disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue select_sequential_consistency = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getSelectSequentialConsistencyFieldBuilder() {
        if (selectSequentialConsistencyBuilder_ == null) {
          selectSequentialConsistencyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getSelectSequentialConsistency(),
                  getParentForChildren(),
                  isClean());
          selectSequentialConsistency_ = null;
        }
        return selectSequentialConsistencyBuilder_;
      }

      private com.google.protobuf.BoolValue deduplicateBlocksInDependentMaterializedViews_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> deduplicateBlocksInDependentMaterializedViewsBuilder_;
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-deduplicate-blocks-in-dependent-materialized-views).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue deduplicate_blocks_in_dependent_materialized_views = 101;</code>
       * @return Whether the deduplicateBlocksInDependentMaterializedViews field is set.
       */
      public boolean hasDeduplicateBlocksInDependentMaterializedViews() {
        return deduplicateBlocksInDependentMaterializedViewsBuilder_ != null || deduplicateBlocksInDependentMaterializedViews_ != null;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-deduplicate-blocks-in-dependent-materialized-views).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue deduplicate_blocks_in_dependent_materialized_views = 101;</code>
       * @return The deduplicateBlocksInDependentMaterializedViews.
       */
      public com.google.protobuf.BoolValue getDeduplicateBlocksInDependentMaterializedViews() {
        if (deduplicateBlocksInDependentMaterializedViewsBuilder_ == null) {
          return deduplicateBlocksInDependentMaterializedViews_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : deduplicateBlocksInDependentMaterializedViews_;
        } else {
          return deduplicateBlocksInDependentMaterializedViewsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-deduplicate-blocks-in-dependent-materialized-views).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue deduplicate_blocks_in_dependent_materialized_views = 101;</code>
       */
      public Builder setDeduplicateBlocksInDependentMaterializedViews(com.google.protobuf.BoolValue value) {
        if (deduplicateBlocksInDependentMaterializedViewsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          deduplicateBlocksInDependentMaterializedViews_ = value;
          onChanged();
        } else {
          deduplicateBlocksInDependentMaterializedViewsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-deduplicate-blocks-in-dependent-materialized-views).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue deduplicate_blocks_in_dependent_materialized_views = 101;</code>
       */
      public Builder setDeduplicateBlocksInDependentMaterializedViews(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (deduplicateBlocksInDependentMaterializedViewsBuilder_ == null) {
          deduplicateBlocksInDependentMaterializedViews_ = builderForValue.build();
          onChanged();
        } else {
          deduplicateBlocksInDependentMaterializedViewsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-deduplicate-blocks-in-dependent-materialized-views).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue deduplicate_blocks_in_dependent_materialized_views = 101;</code>
       */
      public Builder mergeDeduplicateBlocksInDependentMaterializedViews(com.google.protobuf.BoolValue value) {
        if (deduplicateBlocksInDependentMaterializedViewsBuilder_ == null) {
          if (deduplicateBlocksInDependentMaterializedViews_ != null) {
            deduplicateBlocksInDependentMaterializedViews_ =
              com.google.protobuf.BoolValue.newBuilder(deduplicateBlocksInDependentMaterializedViews_).mergeFrom(value).buildPartial();
          } else {
            deduplicateBlocksInDependentMaterializedViews_ = value;
          }
          onChanged();
        } else {
          deduplicateBlocksInDependentMaterializedViewsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-deduplicate-blocks-in-dependent-materialized-views).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue deduplicate_blocks_in_dependent_materialized_views = 101;</code>
       */
      public Builder clearDeduplicateBlocksInDependentMaterializedViews() {
        if (deduplicateBlocksInDependentMaterializedViewsBuilder_ == null) {
          deduplicateBlocksInDependentMaterializedViews_ = null;
          onChanged();
        } else {
          deduplicateBlocksInDependentMaterializedViews_ = null;
          deduplicateBlocksInDependentMaterializedViewsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-deduplicate-blocks-in-dependent-materialized-views).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue deduplicate_blocks_in_dependent_materialized_views = 101;</code>
       */
      public com.google.protobuf.BoolValue.Builder getDeduplicateBlocksInDependentMaterializedViewsBuilder() {
        
        onChanged();
        return getDeduplicateBlocksInDependentMaterializedViewsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-deduplicate-blocks-in-dependent-materialized-views).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue deduplicate_blocks_in_dependent_materialized_views = 101;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getDeduplicateBlocksInDependentMaterializedViewsOrBuilder() {
        if (deduplicateBlocksInDependentMaterializedViewsBuilder_ != null) {
          return deduplicateBlocksInDependentMaterializedViewsBuilder_.getMessageOrBuilder();
        } else {
          return deduplicateBlocksInDependentMaterializedViews_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : deduplicateBlocksInDependentMaterializedViews_;
        }
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-deduplicate-blocks-in-dependent-materialized-views).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue deduplicate_blocks_in_dependent_materialized_views = 101;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getDeduplicateBlocksInDependentMaterializedViewsFieldBuilder() {
        if (deduplicateBlocksInDependentMaterializedViewsBuilder_ == null) {
          deduplicateBlocksInDependentMaterializedViewsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getDeduplicateBlocksInDependentMaterializedViews(),
                  getParentForChildren(),
                  isClean());
          deduplicateBlocksInDependentMaterializedViews_ = null;
        }
        return deduplicateBlocksInDependentMaterializedViewsBuilder_;
      }

      private com.google.protobuf.Int64Value replicationAlterPartitionsSync_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> replicationAlterPartitionsSyncBuilder_;
      /**
       * <pre>
       * Wait mode for asynchronous actions in **ALTER** queries on replicated tables:
       * * **0**-do not wait for replicas.
       * * **1**-only wait for own execution (default).
       * * **2**-wait for all replicas.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/alter/#synchronicity-of-alter-queries).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value replication_alter_partitions_sync = 42 [(.yandex.cloud.value) = "0-2"];</code>
       * @return Whether the replicationAlterPartitionsSync field is set.
       */
      public boolean hasReplicationAlterPartitionsSync() {
        return replicationAlterPartitionsSyncBuilder_ != null || replicationAlterPartitionsSync_ != null;
      }
      /**
       * <pre>
       * Wait mode for asynchronous actions in **ALTER** queries on replicated tables:
       * * **0**-do not wait for replicas.
       * * **1**-only wait for own execution (default).
       * * **2**-wait for all replicas.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/alter/#synchronicity-of-alter-queries).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value replication_alter_partitions_sync = 42 [(.yandex.cloud.value) = "0-2"];</code>
       * @return The replicationAlterPartitionsSync.
       */
      public com.google.protobuf.Int64Value getReplicationAlterPartitionsSync() {
        if (replicationAlterPartitionsSyncBuilder_ == null) {
          return replicationAlterPartitionsSync_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : replicationAlterPartitionsSync_;
        } else {
          return replicationAlterPartitionsSyncBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Wait mode for asynchronous actions in **ALTER** queries on replicated tables:
       * * **0**-do not wait for replicas.
       * * **1**-only wait for own execution (default).
       * * **2**-wait for all replicas.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/alter/#synchronicity-of-alter-queries).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value replication_alter_partitions_sync = 42 [(.yandex.cloud.value) = "0-2"];</code>
       */
      public Builder setReplicationAlterPartitionsSync(com.google.protobuf.Int64Value value) {
        if (replicationAlterPartitionsSyncBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          replicationAlterPartitionsSync_ = value;
          onChanged();
        } else {
          replicationAlterPartitionsSyncBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Wait mode for asynchronous actions in **ALTER** queries on replicated tables:
       * * **0**-do not wait for replicas.
       * * **1**-only wait for own execution (default).
       * * **2**-wait for all replicas.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/alter/#synchronicity-of-alter-queries).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value replication_alter_partitions_sync = 42 [(.yandex.cloud.value) = "0-2"];</code>
       */
      public Builder setReplicationAlterPartitionsSync(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (replicationAlterPartitionsSyncBuilder_ == null) {
          replicationAlterPartitionsSync_ = builderForValue.build();
          onChanged();
        } else {
          replicationAlterPartitionsSyncBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Wait mode for asynchronous actions in **ALTER** queries on replicated tables:
       * * **0**-do not wait for replicas.
       * * **1**-only wait for own execution (default).
       * * **2**-wait for all replicas.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/alter/#synchronicity-of-alter-queries).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value replication_alter_partitions_sync = 42 [(.yandex.cloud.value) = "0-2"];</code>
       */
      public Builder mergeReplicationAlterPartitionsSync(com.google.protobuf.Int64Value value) {
        if (replicationAlterPartitionsSyncBuilder_ == null) {
          if (replicationAlterPartitionsSync_ != null) {
            replicationAlterPartitionsSync_ =
              com.google.protobuf.Int64Value.newBuilder(replicationAlterPartitionsSync_).mergeFrom(value).buildPartial();
          } else {
            replicationAlterPartitionsSync_ = value;
          }
          onChanged();
        } else {
          replicationAlterPartitionsSyncBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Wait mode for asynchronous actions in **ALTER** queries on replicated tables:
       * * **0**-do not wait for replicas.
       * * **1**-only wait for own execution (default).
       * * **2**-wait for all replicas.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/alter/#synchronicity-of-alter-queries).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value replication_alter_partitions_sync = 42 [(.yandex.cloud.value) = "0-2"];</code>
       */
      public Builder clearReplicationAlterPartitionsSync() {
        if (replicationAlterPartitionsSyncBuilder_ == null) {
          replicationAlterPartitionsSync_ = null;
          onChanged();
        } else {
          replicationAlterPartitionsSync_ = null;
          replicationAlterPartitionsSyncBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Wait mode for asynchronous actions in **ALTER** queries on replicated tables:
       * * **0**-do not wait for replicas.
       * * **1**-only wait for own execution (default).
       * * **2**-wait for all replicas.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/alter/#synchronicity-of-alter-queries).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value replication_alter_partitions_sync = 42 [(.yandex.cloud.value) = "0-2"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getReplicationAlterPartitionsSyncBuilder() {
        
        onChanged();
        return getReplicationAlterPartitionsSyncFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Wait mode for asynchronous actions in **ALTER** queries on replicated tables:
       * * **0**-do not wait for replicas.
       * * **1**-only wait for own execution (default).
       * * **2**-wait for all replicas.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/alter/#synchronicity-of-alter-queries).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value replication_alter_partitions_sync = 42 [(.yandex.cloud.value) = "0-2"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getReplicationAlterPartitionsSyncOrBuilder() {
        if (replicationAlterPartitionsSyncBuilder_ != null) {
          return replicationAlterPartitionsSyncBuilder_.getMessageOrBuilder();
        } else {
          return replicationAlterPartitionsSync_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : replicationAlterPartitionsSync_;
        }
      }
      /**
       * <pre>
       * Wait mode for asynchronous actions in **ALTER** queries on replicated tables:
       * * **0**-do not wait for replicas.
       * * **1**-only wait for own execution (default).
       * * **2**-wait for all replicas.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/alter/#synchronicity-of-alter-queries).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value replication_alter_partitions_sync = 42 [(.yandex.cloud.value) = "0-2"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getReplicationAlterPartitionsSyncFieldBuilder() {
        if (replicationAlterPartitionsSyncBuilder_ == null) {
          replicationAlterPartitionsSyncBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getReplicationAlterPartitionsSync(),
                  getParentForChildren(),
                  isClean());
          replicationAlterPartitionsSync_ = null;
        }
        return replicationAlterPartitionsSyncBuilder_;
      }

      private com.google.protobuf.Int64Value maxReplicaDelayForDistributedQueries_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxReplicaDelayForDistributedQueriesBuilder_;
      /**
       * <pre>
       * Max replica delay in milliseconds. If a replica lags more than the set value, this replica is not used and becomes a stale one.
       * Minimum value: **1000**, 1 second (default: **300000**, 300 seconds or 5 minutes).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_replica_delay_for_distributed_queries).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_replica_delay_for_distributed_queries = 6 [(.yandex.cloud.value) = "&gt;=1000"];</code>
       * @return Whether the maxReplicaDelayForDistributedQueries field is set.
       */
      public boolean hasMaxReplicaDelayForDistributedQueries() {
        return maxReplicaDelayForDistributedQueriesBuilder_ != null || maxReplicaDelayForDistributedQueries_ != null;
      }
      /**
       * <pre>
       * Max replica delay in milliseconds. If a replica lags more than the set value, this replica is not used and becomes a stale one.
       * Minimum value: **1000**, 1 second (default: **300000**, 300 seconds or 5 minutes).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_replica_delay_for_distributed_queries).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_replica_delay_for_distributed_queries = 6 [(.yandex.cloud.value) = "&gt;=1000"];</code>
       * @return The maxReplicaDelayForDistributedQueries.
       */
      public com.google.protobuf.Int64Value getMaxReplicaDelayForDistributedQueries() {
        if (maxReplicaDelayForDistributedQueriesBuilder_ == null) {
          return maxReplicaDelayForDistributedQueries_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxReplicaDelayForDistributedQueries_;
        } else {
          return maxReplicaDelayForDistributedQueriesBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Max replica delay in milliseconds. If a replica lags more than the set value, this replica is not used and becomes a stale one.
       * Minimum value: **1000**, 1 second (default: **300000**, 300 seconds or 5 minutes).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_replica_delay_for_distributed_queries).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_replica_delay_for_distributed_queries = 6 [(.yandex.cloud.value) = "&gt;=1000"];</code>
       */
      public Builder setMaxReplicaDelayForDistributedQueries(com.google.protobuf.Int64Value value) {
        if (maxReplicaDelayForDistributedQueriesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxReplicaDelayForDistributedQueries_ = value;
          onChanged();
        } else {
          maxReplicaDelayForDistributedQueriesBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Max replica delay in milliseconds. If a replica lags more than the set value, this replica is not used and becomes a stale one.
       * Minimum value: **1000**, 1 second (default: **300000**, 300 seconds or 5 minutes).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_replica_delay_for_distributed_queries).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_replica_delay_for_distributed_queries = 6 [(.yandex.cloud.value) = "&gt;=1000"];</code>
       */
      public Builder setMaxReplicaDelayForDistributedQueries(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxReplicaDelayForDistributedQueriesBuilder_ == null) {
          maxReplicaDelayForDistributedQueries_ = builderForValue.build();
          onChanged();
        } else {
          maxReplicaDelayForDistributedQueriesBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Max replica delay in milliseconds. If a replica lags more than the set value, this replica is not used and becomes a stale one.
       * Minimum value: **1000**, 1 second (default: **300000**, 300 seconds or 5 minutes).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_replica_delay_for_distributed_queries).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_replica_delay_for_distributed_queries = 6 [(.yandex.cloud.value) = "&gt;=1000"];</code>
       */
      public Builder mergeMaxReplicaDelayForDistributedQueries(com.google.protobuf.Int64Value value) {
        if (maxReplicaDelayForDistributedQueriesBuilder_ == null) {
          if (maxReplicaDelayForDistributedQueries_ != null) {
            maxReplicaDelayForDistributedQueries_ =
              com.google.protobuf.Int64Value.newBuilder(maxReplicaDelayForDistributedQueries_).mergeFrom(value).buildPartial();
          } else {
            maxReplicaDelayForDistributedQueries_ = value;
          }
          onChanged();
        } else {
          maxReplicaDelayForDistributedQueriesBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Max replica delay in milliseconds. If a replica lags more than the set value, this replica is not used and becomes a stale one.
       * Minimum value: **1000**, 1 second (default: **300000**, 300 seconds or 5 minutes).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_replica_delay_for_distributed_queries).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_replica_delay_for_distributed_queries = 6 [(.yandex.cloud.value) = "&gt;=1000"];</code>
       */
      public Builder clearMaxReplicaDelayForDistributedQueries() {
        if (maxReplicaDelayForDistributedQueriesBuilder_ == null) {
          maxReplicaDelayForDistributedQueries_ = null;
          onChanged();
        } else {
          maxReplicaDelayForDistributedQueries_ = null;
          maxReplicaDelayForDistributedQueriesBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Max replica delay in milliseconds. If a replica lags more than the set value, this replica is not used and becomes a stale one.
       * Minimum value: **1000**, 1 second (default: **300000**, 300 seconds or 5 minutes).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_replica_delay_for_distributed_queries).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_replica_delay_for_distributed_queries = 6 [(.yandex.cloud.value) = "&gt;=1000"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxReplicaDelayForDistributedQueriesBuilder() {
        
        onChanged();
        return getMaxReplicaDelayForDistributedQueriesFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Max replica delay in milliseconds. If a replica lags more than the set value, this replica is not used and becomes a stale one.
       * Minimum value: **1000**, 1 second (default: **300000**, 300 seconds or 5 minutes).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_replica_delay_for_distributed_queries).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_replica_delay_for_distributed_queries = 6 [(.yandex.cloud.value) = "&gt;=1000"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxReplicaDelayForDistributedQueriesOrBuilder() {
        if (maxReplicaDelayForDistributedQueriesBuilder_ != null) {
          return maxReplicaDelayForDistributedQueriesBuilder_.getMessageOrBuilder();
        } else {
          return maxReplicaDelayForDistributedQueries_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxReplicaDelayForDistributedQueries_;
        }
      }
      /**
       * <pre>
       * Max replica delay in milliseconds. If a replica lags more than the set value, this replica is not used and becomes a stale one.
       * Minimum value: **1000**, 1 second (default: **300000**, 300 seconds or 5 minutes).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_replica_delay_for_distributed_queries).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_replica_delay_for_distributed_queries = 6 [(.yandex.cloud.value) = "&gt;=1000"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxReplicaDelayForDistributedQueriesFieldBuilder() {
        if (maxReplicaDelayForDistributedQueriesBuilder_ == null) {
          maxReplicaDelayForDistributedQueriesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxReplicaDelayForDistributedQueries(),
                  getParentForChildren(),
                  isClean());
          maxReplicaDelayForDistributedQueries_ = null;
        }
        return maxReplicaDelayForDistributedQueriesBuilder_;
      }

      private com.google.protobuf.BoolValue fallbackToStaleReplicasForDistributedQueries_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> fallbackToStaleReplicasForDistributedQueriesBuilder_;
      /**
       * <pre>
       * Enables or disables query forcing to a stale replica in case the actual data is unavailable.
       * If enabled, ClickHouse will choose the most up-to-date replica and force the query to use the data in this replica.
       * This setting can be used when doing **SELECT** query from a distributed table that points to replicated tables.
       * Default value: **true** (query forcing is enabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-fallback_to_stale_replicas_for_distributed_queries).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue fallback_to_stale_replicas_for_distributed_queries = 7;</code>
       * @return Whether the fallbackToStaleReplicasForDistributedQueries field is set.
       */
      public boolean hasFallbackToStaleReplicasForDistributedQueries() {
        return fallbackToStaleReplicasForDistributedQueriesBuilder_ != null || fallbackToStaleReplicasForDistributedQueries_ != null;
      }
      /**
       * <pre>
       * Enables or disables query forcing to a stale replica in case the actual data is unavailable.
       * If enabled, ClickHouse will choose the most up-to-date replica and force the query to use the data in this replica.
       * This setting can be used when doing **SELECT** query from a distributed table that points to replicated tables.
       * Default value: **true** (query forcing is enabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-fallback_to_stale_replicas_for_distributed_queries).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue fallback_to_stale_replicas_for_distributed_queries = 7;</code>
       * @return The fallbackToStaleReplicasForDistributedQueries.
       */
      public com.google.protobuf.BoolValue getFallbackToStaleReplicasForDistributedQueries() {
        if (fallbackToStaleReplicasForDistributedQueriesBuilder_ == null) {
          return fallbackToStaleReplicasForDistributedQueries_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : fallbackToStaleReplicasForDistributedQueries_;
        } else {
          return fallbackToStaleReplicasForDistributedQueriesBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enables or disables query forcing to a stale replica in case the actual data is unavailable.
       * If enabled, ClickHouse will choose the most up-to-date replica and force the query to use the data in this replica.
       * This setting can be used when doing **SELECT** query from a distributed table that points to replicated tables.
       * Default value: **true** (query forcing is enabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-fallback_to_stale_replicas_for_distributed_queries).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue fallback_to_stale_replicas_for_distributed_queries = 7;</code>
       */
      public Builder setFallbackToStaleReplicasForDistributedQueries(com.google.protobuf.BoolValue value) {
        if (fallbackToStaleReplicasForDistributedQueriesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          fallbackToStaleReplicasForDistributedQueries_ = value;
          onChanged();
        } else {
          fallbackToStaleReplicasForDistributedQueriesBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables query forcing to a stale replica in case the actual data is unavailable.
       * If enabled, ClickHouse will choose the most up-to-date replica and force the query to use the data in this replica.
       * This setting can be used when doing **SELECT** query from a distributed table that points to replicated tables.
       * Default value: **true** (query forcing is enabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-fallback_to_stale_replicas_for_distributed_queries).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue fallback_to_stale_replicas_for_distributed_queries = 7;</code>
       */
      public Builder setFallbackToStaleReplicasForDistributedQueries(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (fallbackToStaleReplicasForDistributedQueriesBuilder_ == null) {
          fallbackToStaleReplicasForDistributedQueries_ = builderForValue.build();
          onChanged();
        } else {
          fallbackToStaleReplicasForDistributedQueriesBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables query forcing to a stale replica in case the actual data is unavailable.
       * If enabled, ClickHouse will choose the most up-to-date replica and force the query to use the data in this replica.
       * This setting can be used when doing **SELECT** query from a distributed table that points to replicated tables.
       * Default value: **true** (query forcing is enabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-fallback_to_stale_replicas_for_distributed_queries).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue fallback_to_stale_replicas_for_distributed_queries = 7;</code>
       */
      public Builder mergeFallbackToStaleReplicasForDistributedQueries(com.google.protobuf.BoolValue value) {
        if (fallbackToStaleReplicasForDistributedQueriesBuilder_ == null) {
          if (fallbackToStaleReplicasForDistributedQueries_ != null) {
            fallbackToStaleReplicasForDistributedQueries_ =
              com.google.protobuf.BoolValue.newBuilder(fallbackToStaleReplicasForDistributedQueries_).mergeFrom(value).buildPartial();
          } else {
            fallbackToStaleReplicasForDistributedQueries_ = value;
          }
          onChanged();
        } else {
          fallbackToStaleReplicasForDistributedQueriesBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables query forcing to a stale replica in case the actual data is unavailable.
       * If enabled, ClickHouse will choose the most up-to-date replica and force the query to use the data in this replica.
       * This setting can be used when doing **SELECT** query from a distributed table that points to replicated tables.
       * Default value: **true** (query forcing is enabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-fallback_to_stale_replicas_for_distributed_queries).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue fallback_to_stale_replicas_for_distributed_queries = 7;</code>
       */
      public Builder clearFallbackToStaleReplicasForDistributedQueries() {
        if (fallbackToStaleReplicasForDistributedQueriesBuilder_ == null) {
          fallbackToStaleReplicasForDistributedQueries_ = null;
          onChanged();
        } else {
          fallbackToStaleReplicasForDistributedQueries_ = null;
          fallbackToStaleReplicasForDistributedQueriesBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables query forcing to a stale replica in case the actual data is unavailable.
       * If enabled, ClickHouse will choose the most up-to-date replica and force the query to use the data in this replica.
       * This setting can be used when doing **SELECT** query from a distributed table that points to replicated tables.
       * Default value: **true** (query forcing is enabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-fallback_to_stale_replicas_for_distributed_queries).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue fallback_to_stale_replicas_for_distributed_queries = 7;</code>
       */
      public com.google.protobuf.BoolValue.Builder getFallbackToStaleReplicasForDistributedQueriesBuilder() {
        
        onChanged();
        return getFallbackToStaleReplicasForDistributedQueriesFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enables or disables query forcing to a stale replica in case the actual data is unavailable.
       * If enabled, ClickHouse will choose the most up-to-date replica and force the query to use the data in this replica.
       * This setting can be used when doing **SELECT** query from a distributed table that points to replicated tables.
       * Default value: **true** (query forcing is enabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-fallback_to_stale_replicas_for_distributed_queries).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue fallback_to_stale_replicas_for_distributed_queries = 7;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getFallbackToStaleReplicasForDistributedQueriesOrBuilder() {
        if (fallbackToStaleReplicasForDistributedQueriesBuilder_ != null) {
          return fallbackToStaleReplicasForDistributedQueriesBuilder_.getMessageOrBuilder();
        } else {
          return fallbackToStaleReplicasForDistributedQueries_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : fallbackToStaleReplicasForDistributedQueries_;
        }
      }
      /**
       * <pre>
       * Enables or disables query forcing to a stale replica in case the actual data is unavailable.
       * If enabled, ClickHouse will choose the most up-to-date replica and force the query to use the data in this replica.
       * This setting can be used when doing **SELECT** query from a distributed table that points to replicated tables.
       * Default value: **true** (query forcing is enabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-fallback_to_stale_replicas_for_distributed_queries).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue fallback_to_stale_replicas_for_distributed_queries = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getFallbackToStaleReplicasForDistributedQueriesFieldBuilder() {
        if (fallbackToStaleReplicasForDistributedQueriesBuilder_ == null) {
          fallbackToStaleReplicasForDistributedQueriesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getFallbackToStaleReplicasForDistributedQueries(),
                  getParentForChildren(),
                  isClean());
          fallbackToStaleReplicasForDistributedQueries_ = null;
        }
        return fallbackToStaleReplicasForDistributedQueriesBuilder_;
      }

      private int distributedProductMode_ = 0;
      /**
       * <pre>
       * Determine the behavior of distributed subqueries.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#distributed-product-mode).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.DistributedProductMode distributed_product_mode = 43;</code>
       * @return The enum numeric value on the wire for distributedProductMode.
       */
      @java.lang.Override public int getDistributedProductModeValue() {
        return distributedProductMode_;
      }
      /**
       * <pre>
       * Determine the behavior of distributed subqueries.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#distributed-product-mode).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.DistributedProductMode distributed_product_mode = 43;</code>
       * @param value The enum numeric value on the wire for distributedProductMode to set.
       * @return This builder for chaining.
       */
      public Builder setDistributedProductModeValue(int value) {
        
        distributedProductMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Determine the behavior of distributed subqueries.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#distributed-product-mode).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.DistributedProductMode distributed_product_mode = 43;</code>
       * @return The distributedProductMode.
       */
      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DistributedProductMode getDistributedProductMode() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DistributedProductMode result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DistributedProductMode.valueOf(distributedProductMode_);
        return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DistributedProductMode.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Determine the behavior of distributed subqueries.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#distributed-product-mode).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.DistributedProductMode distributed_product_mode = 43;</code>
       * @param value The distributedProductMode to set.
       * @return This builder for chaining.
       */
      public Builder setDistributedProductMode(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DistributedProductMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        distributedProductMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Determine the behavior of distributed subqueries.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#distributed-product-mode).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.DistributedProductMode distributed_product_mode = 43;</code>
       * @return This builder for chaining.
       */
      public Builder clearDistributedProductMode() {
        
        distributedProductMode_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.BoolValue distributedAggregationMemoryEfficient_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> distributedAggregationMemoryEfficientBuilder_;
      /**
       * <pre>
       * Enables of disables memory saving mode when doing distributed aggregation.
       * When ClickHouse works with a distributed query, external aggregation is done on remote servers.
       * Enable this setting to achieve a smaller memory footprint on the server that sourced such a distributed query.
       * Default value: **false** (memory saving mode is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue distributed_aggregation_memory_efficient = 72;</code>
       * @return Whether the distributedAggregationMemoryEfficient field is set.
       */
      public boolean hasDistributedAggregationMemoryEfficient() {
        return distributedAggregationMemoryEfficientBuilder_ != null || distributedAggregationMemoryEfficient_ != null;
      }
      /**
       * <pre>
       * Enables of disables memory saving mode when doing distributed aggregation.
       * When ClickHouse works with a distributed query, external aggregation is done on remote servers.
       * Enable this setting to achieve a smaller memory footprint on the server that sourced such a distributed query.
       * Default value: **false** (memory saving mode is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue distributed_aggregation_memory_efficient = 72;</code>
       * @return The distributedAggregationMemoryEfficient.
       */
      public com.google.protobuf.BoolValue getDistributedAggregationMemoryEfficient() {
        if (distributedAggregationMemoryEfficientBuilder_ == null) {
          return distributedAggregationMemoryEfficient_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : distributedAggregationMemoryEfficient_;
        } else {
          return distributedAggregationMemoryEfficientBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enables of disables memory saving mode when doing distributed aggregation.
       * When ClickHouse works with a distributed query, external aggregation is done on remote servers.
       * Enable this setting to achieve a smaller memory footprint on the server that sourced such a distributed query.
       * Default value: **false** (memory saving mode is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue distributed_aggregation_memory_efficient = 72;</code>
       */
      public Builder setDistributedAggregationMemoryEfficient(com.google.protobuf.BoolValue value) {
        if (distributedAggregationMemoryEfficientBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          distributedAggregationMemoryEfficient_ = value;
          onChanged();
        } else {
          distributedAggregationMemoryEfficientBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables of disables memory saving mode when doing distributed aggregation.
       * When ClickHouse works with a distributed query, external aggregation is done on remote servers.
       * Enable this setting to achieve a smaller memory footprint on the server that sourced such a distributed query.
       * Default value: **false** (memory saving mode is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue distributed_aggregation_memory_efficient = 72;</code>
       */
      public Builder setDistributedAggregationMemoryEfficient(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (distributedAggregationMemoryEfficientBuilder_ == null) {
          distributedAggregationMemoryEfficient_ = builderForValue.build();
          onChanged();
        } else {
          distributedAggregationMemoryEfficientBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enables of disables memory saving mode when doing distributed aggregation.
       * When ClickHouse works with a distributed query, external aggregation is done on remote servers.
       * Enable this setting to achieve a smaller memory footprint on the server that sourced such a distributed query.
       * Default value: **false** (memory saving mode is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue distributed_aggregation_memory_efficient = 72;</code>
       */
      public Builder mergeDistributedAggregationMemoryEfficient(com.google.protobuf.BoolValue value) {
        if (distributedAggregationMemoryEfficientBuilder_ == null) {
          if (distributedAggregationMemoryEfficient_ != null) {
            distributedAggregationMemoryEfficient_ =
              com.google.protobuf.BoolValue.newBuilder(distributedAggregationMemoryEfficient_).mergeFrom(value).buildPartial();
          } else {
            distributedAggregationMemoryEfficient_ = value;
          }
          onChanged();
        } else {
          distributedAggregationMemoryEfficientBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables of disables memory saving mode when doing distributed aggregation.
       * When ClickHouse works with a distributed query, external aggregation is done on remote servers.
       * Enable this setting to achieve a smaller memory footprint on the server that sourced such a distributed query.
       * Default value: **false** (memory saving mode is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue distributed_aggregation_memory_efficient = 72;</code>
       */
      public Builder clearDistributedAggregationMemoryEfficient() {
        if (distributedAggregationMemoryEfficientBuilder_ == null) {
          distributedAggregationMemoryEfficient_ = null;
          onChanged();
        } else {
          distributedAggregationMemoryEfficient_ = null;
          distributedAggregationMemoryEfficientBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enables of disables memory saving mode when doing distributed aggregation.
       * When ClickHouse works with a distributed query, external aggregation is done on remote servers.
       * Enable this setting to achieve a smaller memory footprint on the server that sourced such a distributed query.
       * Default value: **false** (memory saving mode is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue distributed_aggregation_memory_efficient = 72;</code>
       */
      public com.google.protobuf.BoolValue.Builder getDistributedAggregationMemoryEfficientBuilder() {
        
        onChanged();
        return getDistributedAggregationMemoryEfficientFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enables of disables memory saving mode when doing distributed aggregation.
       * When ClickHouse works with a distributed query, external aggregation is done on remote servers.
       * Enable this setting to achieve a smaller memory footprint on the server that sourced such a distributed query.
       * Default value: **false** (memory saving mode is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue distributed_aggregation_memory_efficient = 72;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getDistributedAggregationMemoryEfficientOrBuilder() {
        if (distributedAggregationMemoryEfficientBuilder_ != null) {
          return distributedAggregationMemoryEfficientBuilder_.getMessageOrBuilder();
        } else {
          return distributedAggregationMemoryEfficient_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : distributedAggregationMemoryEfficient_;
        }
      }
      /**
       * <pre>
       * Enables of disables memory saving mode when doing distributed aggregation.
       * When ClickHouse works with a distributed query, external aggregation is done on remote servers.
       * Enable this setting to achieve a smaller memory footprint on the server that sourced such a distributed query.
       * Default value: **false** (memory saving mode is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue distributed_aggregation_memory_efficient = 72;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getDistributedAggregationMemoryEfficientFieldBuilder() {
        if (distributedAggregationMemoryEfficientBuilder_ == null) {
          distributedAggregationMemoryEfficientBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getDistributedAggregationMemoryEfficient(),
                  getParentForChildren(),
                  isClean());
          distributedAggregationMemoryEfficient_ = null;
        }
        return distributedAggregationMemoryEfficientBuilder_;
      }

      private com.google.protobuf.Int64Value distributedDdlTaskTimeout_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> distributedDdlTaskTimeoutBuilder_;
      /**
       * <pre>
       * Timeout for DDL queries, in milliseconds.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value distributed_ddl_task_timeout = 73;</code>
       * @return Whether the distributedDdlTaskTimeout field is set.
       */
      public boolean hasDistributedDdlTaskTimeout() {
        return distributedDdlTaskTimeoutBuilder_ != null || distributedDdlTaskTimeout_ != null;
      }
      /**
       * <pre>
       * Timeout for DDL queries, in milliseconds.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value distributed_ddl_task_timeout = 73;</code>
       * @return The distributedDdlTaskTimeout.
       */
      public com.google.protobuf.Int64Value getDistributedDdlTaskTimeout() {
        if (distributedDdlTaskTimeoutBuilder_ == null) {
          return distributedDdlTaskTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : distributedDdlTaskTimeout_;
        } else {
          return distributedDdlTaskTimeoutBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Timeout for DDL queries, in milliseconds.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value distributed_ddl_task_timeout = 73;</code>
       */
      public Builder setDistributedDdlTaskTimeout(com.google.protobuf.Int64Value value) {
        if (distributedDdlTaskTimeoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          distributedDdlTaskTimeout_ = value;
          onChanged();
        } else {
          distributedDdlTaskTimeoutBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timeout for DDL queries, in milliseconds.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value distributed_ddl_task_timeout = 73;</code>
       */
      public Builder setDistributedDdlTaskTimeout(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (distributedDdlTaskTimeoutBuilder_ == null) {
          distributedDdlTaskTimeout_ = builderForValue.build();
          onChanged();
        } else {
          distributedDdlTaskTimeoutBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Timeout for DDL queries, in milliseconds.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value distributed_ddl_task_timeout = 73;</code>
       */
      public Builder mergeDistributedDdlTaskTimeout(com.google.protobuf.Int64Value value) {
        if (distributedDdlTaskTimeoutBuilder_ == null) {
          if (distributedDdlTaskTimeout_ != null) {
            distributedDdlTaskTimeout_ =
              com.google.protobuf.Int64Value.newBuilder(distributedDdlTaskTimeout_).mergeFrom(value).buildPartial();
          } else {
            distributedDdlTaskTimeout_ = value;
          }
          onChanged();
        } else {
          distributedDdlTaskTimeoutBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timeout for DDL queries, in milliseconds.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value distributed_ddl_task_timeout = 73;</code>
       */
      public Builder clearDistributedDdlTaskTimeout() {
        if (distributedDdlTaskTimeoutBuilder_ == null) {
          distributedDdlTaskTimeout_ = null;
          onChanged();
        } else {
          distributedDdlTaskTimeout_ = null;
          distributedDdlTaskTimeoutBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Timeout for DDL queries, in milliseconds.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value distributed_ddl_task_timeout = 73;</code>
       */
      public com.google.protobuf.Int64Value.Builder getDistributedDdlTaskTimeoutBuilder() {
        
        onChanged();
        return getDistributedDdlTaskTimeoutFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Timeout for DDL queries, in milliseconds.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value distributed_ddl_task_timeout = 73;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getDistributedDdlTaskTimeoutOrBuilder() {
        if (distributedDdlTaskTimeoutBuilder_ != null) {
          return distributedDdlTaskTimeoutBuilder_.getMessageOrBuilder();
        } else {
          return distributedDdlTaskTimeout_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : distributedDdlTaskTimeout_;
        }
      }
      /**
       * <pre>
       * Timeout for DDL queries, in milliseconds.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value distributed_ddl_task_timeout = 73;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getDistributedDdlTaskTimeoutFieldBuilder() {
        if (distributedDdlTaskTimeoutBuilder_ == null) {
          distributedDdlTaskTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getDistributedDdlTaskTimeout(),
                  getParentForChildren(),
                  isClean());
          distributedDdlTaskTimeout_ = null;
        }
        return distributedDdlTaskTimeoutBuilder_;
      }

      private com.google.protobuf.BoolValue skipUnavailableShards_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> skipUnavailableShardsBuilder_;
      /**
       * <pre>
       * Enables or disables silent skipping of unavailable shards.
       * A shard is considered unavailable if all its replicas are also unavailable.
       * Default value: **false** (silent skipping is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-skip_unavailable_shards).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue skip_unavailable_shards = 81;</code>
       * @return Whether the skipUnavailableShards field is set.
       */
      public boolean hasSkipUnavailableShards() {
        return skipUnavailableShardsBuilder_ != null || skipUnavailableShards_ != null;
      }
      /**
       * <pre>
       * Enables or disables silent skipping of unavailable shards.
       * A shard is considered unavailable if all its replicas are also unavailable.
       * Default value: **false** (silent skipping is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-skip_unavailable_shards).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue skip_unavailable_shards = 81;</code>
       * @return The skipUnavailableShards.
       */
      public com.google.protobuf.BoolValue getSkipUnavailableShards() {
        if (skipUnavailableShardsBuilder_ == null) {
          return skipUnavailableShards_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : skipUnavailableShards_;
        } else {
          return skipUnavailableShardsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enables or disables silent skipping of unavailable shards.
       * A shard is considered unavailable if all its replicas are also unavailable.
       * Default value: **false** (silent skipping is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-skip_unavailable_shards).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue skip_unavailable_shards = 81;</code>
       */
      public Builder setSkipUnavailableShards(com.google.protobuf.BoolValue value) {
        if (skipUnavailableShardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          skipUnavailableShards_ = value;
          onChanged();
        } else {
          skipUnavailableShardsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables silent skipping of unavailable shards.
       * A shard is considered unavailable if all its replicas are also unavailable.
       * Default value: **false** (silent skipping is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-skip_unavailable_shards).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue skip_unavailable_shards = 81;</code>
       */
      public Builder setSkipUnavailableShards(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (skipUnavailableShardsBuilder_ == null) {
          skipUnavailableShards_ = builderForValue.build();
          onChanged();
        } else {
          skipUnavailableShardsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables silent skipping of unavailable shards.
       * A shard is considered unavailable if all its replicas are also unavailable.
       * Default value: **false** (silent skipping is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-skip_unavailable_shards).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue skip_unavailable_shards = 81;</code>
       */
      public Builder mergeSkipUnavailableShards(com.google.protobuf.BoolValue value) {
        if (skipUnavailableShardsBuilder_ == null) {
          if (skipUnavailableShards_ != null) {
            skipUnavailableShards_ =
              com.google.protobuf.BoolValue.newBuilder(skipUnavailableShards_).mergeFrom(value).buildPartial();
          } else {
            skipUnavailableShards_ = value;
          }
          onChanged();
        } else {
          skipUnavailableShardsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables silent skipping of unavailable shards.
       * A shard is considered unavailable if all its replicas are also unavailable.
       * Default value: **false** (silent skipping is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-skip_unavailable_shards).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue skip_unavailable_shards = 81;</code>
       */
      public Builder clearSkipUnavailableShards() {
        if (skipUnavailableShardsBuilder_ == null) {
          skipUnavailableShards_ = null;
          onChanged();
        } else {
          skipUnavailableShards_ = null;
          skipUnavailableShardsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables silent skipping of unavailable shards.
       * A shard is considered unavailable if all its replicas are also unavailable.
       * Default value: **false** (silent skipping is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-skip_unavailable_shards).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue skip_unavailable_shards = 81;</code>
       */
      public com.google.protobuf.BoolValue.Builder getSkipUnavailableShardsBuilder() {
        
        onChanged();
        return getSkipUnavailableShardsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enables or disables silent skipping of unavailable shards.
       * A shard is considered unavailable if all its replicas are also unavailable.
       * Default value: **false** (silent skipping is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-skip_unavailable_shards).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue skip_unavailable_shards = 81;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getSkipUnavailableShardsOrBuilder() {
        if (skipUnavailableShardsBuilder_ != null) {
          return skipUnavailableShardsBuilder_.getMessageOrBuilder();
        } else {
          return skipUnavailableShards_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : skipUnavailableShards_;
        }
      }
      /**
       * <pre>
       * Enables or disables silent skipping of unavailable shards.
       * A shard is considered unavailable if all its replicas are also unavailable.
       * Default value: **false** (silent skipping is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-skip_unavailable_shards).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue skip_unavailable_shards = 81;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getSkipUnavailableShardsFieldBuilder() {
        if (skipUnavailableShardsBuilder_ == null) {
          skipUnavailableShardsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getSkipUnavailableShards(),
                  getParentForChildren(),
                  isClean());
          skipUnavailableShards_ = null;
        }
        return skipUnavailableShardsBuilder_;
      }

      private com.google.protobuf.BoolValue compileExpressions_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> compileExpressionsBuilder_;
      /**
       * <pre>
       * Enables or disables expression compilation.
       * If you execute a lot of queries that contain identical expressions, then enable this setting.
       * As a result, such queries may be executed faster due to use of compiled expressions.
       * Use this setting in combination with [min_count_to_compile_expression] setting.
       * Default value: **false** (expression compilation is disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue compile_expressions = 46;</code>
       * @return Whether the compileExpressions field is set.
       */
      public boolean hasCompileExpressions() {
        return compileExpressionsBuilder_ != null || compileExpressions_ != null;
      }
      /**
       * <pre>
       * Enables or disables expression compilation.
       * If you execute a lot of queries that contain identical expressions, then enable this setting.
       * As a result, such queries may be executed faster due to use of compiled expressions.
       * Use this setting in combination with [min_count_to_compile_expression] setting.
       * Default value: **false** (expression compilation is disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue compile_expressions = 46;</code>
       * @return The compileExpressions.
       */
      public com.google.protobuf.BoolValue getCompileExpressions() {
        if (compileExpressionsBuilder_ == null) {
          return compileExpressions_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : compileExpressions_;
        } else {
          return compileExpressionsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enables or disables expression compilation.
       * If you execute a lot of queries that contain identical expressions, then enable this setting.
       * As a result, such queries may be executed faster due to use of compiled expressions.
       * Use this setting in combination with [min_count_to_compile_expression] setting.
       * Default value: **false** (expression compilation is disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue compile_expressions = 46;</code>
       */
      public Builder setCompileExpressions(com.google.protobuf.BoolValue value) {
        if (compileExpressionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          compileExpressions_ = value;
          onChanged();
        } else {
          compileExpressionsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables expression compilation.
       * If you execute a lot of queries that contain identical expressions, then enable this setting.
       * As a result, such queries may be executed faster due to use of compiled expressions.
       * Use this setting in combination with [min_count_to_compile_expression] setting.
       * Default value: **false** (expression compilation is disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue compile_expressions = 46;</code>
       */
      public Builder setCompileExpressions(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (compileExpressionsBuilder_ == null) {
          compileExpressions_ = builderForValue.build();
          onChanged();
        } else {
          compileExpressionsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables expression compilation.
       * If you execute a lot of queries that contain identical expressions, then enable this setting.
       * As a result, such queries may be executed faster due to use of compiled expressions.
       * Use this setting in combination with [min_count_to_compile_expression] setting.
       * Default value: **false** (expression compilation is disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue compile_expressions = 46;</code>
       */
      public Builder mergeCompileExpressions(com.google.protobuf.BoolValue value) {
        if (compileExpressionsBuilder_ == null) {
          if (compileExpressions_ != null) {
            compileExpressions_ =
              com.google.protobuf.BoolValue.newBuilder(compileExpressions_).mergeFrom(value).buildPartial();
          } else {
            compileExpressions_ = value;
          }
          onChanged();
        } else {
          compileExpressionsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables expression compilation.
       * If you execute a lot of queries that contain identical expressions, then enable this setting.
       * As a result, such queries may be executed faster due to use of compiled expressions.
       * Use this setting in combination with [min_count_to_compile_expression] setting.
       * Default value: **false** (expression compilation is disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue compile_expressions = 46;</code>
       */
      public Builder clearCompileExpressions() {
        if (compileExpressionsBuilder_ == null) {
          compileExpressions_ = null;
          onChanged();
        } else {
          compileExpressions_ = null;
          compileExpressionsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables expression compilation.
       * If you execute a lot of queries that contain identical expressions, then enable this setting.
       * As a result, such queries may be executed faster due to use of compiled expressions.
       * Use this setting in combination with [min_count_to_compile_expression] setting.
       * Default value: **false** (expression compilation is disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue compile_expressions = 46;</code>
       */
      public com.google.protobuf.BoolValue.Builder getCompileExpressionsBuilder() {
        
        onChanged();
        return getCompileExpressionsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enables or disables expression compilation.
       * If you execute a lot of queries that contain identical expressions, then enable this setting.
       * As a result, such queries may be executed faster due to use of compiled expressions.
       * Use this setting in combination with [min_count_to_compile_expression] setting.
       * Default value: **false** (expression compilation is disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue compile_expressions = 46;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getCompileExpressionsOrBuilder() {
        if (compileExpressionsBuilder_ != null) {
          return compileExpressionsBuilder_.getMessageOrBuilder();
        } else {
          return compileExpressions_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : compileExpressions_;
        }
      }
      /**
       * <pre>
       * Enables or disables expression compilation.
       * If you execute a lot of queries that contain identical expressions, then enable this setting.
       * As a result, such queries may be executed faster due to use of compiled expressions.
       * Use this setting in combination with [min_count_to_compile_expression] setting.
       * Default value: **false** (expression compilation is disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue compile_expressions = 46;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getCompileExpressionsFieldBuilder() {
        if (compileExpressionsBuilder_ == null) {
          compileExpressionsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getCompileExpressions(),
                  getParentForChildren(),
                  isClean());
          compileExpressions_ = null;
        }
        return compileExpressionsBuilder_;
      }

      private com.google.protobuf.Int64Value minCountToCompileExpression_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> minCountToCompileExpressionBuilder_;
      /**
       * <pre>
       * How many identical expressions ClickHouse has to encounter before they are compiled.
       * Minimum value: **0** (default: **3**).
       * For the **0** value compilation is synchronous: a query waits for expression compilation process to complete prior to continuing execution.
       * It is recommended to set this value only for testing purposes.
       * For all other values, compilation is asynchronous: the compilation process executes in a separate thread.
       * When a compiled expression is ready, it will be used by ClickHouse for eligible queries, including the ones that are currently running.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_count_to_compile_expression = 47 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the minCountToCompileExpression field is set.
       */
      public boolean hasMinCountToCompileExpression() {
        return minCountToCompileExpressionBuilder_ != null || minCountToCompileExpression_ != null;
      }
      /**
       * <pre>
       * How many identical expressions ClickHouse has to encounter before they are compiled.
       * Minimum value: **0** (default: **3**).
       * For the **0** value compilation is synchronous: a query waits for expression compilation process to complete prior to continuing execution.
       * It is recommended to set this value only for testing purposes.
       * For all other values, compilation is asynchronous: the compilation process executes in a separate thread.
       * When a compiled expression is ready, it will be used by ClickHouse for eligible queries, including the ones that are currently running.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_count_to_compile_expression = 47 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The minCountToCompileExpression.
       */
      public com.google.protobuf.Int64Value getMinCountToCompileExpression() {
        if (minCountToCompileExpressionBuilder_ == null) {
          return minCountToCompileExpression_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : minCountToCompileExpression_;
        } else {
          return minCountToCompileExpressionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * How many identical expressions ClickHouse has to encounter before they are compiled.
       * Minimum value: **0** (default: **3**).
       * For the **0** value compilation is synchronous: a query waits for expression compilation process to complete prior to continuing execution.
       * It is recommended to set this value only for testing purposes.
       * For all other values, compilation is asynchronous: the compilation process executes in a separate thread.
       * When a compiled expression is ready, it will be used by ClickHouse for eligible queries, including the ones that are currently running.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_count_to_compile_expression = 47 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMinCountToCompileExpression(com.google.protobuf.Int64Value value) {
        if (minCountToCompileExpressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          minCountToCompileExpression_ = value;
          onChanged();
        } else {
          minCountToCompileExpressionBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * How many identical expressions ClickHouse has to encounter before they are compiled.
       * Minimum value: **0** (default: **3**).
       * For the **0** value compilation is synchronous: a query waits for expression compilation process to complete prior to continuing execution.
       * It is recommended to set this value only for testing purposes.
       * For all other values, compilation is asynchronous: the compilation process executes in a separate thread.
       * When a compiled expression is ready, it will be used by ClickHouse for eligible queries, including the ones that are currently running.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_count_to_compile_expression = 47 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMinCountToCompileExpression(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (minCountToCompileExpressionBuilder_ == null) {
          minCountToCompileExpression_ = builderForValue.build();
          onChanged();
        } else {
          minCountToCompileExpressionBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * How many identical expressions ClickHouse has to encounter before they are compiled.
       * Minimum value: **0** (default: **3**).
       * For the **0** value compilation is synchronous: a query waits for expression compilation process to complete prior to continuing execution.
       * It is recommended to set this value only for testing purposes.
       * For all other values, compilation is asynchronous: the compilation process executes in a separate thread.
       * When a compiled expression is ready, it will be used by ClickHouse for eligible queries, including the ones that are currently running.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_count_to_compile_expression = 47 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMinCountToCompileExpression(com.google.protobuf.Int64Value value) {
        if (minCountToCompileExpressionBuilder_ == null) {
          if (minCountToCompileExpression_ != null) {
            minCountToCompileExpression_ =
              com.google.protobuf.Int64Value.newBuilder(minCountToCompileExpression_).mergeFrom(value).buildPartial();
          } else {
            minCountToCompileExpression_ = value;
          }
          onChanged();
        } else {
          minCountToCompileExpressionBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * How many identical expressions ClickHouse has to encounter before they are compiled.
       * Minimum value: **0** (default: **3**).
       * For the **0** value compilation is synchronous: a query waits for expression compilation process to complete prior to continuing execution.
       * It is recommended to set this value only for testing purposes.
       * For all other values, compilation is asynchronous: the compilation process executes in a separate thread.
       * When a compiled expression is ready, it will be used by ClickHouse for eligible queries, including the ones that are currently running.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_count_to_compile_expression = 47 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMinCountToCompileExpression() {
        if (minCountToCompileExpressionBuilder_ == null) {
          minCountToCompileExpression_ = null;
          onChanged();
        } else {
          minCountToCompileExpression_ = null;
          minCountToCompileExpressionBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * How many identical expressions ClickHouse has to encounter before they are compiled.
       * Minimum value: **0** (default: **3**).
       * For the **0** value compilation is synchronous: a query waits for expression compilation process to complete prior to continuing execution.
       * It is recommended to set this value only for testing purposes.
       * For all other values, compilation is asynchronous: the compilation process executes in a separate thread.
       * When a compiled expression is ready, it will be used by ClickHouse for eligible queries, including the ones that are currently running.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_count_to_compile_expression = 47 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMinCountToCompileExpressionBuilder() {
        
        onChanged();
        return getMinCountToCompileExpressionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * How many identical expressions ClickHouse has to encounter before they are compiled.
       * Minimum value: **0** (default: **3**).
       * For the **0** value compilation is synchronous: a query waits for expression compilation process to complete prior to continuing execution.
       * It is recommended to set this value only for testing purposes.
       * For all other values, compilation is asynchronous: the compilation process executes in a separate thread.
       * When a compiled expression is ready, it will be used by ClickHouse for eligible queries, including the ones that are currently running.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_count_to_compile_expression = 47 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMinCountToCompileExpressionOrBuilder() {
        if (minCountToCompileExpressionBuilder_ != null) {
          return minCountToCompileExpressionBuilder_.getMessageOrBuilder();
        } else {
          return minCountToCompileExpression_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : minCountToCompileExpression_;
        }
      }
      /**
       * <pre>
       * How many identical expressions ClickHouse has to encounter before they are compiled.
       * Minimum value: **0** (default: **3**).
       * For the **0** value compilation is synchronous: a query waits for expression compilation process to complete prior to continuing execution.
       * It is recommended to set this value only for testing purposes.
       * For all other values, compilation is asynchronous: the compilation process executes in a separate thread.
       * When a compiled expression is ready, it will be used by ClickHouse for eligible queries, including the ones that are currently running.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_count_to_compile_expression = 47 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMinCountToCompileExpressionFieldBuilder() {
        if (minCountToCompileExpressionBuilder_ == null) {
          minCountToCompileExpressionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMinCountToCompileExpression(),
                  getParentForChildren(),
                  isClean());
          minCountToCompileExpression_ = null;
        }
        return minCountToCompileExpressionBuilder_;
      }

      private com.google.protobuf.Int64Value maxBlockSize_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxBlockSizeBuilder_;
      /**
       * <pre>
       * The maximum block size for reading.
       * Data in ClickHouse is organized and processed by blocks (block is a set of columns' parts).
       * The internal processing cycles for a single block are efficient enough, but there are noticeable expenditures on each block.
       * This setting is a recommendation for size of block (in a count of rows) that should be loaded from tables.
       * Value must be greater than **0** (default: **65536**).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_block_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_block_size = 9 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return Whether the maxBlockSize field is set.
       */
      public boolean hasMaxBlockSize() {
        return maxBlockSizeBuilder_ != null || maxBlockSize_ != null;
      }
      /**
       * <pre>
       * The maximum block size for reading.
       * Data in ClickHouse is organized and processed by blocks (block is a set of columns' parts).
       * The internal processing cycles for a single block are efficient enough, but there are noticeable expenditures on each block.
       * This setting is a recommendation for size of block (in a count of rows) that should be loaded from tables.
       * Value must be greater than **0** (default: **65536**).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_block_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_block_size = 9 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return The maxBlockSize.
       */
      public com.google.protobuf.Int64Value getMaxBlockSize() {
        if (maxBlockSizeBuilder_ == null) {
          return maxBlockSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxBlockSize_;
        } else {
          return maxBlockSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The maximum block size for reading.
       * Data in ClickHouse is organized and processed by blocks (block is a set of columns' parts).
       * The internal processing cycles for a single block are efficient enough, but there are noticeable expenditures on each block.
       * This setting is a recommendation for size of block (in a count of rows) that should be loaded from tables.
       * Value must be greater than **0** (default: **65536**).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_block_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_block_size = 9 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setMaxBlockSize(com.google.protobuf.Int64Value value) {
        if (maxBlockSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxBlockSize_ = value;
          onChanged();
        } else {
          maxBlockSizeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum block size for reading.
       * Data in ClickHouse is organized and processed by blocks (block is a set of columns' parts).
       * The internal processing cycles for a single block are efficient enough, but there are noticeable expenditures on each block.
       * This setting is a recommendation for size of block (in a count of rows) that should be loaded from tables.
       * Value must be greater than **0** (default: **65536**).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_block_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_block_size = 9 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setMaxBlockSize(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxBlockSizeBuilder_ == null) {
          maxBlockSize_ = builderForValue.build();
          onChanged();
        } else {
          maxBlockSizeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The maximum block size for reading.
       * Data in ClickHouse is organized and processed by blocks (block is a set of columns' parts).
       * The internal processing cycles for a single block are efficient enough, but there are noticeable expenditures on each block.
       * This setting is a recommendation for size of block (in a count of rows) that should be loaded from tables.
       * Value must be greater than **0** (default: **65536**).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_block_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_block_size = 9 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder mergeMaxBlockSize(com.google.protobuf.Int64Value value) {
        if (maxBlockSizeBuilder_ == null) {
          if (maxBlockSize_ != null) {
            maxBlockSize_ =
              com.google.protobuf.Int64Value.newBuilder(maxBlockSize_).mergeFrom(value).buildPartial();
          } else {
            maxBlockSize_ = value;
          }
          onChanged();
        } else {
          maxBlockSizeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum block size for reading.
       * Data in ClickHouse is organized and processed by blocks (block is a set of columns' parts).
       * The internal processing cycles for a single block are efficient enough, but there are noticeable expenditures on each block.
       * This setting is a recommendation for size of block (in a count of rows) that should be loaded from tables.
       * Value must be greater than **0** (default: **65536**).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_block_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_block_size = 9 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder clearMaxBlockSize() {
        if (maxBlockSizeBuilder_ == null) {
          maxBlockSize_ = null;
          onChanged();
        } else {
          maxBlockSize_ = null;
          maxBlockSizeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The maximum block size for reading.
       * Data in ClickHouse is organized and processed by blocks (block is a set of columns' parts).
       * The internal processing cycles for a single block are efficient enough, but there are noticeable expenditures on each block.
       * This setting is a recommendation for size of block (in a count of rows) that should be loaded from tables.
       * Value must be greater than **0** (default: **65536**).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_block_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_block_size = 9 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxBlockSizeBuilder() {
        
        onChanged();
        return getMaxBlockSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The maximum block size for reading.
       * Data in ClickHouse is organized and processed by blocks (block is a set of columns' parts).
       * The internal processing cycles for a single block are efficient enough, but there are noticeable expenditures on each block.
       * This setting is a recommendation for size of block (in a count of rows) that should be loaded from tables.
       * Value must be greater than **0** (default: **65536**).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_block_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_block_size = 9 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxBlockSizeOrBuilder() {
        if (maxBlockSizeBuilder_ != null) {
          return maxBlockSizeBuilder_.getMessageOrBuilder();
        } else {
          return maxBlockSize_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxBlockSize_;
        }
      }
      /**
       * <pre>
       * The maximum block size for reading.
       * Data in ClickHouse is organized and processed by blocks (block is a set of columns' parts).
       * The internal processing cycles for a single block are efficient enough, but there are noticeable expenditures on each block.
       * This setting is a recommendation for size of block (in a count of rows) that should be loaded from tables.
       * Value must be greater than **0** (default: **65536**).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_block_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_block_size = 9 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxBlockSizeFieldBuilder() {
        if (maxBlockSizeBuilder_ == null) {
          maxBlockSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxBlockSize(),
                  getParentForChildren(),
                  isClean());
          maxBlockSize_ = null;
        }
        return maxBlockSizeBuilder_;
      }

      private com.google.protobuf.Int64Value minInsertBlockSizeRows_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> minInsertBlockSizeRowsBuilder_;
      /**
       * <pre>
       * Limits the minimum number of rows in a block to be inserted in a table by **INSERT** query.
       * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
       * Minimal value: **0**, block squashing is disabled (default: **1048576**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_insert_block_size_rows = 48 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the minInsertBlockSizeRows field is set.
       */
      public boolean hasMinInsertBlockSizeRows() {
        return minInsertBlockSizeRowsBuilder_ != null || minInsertBlockSizeRows_ != null;
      }
      /**
       * <pre>
       * Limits the minimum number of rows in a block to be inserted in a table by **INSERT** query.
       * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
       * Minimal value: **0**, block squashing is disabled (default: **1048576**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_insert_block_size_rows = 48 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The minInsertBlockSizeRows.
       */
      public com.google.protobuf.Int64Value getMinInsertBlockSizeRows() {
        if (minInsertBlockSizeRowsBuilder_ == null) {
          return minInsertBlockSizeRows_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : minInsertBlockSizeRows_;
        } else {
          return minInsertBlockSizeRowsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the minimum number of rows in a block to be inserted in a table by **INSERT** query.
       * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
       * Minimal value: **0**, block squashing is disabled (default: **1048576**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_insert_block_size_rows = 48 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMinInsertBlockSizeRows(com.google.protobuf.Int64Value value) {
        if (minInsertBlockSizeRowsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          minInsertBlockSizeRows_ = value;
          onChanged();
        } else {
          minInsertBlockSizeRowsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the minimum number of rows in a block to be inserted in a table by **INSERT** query.
       * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
       * Minimal value: **0**, block squashing is disabled (default: **1048576**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_insert_block_size_rows = 48 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMinInsertBlockSizeRows(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (minInsertBlockSizeRowsBuilder_ == null) {
          minInsertBlockSizeRows_ = builderForValue.build();
          onChanged();
        } else {
          minInsertBlockSizeRowsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the minimum number of rows in a block to be inserted in a table by **INSERT** query.
       * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
       * Minimal value: **0**, block squashing is disabled (default: **1048576**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_insert_block_size_rows = 48 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMinInsertBlockSizeRows(com.google.protobuf.Int64Value value) {
        if (minInsertBlockSizeRowsBuilder_ == null) {
          if (minInsertBlockSizeRows_ != null) {
            minInsertBlockSizeRows_ =
              com.google.protobuf.Int64Value.newBuilder(minInsertBlockSizeRows_).mergeFrom(value).buildPartial();
          } else {
            minInsertBlockSizeRows_ = value;
          }
          onChanged();
        } else {
          minInsertBlockSizeRowsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the minimum number of rows in a block to be inserted in a table by **INSERT** query.
       * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
       * Minimal value: **0**, block squashing is disabled (default: **1048576**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_insert_block_size_rows = 48 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMinInsertBlockSizeRows() {
        if (minInsertBlockSizeRowsBuilder_ == null) {
          minInsertBlockSizeRows_ = null;
          onChanged();
        } else {
          minInsertBlockSizeRows_ = null;
          minInsertBlockSizeRowsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the minimum number of rows in a block to be inserted in a table by **INSERT** query.
       * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
       * Minimal value: **0**, block squashing is disabled (default: **1048576**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_insert_block_size_rows = 48 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMinInsertBlockSizeRowsBuilder() {
        
        onChanged();
        return getMinInsertBlockSizeRowsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the minimum number of rows in a block to be inserted in a table by **INSERT** query.
       * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
       * Minimal value: **0**, block squashing is disabled (default: **1048576**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_insert_block_size_rows = 48 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMinInsertBlockSizeRowsOrBuilder() {
        if (minInsertBlockSizeRowsBuilder_ != null) {
          return minInsertBlockSizeRowsBuilder_.getMessageOrBuilder();
        } else {
          return minInsertBlockSizeRows_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : minInsertBlockSizeRows_;
        }
      }
      /**
       * <pre>
       * Limits the minimum number of rows in a block to be inserted in a table by **INSERT** query.
       * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
       * Minimal value: **0**, block squashing is disabled (default: **1048576**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_insert_block_size_rows = 48 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMinInsertBlockSizeRowsFieldBuilder() {
        if (minInsertBlockSizeRowsBuilder_ == null) {
          minInsertBlockSizeRowsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMinInsertBlockSizeRows(),
                  getParentForChildren(),
                  isClean());
          minInsertBlockSizeRows_ = null;
        }
        return minInsertBlockSizeRowsBuilder_;
      }

      private com.google.protobuf.Int64Value minInsertBlockSizeBytes_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> minInsertBlockSizeBytesBuilder_;
      /**
       * <pre>
       * Limits the minimum number of bytes in a block to be inserted in a table by **INSERT** query.
       * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
       * Minimal value: **0**, block squashing is disabled (default: **268435456**, 256 MB).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_insert_block_size_bytes = 49 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the minInsertBlockSizeBytes field is set.
       */
      public boolean hasMinInsertBlockSizeBytes() {
        return minInsertBlockSizeBytesBuilder_ != null || minInsertBlockSizeBytes_ != null;
      }
      /**
       * <pre>
       * Limits the minimum number of bytes in a block to be inserted in a table by **INSERT** query.
       * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
       * Minimal value: **0**, block squashing is disabled (default: **268435456**, 256 MB).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_insert_block_size_bytes = 49 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The minInsertBlockSizeBytes.
       */
      public com.google.protobuf.Int64Value getMinInsertBlockSizeBytes() {
        if (minInsertBlockSizeBytesBuilder_ == null) {
          return minInsertBlockSizeBytes_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : minInsertBlockSizeBytes_;
        } else {
          return minInsertBlockSizeBytesBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the minimum number of bytes in a block to be inserted in a table by **INSERT** query.
       * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
       * Minimal value: **0**, block squashing is disabled (default: **268435456**, 256 MB).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_insert_block_size_bytes = 49 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMinInsertBlockSizeBytes(com.google.protobuf.Int64Value value) {
        if (minInsertBlockSizeBytesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          minInsertBlockSizeBytes_ = value;
          onChanged();
        } else {
          minInsertBlockSizeBytesBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the minimum number of bytes in a block to be inserted in a table by **INSERT** query.
       * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
       * Minimal value: **0**, block squashing is disabled (default: **268435456**, 256 MB).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_insert_block_size_bytes = 49 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMinInsertBlockSizeBytes(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (minInsertBlockSizeBytesBuilder_ == null) {
          minInsertBlockSizeBytes_ = builderForValue.build();
          onChanged();
        } else {
          minInsertBlockSizeBytesBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the minimum number of bytes in a block to be inserted in a table by **INSERT** query.
       * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
       * Minimal value: **0**, block squashing is disabled (default: **268435456**, 256 MB).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_insert_block_size_bytes = 49 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMinInsertBlockSizeBytes(com.google.protobuf.Int64Value value) {
        if (minInsertBlockSizeBytesBuilder_ == null) {
          if (minInsertBlockSizeBytes_ != null) {
            minInsertBlockSizeBytes_ =
              com.google.protobuf.Int64Value.newBuilder(minInsertBlockSizeBytes_).mergeFrom(value).buildPartial();
          } else {
            minInsertBlockSizeBytes_ = value;
          }
          onChanged();
        } else {
          minInsertBlockSizeBytesBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the minimum number of bytes in a block to be inserted in a table by **INSERT** query.
       * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
       * Minimal value: **0**, block squashing is disabled (default: **268435456**, 256 MB).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_insert_block_size_bytes = 49 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMinInsertBlockSizeBytes() {
        if (minInsertBlockSizeBytesBuilder_ == null) {
          minInsertBlockSizeBytes_ = null;
          onChanged();
        } else {
          minInsertBlockSizeBytes_ = null;
          minInsertBlockSizeBytesBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the minimum number of bytes in a block to be inserted in a table by **INSERT** query.
       * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
       * Minimal value: **0**, block squashing is disabled (default: **268435456**, 256 MB).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_insert_block_size_bytes = 49 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMinInsertBlockSizeBytesBuilder() {
        
        onChanged();
        return getMinInsertBlockSizeBytesFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the minimum number of bytes in a block to be inserted in a table by **INSERT** query.
       * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
       * Minimal value: **0**, block squashing is disabled (default: **268435456**, 256 MB).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_insert_block_size_bytes = 49 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMinInsertBlockSizeBytesOrBuilder() {
        if (minInsertBlockSizeBytesBuilder_ != null) {
          return minInsertBlockSizeBytesBuilder_.getMessageOrBuilder();
        } else {
          return minInsertBlockSizeBytes_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : minInsertBlockSizeBytes_;
        }
      }
      /**
       * <pre>
       * Limits the minimum number of bytes in a block to be inserted in a table by **INSERT** query.
       * Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
       * Minimal value: **0**, block squashing is disabled (default: **268435456**, 256 MB).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_insert_block_size_bytes = 49 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMinInsertBlockSizeBytesFieldBuilder() {
        if (minInsertBlockSizeBytesBuilder_ == null) {
          minInsertBlockSizeBytesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMinInsertBlockSizeBytes(),
                  getParentForChildren(),
                  isClean());
          minInsertBlockSizeBytes_ = null;
        }
        return minInsertBlockSizeBytesBuilder_;
      }

      private com.google.protobuf.Int64Value maxInsertBlockSize_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxInsertBlockSizeBuilder_;
      /**
       * <pre>
       * Allows to form blocks of the specified size (in bytes) when inserting data in a table.
       * This setting has effect only if server is creating such blocks by itself.
       * Value must be greater than **0** (default: **1048576**).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_insert_block_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_insert_block_size = 10 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return Whether the maxInsertBlockSize field is set.
       */
      public boolean hasMaxInsertBlockSize() {
        return maxInsertBlockSizeBuilder_ != null || maxInsertBlockSize_ != null;
      }
      /**
       * <pre>
       * Allows to form blocks of the specified size (in bytes) when inserting data in a table.
       * This setting has effect only if server is creating such blocks by itself.
       * Value must be greater than **0** (default: **1048576**).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_insert_block_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_insert_block_size = 10 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return The maxInsertBlockSize.
       */
      public com.google.protobuf.Int64Value getMaxInsertBlockSize() {
        if (maxInsertBlockSizeBuilder_ == null) {
          return maxInsertBlockSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxInsertBlockSize_;
        } else {
          return maxInsertBlockSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Allows to form blocks of the specified size (in bytes) when inserting data in a table.
       * This setting has effect only if server is creating such blocks by itself.
       * Value must be greater than **0** (default: **1048576**).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_insert_block_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_insert_block_size = 10 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setMaxInsertBlockSize(com.google.protobuf.Int64Value value) {
        if (maxInsertBlockSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxInsertBlockSize_ = value;
          onChanged();
        } else {
          maxInsertBlockSizeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Allows to form blocks of the specified size (in bytes) when inserting data in a table.
       * This setting has effect only if server is creating such blocks by itself.
       * Value must be greater than **0** (default: **1048576**).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_insert_block_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_insert_block_size = 10 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setMaxInsertBlockSize(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxInsertBlockSizeBuilder_ == null) {
          maxInsertBlockSize_ = builderForValue.build();
          onChanged();
        } else {
          maxInsertBlockSizeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Allows to form blocks of the specified size (in bytes) when inserting data in a table.
       * This setting has effect only if server is creating such blocks by itself.
       * Value must be greater than **0** (default: **1048576**).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_insert_block_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_insert_block_size = 10 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder mergeMaxInsertBlockSize(com.google.protobuf.Int64Value value) {
        if (maxInsertBlockSizeBuilder_ == null) {
          if (maxInsertBlockSize_ != null) {
            maxInsertBlockSize_ =
              com.google.protobuf.Int64Value.newBuilder(maxInsertBlockSize_).mergeFrom(value).buildPartial();
          } else {
            maxInsertBlockSize_ = value;
          }
          onChanged();
        } else {
          maxInsertBlockSizeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Allows to form blocks of the specified size (in bytes) when inserting data in a table.
       * This setting has effect only if server is creating such blocks by itself.
       * Value must be greater than **0** (default: **1048576**).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_insert_block_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_insert_block_size = 10 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder clearMaxInsertBlockSize() {
        if (maxInsertBlockSizeBuilder_ == null) {
          maxInsertBlockSize_ = null;
          onChanged();
        } else {
          maxInsertBlockSize_ = null;
          maxInsertBlockSizeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Allows to form blocks of the specified size (in bytes) when inserting data in a table.
       * This setting has effect only if server is creating such blocks by itself.
       * Value must be greater than **0** (default: **1048576**).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_insert_block_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_insert_block_size = 10 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxInsertBlockSizeBuilder() {
        
        onChanged();
        return getMaxInsertBlockSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Allows to form blocks of the specified size (in bytes) when inserting data in a table.
       * This setting has effect only if server is creating such blocks by itself.
       * Value must be greater than **0** (default: **1048576**).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_insert_block_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_insert_block_size = 10 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxInsertBlockSizeOrBuilder() {
        if (maxInsertBlockSizeBuilder_ != null) {
          return maxInsertBlockSizeBuilder_.getMessageOrBuilder();
        } else {
          return maxInsertBlockSize_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxInsertBlockSize_;
        }
      }
      /**
       * <pre>
       * Allows to form blocks of the specified size (in bytes) when inserting data in a table.
       * This setting has effect only if server is creating such blocks by itself.
       * Value must be greater than **0** (default: **1048576**).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_insert_block_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_insert_block_size = 10 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxInsertBlockSizeFieldBuilder() {
        if (maxInsertBlockSizeBuilder_ == null) {
          maxInsertBlockSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxInsertBlockSize(),
                  getParentForChildren(),
                  isClean());
          maxInsertBlockSize_ = null;
        }
        return maxInsertBlockSizeBuilder_;
      }

      private com.google.protobuf.Int64Value minBytesToUseDirectIo_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> minBytesToUseDirectIoBuilder_;
      /**
       * <pre>
       * Limits the minimum number of bytes to enable unbuffered direct reads from disk (Direct I/O).
       * By default, ClickHouse does not read data directly from disk, but relies on the filesystem and its cache instead.
       * Such reading strategy is effective when the data volume is small.
       * If the amount of the data to read is huge, it is more effective to read directly from the disk, bypassing the filesystem cache.
       * If the total amount of the data to read is greater than the value of this setting, then ClickHouse will fetch this data directly from the disk.
       * Minimal value and default value: **0**, Direct I/O is disabled.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_bytes_to_use_direct_io = 50 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the minBytesToUseDirectIo field is set.
       */
      public boolean hasMinBytesToUseDirectIo() {
        return minBytesToUseDirectIoBuilder_ != null || minBytesToUseDirectIo_ != null;
      }
      /**
       * <pre>
       * Limits the minimum number of bytes to enable unbuffered direct reads from disk (Direct I/O).
       * By default, ClickHouse does not read data directly from disk, but relies on the filesystem and its cache instead.
       * Such reading strategy is effective when the data volume is small.
       * If the amount of the data to read is huge, it is more effective to read directly from the disk, bypassing the filesystem cache.
       * If the total amount of the data to read is greater than the value of this setting, then ClickHouse will fetch this data directly from the disk.
       * Minimal value and default value: **0**, Direct I/O is disabled.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_bytes_to_use_direct_io = 50 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The minBytesToUseDirectIo.
       */
      public com.google.protobuf.Int64Value getMinBytesToUseDirectIo() {
        if (minBytesToUseDirectIoBuilder_ == null) {
          return minBytesToUseDirectIo_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : minBytesToUseDirectIo_;
        } else {
          return minBytesToUseDirectIoBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the minimum number of bytes to enable unbuffered direct reads from disk (Direct I/O).
       * By default, ClickHouse does not read data directly from disk, but relies on the filesystem and its cache instead.
       * Such reading strategy is effective when the data volume is small.
       * If the amount of the data to read is huge, it is more effective to read directly from the disk, bypassing the filesystem cache.
       * If the total amount of the data to read is greater than the value of this setting, then ClickHouse will fetch this data directly from the disk.
       * Minimal value and default value: **0**, Direct I/O is disabled.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_bytes_to_use_direct_io = 50 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMinBytesToUseDirectIo(com.google.protobuf.Int64Value value) {
        if (minBytesToUseDirectIoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          minBytesToUseDirectIo_ = value;
          onChanged();
        } else {
          minBytesToUseDirectIoBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the minimum number of bytes to enable unbuffered direct reads from disk (Direct I/O).
       * By default, ClickHouse does not read data directly from disk, but relies on the filesystem and its cache instead.
       * Such reading strategy is effective when the data volume is small.
       * If the amount of the data to read is huge, it is more effective to read directly from the disk, bypassing the filesystem cache.
       * If the total amount of the data to read is greater than the value of this setting, then ClickHouse will fetch this data directly from the disk.
       * Minimal value and default value: **0**, Direct I/O is disabled.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_bytes_to_use_direct_io = 50 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMinBytesToUseDirectIo(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (minBytesToUseDirectIoBuilder_ == null) {
          minBytesToUseDirectIo_ = builderForValue.build();
          onChanged();
        } else {
          minBytesToUseDirectIoBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the minimum number of bytes to enable unbuffered direct reads from disk (Direct I/O).
       * By default, ClickHouse does not read data directly from disk, but relies on the filesystem and its cache instead.
       * Such reading strategy is effective when the data volume is small.
       * If the amount of the data to read is huge, it is more effective to read directly from the disk, bypassing the filesystem cache.
       * If the total amount of the data to read is greater than the value of this setting, then ClickHouse will fetch this data directly from the disk.
       * Minimal value and default value: **0**, Direct I/O is disabled.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_bytes_to_use_direct_io = 50 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMinBytesToUseDirectIo(com.google.protobuf.Int64Value value) {
        if (minBytesToUseDirectIoBuilder_ == null) {
          if (minBytesToUseDirectIo_ != null) {
            minBytesToUseDirectIo_ =
              com.google.protobuf.Int64Value.newBuilder(minBytesToUseDirectIo_).mergeFrom(value).buildPartial();
          } else {
            minBytesToUseDirectIo_ = value;
          }
          onChanged();
        } else {
          minBytesToUseDirectIoBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the minimum number of bytes to enable unbuffered direct reads from disk (Direct I/O).
       * By default, ClickHouse does not read data directly from disk, but relies on the filesystem and its cache instead.
       * Such reading strategy is effective when the data volume is small.
       * If the amount of the data to read is huge, it is more effective to read directly from the disk, bypassing the filesystem cache.
       * If the total amount of the data to read is greater than the value of this setting, then ClickHouse will fetch this data directly from the disk.
       * Minimal value and default value: **0**, Direct I/O is disabled.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_bytes_to_use_direct_io = 50 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMinBytesToUseDirectIo() {
        if (minBytesToUseDirectIoBuilder_ == null) {
          minBytesToUseDirectIo_ = null;
          onChanged();
        } else {
          minBytesToUseDirectIo_ = null;
          minBytesToUseDirectIoBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the minimum number of bytes to enable unbuffered direct reads from disk (Direct I/O).
       * By default, ClickHouse does not read data directly from disk, but relies on the filesystem and its cache instead.
       * Such reading strategy is effective when the data volume is small.
       * If the amount of the data to read is huge, it is more effective to read directly from the disk, bypassing the filesystem cache.
       * If the total amount of the data to read is greater than the value of this setting, then ClickHouse will fetch this data directly from the disk.
       * Minimal value and default value: **0**, Direct I/O is disabled.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_bytes_to_use_direct_io = 50 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMinBytesToUseDirectIoBuilder() {
        
        onChanged();
        return getMinBytesToUseDirectIoFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the minimum number of bytes to enable unbuffered direct reads from disk (Direct I/O).
       * By default, ClickHouse does not read data directly from disk, but relies on the filesystem and its cache instead.
       * Such reading strategy is effective when the data volume is small.
       * If the amount of the data to read is huge, it is more effective to read directly from the disk, bypassing the filesystem cache.
       * If the total amount of the data to read is greater than the value of this setting, then ClickHouse will fetch this data directly from the disk.
       * Minimal value and default value: **0**, Direct I/O is disabled.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_bytes_to_use_direct_io = 50 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMinBytesToUseDirectIoOrBuilder() {
        if (minBytesToUseDirectIoBuilder_ != null) {
          return minBytesToUseDirectIoBuilder_.getMessageOrBuilder();
        } else {
          return minBytesToUseDirectIo_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : minBytesToUseDirectIo_;
        }
      }
      /**
       * <pre>
       * Limits the minimum number of bytes to enable unbuffered direct reads from disk (Direct I/O).
       * By default, ClickHouse does not read data directly from disk, but relies on the filesystem and its cache instead.
       * Such reading strategy is effective when the data volume is small.
       * If the amount of the data to read is huge, it is more effective to read directly from the disk, bypassing the filesystem cache.
       * If the total amount of the data to read is greater than the value of this setting, then ClickHouse will fetch this data directly from the disk.
       * Minimal value and default value: **0**, Direct I/O is disabled.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_bytes_to_use_direct_io = 50 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMinBytesToUseDirectIoFieldBuilder() {
        if (minBytesToUseDirectIoBuilder_ == null) {
          minBytesToUseDirectIoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMinBytesToUseDirectIo(),
                  getParentForChildren(),
                  isClean());
          minBytesToUseDirectIo_ = null;
        }
        return minBytesToUseDirectIoBuilder_;
      }

      private com.google.protobuf.BoolValue useUncompressedCache_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> useUncompressedCacheBuilder_;
      /**
       * <pre>
       * Determines whether to use the cache of uncompressed blocks, or not.
       * Using this cache can significantly reduce latency and increase the throughput when a huge amount of small queries is to be processed.
       * Enable this setting for the users who instantiates small queries frequently.
       * This setting has effect only for tables of the MergeTree family.
       * Default value: **false** (uncompressed cache is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-use_uncompressed_cache).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue use_uncompressed_cache = 51;</code>
       * @return Whether the useUncompressedCache field is set.
       */
      public boolean hasUseUncompressedCache() {
        return useUncompressedCacheBuilder_ != null || useUncompressedCache_ != null;
      }
      /**
       * <pre>
       * Determines whether to use the cache of uncompressed blocks, or not.
       * Using this cache can significantly reduce latency and increase the throughput when a huge amount of small queries is to be processed.
       * Enable this setting for the users who instantiates small queries frequently.
       * This setting has effect only for tables of the MergeTree family.
       * Default value: **false** (uncompressed cache is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-use_uncompressed_cache).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue use_uncompressed_cache = 51;</code>
       * @return The useUncompressedCache.
       */
      public com.google.protobuf.BoolValue getUseUncompressedCache() {
        if (useUncompressedCacheBuilder_ == null) {
          return useUncompressedCache_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : useUncompressedCache_;
        } else {
          return useUncompressedCacheBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Determines whether to use the cache of uncompressed blocks, or not.
       * Using this cache can significantly reduce latency and increase the throughput when a huge amount of small queries is to be processed.
       * Enable this setting for the users who instantiates small queries frequently.
       * This setting has effect only for tables of the MergeTree family.
       * Default value: **false** (uncompressed cache is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-use_uncompressed_cache).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue use_uncompressed_cache = 51;</code>
       */
      public Builder setUseUncompressedCache(com.google.protobuf.BoolValue value) {
        if (useUncompressedCacheBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          useUncompressedCache_ = value;
          onChanged();
        } else {
          useUncompressedCacheBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Determines whether to use the cache of uncompressed blocks, or not.
       * Using this cache can significantly reduce latency and increase the throughput when a huge amount of small queries is to be processed.
       * Enable this setting for the users who instantiates small queries frequently.
       * This setting has effect only for tables of the MergeTree family.
       * Default value: **false** (uncompressed cache is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-use_uncompressed_cache).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue use_uncompressed_cache = 51;</code>
       */
      public Builder setUseUncompressedCache(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (useUncompressedCacheBuilder_ == null) {
          useUncompressedCache_ = builderForValue.build();
          onChanged();
        } else {
          useUncompressedCacheBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Determines whether to use the cache of uncompressed blocks, or not.
       * Using this cache can significantly reduce latency and increase the throughput when a huge amount of small queries is to be processed.
       * Enable this setting for the users who instantiates small queries frequently.
       * This setting has effect only for tables of the MergeTree family.
       * Default value: **false** (uncompressed cache is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-use_uncompressed_cache).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue use_uncompressed_cache = 51;</code>
       */
      public Builder mergeUseUncompressedCache(com.google.protobuf.BoolValue value) {
        if (useUncompressedCacheBuilder_ == null) {
          if (useUncompressedCache_ != null) {
            useUncompressedCache_ =
              com.google.protobuf.BoolValue.newBuilder(useUncompressedCache_).mergeFrom(value).buildPartial();
          } else {
            useUncompressedCache_ = value;
          }
          onChanged();
        } else {
          useUncompressedCacheBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Determines whether to use the cache of uncompressed blocks, or not.
       * Using this cache can significantly reduce latency and increase the throughput when a huge amount of small queries is to be processed.
       * Enable this setting for the users who instantiates small queries frequently.
       * This setting has effect only for tables of the MergeTree family.
       * Default value: **false** (uncompressed cache is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-use_uncompressed_cache).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue use_uncompressed_cache = 51;</code>
       */
      public Builder clearUseUncompressedCache() {
        if (useUncompressedCacheBuilder_ == null) {
          useUncompressedCache_ = null;
          onChanged();
        } else {
          useUncompressedCache_ = null;
          useUncompressedCacheBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Determines whether to use the cache of uncompressed blocks, or not.
       * Using this cache can significantly reduce latency and increase the throughput when a huge amount of small queries is to be processed.
       * Enable this setting for the users who instantiates small queries frequently.
       * This setting has effect only for tables of the MergeTree family.
       * Default value: **false** (uncompressed cache is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-use_uncompressed_cache).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue use_uncompressed_cache = 51;</code>
       */
      public com.google.protobuf.BoolValue.Builder getUseUncompressedCacheBuilder() {
        
        onChanged();
        return getUseUncompressedCacheFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Determines whether to use the cache of uncompressed blocks, or not.
       * Using this cache can significantly reduce latency and increase the throughput when a huge amount of small queries is to be processed.
       * Enable this setting for the users who instantiates small queries frequently.
       * This setting has effect only for tables of the MergeTree family.
       * Default value: **false** (uncompressed cache is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-use_uncompressed_cache).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue use_uncompressed_cache = 51;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getUseUncompressedCacheOrBuilder() {
        if (useUncompressedCacheBuilder_ != null) {
          return useUncompressedCacheBuilder_.getMessageOrBuilder();
        } else {
          return useUncompressedCache_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : useUncompressedCache_;
        }
      }
      /**
       * <pre>
       * Determines whether to use the cache of uncompressed blocks, or not.
       * Using this cache can significantly reduce latency and increase the throughput when a huge amount of small queries is to be processed.
       * Enable this setting for the users who instantiates small queries frequently.
       * This setting has effect only for tables of the MergeTree family.
       * Default value: **false** (uncompressed cache is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-use_uncompressed_cache).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue use_uncompressed_cache = 51;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getUseUncompressedCacheFieldBuilder() {
        if (useUncompressedCacheBuilder_ == null) {
          useUncompressedCacheBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getUseUncompressedCache(),
                  getParentForChildren(),
                  isClean());
          useUncompressedCache_ = null;
        }
        return useUncompressedCacheBuilder_;
      }

      private com.google.protobuf.Int64Value mergeTreeMaxRowsToUseCache_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> mergeTreeMaxRowsToUseCacheBuilder_;
      /**
       * <pre>
       * Limits the maximum size in rows of the request that can use the cache of uncompressed data. The cache is not used for requests larger
       * than the specified value.
       * Use this setting in combination with [use_uncompressed_cache] setting.
       * Value must be greater than **0** (default: **128x8192**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_max_rows_to_use_cache = 52 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return Whether the mergeTreeMaxRowsToUseCache field is set.
       */
      public boolean hasMergeTreeMaxRowsToUseCache() {
        return mergeTreeMaxRowsToUseCacheBuilder_ != null || mergeTreeMaxRowsToUseCache_ != null;
      }
      /**
       * <pre>
       * Limits the maximum size in rows of the request that can use the cache of uncompressed data. The cache is not used for requests larger
       * than the specified value.
       * Use this setting in combination with [use_uncompressed_cache] setting.
       * Value must be greater than **0** (default: **128x8192**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_max_rows_to_use_cache = 52 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return The mergeTreeMaxRowsToUseCache.
       */
      public com.google.protobuf.Int64Value getMergeTreeMaxRowsToUseCache() {
        if (mergeTreeMaxRowsToUseCacheBuilder_ == null) {
          return mergeTreeMaxRowsToUseCache_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : mergeTreeMaxRowsToUseCache_;
        } else {
          return mergeTreeMaxRowsToUseCacheBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the maximum size in rows of the request that can use the cache of uncompressed data. The cache is not used for requests larger
       * than the specified value.
       * Use this setting in combination with [use_uncompressed_cache] setting.
       * Value must be greater than **0** (default: **128x8192**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_max_rows_to_use_cache = 52 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setMergeTreeMaxRowsToUseCache(com.google.protobuf.Int64Value value) {
        if (mergeTreeMaxRowsToUseCacheBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mergeTreeMaxRowsToUseCache_ = value;
          onChanged();
        } else {
          mergeTreeMaxRowsToUseCacheBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum size in rows of the request that can use the cache of uncompressed data. The cache is not used for requests larger
       * than the specified value.
       * Use this setting in combination with [use_uncompressed_cache] setting.
       * Value must be greater than **0** (default: **128x8192**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_max_rows_to_use_cache = 52 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setMergeTreeMaxRowsToUseCache(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (mergeTreeMaxRowsToUseCacheBuilder_ == null) {
          mergeTreeMaxRowsToUseCache_ = builderForValue.build();
          onChanged();
        } else {
          mergeTreeMaxRowsToUseCacheBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum size in rows of the request that can use the cache of uncompressed data. The cache is not used for requests larger
       * than the specified value.
       * Use this setting in combination with [use_uncompressed_cache] setting.
       * Value must be greater than **0** (default: **128x8192**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_max_rows_to_use_cache = 52 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder mergeMergeTreeMaxRowsToUseCache(com.google.protobuf.Int64Value value) {
        if (mergeTreeMaxRowsToUseCacheBuilder_ == null) {
          if (mergeTreeMaxRowsToUseCache_ != null) {
            mergeTreeMaxRowsToUseCache_ =
              com.google.protobuf.Int64Value.newBuilder(mergeTreeMaxRowsToUseCache_).mergeFrom(value).buildPartial();
          } else {
            mergeTreeMaxRowsToUseCache_ = value;
          }
          onChanged();
        } else {
          mergeTreeMaxRowsToUseCacheBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum size in rows of the request that can use the cache of uncompressed data. The cache is not used for requests larger
       * than the specified value.
       * Use this setting in combination with [use_uncompressed_cache] setting.
       * Value must be greater than **0** (default: **128x8192**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_max_rows_to_use_cache = 52 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder clearMergeTreeMaxRowsToUseCache() {
        if (mergeTreeMaxRowsToUseCacheBuilder_ == null) {
          mergeTreeMaxRowsToUseCache_ = null;
          onChanged();
        } else {
          mergeTreeMaxRowsToUseCache_ = null;
          mergeTreeMaxRowsToUseCacheBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum size in rows of the request that can use the cache of uncompressed data. The cache is not used for requests larger
       * than the specified value.
       * Use this setting in combination with [use_uncompressed_cache] setting.
       * Value must be greater than **0** (default: **128x8192**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_max_rows_to_use_cache = 52 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMergeTreeMaxRowsToUseCacheBuilder() {
        
        onChanged();
        return getMergeTreeMaxRowsToUseCacheFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the maximum size in rows of the request that can use the cache of uncompressed data. The cache is not used for requests larger
       * than the specified value.
       * Use this setting in combination with [use_uncompressed_cache] setting.
       * Value must be greater than **0** (default: **128x8192**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_max_rows_to_use_cache = 52 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMergeTreeMaxRowsToUseCacheOrBuilder() {
        if (mergeTreeMaxRowsToUseCacheBuilder_ != null) {
          return mergeTreeMaxRowsToUseCacheBuilder_.getMessageOrBuilder();
        } else {
          return mergeTreeMaxRowsToUseCache_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : mergeTreeMaxRowsToUseCache_;
        }
      }
      /**
       * <pre>
       * Limits the maximum size in rows of the request that can use the cache of uncompressed data. The cache is not used for requests larger
       * than the specified value.
       * Use this setting in combination with [use_uncompressed_cache] setting.
       * Value must be greater than **0** (default: **128x8192**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_max_rows_to_use_cache = 52 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMergeTreeMaxRowsToUseCacheFieldBuilder() {
        if (mergeTreeMaxRowsToUseCacheBuilder_ == null) {
          mergeTreeMaxRowsToUseCacheBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMergeTreeMaxRowsToUseCache(),
                  getParentForChildren(),
                  isClean());
          mergeTreeMaxRowsToUseCache_ = null;
        }
        return mergeTreeMaxRowsToUseCacheBuilder_;
      }

      private com.google.protobuf.Int64Value mergeTreeMaxBytesToUseCache_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> mergeTreeMaxBytesToUseCacheBuilder_;
      /**
       * <pre>
       * Limits the maximum size in bytes of the request that can use the cache of uncompressed data. The cache is not used for requests larger
       * than the specified value.
       * Use this setting in combination with [use_uncompressed_cache] setting.
       * Value must be greater than **0** (default: **192x10x1024x1024**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_max_bytes_to_use_cache = 53 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return Whether the mergeTreeMaxBytesToUseCache field is set.
       */
      public boolean hasMergeTreeMaxBytesToUseCache() {
        return mergeTreeMaxBytesToUseCacheBuilder_ != null || mergeTreeMaxBytesToUseCache_ != null;
      }
      /**
       * <pre>
       * Limits the maximum size in bytes of the request that can use the cache of uncompressed data. The cache is not used for requests larger
       * than the specified value.
       * Use this setting in combination with [use_uncompressed_cache] setting.
       * Value must be greater than **0** (default: **192x10x1024x1024**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_max_bytes_to_use_cache = 53 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return The mergeTreeMaxBytesToUseCache.
       */
      public com.google.protobuf.Int64Value getMergeTreeMaxBytesToUseCache() {
        if (mergeTreeMaxBytesToUseCacheBuilder_ == null) {
          return mergeTreeMaxBytesToUseCache_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : mergeTreeMaxBytesToUseCache_;
        } else {
          return mergeTreeMaxBytesToUseCacheBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the maximum size in bytes of the request that can use the cache of uncompressed data. The cache is not used for requests larger
       * than the specified value.
       * Use this setting in combination with [use_uncompressed_cache] setting.
       * Value must be greater than **0** (default: **192x10x1024x1024**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_max_bytes_to_use_cache = 53 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setMergeTreeMaxBytesToUseCache(com.google.protobuf.Int64Value value) {
        if (mergeTreeMaxBytesToUseCacheBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mergeTreeMaxBytesToUseCache_ = value;
          onChanged();
        } else {
          mergeTreeMaxBytesToUseCacheBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum size in bytes of the request that can use the cache of uncompressed data. The cache is not used for requests larger
       * than the specified value.
       * Use this setting in combination with [use_uncompressed_cache] setting.
       * Value must be greater than **0** (default: **192x10x1024x1024**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_max_bytes_to_use_cache = 53 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setMergeTreeMaxBytesToUseCache(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (mergeTreeMaxBytesToUseCacheBuilder_ == null) {
          mergeTreeMaxBytesToUseCache_ = builderForValue.build();
          onChanged();
        } else {
          mergeTreeMaxBytesToUseCacheBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum size in bytes of the request that can use the cache of uncompressed data. The cache is not used for requests larger
       * than the specified value.
       * Use this setting in combination with [use_uncompressed_cache] setting.
       * Value must be greater than **0** (default: **192x10x1024x1024**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_max_bytes_to_use_cache = 53 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder mergeMergeTreeMaxBytesToUseCache(com.google.protobuf.Int64Value value) {
        if (mergeTreeMaxBytesToUseCacheBuilder_ == null) {
          if (mergeTreeMaxBytesToUseCache_ != null) {
            mergeTreeMaxBytesToUseCache_ =
              com.google.protobuf.Int64Value.newBuilder(mergeTreeMaxBytesToUseCache_).mergeFrom(value).buildPartial();
          } else {
            mergeTreeMaxBytesToUseCache_ = value;
          }
          onChanged();
        } else {
          mergeTreeMaxBytesToUseCacheBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum size in bytes of the request that can use the cache of uncompressed data. The cache is not used for requests larger
       * than the specified value.
       * Use this setting in combination with [use_uncompressed_cache] setting.
       * Value must be greater than **0** (default: **192x10x1024x1024**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_max_bytes_to_use_cache = 53 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder clearMergeTreeMaxBytesToUseCache() {
        if (mergeTreeMaxBytesToUseCacheBuilder_ == null) {
          mergeTreeMaxBytesToUseCache_ = null;
          onChanged();
        } else {
          mergeTreeMaxBytesToUseCache_ = null;
          mergeTreeMaxBytesToUseCacheBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum size in bytes of the request that can use the cache of uncompressed data. The cache is not used for requests larger
       * than the specified value.
       * Use this setting in combination with [use_uncompressed_cache] setting.
       * Value must be greater than **0** (default: **192x10x1024x1024**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_max_bytes_to_use_cache = 53 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMergeTreeMaxBytesToUseCacheBuilder() {
        
        onChanged();
        return getMergeTreeMaxBytesToUseCacheFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the maximum size in bytes of the request that can use the cache of uncompressed data. The cache is not used for requests larger
       * than the specified value.
       * Use this setting in combination with [use_uncompressed_cache] setting.
       * Value must be greater than **0** (default: **192x10x1024x1024**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_max_bytes_to_use_cache = 53 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMergeTreeMaxBytesToUseCacheOrBuilder() {
        if (mergeTreeMaxBytesToUseCacheBuilder_ != null) {
          return mergeTreeMaxBytesToUseCacheBuilder_.getMessageOrBuilder();
        } else {
          return mergeTreeMaxBytesToUseCache_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : mergeTreeMaxBytesToUseCache_;
        }
      }
      /**
       * <pre>
       * Limits the maximum size in bytes of the request that can use the cache of uncompressed data. The cache is not used for requests larger
       * than the specified value.
       * Use this setting in combination with [use_uncompressed_cache] setting.
       * Value must be greater than **0** (default: **192x10x1024x1024**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_max_bytes_to_use_cache = 53 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMergeTreeMaxBytesToUseCacheFieldBuilder() {
        if (mergeTreeMaxBytesToUseCacheBuilder_ == null) {
          mergeTreeMaxBytesToUseCacheBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMergeTreeMaxBytesToUseCache(),
                  getParentForChildren(),
                  isClean());
          mergeTreeMaxBytesToUseCache_ = null;
        }
        return mergeTreeMaxBytesToUseCacheBuilder_;
      }

      private com.google.protobuf.Int64Value mergeTreeMinRowsForConcurrentRead_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> mergeTreeMinRowsForConcurrentReadBuilder_;
      /**
       * <pre>
       * Limits the minimum number of rows to be read from a file to enable concurrent read.
       * If the number of rows to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
       * This setting has effect only for tables of the MergeTree family.
       * Value must be greater than **0** (default: **20x8192**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_min_rows_for_concurrent_read = 54 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return Whether the mergeTreeMinRowsForConcurrentRead field is set.
       */
      public boolean hasMergeTreeMinRowsForConcurrentRead() {
        return mergeTreeMinRowsForConcurrentReadBuilder_ != null || mergeTreeMinRowsForConcurrentRead_ != null;
      }
      /**
       * <pre>
       * Limits the minimum number of rows to be read from a file to enable concurrent read.
       * If the number of rows to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
       * This setting has effect only for tables of the MergeTree family.
       * Value must be greater than **0** (default: **20x8192**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_min_rows_for_concurrent_read = 54 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return The mergeTreeMinRowsForConcurrentRead.
       */
      public com.google.protobuf.Int64Value getMergeTreeMinRowsForConcurrentRead() {
        if (mergeTreeMinRowsForConcurrentReadBuilder_ == null) {
          return mergeTreeMinRowsForConcurrentRead_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : mergeTreeMinRowsForConcurrentRead_;
        } else {
          return mergeTreeMinRowsForConcurrentReadBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the minimum number of rows to be read from a file to enable concurrent read.
       * If the number of rows to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
       * This setting has effect only for tables of the MergeTree family.
       * Value must be greater than **0** (default: **20x8192**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_min_rows_for_concurrent_read = 54 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setMergeTreeMinRowsForConcurrentRead(com.google.protobuf.Int64Value value) {
        if (mergeTreeMinRowsForConcurrentReadBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mergeTreeMinRowsForConcurrentRead_ = value;
          onChanged();
        } else {
          mergeTreeMinRowsForConcurrentReadBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the minimum number of rows to be read from a file to enable concurrent read.
       * If the number of rows to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
       * This setting has effect only for tables of the MergeTree family.
       * Value must be greater than **0** (default: **20x8192**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_min_rows_for_concurrent_read = 54 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setMergeTreeMinRowsForConcurrentRead(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (mergeTreeMinRowsForConcurrentReadBuilder_ == null) {
          mergeTreeMinRowsForConcurrentRead_ = builderForValue.build();
          onChanged();
        } else {
          mergeTreeMinRowsForConcurrentReadBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the minimum number of rows to be read from a file to enable concurrent read.
       * If the number of rows to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
       * This setting has effect only for tables of the MergeTree family.
       * Value must be greater than **0** (default: **20x8192**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_min_rows_for_concurrent_read = 54 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder mergeMergeTreeMinRowsForConcurrentRead(com.google.protobuf.Int64Value value) {
        if (mergeTreeMinRowsForConcurrentReadBuilder_ == null) {
          if (mergeTreeMinRowsForConcurrentRead_ != null) {
            mergeTreeMinRowsForConcurrentRead_ =
              com.google.protobuf.Int64Value.newBuilder(mergeTreeMinRowsForConcurrentRead_).mergeFrom(value).buildPartial();
          } else {
            mergeTreeMinRowsForConcurrentRead_ = value;
          }
          onChanged();
        } else {
          mergeTreeMinRowsForConcurrentReadBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the minimum number of rows to be read from a file to enable concurrent read.
       * If the number of rows to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
       * This setting has effect only for tables of the MergeTree family.
       * Value must be greater than **0** (default: **20x8192**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_min_rows_for_concurrent_read = 54 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder clearMergeTreeMinRowsForConcurrentRead() {
        if (mergeTreeMinRowsForConcurrentReadBuilder_ == null) {
          mergeTreeMinRowsForConcurrentRead_ = null;
          onChanged();
        } else {
          mergeTreeMinRowsForConcurrentRead_ = null;
          mergeTreeMinRowsForConcurrentReadBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the minimum number of rows to be read from a file to enable concurrent read.
       * If the number of rows to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
       * This setting has effect only for tables of the MergeTree family.
       * Value must be greater than **0** (default: **20x8192**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_min_rows_for_concurrent_read = 54 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMergeTreeMinRowsForConcurrentReadBuilder() {
        
        onChanged();
        return getMergeTreeMinRowsForConcurrentReadFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the minimum number of rows to be read from a file to enable concurrent read.
       * If the number of rows to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
       * This setting has effect only for tables of the MergeTree family.
       * Value must be greater than **0** (default: **20x8192**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_min_rows_for_concurrent_read = 54 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMergeTreeMinRowsForConcurrentReadOrBuilder() {
        if (mergeTreeMinRowsForConcurrentReadBuilder_ != null) {
          return mergeTreeMinRowsForConcurrentReadBuilder_.getMessageOrBuilder();
        } else {
          return mergeTreeMinRowsForConcurrentRead_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : mergeTreeMinRowsForConcurrentRead_;
        }
      }
      /**
       * <pre>
       * Limits the minimum number of rows to be read from a file to enable concurrent read.
       * If the number of rows to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
       * This setting has effect only for tables of the MergeTree family.
       * Value must be greater than **0** (default: **20x8192**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_min_rows_for_concurrent_read = 54 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMergeTreeMinRowsForConcurrentReadFieldBuilder() {
        if (mergeTreeMinRowsForConcurrentReadBuilder_ == null) {
          mergeTreeMinRowsForConcurrentReadBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMergeTreeMinRowsForConcurrentRead(),
                  getParentForChildren(),
                  isClean());
          mergeTreeMinRowsForConcurrentRead_ = null;
        }
        return mergeTreeMinRowsForConcurrentReadBuilder_;
      }

      private com.google.protobuf.Int64Value mergeTreeMinBytesForConcurrentRead_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> mergeTreeMinBytesForConcurrentReadBuilder_;
      /**
       * <pre>
       * Limits the number of bytes to be read from a file to enable concurrent read.
       * If the number of bytes to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
       * This setting has effect only for tables of the MergeTree family.
       * Value must be greater than **0** (default: **24x10x1024x1024**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_min_bytes_for_concurrent_read = 55 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return Whether the mergeTreeMinBytesForConcurrentRead field is set.
       */
      public boolean hasMergeTreeMinBytesForConcurrentRead() {
        return mergeTreeMinBytesForConcurrentReadBuilder_ != null || mergeTreeMinBytesForConcurrentRead_ != null;
      }
      /**
       * <pre>
       * Limits the number of bytes to be read from a file to enable concurrent read.
       * If the number of bytes to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
       * This setting has effect only for tables of the MergeTree family.
       * Value must be greater than **0** (default: **24x10x1024x1024**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_min_bytes_for_concurrent_read = 55 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return The mergeTreeMinBytesForConcurrentRead.
       */
      public com.google.protobuf.Int64Value getMergeTreeMinBytesForConcurrentRead() {
        if (mergeTreeMinBytesForConcurrentReadBuilder_ == null) {
          return mergeTreeMinBytesForConcurrentRead_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : mergeTreeMinBytesForConcurrentRead_;
        } else {
          return mergeTreeMinBytesForConcurrentReadBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the number of bytes to be read from a file to enable concurrent read.
       * If the number of bytes to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
       * This setting has effect only for tables of the MergeTree family.
       * Value must be greater than **0** (default: **24x10x1024x1024**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_min_bytes_for_concurrent_read = 55 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setMergeTreeMinBytesForConcurrentRead(com.google.protobuf.Int64Value value) {
        if (mergeTreeMinBytesForConcurrentReadBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mergeTreeMinBytesForConcurrentRead_ = value;
          onChanged();
        } else {
          mergeTreeMinBytesForConcurrentReadBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the number of bytes to be read from a file to enable concurrent read.
       * If the number of bytes to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
       * This setting has effect only for tables of the MergeTree family.
       * Value must be greater than **0** (default: **24x10x1024x1024**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_min_bytes_for_concurrent_read = 55 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setMergeTreeMinBytesForConcurrentRead(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (mergeTreeMinBytesForConcurrentReadBuilder_ == null) {
          mergeTreeMinBytesForConcurrentRead_ = builderForValue.build();
          onChanged();
        } else {
          mergeTreeMinBytesForConcurrentReadBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the number of bytes to be read from a file to enable concurrent read.
       * If the number of bytes to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
       * This setting has effect only for tables of the MergeTree family.
       * Value must be greater than **0** (default: **24x10x1024x1024**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_min_bytes_for_concurrent_read = 55 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder mergeMergeTreeMinBytesForConcurrentRead(com.google.protobuf.Int64Value value) {
        if (mergeTreeMinBytesForConcurrentReadBuilder_ == null) {
          if (mergeTreeMinBytesForConcurrentRead_ != null) {
            mergeTreeMinBytesForConcurrentRead_ =
              com.google.protobuf.Int64Value.newBuilder(mergeTreeMinBytesForConcurrentRead_).mergeFrom(value).buildPartial();
          } else {
            mergeTreeMinBytesForConcurrentRead_ = value;
          }
          onChanged();
        } else {
          mergeTreeMinBytesForConcurrentReadBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the number of bytes to be read from a file to enable concurrent read.
       * If the number of bytes to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
       * This setting has effect only for tables of the MergeTree family.
       * Value must be greater than **0** (default: **24x10x1024x1024**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_min_bytes_for_concurrent_read = 55 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder clearMergeTreeMinBytesForConcurrentRead() {
        if (mergeTreeMinBytesForConcurrentReadBuilder_ == null) {
          mergeTreeMinBytesForConcurrentRead_ = null;
          onChanged();
        } else {
          mergeTreeMinBytesForConcurrentRead_ = null;
          mergeTreeMinBytesForConcurrentReadBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the number of bytes to be read from a file to enable concurrent read.
       * If the number of bytes to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
       * This setting has effect only for tables of the MergeTree family.
       * Value must be greater than **0** (default: **24x10x1024x1024**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_min_bytes_for_concurrent_read = 55 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMergeTreeMinBytesForConcurrentReadBuilder() {
        
        onChanged();
        return getMergeTreeMinBytesForConcurrentReadFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the number of bytes to be read from a file to enable concurrent read.
       * If the number of bytes to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
       * This setting has effect only for tables of the MergeTree family.
       * Value must be greater than **0** (default: **24x10x1024x1024**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_min_bytes_for_concurrent_read = 55 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMergeTreeMinBytesForConcurrentReadOrBuilder() {
        if (mergeTreeMinBytesForConcurrentReadBuilder_ != null) {
          return mergeTreeMinBytesForConcurrentReadBuilder_.getMessageOrBuilder();
        } else {
          return mergeTreeMinBytesForConcurrentRead_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : mergeTreeMinBytesForConcurrentRead_;
        }
      }
      /**
       * <pre>
       * Limits the number of bytes to be read from a file to enable concurrent read.
       * If the number of bytes to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
       * This setting has effect only for tables of the MergeTree family.
       * Value must be greater than **0** (default: **24x10x1024x1024**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value merge_tree_min_bytes_for_concurrent_read = 55 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMergeTreeMinBytesForConcurrentReadFieldBuilder() {
        if (mergeTreeMinBytesForConcurrentReadBuilder_ == null) {
          mergeTreeMinBytesForConcurrentReadBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMergeTreeMinBytesForConcurrentRead(),
                  getParentForChildren(),
                  isClean());
          mergeTreeMinBytesForConcurrentRead_ = null;
        }
        return mergeTreeMinBytesForConcurrentReadBuilder_;
      }

      private com.google.protobuf.Int64Value maxBytesBeforeExternalGroupBy_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxBytesBeforeExternalGroupByBuilder_;
      /**
       * <pre>
       * Sets the threshold of RAM consumption (in bytes) after that the temporary data, collected during the **GROUP BY** operation, should be flushed to disk to limit the RAM comsumption.
       * By default, aggregation is done by employing hash table that resides in RAM.
       * A query can result in aggregation of huge data volumes that can lead to memory exhaustion and abortion of the query (see the [max_memory_usage] setting).
       * For such queries, you can use this setting to force ClickHouse to do flushing and complete aggregation successfully.
       * Minimal value and default value: **0**, **GROUP BY** in the external memory is disabled.
       * When using aggregation in external memory, it is recommended to set the value of this setting twice as low as the [max_memory_usage] setting value (by default, the maximum memory usage is limited to ten gigabytes).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
       * See also: the [distributed_aggregation_memory_efficient] setting.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_before_external_group_by = 74;</code>
       * @return Whether the maxBytesBeforeExternalGroupBy field is set.
       */
      public boolean hasMaxBytesBeforeExternalGroupBy() {
        return maxBytesBeforeExternalGroupByBuilder_ != null || maxBytesBeforeExternalGroupBy_ != null;
      }
      /**
       * <pre>
       * Sets the threshold of RAM consumption (in bytes) after that the temporary data, collected during the **GROUP BY** operation, should be flushed to disk to limit the RAM comsumption.
       * By default, aggregation is done by employing hash table that resides in RAM.
       * A query can result in aggregation of huge data volumes that can lead to memory exhaustion and abortion of the query (see the [max_memory_usage] setting).
       * For such queries, you can use this setting to force ClickHouse to do flushing and complete aggregation successfully.
       * Minimal value and default value: **0**, **GROUP BY** in the external memory is disabled.
       * When using aggregation in external memory, it is recommended to set the value of this setting twice as low as the [max_memory_usage] setting value (by default, the maximum memory usage is limited to ten gigabytes).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
       * See also: the [distributed_aggregation_memory_efficient] setting.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_before_external_group_by = 74;</code>
       * @return The maxBytesBeforeExternalGroupBy.
       */
      public com.google.protobuf.Int64Value getMaxBytesBeforeExternalGroupBy() {
        if (maxBytesBeforeExternalGroupByBuilder_ == null) {
          return maxBytesBeforeExternalGroupBy_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxBytesBeforeExternalGroupBy_;
        } else {
          return maxBytesBeforeExternalGroupByBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Sets the threshold of RAM consumption (in bytes) after that the temporary data, collected during the **GROUP BY** operation, should be flushed to disk to limit the RAM comsumption.
       * By default, aggregation is done by employing hash table that resides in RAM.
       * A query can result in aggregation of huge data volumes that can lead to memory exhaustion and abortion of the query (see the [max_memory_usage] setting).
       * For such queries, you can use this setting to force ClickHouse to do flushing and complete aggregation successfully.
       * Minimal value and default value: **0**, **GROUP BY** in the external memory is disabled.
       * When using aggregation in external memory, it is recommended to set the value of this setting twice as low as the [max_memory_usage] setting value (by default, the maximum memory usage is limited to ten gigabytes).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
       * See also: the [distributed_aggregation_memory_efficient] setting.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_before_external_group_by = 74;</code>
       */
      public Builder setMaxBytesBeforeExternalGroupBy(com.google.protobuf.Int64Value value) {
        if (maxBytesBeforeExternalGroupByBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxBytesBeforeExternalGroupBy_ = value;
          onChanged();
        } else {
          maxBytesBeforeExternalGroupByBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Sets the threshold of RAM consumption (in bytes) after that the temporary data, collected during the **GROUP BY** operation, should be flushed to disk to limit the RAM comsumption.
       * By default, aggregation is done by employing hash table that resides in RAM.
       * A query can result in aggregation of huge data volumes that can lead to memory exhaustion and abortion of the query (see the [max_memory_usage] setting).
       * For such queries, you can use this setting to force ClickHouse to do flushing and complete aggregation successfully.
       * Minimal value and default value: **0**, **GROUP BY** in the external memory is disabled.
       * When using aggregation in external memory, it is recommended to set the value of this setting twice as low as the [max_memory_usage] setting value (by default, the maximum memory usage is limited to ten gigabytes).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
       * See also: the [distributed_aggregation_memory_efficient] setting.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_before_external_group_by = 74;</code>
       */
      public Builder setMaxBytesBeforeExternalGroupBy(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxBytesBeforeExternalGroupByBuilder_ == null) {
          maxBytesBeforeExternalGroupBy_ = builderForValue.build();
          onChanged();
        } else {
          maxBytesBeforeExternalGroupByBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Sets the threshold of RAM consumption (in bytes) after that the temporary data, collected during the **GROUP BY** operation, should be flushed to disk to limit the RAM comsumption.
       * By default, aggregation is done by employing hash table that resides in RAM.
       * A query can result in aggregation of huge data volumes that can lead to memory exhaustion and abortion of the query (see the [max_memory_usage] setting).
       * For such queries, you can use this setting to force ClickHouse to do flushing and complete aggregation successfully.
       * Minimal value and default value: **0**, **GROUP BY** in the external memory is disabled.
       * When using aggregation in external memory, it is recommended to set the value of this setting twice as low as the [max_memory_usage] setting value (by default, the maximum memory usage is limited to ten gigabytes).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
       * See also: the [distributed_aggregation_memory_efficient] setting.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_before_external_group_by = 74;</code>
       */
      public Builder mergeMaxBytesBeforeExternalGroupBy(com.google.protobuf.Int64Value value) {
        if (maxBytesBeforeExternalGroupByBuilder_ == null) {
          if (maxBytesBeforeExternalGroupBy_ != null) {
            maxBytesBeforeExternalGroupBy_ =
              com.google.protobuf.Int64Value.newBuilder(maxBytesBeforeExternalGroupBy_).mergeFrom(value).buildPartial();
          } else {
            maxBytesBeforeExternalGroupBy_ = value;
          }
          onChanged();
        } else {
          maxBytesBeforeExternalGroupByBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Sets the threshold of RAM consumption (in bytes) after that the temporary data, collected during the **GROUP BY** operation, should be flushed to disk to limit the RAM comsumption.
       * By default, aggregation is done by employing hash table that resides in RAM.
       * A query can result in aggregation of huge data volumes that can lead to memory exhaustion and abortion of the query (see the [max_memory_usage] setting).
       * For such queries, you can use this setting to force ClickHouse to do flushing and complete aggregation successfully.
       * Minimal value and default value: **0**, **GROUP BY** in the external memory is disabled.
       * When using aggregation in external memory, it is recommended to set the value of this setting twice as low as the [max_memory_usage] setting value (by default, the maximum memory usage is limited to ten gigabytes).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
       * See also: the [distributed_aggregation_memory_efficient] setting.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_before_external_group_by = 74;</code>
       */
      public Builder clearMaxBytesBeforeExternalGroupBy() {
        if (maxBytesBeforeExternalGroupByBuilder_ == null) {
          maxBytesBeforeExternalGroupBy_ = null;
          onChanged();
        } else {
          maxBytesBeforeExternalGroupBy_ = null;
          maxBytesBeforeExternalGroupByBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Sets the threshold of RAM consumption (in bytes) after that the temporary data, collected during the **GROUP BY** operation, should be flushed to disk to limit the RAM comsumption.
       * By default, aggregation is done by employing hash table that resides in RAM.
       * A query can result in aggregation of huge data volumes that can lead to memory exhaustion and abortion of the query (see the [max_memory_usage] setting).
       * For such queries, you can use this setting to force ClickHouse to do flushing and complete aggregation successfully.
       * Minimal value and default value: **0**, **GROUP BY** in the external memory is disabled.
       * When using aggregation in external memory, it is recommended to set the value of this setting twice as low as the [max_memory_usage] setting value (by default, the maximum memory usage is limited to ten gigabytes).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
       * See also: the [distributed_aggregation_memory_efficient] setting.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_before_external_group_by = 74;</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxBytesBeforeExternalGroupByBuilder() {
        
        onChanged();
        return getMaxBytesBeforeExternalGroupByFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Sets the threshold of RAM consumption (in bytes) after that the temporary data, collected during the **GROUP BY** operation, should be flushed to disk to limit the RAM comsumption.
       * By default, aggregation is done by employing hash table that resides in RAM.
       * A query can result in aggregation of huge data volumes that can lead to memory exhaustion and abortion of the query (see the [max_memory_usage] setting).
       * For such queries, you can use this setting to force ClickHouse to do flushing and complete aggregation successfully.
       * Minimal value and default value: **0**, **GROUP BY** in the external memory is disabled.
       * When using aggregation in external memory, it is recommended to set the value of this setting twice as low as the [max_memory_usage] setting value (by default, the maximum memory usage is limited to ten gigabytes).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
       * See also: the [distributed_aggregation_memory_efficient] setting.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_before_external_group_by = 74;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxBytesBeforeExternalGroupByOrBuilder() {
        if (maxBytesBeforeExternalGroupByBuilder_ != null) {
          return maxBytesBeforeExternalGroupByBuilder_.getMessageOrBuilder();
        } else {
          return maxBytesBeforeExternalGroupBy_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxBytesBeforeExternalGroupBy_;
        }
      }
      /**
       * <pre>
       * Sets the threshold of RAM consumption (in bytes) after that the temporary data, collected during the **GROUP BY** operation, should be flushed to disk to limit the RAM comsumption.
       * By default, aggregation is done by employing hash table that resides in RAM.
       * A query can result in aggregation of huge data volumes that can lead to memory exhaustion and abortion of the query (see the [max_memory_usage] setting).
       * For such queries, you can use this setting to force ClickHouse to do flushing and complete aggregation successfully.
       * Minimal value and default value: **0**, **GROUP BY** in the external memory is disabled.
       * When using aggregation in external memory, it is recommended to set the value of this setting twice as low as the [max_memory_usage] setting value (by default, the maximum memory usage is limited to ten gigabytes).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
       * See also: the [distributed_aggregation_memory_efficient] setting.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_before_external_group_by = 74;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxBytesBeforeExternalGroupByFieldBuilder() {
        if (maxBytesBeforeExternalGroupByBuilder_ == null) {
          maxBytesBeforeExternalGroupByBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxBytesBeforeExternalGroupBy(),
                  getParentForChildren(),
                  isClean());
          maxBytesBeforeExternalGroupBy_ = null;
        }
        return maxBytesBeforeExternalGroupByBuilder_;
      }

      private com.google.protobuf.Int64Value maxBytesBeforeExternalSort_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxBytesBeforeExternalSortBuilder_;
      /**
       * <pre>
       * This setting is equivalent of the [max_bytes_before_external_group_by] setting, except for it is for sort operation (**ORDER BY**), not aggregation.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_before_external_sort = 75;</code>
       * @return Whether the maxBytesBeforeExternalSort field is set.
       */
      public boolean hasMaxBytesBeforeExternalSort() {
        return maxBytesBeforeExternalSortBuilder_ != null || maxBytesBeforeExternalSort_ != null;
      }
      /**
       * <pre>
       * This setting is equivalent of the [max_bytes_before_external_group_by] setting, except for it is for sort operation (**ORDER BY**), not aggregation.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_before_external_sort = 75;</code>
       * @return The maxBytesBeforeExternalSort.
       */
      public com.google.protobuf.Int64Value getMaxBytesBeforeExternalSort() {
        if (maxBytesBeforeExternalSortBuilder_ == null) {
          return maxBytesBeforeExternalSort_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxBytesBeforeExternalSort_;
        } else {
          return maxBytesBeforeExternalSortBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * This setting is equivalent of the [max_bytes_before_external_group_by] setting, except for it is for sort operation (**ORDER BY**), not aggregation.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_before_external_sort = 75;</code>
       */
      public Builder setMaxBytesBeforeExternalSort(com.google.protobuf.Int64Value value) {
        if (maxBytesBeforeExternalSortBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxBytesBeforeExternalSort_ = value;
          onChanged();
        } else {
          maxBytesBeforeExternalSortBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * This setting is equivalent of the [max_bytes_before_external_group_by] setting, except for it is for sort operation (**ORDER BY**), not aggregation.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_before_external_sort = 75;</code>
       */
      public Builder setMaxBytesBeforeExternalSort(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxBytesBeforeExternalSortBuilder_ == null) {
          maxBytesBeforeExternalSort_ = builderForValue.build();
          onChanged();
        } else {
          maxBytesBeforeExternalSortBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * This setting is equivalent of the [max_bytes_before_external_group_by] setting, except for it is for sort operation (**ORDER BY**), not aggregation.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_before_external_sort = 75;</code>
       */
      public Builder mergeMaxBytesBeforeExternalSort(com.google.protobuf.Int64Value value) {
        if (maxBytesBeforeExternalSortBuilder_ == null) {
          if (maxBytesBeforeExternalSort_ != null) {
            maxBytesBeforeExternalSort_ =
              com.google.protobuf.Int64Value.newBuilder(maxBytesBeforeExternalSort_).mergeFrom(value).buildPartial();
          } else {
            maxBytesBeforeExternalSort_ = value;
          }
          onChanged();
        } else {
          maxBytesBeforeExternalSortBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * This setting is equivalent of the [max_bytes_before_external_group_by] setting, except for it is for sort operation (**ORDER BY**), not aggregation.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_before_external_sort = 75;</code>
       */
      public Builder clearMaxBytesBeforeExternalSort() {
        if (maxBytesBeforeExternalSortBuilder_ == null) {
          maxBytesBeforeExternalSort_ = null;
          onChanged();
        } else {
          maxBytesBeforeExternalSort_ = null;
          maxBytesBeforeExternalSortBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * This setting is equivalent of the [max_bytes_before_external_group_by] setting, except for it is for sort operation (**ORDER BY**), not aggregation.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_before_external_sort = 75;</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxBytesBeforeExternalSortBuilder() {
        
        onChanged();
        return getMaxBytesBeforeExternalSortFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * This setting is equivalent of the [max_bytes_before_external_group_by] setting, except for it is for sort operation (**ORDER BY**), not aggregation.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_before_external_sort = 75;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxBytesBeforeExternalSortOrBuilder() {
        if (maxBytesBeforeExternalSortBuilder_ != null) {
          return maxBytesBeforeExternalSortBuilder_.getMessageOrBuilder();
        } else {
          return maxBytesBeforeExternalSort_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxBytesBeforeExternalSort_;
        }
      }
      /**
       * <pre>
       * This setting is equivalent of the [max_bytes_before_external_group_by] setting, except for it is for sort operation (**ORDER BY**), not aggregation.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_before_external_sort = 75;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxBytesBeforeExternalSortFieldBuilder() {
        if (maxBytesBeforeExternalSortBuilder_ == null) {
          maxBytesBeforeExternalSortBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxBytesBeforeExternalSort(),
                  getParentForChildren(),
                  isClean());
          maxBytesBeforeExternalSort_ = null;
        }
        return maxBytesBeforeExternalSortBuilder_;
      }

      private com.google.protobuf.Int64Value groupByTwoLevelThreshold_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> groupByTwoLevelThresholdBuilder_;
      /**
       * <pre>
       * Sets the threshold of the number of keys, after that the two-level aggregation should be used.
       * Minimal value: **0**, threshold is not set (default: **10000**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_by_two_level_threshold = 76;</code>
       * @return Whether the groupByTwoLevelThreshold field is set.
       */
      public boolean hasGroupByTwoLevelThreshold() {
        return groupByTwoLevelThresholdBuilder_ != null || groupByTwoLevelThreshold_ != null;
      }
      /**
       * <pre>
       * Sets the threshold of the number of keys, after that the two-level aggregation should be used.
       * Minimal value: **0**, threshold is not set (default: **10000**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_by_two_level_threshold = 76;</code>
       * @return The groupByTwoLevelThreshold.
       */
      public com.google.protobuf.Int64Value getGroupByTwoLevelThreshold() {
        if (groupByTwoLevelThresholdBuilder_ == null) {
          return groupByTwoLevelThreshold_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : groupByTwoLevelThreshold_;
        } else {
          return groupByTwoLevelThresholdBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Sets the threshold of the number of keys, after that the two-level aggregation should be used.
       * Minimal value: **0**, threshold is not set (default: **10000**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_by_two_level_threshold = 76;</code>
       */
      public Builder setGroupByTwoLevelThreshold(com.google.protobuf.Int64Value value) {
        if (groupByTwoLevelThresholdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          groupByTwoLevelThreshold_ = value;
          onChanged();
        } else {
          groupByTwoLevelThresholdBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Sets the threshold of the number of keys, after that the two-level aggregation should be used.
       * Minimal value: **0**, threshold is not set (default: **10000**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_by_two_level_threshold = 76;</code>
       */
      public Builder setGroupByTwoLevelThreshold(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (groupByTwoLevelThresholdBuilder_ == null) {
          groupByTwoLevelThreshold_ = builderForValue.build();
          onChanged();
        } else {
          groupByTwoLevelThresholdBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Sets the threshold of the number of keys, after that the two-level aggregation should be used.
       * Minimal value: **0**, threshold is not set (default: **10000**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_by_two_level_threshold = 76;</code>
       */
      public Builder mergeGroupByTwoLevelThreshold(com.google.protobuf.Int64Value value) {
        if (groupByTwoLevelThresholdBuilder_ == null) {
          if (groupByTwoLevelThreshold_ != null) {
            groupByTwoLevelThreshold_ =
              com.google.protobuf.Int64Value.newBuilder(groupByTwoLevelThreshold_).mergeFrom(value).buildPartial();
          } else {
            groupByTwoLevelThreshold_ = value;
          }
          onChanged();
        } else {
          groupByTwoLevelThresholdBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Sets the threshold of the number of keys, after that the two-level aggregation should be used.
       * Minimal value: **0**, threshold is not set (default: **10000**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_by_two_level_threshold = 76;</code>
       */
      public Builder clearGroupByTwoLevelThreshold() {
        if (groupByTwoLevelThresholdBuilder_ == null) {
          groupByTwoLevelThreshold_ = null;
          onChanged();
        } else {
          groupByTwoLevelThreshold_ = null;
          groupByTwoLevelThresholdBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Sets the threshold of the number of keys, after that the two-level aggregation should be used.
       * Minimal value: **0**, threshold is not set (default: **10000**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_by_two_level_threshold = 76;</code>
       */
      public com.google.protobuf.Int64Value.Builder getGroupByTwoLevelThresholdBuilder() {
        
        onChanged();
        return getGroupByTwoLevelThresholdFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Sets the threshold of the number of keys, after that the two-level aggregation should be used.
       * Minimal value: **0**, threshold is not set (default: **10000**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_by_two_level_threshold = 76;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getGroupByTwoLevelThresholdOrBuilder() {
        if (groupByTwoLevelThresholdBuilder_ != null) {
          return groupByTwoLevelThresholdBuilder_.getMessageOrBuilder();
        } else {
          return groupByTwoLevelThreshold_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : groupByTwoLevelThreshold_;
        }
      }
      /**
       * <pre>
       * Sets the threshold of the number of keys, after that the two-level aggregation should be used.
       * Minimal value: **0**, threshold is not set (default: **10000**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_by_two_level_threshold = 76;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getGroupByTwoLevelThresholdFieldBuilder() {
        if (groupByTwoLevelThresholdBuilder_ == null) {
          groupByTwoLevelThresholdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getGroupByTwoLevelThreshold(),
                  getParentForChildren(),
                  isClean());
          groupByTwoLevelThreshold_ = null;
        }
        return groupByTwoLevelThresholdBuilder_;
      }

      private com.google.protobuf.Int64Value groupByTwoLevelThresholdBytes_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> groupByTwoLevelThresholdBytesBuilder_;
      /**
       * <pre>
       * Sets the threshold of the number of bytes, after that the two-level aggregation should be used.
       * Minimal value: **0**, threshold is not set (default: **100000000**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_by_two_level_threshold_bytes = 77;</code>
       * @return Whether the groupByTwoLevelThresholdBytes field is set.
       */
      public boolean hasGroupByTwoLevelThresholdBytes() {
        return groupByTwoLevelThresholdBytesBuilder_ != null || groupByTwoLevelThresholdBytes_ != null;
      }
      /**
       * <pre>
       * Sets the threshold of the number of bytes, after that the two-level aggregation should be used.
       * Minimal value: **0**, threshold is not set (default: **100000000**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_by_two_level_threshold_bytes = 77;</code>
       * @return The groupByTwoLevelThresholdBytes.
       */
      public com.google.protobuf.Int64Value getGroupByTwoLevelThresholdBytes() {
        if (groupByTwoLevelThresholdBytesBuilder_ == null) {
          return groupByTwoLevelThresholdBytes_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : groupByTwoLevelThresholdBytes_;
        } else {
          return groupByTwoLevelThresholdBytesBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Sets the threshold of the number of bytes, after that the two-level aggregation should be used.
       * Minimal value: **0**, threshold is not set (default: **100000000**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_by_two_level_threshold_bytes = 77;</code>
       */
      public Builder setGroupByTwoLevelThresholdBytes(com.google.protobuf.Int64Value value) {
        if (groupByTwoLevelThresholdBytesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          groupByTwoLevelThresholdBytes_ = value;
          onChanged();
        } else {
          groupByTwoLevelThresholdBytesBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Sets the threshold of the number of bytes, after that the two-level aggregation should be used.
       * Minimal value: **0**, threshold is not set (default: **100000000**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_by_two_level_threshold_bytes = 77;</code>
       */
      public Builder setGroupByTwoLevelThresholdBytes(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (groupByTwoLevelThresholdBytesBuilder_ == null) {
          groupByTwoLevelThresholdBytes_ = builderForValue.build();
          onChanged();
        } else {
          groupByTwoLevelThresholdBytesBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Sets the threshold of the number of bytes, after that the two-level aggregation should be used.
       * Minimal value: **0**, threshold is not set (default: **100000000**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_by_two_level_threshold_bytes = 77;</code>
       */
      public Builder mergeGroupByTwoLevelThresholdBytes(com.google.protobuf.Int64Value value) {
        if (groupByTwoLevelThresholdBytesBuilder_ == null) {
          if (groupByTwoLevelThresholdBytes_ != null) {
            groupByTwoLevelThresholdBytes_ =
              com.google.protobuf.Int64Value.newBuilder(groupByTwoLevelThresholdBytes_).mergeFrom(value).buildPartial();
          } else {
            groupByTwoLevelThresholdBytes_ = value;
          }
          onChanged();
        } else {
          groupByTwoLevelThresholdBytesBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Sets the threshold of the number of bytes, after that the two-level aggregation should be used.
       * Minimal value: **0**, threshold is not set (default: **100000000**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_by_two_level_threshold_bytes = 77;</code>
       */
      public Builder clearGroupByTwoLevelThresholdBytes() {
        if (groupByTwoLevelThresholdBytesBuilder_ == null) {
          groupByTwoLevelThresholdBytes_ = null;
          onChanged();
        } else {
          groupByTwoLevelThresholdBytes_ = null;
          groupByTwoLevelThresholdBytesBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Sets the threshold of the number of bytes, after that the two-level aggregation should be used.
       * Minimal value: **0**, threshold is not set (default: **100000000**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_by_two_level_threshold_bytes = 77;</code>
       */
      public com.google.protobuf.Int64Value.Builder getGroupByTwoLevelThresholdBytesBuilder() {
        
        onChanged();
        return getGroupByTwoLevelThresholdBytesFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Sets the threshold of the number of bytes, after that the two-level aggregation should be used.
       * Minimal value: **0**, threshold is not set (default: **100000000**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_by_two_level_threshold_bytes = 77;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getGroupByTwoLevelThresholdBytesOrBuilder() {
        if (groupByTwoLevelThresholdBytesBuilder_ != null) {
          return groupByTwoLevelThresholdBytesBuilder_.getMessageOrBuilder();
        } else {
          return groupByTwoLevelThresholdBytes_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : groupByTwoLevelThresholdBytes_;
        }
      }
      /**
       * <pre>
       * Sets the threshold of the number of bytes, after that the two-level aggregation should be used.
       * Minimal value: **0**, threshold is not set (default: **100000000**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value group_by_two_level_threshold_bytes = 77;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getGroupByTwoLevelThresholdBytesFieldBuilder() {
        if (groupByTwoLevelThresholdBytesBuilder_ == null) {
          groupByTwoLevelThresholdBytesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getGroupByTwoLevelThresholdBytes(),
                  getParentForChildren(),
                  isClean());
          groupByTwoLevelThresholdBytes_ = null;
        }
        return groupByTwoLevelThresholdBytesBuilder_;
      }

      private com.google.protobuf.Int64Value priority_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> priorityBuilder_;
      /**
       * <pre>
       * Sets the priority of a query.
       * * **0**-priority is not used.
       * * **1**-the highest priority.
       * * and so on. The higher the number, the lower a query's priority.
       * This setting should be set up for each query individually.
       * If ClickHouse is working with the high-priority queries, and a low-priority query enters, then the low-priority query is paused until higher-priority queries are completed.
       * Minimal value and default value: **0**, priority is not used.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value priority = 56 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the priority field is set.
       */
      public boolean hasPriority() {
        return priorityBuilder_ != null || priority_ != null;
      }
      /**
       * <pre>
       * Sets the priority of a query.
       * * **0**-priority is not used.
       * * **1**-the highest priority.
       * * and so on. The higher the number, the lower a query's priority.
       * This setting should be set up for each query individually.
       * If ClickHouse is working with the high-priority queries, and a low-priority query enters, then the low-priority query is paused until higher-priority queries are completed.
       * Minimal value and default value: **0**, priority is not used.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value priority = 56 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The priority.
       */
      public com.google.protobuf.Int64Value getPriority() {
        if (priorityBuilder_ == null) {
          return priority_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : priority_;
        } else {
          return priorityBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Sets the priority of a query.
       * * **0**-priority is not used.
       * * **1**-the highest priority.
       * * and so on. The higher the number, the lower a query's priority.
       * This setting should be set up for each query individually.
       * If ClickHouse is working with the high-priority queries, and a low-priority query enters, then the low-priority query is paused until higher-priority queries are completed.
       * Minimal value and default value: **0**, priority is not used.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value priority = 56 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setPriority(com.google.protobuf.Int64Value value) {
        if (priorityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          priority_ = value;
          onChanged();
        } else {
          priorityBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Sets the priority of a query.
       * * **0**-priority is not used.
       * * **1**-the highest priority.
       * * and so on. The higher the number, the lower a query's priority.
       * This setting should be set up for each query individually.
       * If ClickHouse is working with the high-priority queries, and a low-priority query enters, then the low-priority query is paused until higher-priority queries are completed.
       * Minimal value and default value: **0**, priority is not used.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value priority = 56 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setPriority(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (priorityBuilder_ == null) {
          priority_ = builderForValue.build();
          onChanged();
        } else {
          priorityBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Sets the priority of a query.
       * * **0**-priority is not used.
       * * **1**-the highest priority.
       * * and so on. The higher the number, the lower a query's priority.
       * This setting should be set up for each query individually.
       * If ClickHouse is working with the high-priority queries, and a low-priority query enters, then the low-priority query is paused until higher-priority queries are completed.
       * Minimal value and default value: **0**, priority is not used.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value priority = 56 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergePriority(com.google.protobuf.Int64Value value) {
        if (priorityBuilder_ == null) {
          if (priority_ != null) {
            priority_ =
              com.google.protobuf.Int64Value.newBuilder(priority_).mergeFrom(value).buildPartial();
          } else {
            priority_ = value;
          }
          onChanged();
        } else {
          priorityBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Sets the priority of a query.
       * * **0**-priority is not used.
       * * **1**-the highest priority.
       * * and so on. The higher the number, the lower a query's priority.
       * This setting should be set up for each query individually.
       * If ClickHouse is working with the high-priority queries, and a low-priority query enters, then the low-priority query is paused until higher-priority queries are completed.
       * Minimal value and default value: **0**, priority is not used.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value priority = 56 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearPriority() {
        if (priorityBuilder_ == null) {
          priority_ = null;
          onChanged();
        } else {
          priority_ = null;
          priorityBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Sets the priority of a query.
       * * **0**-priority is not used.
       * * **1**-the highest priority.
       * * and so on. The higher the number, the lower a query's priority.
       * This setting should be set up for each query individually.
       * If ClickHouse is working with the high-priority queries, and a low-priority query enters, then the low-priority query is paused until higher-priority queries are completed.
       * Minimal value and default value: **0**, priority is not used.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value priority = 56 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getPriorityBuilder() {
        
        onChanged();
        return getPriorityFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Sets the priority of a query.
       * * **0**-priority is not used.
       * * **1**-the highest priority.
       * * and so on. The higher the number, the lower a query's priority.
       * This setting should be set up for each query individually.
       * If ClickHouse is working with the high-priority queries, and a low-priority query enters, then the low-priority query is paused until higher-priority queries are completed.
       * Minimal value and default value: **0**, priority is not used.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value priority = 56 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getPriorityOrBuilder() {
        if (priorityBuilder_ != null) {
          return priorityBuilder_.getMessageOrBuilder();
        } else {
          return priority_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : priority_;
        }
      }
      /**
       * <pre>
       * Sets the priority of a query.
       * * **0**-priority is not used.
       * * **1**-the highest priority.
       * * and so on. The higher the number, the lower a query's priority.
       * This setting should be set up for each query individually.
       * If ClickHouse is working with the high-priority queries, and a low-priority query enters, then the low-priority query is paused until higher-priority queries are completed.
       * Minimal value and default value: **0**, priority is not used.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value priority = 56 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getPriorityFieldBuilder() {
        if (priorityBuilder_ == null) {
          priorityBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getPriority(),
                  getParentForChildren(),
                  isClean());
          priority_ = null;
        }
        return priorityBuilder_;
      }

      private com.google.protobuf.Int64Value maxThreads_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxThreadsBuilder_;
      /**
       * <pre>
       * Limits the maximum number of threads to process the request (setting does not take threads that read data from remote servers into account).
       * This setting applies to threads that perform the same stages of the query processing pipeline in parallel.
       * Minimal value and default value: **0** (the thread number is calculated automatically based on the number of physical CPU cores, no HyperThreading cores are taken into account).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_threads).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_threads = 8 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return Whether the maxThreads field is set.
       */
      public boolean hasMaxThreads() {
        return maxThreadsBuilder_ != null || maxThreads_ != null;
      }
      /**
       * <pre>
       * Limits the maximum number of threads to process the request (setting does not take threads that read data from remote servers into account).
       * This setting applies to threads that perform the same stages of the query processing pipeline in parallel.
       * Minimal value and default value: **0** (the thread number is calculated automatically based on the number of physical CPU cores, no HyperThreading cores are taken into account).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_threads).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_threads = 8 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return The maxThreads.
       */
      public com.google.protobuf.Int64Value getMaxThreads() {
        if (maxThreadsBuilder_ == null) {
          return maxThreads_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxThreads_;
        } else {
          return maxThreadsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the maximum number of threads to process the request (setting does not take threads that read data from remote servers into account).
       * This setting applies to threads that perform the same stages of the query processing pipeline in parallel.
       * Minimal value and default value: **0** (the thread number is calculated automatically based on the number of physical CPU cores, no HyperThreading cores are taken into account).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_threads).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_threads = 8 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setMaxThreads(com.google.protobuf.Int64Value value) {
        if (maxThreadsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxThreads_ = value;
          onChanged();
        } else {
          maxThreadsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of threads to process the request (setting does not take threads that read data from remote servers into account).
       * This setting applies to threads that perform the same stages of the query processing pipeline in parallel.
       * Minimal value and default value: **0** (the thread number is calculated automatically based on the number of physical CPU cores, no HyperThreading cores are taken into account).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_threads).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_threads = 8 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setMaxThreads(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxThreadsBuilder_ == null) {
          maxThreads_ = builderForValue.build();
          onChanged();
        } else {
          maxThreadsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of threads to process the request (setting does not take threads that read data from remote servers into account).
       * This setting applies to threads that perform the same stages of the query processing pipeline in parallel.
       * Minimal value and default value: **0** (the thread number is calculated automatically based on the number of physical CPU cores, no HyperThreading cores are taken into account).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_threads).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_threads = 8 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder mergeMaxThreads(com.google.protobuf.Int64Value value) {
        if (maxThreadsBuilder_ == null) {
          if (maxThreads_ != null) {
            maxThreads_ =
              com.google.protobuf.Int64Value.newBuilder(maxThreads_).mergeFrom(value).buildPartial();
          } else {
            maxThreads_ = value;
          }
          onChanged();
        } else {
          maxThreadsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of threads to process the request (setting does not take threads that read data from remote servers into account).
       * This setting applies to threads that perform the same stages of the query processing pipeline in parallel.
       * Minimal value and default value: **0** (the thread number is calculated automatically based on the number of physical CPU cores, no HyperThreading cores are taken into account).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_threads).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_threads = 8 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder clearMaxThreads() {
        if (maxThreadsBuilder_ == null) {
          maxThreads_ = null;
          onChanged();
        } else {
          maxThreads_ = null;
          maxThreadsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of threads to process the request (setting does not take threads that read data from remote servers into account).
       * This setting applies to threads that perform the same stages of the query processing pipeline in parallel.
       * Minimal value and default value: **0** (the thread number is calculated automatically based on the number of physical CPU cores, no HyperThreading cores are taken into account).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_threads).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_threads = 8 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxThreadsBuilder() {
        
        onChanged();
        return getMaxThreadsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the maximum number of threads to process the request (setting does not take threads that read data from remote servers into account).
       * This setting applies to threads that perform the same stages of the query processing pipeline in parallel.
       * Minimal value and default value: **0** (the thread number is calculated automatically based on the number of physical CPU cores, no HyperThreading cores are taken into account).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_threads).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_threads = 8 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxThreadsOrBuilder() {
        if (maxThreadsBuilder_ != null) {
          return maxThreadsBuilder_.getMessageOrBuilder();
        } else {
          return maxThreads_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxThreads_;
        }
      }
      /**
       * <pre>
       * Limits the maximum number of threads to process the request (setting does not take threads that read data from remote servers into account).
       * This setting applies to threads that perform the same stages of the query processing pipeline in parallel.
       * Minimal value and default value: **0** (the thread number is calculated automatically based on the number of physical CPU cores, no HyperThreading cores are taken into account).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_threads).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_threads = 8 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxThreadsFieldBuilder() {
        if (maxThreadsBuilder_ == null) {
          maxThreadsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxThreads(),
                  getParentForChildren(),
                  isClean());
          maxThreads_ = null;
        }
        return maxThreadsBuilder_;
      }

      private com.google.protobuf.Int64Value maxMemoryUsage_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxMemoryUsageBuilder_;
      /**
       * <pre>
       * Limits the maximum memory usage (in bytes) for processing of a single user's query on a single server.
       * This setting does not take server's free RAM amount or total RAM amount into account.
       * This limitation is enforced for any user's single query on a single server.
       * Minimal value: **0**, no limitation is set.
       * Value that is set in the ClickHouse default config file: **10737418240** (10 GB).
       * If you use [max_bytes_before_external_group_by] or [max_bytes_before_external_sort] setting, then it is recommended to set their values twice as low as [max_memory_usage] setting value.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#settings_max_memory_usage).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_memory_usage = 11 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the maxMemoryUsage field is set.
       */
      public boolean hasMaxMemoryUsage() {
        return maxMemoryUsageBuilder_ != null || maxMemoryUsage_ != null;
      }
      /**
       * <pre>
       * Limits the maximum memory usage (in bytes) for processing of a single user's query on a single server.
       * This setting does not take server's free RAM amount or total RAM amount into account.
       * This limitation is enforced for any user's single query on a single server.
       * Minimal value: **0**, no limitation is set.
       * Value that is set in the ClickHouse default config file: **10737418240** (10 GB).
       * If you use [max_bytes_before_external_group_by] or [max_bytes_before_external_sort] setting, then it is recommended to set their values twice as low as [max_memory_usage] setting value.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#settings_max_memory_usage).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_memory_usage = 11 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The maxMemoryUsage.
       */
      public com.google.protobuf.Int64Value getMaxMemoryUsage() {
        if (maxMemoryUsageBuilder_ == null) {
          return maxMemoryUsage_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxMemoryUsage_;
        } else {
          return maxMemoryUsageBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the maximum memory usage (in bytes) for processing of a single user's query on a single server.
       * This setting does not take server's free RAM amount or total RAM amount into account.
       * This limitation is enforced for any user's single query on a single server.
       * Minimal value: **0**, no limitation is set.
       * Value that is set in the ClickHouse default config file: **10737418240** (10 GB).
       * If you use [max_bytes_before_external_group_by] or [max_bytes_before_external_sort] setting, then it is recommended to set their values twice as low as [max_memory_usage] setting value.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#settings_max_memory_usage).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_memory_usage = 11 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxMemoryUsage(com.google.protobuf.Int64Value value) {
        if (maxMemoryUsageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxMemoryUsage_ = value;
          onChanged();
        } else {
          maxMemoryUsageBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum memory usage (in bytes) for processing of a single user's query on a single server.
       * This setting does not take server's free RAM amount or total RAM amount into account.
       * This limitation is enforced for any user's single query on a single server.
       * Minimal value: **0**, no limitation is set.
       * Value that is set in the ClickHouse default config file: **10737418240** (10 GB).
       * If you use [max_bytes_before_external_group_by] or [max_bytes_before_external_sort] setting, then it is recommended to set their values twice as low as [max_memory_usage] setting value.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#settings_max_memory_usage).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_memory_usage = 11 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxMemoryUsage(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxMemoryUsageBuilder_ == null) {
          maxMemoryUsage_ = builderForValue.build();
          onChanged();
        } else {
          maxMemoryUsageBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum memory usage (in bytes) for processing of a single user's query on a single server.
       * This setting does not take server's free RAM amount or total RAM amount into account.
       * This limitation is enforced for any user's single query on a single server.
       * Minimal value: **0**, no limitation is set.
       * Value that is set in the ClickHouse default config file: **10737418240** (10 GB).
       * If you use [max_bytes_before_external_group_by] or [max_bytes_before_external_sort] setting, then it is recommended to set their values twice as low as [max_memory_usage] setting value.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#settings_max_memory_usage).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_memory_usage = 11 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMaxMemoryUsage(com.google.protobuf.Int64Value value) {
        if (maxMemoryUsageBuilder_ == null) {
          if (maxMemoryUsage_ != null) {
            maxMemoryUsage_ =
              com.google.protobuf.Int64Value.newBuilder(maxMemoryUsage_).mergeFrom(value).buildPartial();
          } else {
            maxMemoryUsage_ = value;
          }
          onChanged();
        } else {
          maxMemoryUsageBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum memory usage (in bytes) for processing of a single user's query on a single server.
       * This setting does not take server's free RAM amount or total RAM amount into account.
       * This limitation is enforced for any user's single query on a single server.
       * Minimal value: **0**, no limitation is set.
       * Value that is set in the ClickHouse default config file: **10737418240** (10 GB).
       * If you use [max_bytes_before_external_group_by] or [max_bytes_before_external_sort] setting, then it is recommended to set their values twice as low as [max_memory_usage] setting value.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#settings_max_memory_usage).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_memory_usage = 11 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMaxMemoryUsage() {
        if (maxMemoryUsageBuilder_ == null) {
          maxMemoryUsage_ = null;
          onChanged();
        } else {
          maxMemoryUsage_ = null;
          maxMemoryUsageBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum memory usage (in bytes) for processing of a single user's query on a single server.
       * This setting does not take server's free RAM amount or total RAM amount into account.
       * This limitation is enforced for any user's single query on a single server.
       * Minimal value: **0**, no limitation is set.
       * Value that is set in the ClickHouse default config file: **10737418240** (10 GB).
       * If you use [max_bytes_before_external_group_by] or [max_bytes_before_external_sort] setting, then it is recommended to set their values twice as low as [max_memory_usage] setting value.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#settings_max_memory_usage).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_memory_usage = 11 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxMemoryUsageBuilder() {
        
        onChanged();
        return getMaxMemoryUsageFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the maximum memory usage (in bytes) for processing of a single user's query on a single server.
       * This setting does not take server's free RAM amount or total RAM amount into account.
       * This limitation is enforced for any user's single query on a single server.
       * Minimal value: **0**, no limitation is set.
       * Value that is set in the ClickHouse default config file: **10737418240** (10 GB).
       * If you use [max_bytes_before_external_group_by] or [max_bytes_before_external_sort] setting, then it is recommended to set their values twice as low as [max_memory_usage] setting value.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#settings_max_memory_usage).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_memory_usage = 11 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxMemoryUsageOrBuilder() {
        if (maxMemoryUsageBuilder_ != null) {
          return maxMemoryUsageBuilder_.getMessageOrBuilder();
        } else {
          return maxMemoryUsage_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxMemoryUsage_;
        }
      }
      /**
       * <pre>
       * Limits the maximum memory usage (in bytes) for processing of a single user's query on a single server.
       * This setting does not take server's free RAM amount or total RAM amount into account.
       * This limitation is enforced for any user's single query on a single server.
       * Minimal value: **0**, no limitation is set.
       * Value that is set in the ClickHouse default config file: **10737418240** (10 GB).
       * If you use [max_bytes_before_external_group_by] or [max_bytes_before_external_sort] setting, then it is recommended to set their values twice as low as [max_memory_usage] setting value.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#settings_max_memory_usage).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_memory_usage = 11 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxMemoryUsageFieldBuilder() {
        if (maxMemoryUsageBuilder_ == null) {
          maxMemoryUsageBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxMemoryUsage(),
                  getParentForChildren(),
                  isClean());
          maxMemoryUsage_ = null;
        }
        return maxMemoryUsageBuilder_;
      }

      private com.google.protobuf.Int64Value maxMemoryUsageForUser_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxMemoryUsageForUserBuilder_;
      /**
       * <pre>
       * Limits the maximum memory usage (in bytes) for processing of user's queries on a single server.
       * This setting does not take server's free RAM amount or total RAM amount into account.
       * This limitation is enforced for all queries that belong to one user and run simultaneously on a single server.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_memory_usage_for_user = 12 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the maxMemoryUsageForUser field is set.
       */
      public boolean hasMaxMemoryUsageForUser() {
        return maxMemoryUsageForUserBuilder_ != null || maxMemoryUsageForUser_ != null;
      }
      /**
       * <pre>
       * Limits the maximum memory usage (in bytes) for processing of user's queries on a single server.
       * This setting does not take server's free RAM amount or total RAM amount into account.
       * This limitation is enforced for all queries that belong to one user and run simultaneously on a single server.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_memory_usage_for_user = 12 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The maxMemoryUsageForUser.
       */
      public com.google.protobuf.Int64Value getMaxMemoryUsageForUser() {
        if (maxMemoryUsageForUserBuilder_ == null) {
          return maxMemoryUsageForUser_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxMemoryUsageForUser_;
        } else {
          return maxMemoryUsageForUserBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the maximum memory usage (in bytes) for processing of user's queries on a single server.
       * This setting does not take server's free RAM amount or total RAM amount into account.
       * This limitation is enforced for all queries that belong to one user and run simultaneously on a single server.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_memory_usage_for_user = 12 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxMemoryUsageForUser(com.google.protobuf.Int64Value value) {
        if (maxMemoryUsageForUserBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxMemoryUsageForUser_ = value;
          onChanged();
        } else {
          maxMemoryUsageForUserBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum memory usage (in bytes) for processing of user's queries on a single server.
       * This setting does not take server's free RAM amount or total RAM amount into account.
       * This limitation is enforced for all queries that belong to one user and run simultaneously on a single server.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_memory_usage_for_user = 12 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxMemoryUsageForUser(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxMemoryUsageForUserBuilder_ == null) {
          maxMemoryUsageForUser_ = builderForValue.build();
          onChanged();
        } else {
          maxMemoryUsageForUserBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum memory usage (in bytes) for processing of user's queries on a single server.
       * This setting does not take server's free RAM amount or total RAM amount into account.
       * This limitation is enforced for all queries that belong to one user and run simultaneously on a single server.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_memory_usage_for_user = 12 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMaxMemoryUsageForUser(com.google.protobuf.Int64Value value) {
        if (maxMemoryUsageForUserBuilder_ == null) {
          if (maxMemoryUsageForUser_ != null) {
            maxMemoryUsageForUser_ =
              com.google.protobuf.Int64Value.newBuilder(maxMemoryUsageForUser_).mergeFrom(value).buildPartial();
          } else {
            maxMemoryUsageForUser_ = value;
          }
          onChanged();
        } else {
          maxMemoryUsageForUserBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum memory usage (in bytes) for processing of user's queries on a single server.
       * This setting does not take server's free RAM amount or total RAM amount into account.
       * This limitation is enforced for all queries that belong to one user and run simultaneously on a single server.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_memory_usage_for_user = 12 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMaxMemoryUsageForUser() {
        if (maxMemoryUsageForUserBuilder_ == null) {
          maxMemoryUsageForUser_ = null;
          onChanged();
        } else {
          maxMemoryUsageForUser_ = null;
          maxMemoryUsageForUserBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum memory usage (in bytes) for processing of user's queries on a single server.
       * This setting does not take server's free RAM amount or total RAM amount into account.
       * This limitation is enforced for all queries that belong to one user and run simultaneously on a single server.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_memory_usage_for_user = 12 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxMemoryUsageForUserBuilder() {
        
        onChanged();
        return getMaxMemoryUsageForUserFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the maximum memory usage (in bytes) for processing of user's queries on a single server.
       * This setting does not take server's free RAM amount or total RAM amount into account.
       * This limitation is enforced for all queries that belong to one user and run simultaneously on a single server.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_memory_usage_for_user = 12 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxMemoryUsageForUserOrBuilder() {
        if (maxMemoryUsageForUserBuilder_ != null) {
          return maxMemoryUsageForUserBuilder_.getMessageOrBuilder();
        } else {
          return maxMemoryUsageForUser_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxMemoryUsageForUser_;
        }
      }
      /**
       * <pre>
       * Limits the maximum memory usage (in bytes) for processing of user's queries on a single server.
       * This setting does not take server's free RAM amount or total RAM amount into account.
       * This limitation is enforced for all queries that belong to one user and run simultaneously on a single server.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_memory_usage_for_user = 12 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxMemoryUsageForUserFieldBuilder() {
        if (maxMemoryUsageForUserBuilder_ == null) {
          maxMemoryUsageForUserBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxMemoryUsageForUser(),
                  getParentForChildren(),
                  isClean());
          maxMemoryUsageForUser_ = null;
        }
        return maxMemoryUsageForUserBuilder_;
      }

      private com.google.protobuf.Int64Value maxNetworkBandwidth_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxNetworkBandwidthBuilder_;
      /**
       * <pre>
       * The maximum speed of data exchange over the network in bytes per second for a query.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_network_bandwidth = 57;</code>
       * @return Whether the maxNetworkBandwidth field is set.
       */
      public boolean hasMaxNetworkBandwidth() {
        return maxNetworkBandwidthBuilder_ != null || maxNetworkBandwidth_ != null;
      }
      /**
       * <pre>
       * The maximum speed of data exchange over the network in bytes per second for a query.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_network_bandwidth = 57;</code>
       * @return The maxNetworkBandwidth.
       */
      public com.google.protobuf.Int64Value getMaxNetworkBandwidth() {
        if (maxNetworkBandwidthBuilder_ == null) {
          return maxNetworkBandwidth_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxNetworkBandwidth_;
        } else {
          return maxNetworkBandwidthBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The maximum speed of data exchange over the network in bytes per second for a query.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_network_bandwidth = 57;</code>
       */
      public Builder setMaxNetworkBandwidth(com.google.protobuf.Int64Value value) {
        if (maxNetworkBandwidthBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxNetworkBandwidth_ = value;
          onChanged();
        } else {
          maxNetworkBandwidthBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum speed of data exchange over the network in bytes per second for a query.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_network_bandwidth = 57;</code>
       */
      public Builder setMaxNetworkBandwidth(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxNetworkBandwidthBuilder_ == null) {
          maxNetworkBandwidth_ = builderForValue.build();
          onChanged();
        } else {
          maxNetworkBandwidthBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The maximum speed of data exchange over the network in bytes per second for a query.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_network_bandwidth = 57;</code>
       */
      public Builder mergeMaxNetworkBandwidth(com.google.protobuf.Int64Value value) {
        if (maxNetworkBandwidthBuilder_ == null) {
          if (maxNetworkBandwidth_ != null) {
            maxNetworkBandwidth_ =
              com.google.protobuf.Int64Value.newBuilder(maxNetworkBandwidth_).mergeFrom(value).buildPartial();
          } else {
            maxNetworkBandwidth_ = value;
          }
          onChanged();
        } else {
          maxNetworkBandwidthBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum speed of data exchange over the network in bytes per second for a query.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_network_bandwidth = 57;</code>
       */
      public Builder clearMaxNetworkBandwidth() {
        if (maxNetworkBandwidthBuilder_ == null) {
          maxNetworkBandwidth_ = null;
          onChanged();
        } else {
          maxNetworkBandwidth_ = null;
          maxNetworkBandwidthBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The maximum speed of data exchange over the network in bytes per second for a query.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_network_bandwidth = 57;</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxNetworkBandwidthBuilder() {
        
        onChanged();
        return getMaxNetworkBandwidthFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The maximum speed of data exchange over the network in bytes per second for a query.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_network_bandwidth = 57;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxNetworkBandwidthOrBuilder() {
        if (maxNetworkBandwidthBuilder_ != null) {
          return maxNetworkBandwidthBuilder_.getMessageOrBuilder();
        } else {
          return maxNetworkBandwidth_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxNetworkBandwidth_;
        }
      }
      /**
       * <pre>
       * The maximum speed of data exchange over the network in bytes per second for a query.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_network_bandwidth = 57;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxNetworkBandwidthFieldBuilder() {
        if (maxNetworkBandwidthBuilder_ == null) {
          maxNetworkBandwidthBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxNetworkBandwidth(),
                  getParentForChildren(),
                  isClean());
          maxNetworkBandwidth_ = null;
        }
        return maxNetworkBandwidthBuilder_;
      }

      private com.google.protobuf.Int64Value maxNetworkBandwidthForUser_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxNetworkBandwidthForUserBuilder_;
      /**
       * <pre>
       * The maximum speed of data exchange over the network in bytes per second for all concurrently running user queries.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_network_bandwidth_for_user = 58;</code>
       * @return Whether the maxNetworkBandwidthForUser field is set.
       */
      public boolean hasMaxNetworkBandwidthForUser() {
        return maxNetworkBandwidthForUserBuilder_ != null || maxNetworkBandwidthForUser_ != null;
      }
      /**
       * <pre>
       * The maximum speed of data exchange over the network in bytes per second for all concurrently running user queries.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_network_bandwidth_for_user = 58;</code>
       * @return The maxNetworkBandwidthForUser.
       */
      public com.google.protobuf.Int64Value getMaxNetworkBandwidthForUser() {
        if (maxNetworkBandwidthForUserBuilder_ == null) {
          return maxNetworkBandwidthForUser_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxNetworkBandwidthForUser_;
        } else {
          return maxNetworkBandwidthForUserBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The maximum speed of data exchange over the network in bytes per second for all concurrently running user queries.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_network_bandwidth_for_user = 58;</code>
       */
      public Builder setMaxNetworkBandwidthForUser(com.google.protobuf.Int64Value value) {
        if (maxNetworkBandwidthForUserBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxNetworkBandwidthForUser_ = value;
          onChanged();
        } else {
          maxNetworkBandwidthForUserBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum speed of data exchange over the network in bytes per second for all concurrently running user queries.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_network_bandwidth_for_user = 58;</code>
       */
      public Builder setMaxNetworkBandwidthForUser(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxNetworkBandwidthForUserBuilder_ == null) {
          maxNetworkBandwidthForUser_ = builderForValue.build();
          onChanged();
        } else {
          maxNetworkBandwidthForUserBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The maximum speed of data exchange over the network in bytes per second for all concurrently running user queries.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_network_bandwidth_for_user = 58;</code>
       */
      public Builder mergeMaxNetworkBandwidthForUser(com.google.protobuf.Int64Value value) {
        if (maxNetworkBandwidthForUserBuilder_ == null) {
          if (maxNetworkBandwidthForUser_ != null) {
            maxNetworkBandwidthForUser_ =
              com.google.protobuf.Int64Value.newBuilder(maxNetworkBandwidthForUser_).mergeFrom(value).buildPartial();
          } else {
            maxNetworkBandwidthForUser_ = value;
          }
          onChanged();
        } else {
          maxNetworkBandwidthForUserBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum speed of data exchange over the network in bytes per second for all concurrently running user queries.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_network_bandwidth_for_user = 58;</code>
       */
      public Builder clearMaxNetworkBandwidthForUser() {
        if (maxNetworkBandwidthForUserBuilder_ == null) {
          maxNetworkBandwidthForUser_ = null;
          onChanged();
        } else {
          maxNetworkBandwidthForUser_ = null;
          maxNetworkBandwidthForUserBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The maximum speed of data exchange over the network in bytes per second for all concurrently running user queries.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_network_bandwidth_for_user = 58;</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxNetworkBandwidthForUserBuilder() {
        
        onChanged();
        return getMaxNetworkBandwidthForUserFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The maximum speed of data exchange over the network in bytes per second for all concurrently running user queries.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_network_bandwidth_for_user = 58;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxNetworkBandwidthForUserOrBuilder() {
        if (maxNetworkBandwidthForUserBuilder_ != null) {
          return maxNetworkBandwidthForUserBuilder_.getMessageOrBuilder();
        } else {
          return maxNetworkBandwidthForUser_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxNetworkBandwidthForUser_;
        }
      }
      /**
       * <pre>
       * The maximum speed of data exchange over the network in bytes per second for all concurrently running user queries.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_network_bandwidth_for_user = 58;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxNetworkBandwidthForUserFieldBuilder() {
        if (maxNetworkBandwidthForUserBuilder_ == null) {
          maxNetworkBandwidthForUserBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxNetworkBandwidthForUser(),
                  getParentForChildren(),
                  isClean());
          maxNetworkBandwidthForUser_ = null;
        }
        return maxNetworkBandwidthForUserBuilder_;
      }

      private com.google.protobuf.Int64Value maxPartitionsPerInsertBlock_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxPartitionsPerInsertBlockBuilder_;
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/ru/operations/settings/query-complexity/#max-partitions-per-insert-block).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_partitions_per_insert_block = 102;</code>
       * @return Whether the maxPartitionsPerInsertBlock field is set.
       */
      public boolean hasMaxPartitionsPerInsertBlock() {
        return maxPartitionsPerInsertBlockBuilder_ != null || maxPartitionsPerInsertBlock_ != null;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/ru/operations/settings/query-complexity/#max-partitions-per-insert-block).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_partitions_per_insert_block = 102;</code>
       * @return The maxPartitionsPerInsertBlock.
       */
      public com.google.protobuf.Int64Value getMaxPartitionsPerInsertBlock() {
        if (maxPartitionsPerInsertBlockBuilder_ == null) {
          return maxPartitionsPerInsertBlock_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxPartitionsPerInsertBlock_;
        } else {
          return maxPartitionsPerInsertBlockBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/ru/operations/settings/query-complexity/#max-partitions-per-insert-block).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_partitions_per_insert_block = 102;</code>
       */
      public Builder setMaxPartitionsPerInsertBlock(com.google.protobuf.Int64Value value) {
        if (maxPartitionsPerInsertBlockBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxPartitionsPerInsertBlock_ = value;
          onChanged();
        } else {
          maxPartitionsPerInsertBlockBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/ru/operations/settings/query-complexity/#max-partitions-per-insert-block).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_partitions_per_insert_block = 102;</code>
       */
      public Builder setMaxPartitionsPerInsertBlock(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxPartitionsPerInsertBlockBuilder_ == null) {
          maxPartitionsPerInsertBlock_ = builderForValue.build();
          onChanged();
        } else {
          maxPartitionsPerInsertBlockBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/ru/operations/settings/query-complexity/#max-partitions-per-insert-block).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_partitions_per_insert_block = 102;</code>
       */
      public Builder mergeMaxPartitionsPerInsertBlock(com.google.protobuf.Int64Value value) {
        if (maxPartitionsPerInsertBlockBuilder_ == null) {
          if (maxPartitionsPerInsertBlock_ != null) {
            maxPartitionsPerInsertBlock_ =
              com.google.protobuf.Int64Value.newBuilder(maxPartitionsPerInsertBlock_).mergeFrom(value).buildPartial();
          } else {
            maxPartitionsPerInsertBlock_ = value;
          }
          onChanged();
        } else {
          maxPartitionsPerInsertBlockBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/ru/operations/settings/query-complexity/#max-partitions-per-insert-block).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_partitions_per_insert_block = 102;</code>
       */
      public Builder clearMaxPartitionsPerInsertBlock() {
        if (maxPartitionsPerInsertBlockBuilder_ == null) {
          maxPartitionsPerInsertBlock_ = null;
          onChanged();
        } else {
          maxPartitionsPerInsertBlock_ = null;
          maxPartitionsPerInsertBlockBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/ru/operations/settings/query-complexity/#max-partitions-per-insert-block).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_partitions_per_insert_block = 102;</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxPartitionsPerInsertBlockBuilder() {
        
        onChanged();
        return getMaxPartitionsPerInsertBlockFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/ru/operations/settings/query-complexity/#max-partitions-per-insert-block).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_partitions_per_insert_block = 102;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxPartitionsPerInsertBlockOrBuilder() {
        if (maxPartitionsPerInsertBlockBuilder_ != null) {
          return maxPartitionsPerInsertBlockBuilder_.getMessageOrBuilder();
        } else {
          return maxPartitionsPerInsertBlock_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxPartitionsPerInsertBlock_;
        }
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/ru/operations/settings/query-complexity/#max-partitions-per-insert-block).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_partitions_per_insert_block = 102;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxPartitionsPerInsertBlockFieldBuilder() {
        if (maxPartitionsPerInsertBlockBuilder_ == null) {
          maxPartitionsPerInsertBlockBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxPartitionsPerInsertBlock(),
                  getParentForChildren(),
                  isClean());
          maxPartitionsPerInsertBlock_ = null;
        }
        return maxPartitionsPerInsertBlockBuilder_;
      }

      private com.google.protobuf.Int64Value maxConcurrentQueriesForUser_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxConcurrentQueriesForUserBuilder_;
      /**
       * <pre>
       * The maximum number of concurrent requests per user.
       * Default value: 0 (no limit).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_concurrent_queries_for_user = 103;</code>
       * @return Whether the maxConcurrentQueriesForUser field is set.
       */
      public boolean hasMaxConcurrentQueriesForUser() {
        return maxConcurrentQueriesForUserBuilder_ != null || maxConcurrentQueriesForUser_ != null;
      }
      /**
       * <pre>
       * The maximum number of concurrent requests per user.
       * Default value: 0 (no limit).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_concurrent_queries_for_user = 103;</code>
       * @return The maxConcurrentQueriesForUser.
       */
      public com.google.protobuf.Int64Value getMaxConcurrentQueriesForUser() {
        if (maxConcurrentQueriesForUserBuilder_ == null) {
          return maxConcurrentQueriesForUser_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxConcurrentQueriesForUser_;
        } else {
          return maxConcurrentQueriesForUserBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The maximum number of concurrent requests per user.
       * Default value: 0 (no limit).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_concurrent_queries_for_user = 103;</code>
       */
      public Builder setMaxConcurrentQueriesForUser(com.google.protobuf.Int64Value value) {
        if (maxConcurrentQueriesForUserBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxConcurrentQueriesForUser_ = value;
          onChanged();
        } else {
          maxConcurrentQueriesForUserBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum number of concurrent requests per user.
       * Default value: 0 (no limit).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_concurrent_queries_for_user = 103;</code>
       */
      public Builder setMaxConcurrentQueriesForUser(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxConcurrentQueriesForUserBuilder_ == null) {
          maxConcurrentQueriesForUser_ = builderForValue.build();
          onChanged();
        } else {
          maxConcurrentQueriesForUserBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The maximum number of concurrent requests per user.
       * Default value: 0 (no limit).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_concurrent_queries_for_user = 103;</code>
       */
      public Builder mergeMaxConcurrentQueriesForUser(com.google.protobuf.Int64Value value) {
        if (maxConcurrentQueriesForUserBuilder_ == null) {
          if (maxConcurrentQueriesForUser_ != null) {
            maxConcurrentQueriesForUser_ =
              com.google.protobuf.Int64Value.newBuilder(maxConcurrentQueriesForUser_).mergeFrom(value).buildPartial();
          } else {
            maxConcurrentQueriesForUser_ = value;
          }
          onChanged();
        } else {
          maxConcurrentQueriesForUserBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum number of concurrent requests per user.
       * Default value: 0 (no limit).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_concurrent_queries_for_user = 103;</code>
       */
      public Builder clearMaxConcurrentQueriesForUser() {
        if (maxConcurrentQueriesForUserBuilder_ == null) {
          maxConcurrentQueriesForUser_ = null;
          onChanged();
        } else {
          maxConcurrentQueriesForUser_ = null;
          maxConcurrentQueriesForUserBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The maximum number of concurrent requests per user.
       * Default value: 0 (no limit).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_concurrent_queries_for_user = 103;</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxConcurrentQueriesForUserBuilder() {
        
        onChanged();
        return getMaxConcurrentQueriesForUserFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The maximum number of concurrent requests per user.
       * Default value: 0 (no limit).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_concurrent_queries_for_user = 103;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxConcurrentQueriesForUserOrBuilder() {
        if (maxConcurrentQueriesForUserBuilder_ != null) {
          return maxConcurrentQueriesForUserBuilder_.getMessageOrBuilder();
        } else {
          return maxConcurrentQueriesForUser_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxConcurrentQueriesForUser_;
        }
      }
      /**
       * <pre>
       * The maximum number of concurrent requests per user.
       * Default value: 0 (no limit).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_concurrent_queries_for_user = 103;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxConcurrentQueriesForUserFieldBuilder() {
        if (maxConcurrentQueriesForUserBuilder_ == null) {
          maxConcurrentQueriesForUserBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxConcurrentQueriesForUser(),
                  getParentForChildren(),
                  isClean());
          maxConcurrentQueriesForUser_ = null;
        }
        return maxConcurrentQueriesForUserBuilder_;
      }

      private com.google.protobuf.BoolValue forceIndexByDate_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> forceIndexByDateBuilder_;
      /**
       * <pre>
       * If enabled, query is not executed if the ClickHouse can't use index by date.
       * This setting has effect only for tables of the MergeTree family.
       * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by date).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-force_index_by_date).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue force_index_by_date = 59;</code>
       * @return Whether the forceIndexByDate field is set.
       */
      public boolean hasForceIndexByDate() {
        return forceIndexByDateBuilder_ != null || forceIndexByDate_ != null;
      }
      /**
       * <pre>
       * If enabled, query is not executed if the ClickHouse can't use index by date.
       * This setting has effect only for tables of the MergeTree family.
       * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by date).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-force_index_by_date).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue force_index_by_date = 59;</code>
       * @return The forceIndexByDate.
       */
      public com.google.protobuf.BoolValue getForceIndexByDate() {
        if (forceIndexByDateBuilder_ == null) {
          return forceIndexByDate_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : forceIndexByDate_;
        } else {
          return forceIndexByDateBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * If enabled, query is not executed if the ClickHouse can't use index by date.
       * This setting has effect only for tables of the MergeTree family.
       * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by date).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-force_index_by_date).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue force_index_by_date = 59;</code>
       */
      public Builder setForceIndexByDate(com.google.protobuf.BoolValue value) {
        if (forceIndexByDateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          forceIndexByDate_ = value;
          onChanged();
        } else {
          forceIndexByDateBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * If enabled, query is not executed if the ClickHouse can't use index by date.
       * This setting has effect only for tables of the MergeTree family.
       * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by date).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-force_index_by_date).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue force_index_by_date = 59;</code>
       */
      public Builder setForceIndexByDate(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (forceIndexByDateBuilder_ == null) {
          forceIndexByDate_ = builderForValue.build();
          onChanged();
        } else {
          forceIndexByDateBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * If enabled, query is not executed if the ClickHouse can't use index by date.
       * This setting has effect only for tables of the MergeTree family.
       * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by date).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-force_index_by_date).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue force_index_by_date = 59;</code>
       */
      public Builder mergeForceIndexByDate(com.google.protobuf.BoolValue value) {
        if (forceIndexByDateBuilder_ == null) {
          if (forceIndexByDate_ != null) {
            forceIndexByDate_ =
              com.google.protobuf.BoolValue.newBuilder(forceIndexByDate_).mergeFrom(value).buildPartial();
          } else {
            forceIndexByDate_ = value;
          }
          onChanged();
        } else {
          forceIndexByDateBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * If enabled, query is not executed if the ClickHouse can't use index by date.
       * This setting has effect only for tables of the MergeTree family.
       * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by date).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-force_index_by_date).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue force_index_by_date = 59;</code>
       */
      public Builder clearForceIndexByDate() {
        if (forceIndexByDateBuilder_ == null) {
          forceIndexByDate_ = null;
          onChanged();
        } else {
          forceIndexByDate_ = null;
          forceIndexByDateBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * If enabled, query is not executed if the ClickHouse can't use index by date.
       * This setting has effect only for tables of the MergeTree family.
       * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by date).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-force_index_by_date).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue force_index_by_date = 59;</code>
       */
      public com.google.protobuf.BoolValue.Builder getForceIndexByDateBuilder() {
        
        onChanged();
        return getForceIndexByDateFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * If enabled, query is not executed if the ClickHouse can't use index by date.
       * This setting has effect only for tables of the MergeTree family.
       * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by date).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-force_index_by_date).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue force_index_by_date = 59;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getForceIndexByDateOrBuilder() {
        if (forceIndexByDateBuilder_ != null) {
          return forceIndexByDateBuilder_.getMessageOrBuilder();
        } else {
          return forceIndexByDate_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : forceIndexByDate_;
        }
      }
      /**
       * <pre>
       * If enabled, query is not executed if the ClickHouse can't use index by date.
       * This setting has effect only for tables of the MergeTree family.
       * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by date).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-force_index_by_date).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue force_index_by_date = 59;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getForceIndexByDateFieldBuilder() {
        if (forceIndexByDateBuilder_ == null) {
          forceIndexByDateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getForceIndexByDate(),
                  getParentForChildren(),
                  isClean());
          forceIndexByDate_ = null;
        }
        return forceIndexByDateBuilder_;
      }

      private com.google.protobuf.BoolValue forcePrimaryKey_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> forcePrimaryKeyBuilder_;
      /**
       * <pre>
       * If enabled, query is not executed if the ClickHouse can't use index by primary key.
       * This setting has effect only for tables of the MergeTree family.
       * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by primary key).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#force-primary-key).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue force_primary_key = 60;</code>
       * @return Whether the forcePrimaryKey field is set.
       */
      public boolean hasForcePrimaryKey() {
        return forcePrimaryKeyBuilder_ != null || forcePrimaryKey_ != null;
      }
      /**
       * <pre>
       * If enabled, query is not executed if the ClickHouse can't use index by primary key.
       * This setting has effect only for tables of the MergeTree family.
       * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by primary key).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#force-primary-key).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue force_primary_key = 60;</code>
       * @return The forcePrimaryKey.
       */
      public com.google.protobuf.BoolValue getForcePrimaryKey() {
        if (forcePrimaryKeyBuilder_ == null) {
          return forcePrimaryKey_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : forcePrimaryKey_;
        } else {
          return forcePrimaryKeyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * If enabled, query is not executed if the ClickHouse can't use index by primary key.
       * This setting has effect only for tables of the MergeTree family.
       * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by primary key).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#force-primary-key).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue force_primary_key = 60;</code>
       */
      public Builder setForcePrimaryKey(com.google.protobuf.BoolValue value) {
        if (forcePrimaryKeyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          forcePrimaryKey_ = value;
          onChanged();
        } else {
          forcePrimaryKeyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * If enabled, query is not executed if the ClickHouse can't use index by primary key.
       * This setting has effect only for tables of the MergeTree family.
       * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by primary key).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#force-primary-key).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue force_primary_key = 60;</code>
       */
      public Builder setForcePrimaryKey(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (forcePrimaryKeyBuilder_ == null) {
          forcePrimaryKey_ = builderForValue.build();
          onChanged();
        } else {
          forcePrimaryKeyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * If enabled, query is not executed if the ClickHouse can't use index by primary key.
       * This setting has effect only for tables of the MergeTree family.
       * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by primary key).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#force-primary-key).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue force_primary_key = 60;</code>
       */
      public Builder mergeForcePrimaryKey(com.google.protobuf.BoolValue value) {
        if (forcePrimaryKeyBuilder_ == null) {
          if (forcePrimaryKey_ != null) {
            forcePrimaryKey_ =
              com.google.protobuf.BoolValue.newBuilder(forcePrimaryKey_).mergeFrom(value).buildPartial();
          } else {
            forcePrimaryKey_ = value;
          }
          onChanged();
        } else {
          forcePrimaryKeyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * If enabled, query is not executed if the ClickHouse can't use index by primary key.
       * This setting has effect only for tables of the MergeTree family.
       * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by primary key).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#force-primary-key).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue force_primary_key = 60;</code>
       */
      public Builder clearForcePrimaryKey() {
        if (forcePrimaryKeyBuilder_ == null) {
          forcePrimaryKey_ = null;
          onChanged();
        } else {
          forcePrimaryKey_ = null;
          forcePrimaryKeyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * If enabled, query is not executed if the ClickHouse can't use index by primary key.
       * This setting has effect only for tables of the MergeTree family.
       * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by primary key).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#force-primary-key).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue force_primary_key = 60;</code>
       */
      public com.google.protobuf.BoolValue.Builder getForcePrimaryKeyBuilder() {
        
        onChanged();
        return getForcePrimaryKeyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * If enabled, query is not executed if the ClickHouse can't use index by primary key.
       * This setting has effect only for tables of the MergeTree family.
       * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by primary key).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#force-primary-key).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue force_primary_key = 60;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getForcePrimaryKeyOrBuilder() {
        if (forcePrimaryKeyBuilder_ != null) {
          return forcePrimaryKeyBuilder_.getMessageOrBuilder();
        } else {
          return forcePrimaryKey_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : forcePrimaryKey_;
        }
      }
      /**
       * <pre>
       * If enabled, query is not executed if the ClickHouse can't use index by primary key.
       * This setting has effect only for tables of the MergeTree family.
       * Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by primary key).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#force-primary-key).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue force_primary_key = 60;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getForcePrimaryKeyFieldBuilder() {
        if (forcePrimaryKeyBuilder_ == null) {
          forcePrimaryKeyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getForcePrimaryKey(),
                  getParentForChildren(),
                  isClean());
          forcePrimaryKey_ = null;
        }
        return forcePrimaryKeyBuilder_;
      }

      private com.google.protobuf.Int64Value maxRowsToRead_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxRowsToReadBuilder_;
      /**
       * <pre>
       * Limits the maximum number of rows that can be read from a table when running a query.
       * Minimal value and default value: **0**, no limitation is set.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-rows-to-read).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_read = 13 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the maxRowsToRead field is set.
       */
      public boolean hasMaxRowsToRead() {
        return maxRowsToReadBuilder_ != null || maxRowsToRead_ != null;
      }
      /**
       * <pre>
       * Limits the maximum number of rows that can be read from a table when running a query.
       * Minimal value and default value: **0**, no limitation is set.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-rows-to-read).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_read = 13 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The maxRowsToRead.
       */
      public com.google.protobuf.Int64Value getMaxRowsToRead() {
        if (maxRowsToReadBuilder_ == null) {
          return maxRowsToRead_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxRowsToRead_;
        } else {
          return maxRowsToReadBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the maximum number of rows that can be read from a table when running a query.
       * Minimal value and default value: **0**, no limitation is set.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-rows-to-read).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_read = 13 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxRowsToRead(com.google.protobuf.Int64Value value) {
        if (maxRowsToReadBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxRowsToRead_ = value;
          onChanged();
        } else {
          maxRowsToReadBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of rows that can be read from a table when running a query.
       * Minimal value and default value: **0**, no limitation is set.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-rows-to-read).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_read = 13 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxRowsToRead(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxRowsToReadBuilder_ == null) {
          maxRowsToRead_ = builderForValue.build();
          onChanged();
        } else {
          maxRowsToReadBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of rows that can be read from a table when running a query.
       * Minimal value and default value: **0**, no limitation is set.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-rows-to-read).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_read = 13 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMaxRowsToRead(com.google.protobuf.Int64Value value) {
        if (maxRowsToReadBuilder_ == null) {
          if (maxRowsToRead_ != null) {
            maxRowsToRead_ =
              com.google.protobuf.Int64Value.newBuilder(maxRowsToRead_).mergeFrom(value).buildPartial();
          } else {
            maxRowsToRead_ = value;
          }
          onChanged();
        } else {
          maxRowsToReadBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of rows that can be read from a table when running a query.
       * Minimal value and default value: **0**, no limitation is set.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-rows-to-read).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_read = 13 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMaxRowsToRead() {
        if (maxRowsToReadBuilder_ == null) {
          maxRowsToRead_ = null;
          onChanged();
        } else {
          maxRowsToRead_ = null;
          maxRowsToReadBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of rows that can be read from a table when running a query.
       * Minimal value and default value: **0**, no limitation is set.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-rows-to-read).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_read = 13 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxRowsToReadBuilder() {
        
        onChanged();
        return getMaxRowsToReadFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the maximum number of rows that can be read from a table when running a query.
       * Minimal value and default value: **0**, no limitation is set.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-rows-to-read).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_read = 13 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxRowsToReadOrBuilder() {
        if (maxRowsToReadBuilder_ != null) {
          return maxRowsToReadBuilder_.getMessageOrBuilder();
        } else {
          return maxRowsToRead_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxRowsToRead_;
        }
      }
      /**
       * <pre>
       * Limits the maximum number of rows that can be read from a table when running a query.
       * Minimal value and default value: **0**, no limitation is set.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-rows-to-read).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_read = 13 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxRowsToReadFieldBuilder() {
        if (maxRowsToReadBuilder_ == null) {
          maxRowsToReadBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxRowsToRead(),
                  getParentForChildren(),
                  isClean());
          maxRowsToRead_ = null;
        }
        return maxRowsToReadBuilder_;
      }

      private com.google.protobuf.Int64Value maxBytesToRead_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxBytesToReadBuilder_;
      /**
       * <pre>
       * Limits the maximum number of bytes (uncompressed data) that can be read from a table when running a query.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_read = 14 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the maxBytesToRead field is set.
       */
      public boolean hasMaxBytesToRead() {
        return maxBytesToReadBuilder_ != null || maxBytesToRead_ != null;
      }
      /**
       * <pre>
       * Limits the maximum number of bytes (uncompressed data) that can be read from a table when running a query.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_read = 14 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The maxBytesToRead.
       */
      public com.google.protobuf.Int64Value getMaxBytesToRead() {
        if (maxBytesToReadBuilder_ == null) {
          return maxBytesToRead_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxBytesToRead_;
        } else {
          return maxBytesToReadBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the maximum number of bytes (uncompressed data) that can be read from a table when running a query.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_read = 14 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxBytesToRead(com.google.protobuf.Int64Value value) {
        if (maxBytesToReadBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxBytesToRead_ = value;
          onChanged();
        } else {
          maxBytesToReadBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of bytes (uncompressed data) that can be read from a table when running a query.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_read = 14 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxBytesToRead(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxBytesToReadBuilder_ == null) {
          maxBytesToRead_ = builderForValue.build();
          onChanged();
        } else {
          maxBytesToReadBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of bytes (uncompressed data) that can be read from a table when running a query.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_read = 14 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMaxBytesToRead(com.google.protobuf.Int64Value value) {
        if (maxBytesToReadBuilder_ == null) {
          if (maxBytesToRead_ != null) {
            maxBytesToRead_ =
              com.google.protobuf.Int64Value.newBuilder(maxBytesToRead_).mergeFrom(value).buildPartial();
          } else {
            maxBytesToRead_ = value;
          }
          onChanged();
        } else {
          maxBytesToReadBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of bytes (uncompressed data) that can be read from a table when running a query.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_read = 14 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMaxBytesToRead() {
        if (maxBytesToReadBuilder_ == null) {
          maxBytesToRead_ = null;
          onChanged();
        } else {
          maxBytesToRead_ = null;
          maxBytesToReadBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of bytes (uncompressed data) that can be read from a table when running a query.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_read = 14 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxBytesToReadBuilder() {
        
        onChanged();
        return getMaxBytesToReadFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the maximum number of bytes (uncompressed data) that can be read from a table when running a query.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_read = 14 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxBytesToReadOrBuilder() {
        if (maxBytesToReadBuilder_ != null) {
          return maxBytesToReadBuilder_.getMessageOrBuilder();
        } else {
          return maxBytesToRead_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxBytesToRead_;
        }
      }
      /**
       * <pre>
       * Limits the maximum number of bytes (uncompressed data) that can be read from a table when running a query.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_read = 14 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxBytesToReadFieldBuilder() {
        if (maxBytesToReadBuilder_ == null) {
          maxBytesToReadBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxBytesToRead(),
                  getParentForChildren(),
                  isClean());
          maxBytesToRead_ = null;
        }
        return maxBytesToReadBuilder_;
      }

      private int readOverflowMode_ = 0;
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while reading the data.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode read_overflow_mode = 15;</code>
       * @return The enum numeric value on the wire for readOverflowMode.
       */
      @java.lang.Override public int getReadOverflowModeValue() {
        return readOverflowMode_;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while reading the data.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode read_overflow_mode = 15;</code>
       * @param value The enum numeric value on the wire for readOverflowMode to set.
       * @return This builder for chaining.
       */
      public Builder setReadOverflowModeValue(int value) {
        
        readOverflowMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while reading the data.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode read_overflow_mode = 15;</code>
       * @return The readOverflowMode.
       */
      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode getReadOverflowMode() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.valueOf(readOverflowMode_);
        return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while reading the data.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode read_overflow_mode = 15;</code>
       * @param value The readOverflowMode to set.
       * @return This builder for chaining.
       */
      public Builder setReadOverflowMode(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        readOverflowMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while reading the data.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode read_overflow_mode = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearReadOverflowMode() {
        
        readOverflowMode_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Int64Value maxRowsToGroupBy_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxRowsToGroupByBuilder_;
      /**
       * <pre>
       * Limits the maximum number of unique keys received from aggregation function.
       * This setting helps to reduce RAM consumption while doing aggregation.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_group_by = 16 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the maxRowsToGroupBy field is set.
       */
      public boolean hasMaxRowsToGroupBy() {
        return maxRowsToGroupByBuilder_ != null || maxRowsToGroupBy_ != null;
      }
      /**
       * <pre>
       * Limits the maximum number of unique keys received from aggregation function.
       * This setting helps to reduce RAM consumption while doing aggregation.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_group_by = 16 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The maxRowsToGroupBy.
       */
      public com.google.protobuf.Int64Value getMaxRowsToGroupBy() {
        if (maxRowsToGroupByBuilder_ == null) {
          return maxRowsToGroupBy_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxRowsToGroupBy_;
        } else {
          return maxRowsToGroupByBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the maximum number of unique keys received from aggregation function.
       * This setting helps to reduce RAM consumption while doing aggregation.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_group_by = 16 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxRowsToGroupBy(com.google.protobuf.Int64Value value) {
        if (maxRowsToGroupByBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxRowsToGroupBy_ = value;
          onChanged();
        } else {
          maxRowsToGroupByBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of unique keys received from aggregation function.
       * This setting helps to reduce RAM consumption while doing aggregation.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_group_by = 16 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxRowsToGroupBy(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxRowsToGroupByBuilder_ == null) {
          maxRowsToGroupBy_ = builderForValue.build();
          onChanged();
        } else {
          maxRowsToGroupByBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of unique keys received from aggregation function.
       * This setting helps to reduce RAM consumption while doing aggregation.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_group_by = 16 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMaxRowsToGroupBy(com.google.protobuf.Int64Value value) {
        if (maxRowsToGroupByBuilder_ == null) {
          if (maxRowsToGroupBy_ != null) {
            maxRowsToGroupBy_ =
              com.google.protobuf.Int64Value.newBuilder(maxRowsToGroupBy_).mergeFrom(value).buildPartial();
          } else {
            maxRowsToGroupBy_ = value;
          }
          onChanged();
        } else {
          maxRowsToGroupByBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of unique keys received from aggregation function.
       * This setting helps to reduce RAM consumption while doing aggregation.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_group_by = 16 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMaxRowsToGroupBy() {
        if (maxRowsToGroupByBuilder_ == null) {
          maxRowsToGroupBy_ = null;
          onChanged();
        } else {
          maxRowsToGroupBy_ = null;
          maxRowsToGroupByBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of unique keys received from aggregation function.
       * This setting helps to reduce RAM consumption while doing aggregation.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_group_by = 16 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxRowsToGroupByBuilder() {
        
        onChanged();
        return getMaxRowsToGroupByFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the maximum number of unique keys received from aggregation function.
       * This setting helps to reduce RAM consumption while doing aggregation.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_group_by = 16 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxRowsToGroupByOrBuilder() {
        if (maxRowsToGroupByBuilder_ != null) {
          return maxRowsToGroupByBuilder_.getMessageOrBuilder();
        } else {
          return maxRowsToGroupBy_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxRowsToGroupBy_;
        }
      }
      /**
       * <pre>
       * Limits the maximum number of unique keys received from aggregation function.
       * This setting helps to reduce RAM consumption while doing aggregation.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_group_by = 16 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxRowsToGroupByFieldBuilder() {
        if (maxRowsToGroupByBuilder_ == null) {
          maxRowsToGroupByBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxRowsToGroupBy(),
                  getParentForChildren(),
                  isClean());
          maxRowsToGroupBy_ = null;
        }
        return maxRowsToGroupByBuilder_;
      }

      private int groupByOverflowMode_ = 0;
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing aggregation.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * * **any**-perform approximate **GROUP BY** operation by continuing aggregation for the keys that got into the set, but don't add new keys to the set.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.GroupByOverflowMode group_by_overflow_mode = 17;</code>
       * @return The enum numeric value on the wire for groupByOverflowMode.
       */
      @java.lang.Override public int getGroupByOverflowModeValue() {
        return groupByOverflowMode_;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing aggregation.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * * **any**-perform approximate **GROUP BY** operation by continuing aggregation for the keys that got into the set, but don't add new keys to the set.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.GroupByOverflowMode group_by_overflow_mode = 17;</code>
       * @param value The enum numeric value on the wire for groupByOverflowMode to set.
       * @return This builder for chaining.
       */
      public Builder setGroupByOverflowModeValue(int value) {
        
        groupByOverflowMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing aggregation.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * * **any**-perform approximate **GROUP BY** operation by continuing aggregation for the keys that got into the set, but don't add new keys to the set.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.GroupByOverflowMode group_by_overflow_mode = 17;</code>
       * @return The groupByOverflowMode.
       */
      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.GroupByOverflowMode getGroupByOverflowMode() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.GroupByOverflowMode result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.GroupByOverflowMode.valueOf(groupByOverflowMode_);
        return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.GroupByOverflowMode.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing aggregation.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * * **any**-perform approximate **GROUP BY** operation by continuing aggregation for the keys that got into the set, but don't add new keys to the set.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.GroupByOverflowMode group_by_overflow_mode = 17;</code>
       * @param value The groupByOverflowMode to set.
       * @return This builder for chaining.
       */
      public Builder setGroupByOverflowMode(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.GroupByOverflowMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        groupByOverflowMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing aggregation.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * * **any**-perform approximate **GROUP BY** operation by continuing aggregation for the keys that got into the set, but don't add new keys to the set.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.GroupByOverflowMode group_by_overflow_mode = 17;</code>
       * @return This builder for chaining.
       */
      public Builder clearGroupByOverflowMode() {
        
        groupByOverflowMode_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Int64Value maxRowsToSort_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxRowsToSortBuilder_;
      /**
       * <pre>
       * Limits the maximum number of rows that can be read from a table for sorting.
       * This setting helps to reduce RAM consumption.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_sort = 18 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the maxRowsToSort field is set.
       */
      public boolean hasMaxRowsToSort() {
        return maxRowsToSortBuilder_ != null || maxRowsToSort_ != null;
      }
      /**
       * <pre>
       * Limits the maximum number of rows that can be read from a table for sorting.
       * This setting helps to reduce RAM consumption.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_sort = 18 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The maxRowsToSort.
       */
      public com.google.protobuf.Int64Value getMaxRowsToSort() {
        if (maxRowsToSortBuilder_ == null) {
          return maxRowsToSort_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxRowsToSort_;
        } else {
          return maxRowsToSortBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the maximum number of rows that can be read from a table for sorting.
       * This setting helps to reduce RAM consumption.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_sort = 18 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxRowsToSort(com.google.protobuf.Int64Value value) {
        if (maxRowsToSortBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxRowsToSort_ = value;
          onChanged();
        } else {
          maxRowsToSortBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of rows that can be read from a table for sorting.
       * This setting helps to reduce RAM consumption.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_sort = 18 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxRowsToSort(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxRowsToSortBuilder_ == null) {
          maxRowsToSort_ = builderForValue.build();
          onChanged();
        } else {
          maxRowsToSortBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of rows that can be read from a table for sorting.
       * This setting helps to reduce RAM consumption.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_sort = 18 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMaxRowsToSort(com.google.protobuf.Int64Value value) {
        if (maxRowsToSortBuilder_ == null) {
          if (maxRowsToSort_ != null) {
            maxRowsToSort_ =
              com.google.protobuf.Int64Value.newBuilder(maxRowsToSort_).mergeFrom(value).buildPartial();
          } else {
            maxRowsToSort_ = value;
          }
          onChanged();
        } else {
          maxRowsToSortBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of rows that can be read from a table for sorting.
       * This setting helps to reduce RAM consumption.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_sort = 18 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMaxRowsToSort() {
        if (maxRowsToSortBuilder_ == null) {
          maxRowsToSort_ = null;
          onChanged();
        } else {
          maxRowsToSort_ = null;
          maxRowsToSortBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of rows that can be read from a table for sorting.
       * This setting helps to reduce RAM consumption.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_sort = 18 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxRowsToSortBuilder() {
        
        onChanged();
        return getMaxRowsToSortFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the maximum number of rows that can be read from a table for sorting.
       * This setting helps to reduce RAM consumption.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_sort = 18 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxRowsToSortOrBuilder() {
        if (maxRowsToSortBuilder_ != null) {
          return maxRowsToSortBuilder_.getMessageOrBuilder();
        } else {
          return maxRowsToSort_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxRowsToSort_;
        }
      }
      /**
       * <pre>
       * Limits the maximum number of rows that can be read from a table for sorting.
       * This setting helps to reduce RAM consumption.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_sort = 18 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxRowsToSortFieldBuilder() {
        if (maxRowsToSortBuilder_ == null) {
          maxRowsToSortBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxRowsToSort(),
                  getParentForChildren(),
                  isClean());
          maxRowsToSort_ = null;
        }
        return maxRowsToSortBuilder_;
      }

      private com.google.protobuf.Int64Value maxBytesToSort_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxBytesToSortBuilder_;
      /**
       * <pre>
       * Limits the maximum number of bytes (uncompressed data) that can be read from a table for sorting.
       * This setting helps to reduce RAM consumption.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_sort = 19 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the maxBytesToSort field is set.
       */
      public boolean hasMaxBytesToSort() {
        return maxBytesToSortBuilder_ != null || maxBytesToSort_ != null;
      }
      /**
       * <pre>
       * Limits the maximum number of bytes (uncompressed data) that can be read from a table for sorting.
       * This setting helps to reduce RAM consumption.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_sort = 19 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The maxBytesToSort.
       */
      public com.google.protobuf.Int64Value getMaxBytesToSort() {
        if (maxBytesToSortBuilder_ == null) {
          return maxBytesToSort_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxBytesToSort_;
        } else {
          return maxBytesToSortBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the maximum number of bytes (uncompressed data) that can be read from a table for sorting.
       * This setting helps to reduce RAM consumption.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_sort = 19 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxBytesToSort(com.google.protobuf.Int64Value value) {
        if (maxBytesToSortBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxBytesToSort_ = value;
          onChanged();
        } else {
          maxBytesToSortBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of bytes (uncompressed data) that can be read from a table for sorting.
       * This setting helps to reduce RAM consumption.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_sort = 19 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxBytesToSort(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxBytesToSortBuilder_ == null) {
          maxBytesToSort_ = builderForValue.build();
          onChanged();
        } else {
          maxBytesToSortBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of bytes (uncompressed data) that can be read from a table for sorting.
       * This setting helps to reduce RAM consumption.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_sort = 19 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMaxBytesToSort(com.google.protobuf.Int64Value value) {
        if (maxBytesToSortBuilder_ == null) {
          if (maxBytesToSort_ != null) {
            maxBytesToSort_ =
              com.google.protobuf.Int64Value.newBuilder(maxBytesToSort_).mergeFrom(value).buildPartial();
          } else {
            maxBytesToSort_ = value;
          }
          onChanged();
        } else {
          maxBytesToSortBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of bytes (uncompressed data) that can be read from a table for sorting.
       * This setting helps to reduce RAM consumption.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_sort = 19 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMaxBytesToSort() {
        if (maxBytesToSortBuilder_ == null) {
          maxBytesToSort_ = null;
          onChanged();
        } else {
          maxBytesToSort_ = null;
          maxBytesToSortBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of bytes (uncompressed data) that can be read from a table for sorting.
       * This setting helps to reduce RAM consumption.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_sort = 19 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxBytesToSortBuilder() {
        
        onChanged();
        return getMaxBytesToSortFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the maximum number of bytes (uncompressed data) that can be read from a table for sorting.
       * This setting helps to reduce RAM consumption.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_sort = 19 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxBytesToSortOrBuilder() {
        if (maxBytesToSortBuilder_ != null) {
          return maxBytesToSortBuilder_.getMessageOrBuilder();
        } else {
          return maxBytesToSort_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxBytesToSort_;
        }
      }
      /**
       * <pre>
       * Limits the maximum number of bytes (uncompressed data) that can be read from a table for sorting.
       * This setting helps to reduce RAM consumption.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_sort = 19 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxBytesToSortFieldBuilder() {
        if (maxBytesToSortBuilder_ == null) {
          maxBytesToSortBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxBytesToSort(),
                  getParentForChildren(),
                  isClean());
          maxBytesToSort_ = null;
        }
        return maxBytesToSortBuilder_;
      }

      private int sortOverflowMode_ = 0;
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while sorting.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode sort_overflow_mode = 20;</code>
       * @return The enum numeric value on the wire for sortOverflowMode.
       */
      @java.lang.Override public int getSortOverflowModeValue() {
        return sortOverflowMode_;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while sorting.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode sort_overflow_mode = 20;</code>
       * @param value The enum numeric value on the wire for sortOverflowMode to set.
       * @return This builder for chaining.
       */
      public Builder setSortOverflowModeValue(int value) {
        
        sortOverflowMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while sorting.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode sort_overflow_mode = 20;</code>
       * @return The sortOverflowMode.
       */
      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode getSortOverflowMode() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.valueOf(sortOverflowMode_);
        return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while sorting.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode sort_overflow_mode = 20;</code>
       * @param value The sortOverflowMode to set.
       * @return This builder for chaining.
       */
      public Builder setSortOverflowMode(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        sortOverflowMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while sorting.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode sort_overflow_mode = 20;</code>
       * @return This builder for chaining.
       */
      public Builder clearSortOverflowMode() {
        
        sortOverflowMode_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Int64Value maxResultRows_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxResultRowsBuilder_;
      /**
       * <pre>
       * Limits the number of rows in the result.
       * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_result_rows = 21 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the maxResultRows field is set.
       */
      public boolean hasMaxResultRows() {
        return maxResultRowsBuilder_ != null || maxResultRows_ != null;
      }
      /**
       * <pre>
       * Limits the number of rows in the result.
       * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_result_rows = 21 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The maxResultRows.
       */
      public com.google.protobuf.Int64Value getMaxResultRows() {
        if (maxResultRowsBuilder_ == null) {
          return maxResultRows_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxResultRows_;
        } else {
          return maxResultRowsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the number of rows in the result.
       * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_result_rows = 21 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxResultRows(com.google.protobuf.Int64Value value) {
        if (maxResultRowsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxResultRows_ = value;
          onChanged();
        } else {
          maxResultRowsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the number of rows in the result.
       * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_result_rows = 21 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxResultRows(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxResultRowsBuilder_ == null) {
          maxResultRows_ = builderForValue.build();
          onChanged();
        } else {
          maxResultRowsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the number of rows in the result.
       * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_result_rows = 21 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMaxResultRows(com.google.protobuf.Int64Value value) {
        if (maxResultRowsBuilder_ == null) {
          if (maxResultRows_ != null) {
            maxResultRows_ =
              com.google.protobuf.Int64Value.newBuilder(maxResultRows_).mergeFrom(value).buildPartial();
          } else {
            maxResultRows_ = value;
          }
          onChanged();
        } else {
          maxResultRowsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the number of rows in the result.
       * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_result_rows = 21 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMaxResultRows() {
        if (maxResultRowsBuilder_ == null) {
          maxResultRows_ = null;
          onChanged();
        } else {
          maxResultRows_ = null;
          maxResultRowsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the number of rows in the result.
       * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_result_rows = 21 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxResultRowsBuilder() {
        
        onChanged();
        return getMaxResultRowsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the number of rows in the result.
       * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_result_rows = 21 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxResultRowsOrBuilder() {
        if (maxResultRowsBuilder_ != null) {
          return maxResultRowsBuilder_.getMessageOrBuilder();
        } else {
          return maxResultRows_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxResultRows_;
        }
      }
      /**
       * <pre>
       * Limits the number of rows in the result.
       * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_result_rows = 21 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxResultRowsFieldBuilder() {
        if (maxResultRowsBuilder_ == null) {
          maxResultRowsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxResultRows(),
                  getParentForChildren(),
                  isClean());
          maxResultRows_ = null;
        }
        return maxResultRowsBuilder_;
      }

      private com.google.protobuf.Int64Value maxResultBytes_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxResultBytesBuilder_;
      /**
       * <pre>
       * Limits the number of bytes in the result.
       * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_result_bytes = 22 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the maxResultBytes field is set.
       */
      public boolean hasMaxResultBytes() {
        return maxResultBytesBuilder_ != null || maxResultBytes_ != null;
      }
      /**
       * <pre>
       * Limits the number of bytes in the result.
       * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_result_bytes = 22 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The maxResultBytes.
       */
      public com.google.protobuf.Int64Value getMaxResultBytes() {
        if (maxResultBytesBuilder_ == null) {
          return maxResultBytes_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxResultBytes_;
        } else {
          return maxResultBytesBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the number of bytes in the result.
       * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_result_bytes = 22 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxResultBytes(com.google.protobuf.Int64Value value) {
        if (maxResultBytesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxResultBytes_ = value;
          onChanged();
        } else {
          maxResultBytesBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the number of bytes in the result.
       * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_result_bytes = 22 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxResultBytes(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxResultBytesBuilder_ == null) {
          maxResultBytes_ = builderForValue.build();
          onChanged();
        } else {
          maxResultBytesBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the number of bytes in the result.
       * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_result_bytes = 22 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMaxResultBytes(com.google.protobuf.Int64Value value) {
        if (maxResultBytesBuilder_ == null) {
          if (maxResultBytes_ != null) {
            maxResultBytes_ =
              com.google.protobuf.Int64Value.newBuilder(maxResultBytes_).mergeFrom(value).buildPartial();
          } else {
            maxResultBytes_ = value;
          }
          onChanged();
        } else {
          maxResultBytesBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the number of bytes in the result.
       * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_result_bytes = 22 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMaxResultBytes() {
        if (maxResultBytesBuilder_ == null) {
          maxResultBytes_ = null;
          onChanged();
        } else {
          maxResultBytes_ = null;
          maxResultBytesBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the number of bytes in the result.
       * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_result_bytes = 22 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxResultBytesBuilder() {
        
        onChanged();
        return getMaxResultBytesFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the number of bytes in the result.
       * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_result_bytes = 22 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxResultBytesOrBuilder() {
        if (maxResultBytesBuilder_ != null) {
          return maxResultBytesBuilder_.getMessageOrBuilder();
        } else {
          return maxResultBytes_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxResultBytes_;
        }
      }
      /**
       * <pre>
       * Limits the number of bytes in the result.
       * This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_result_bytes = 22 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxResultBytesFieldBuilder() {
        if (maxResultBytesBuilder_ == null) {
          maxResultBytesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxResultBytes(),
                  getParentForChildren(),
                  isClean());
          maxResultBytes_ = null;
        }
        return maxResultBytesBuilder_;
      }

      private int resultOverflowMode_ = 0;
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while forming result.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode result_overflow_mode = 23;</code>
       * @return The enum numeric value on the wire for resultOverflowMode.
       */
      @java.lang.Override public int getResultOverflowModeValue() {
        return resultOverflowMode_;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while forming result.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode result_overflow_mode = 23;</code>
       * @param value The enum numeric value on the wire for resultOverflowMode to set.
       * @return This builder for chaining.
       */
      public Builder setResultOverflowModeValue(int value) {
        
        resultOverflowMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while forming result.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode result_overflow_mode = 23;</code>
       * @return The resultOverflowMode.
       */
      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode getResultOverflowMode() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.valueOf(resultOverflowMode_);
        return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while forming result.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode result_overflow_mode = 23;</code>
       * @param value The resultOverflowMode to set.
       * @return This builder for chaining.
       */
      public Builder setResultOverflowMode(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        resultOverflowMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while forming result.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode result_overflow_mode = 23;</code>
       * @return This builder for chaining.
       */
      public Builder clearResultOverflowMode() {
        
        resultOverflowMode_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Int64Value maxRowsInDistinct_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxRowsInDistinctBuilder_;
      /**
       * <pre>
       * Limits the maximum number of different rows when using **DISTINCT**.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_in_distinct = 24 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the maxRowsInDistinct field is set.
       */
      public boolean hasMaxRowsInDistinct() {
        return maxRowsInDistinctBuilder_ != null || maxRowsInDistinct_ != null;
      }
      /**
       * <pre>
       * Limits the maximum number of different rows when using **DISTINCT**.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_in_distinct = 24 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The maxRowsInDistinct.
       */
      public com.google.protobuf.Int64Value getMaxRowsInDistinct() {
        if (maxRowsInDistinctBuilder_ == null) {
          return maxRowsInDistinct_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxRowsInDistinct_;
        } else {
          return maxRowsInDistinctBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the maximum number of different rows when using **DISTINCT**.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_in_distinct = 24 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxRowsInDistinct(com.google.protobuf.Int64Value value) {
        if (maxRowsInDistinctBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxRowsInDistinct_ = value;
          onChanged();
        } else {
          maxRowsInDistinctBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of different rows when using **DISTINCT**.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_in_distinct = 24 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxRowsInDistinct(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxRowsInDistinctBuilder_ == null) {
          maxRowsInDistinct_ = builderForValue.build();
          onChanged();
        } else {
          maxRowsInDistinctBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of different rows when using **DISTINCT**.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_in_distinct = 24 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMaxRowsInDistinct(com.google.protobuf.Int64Value value) {
        if (maxRowsInDistinctBuilder_ == null) {
          if (maxRowsInDistinct_ != null) {
            maxRowsInDistinct_ =
              com.google.protobuf.Int64Value.newBuilder(maxRowsInDistinct_).mergeFrom(value).buildPartial();
          } else {
            maxRowsInDistinct_ = value;
          }
          onChanged();
        } else {
          maxRowsInDistinctBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of different rows when using **DISTINCT**.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_in_distinct = 24 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMaxRowsInDistinct() {
        if (maxRowsInDistinctBuilder_ == null) {
          maxRowsInDistinct_ = null;
          onChanged();
        } else {
          maxRowsInDistinct_ = null;
          maxRowsInDistinctBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of different rows when using **DISTINCT**.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_in_distinct = 24 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxRowsInDistinctBuilder() {
        
        onChanged();
        return getMaxRowsInDistinctFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the maximum number of different rows when using **DISTINCT**.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_in_distinct = 24 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxRowsInDistinctOrBuilder() {
        if (maxRowsInDistinctBuilder_ != null) {
          return maxRowsInDistinctBuilder_.getMessageOrBuilder();
        } else {
          return maxRowsInDistinct_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxRowsInDistinct_;
        }
      }
      /**
       * <pre>
       * Limits the maximum number of different rows when using **DISTINCT**.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_in_distinct = 24 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxRowsInDistinctFieldBuilder() {
        if (maxRowsInDistinctBuilder_ == null) {
          maxRowsInDistinctBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxRowsInDistinct(),
                  getParentForChildren(),
                  isClean());
          maxRowsInDistinct_ = null;
        }
        return maxRowsInDistinctBuilder_;
      }

      private com.google.protobuf.Int64Value maxBytesInDistinct_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxBytesInDistinctBuilder_;
      /**
       * <pre>
       * Limits the maximum size of a hash table in bytes (uncompressed data) when using **DISTINCT**.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_in_distinct = 25 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the maxBytesInDistinct field is set.
       */
      public boolean hasMaxBytesInDistinct() {
        return maxBytesInDistinctBuilder_ != null || maxBytesInDistinct_ != null;
      }
      /**
       * <pre>
       * Limits the maximum size of a hash table in bytes (uncompressed data) when using **DISTINCT**.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_in_distinct = 25 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The maxBytesInDistinct.
       */
      public com.google.protobuf.Int64Value getMaxBytesInDistinct() {
        if (maxBytesInDistinctBuilder_ == null) {
          return maxBytesInDistinct_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxBytesInDistinct_;
        } else {
          return maxBytesInDistinctBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the maximum size of a hash table in bytes (uncompressed data) when using **DISTINCT**.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_in_distinct = 25 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxBytesInDistinct(com.google.protobuf.Int64Value value) {
        if (maxBytesInDistinctBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxBytesInDistinct_ = value;
          onChanged();
        } else {
          maxBytesInDistinctBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum size of a hash table in bytes (uncompressed data) when using **DISTINCT**.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_in_distinct = 25 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxBytesInDistinct(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxBytesInDistinctBuilder_ == null) {
          maxBytesInDistinct_ = builderForValue.build();
          onChanged();
        } else {
          maxBytesInDistinctBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum size of a hash table in bytes (uncompressed data) when using **DISTINCT**.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_in_distinct = 25 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMaxBytesInDistinct(com.google.protobuf.Int64Value value) {
        if (maxBytesInDistinctBuilder_ == null) {
          if (maxBytesInDistinct_ != null) {
            maxBytesInDistinct_ =
              com.google.protobuf.Int64Value.newBuilder(maxBytesInDistinct_).mergeFrom(value).buildPartial();
          } else {
            maxBytesInDistinct_ = value;
          }
          onChanged();
        } else {
          maxBytesInDistinctBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum size of a hash table in bytes (uncompressed data) when using **DISTINCT**.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_in_distinct = 25 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMaxBytesInDistinct() {
        if (maxBytesInDistinctBuilder_ == null) {
          maxBytesInDistinct_ = null;
          onChanged();
        } else {
          maxBytesInDistinct_ = null;
          maxBytesInDistinctBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum size of a hash table in bytes (uncompressed data) when using **DISTINCT**.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_in_distinct = 25 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxBytesInDistinctBuilder() {
        
        onChanged();
        return getMaxBytesInDistinctFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the maximum size of a hash table in bytes (uncompressed data) when using **DISTINCT**.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_in_distinct = 25 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxBytesInDistinctOrBuilder() {
        if (maxBytesInDistinctBuilder_ != null) {
          return maxBytesInDistinctBuilder_.getMessageOrBuilder();
        } else {
          return maxBytesInDistinct_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxBytesInDistinct_;
        }
      }
      /**
       * <pre>
       * Limits the maximum size of a hash table in bytes (uncompressed data) when using **DISTINCT**.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_in_distinct = 25 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxBytesInDistinctFieldBuilder() {
        if (maxBytesInDistinctBuilder_ == null) {
          maxBytesInDistinctBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxBytesInDistinct(),
                  getParentForChildren(),
                  isClean());
          maxBytesInDistinct_ = null;
        }
        return maxBytesInDistinctBuilder_;
      }

      private int distinctOverflowMode_ = 0;
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing **DISCTINCT**.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode distinct_overflow_mode = 26;</code>
       * @return The enum numeric value on the wire for distinctOverflowMode.
       */
      @java.lang.Override public int getDistinctOverflowModeValue() {
        return distinctOverflowMode_;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing **DISCTINCT**.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode distinct_overflow_mode = 26;</code>
       * @param value The enum numeric value on the wire for distinctOverflowMode to set.
       * @return This builder for chaining.
       */
      public Builder setDistinctOverflowModeValue(int value) {
        
        distinctOverflowMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing **DISCTINCT**.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode distinct_overflow_mode = 26;</code>
       * @return The distinctOverflowMode.
       */
      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode getDistinctOverflowMode() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.valueOf(distinctOverflowMode_);
        return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing **DISCTINCT**.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode distinct_overflow_mode = 26;</code>
       * @param value The distinctOverflowMode to set.
       * @return This builder for chaining.
       */
      public Builder setDistinctOverflowMode(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        distinctOverflowMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing **DISCTINCT**.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode distinct_overflow_mode = 26;</code>
       * @return This builder for chaining.
       */
      public Builder clearDistinctOverflowMode() {
        
        distinctOverflowMode_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Int64Value maxRowsToTransfer_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxRowsToTransferBuilder_;
      /**
       * <pre>
       * Limits the maximum number of rows that can be passed to a remote server or saved in a temporary table when using **GLOBAL IN**.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_transfer = 27 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the maxRowsToTransfer field is set.
       */
      public boolean hasMaxRowsToTransfer() {
        return maxRowsToTransferBuilder_ != null || maxRowsToTransfer_ != null;
      }
      /**
       * <pre>
       * Limits the maximum number of rows that can be passed to a remote server or saved in a temporary table when using **GLOBAL IN**.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_transfer = 27 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The maxRowsToTransfer.
       */
      public com.google.protobuf.Int64Value getMaxRowsToTransfer() {
        if (maxRowsToTransferBuilder_ == null) {
          return maxRowsToTransfer_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxRowsToTransfer_;
        } else {
          return maxRowsToTransferBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the maximum number of rows that can be passed to a remote server or saved in a temporary table when using **GLOBAL IN**.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_transfer = 27 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxRowsToTransfer(com.google.protobuf.Int64Value value) {
        if (maxRowsToTransferBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxRowsToTransfer_ = value;
          onChanged();
        } else {
          maxRowsToTransferBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of rows that can be passed to a remote server or saved in a temporary table when using **GLOBAL IN**.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_transfer = 27 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxRowsToTransfer(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxRowsToTransferBuilder_ == null) {
          maxRowsToTransfer_ = builderForValue.build();
          onChanged();
        } else {
          maxRowsToTransferBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of rows that can be passed to a remote server or saved in a temporary table when using **GLOBAL IN**.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_transfer = 27 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMaxRowsToTransfer(com.google.protobuf.Int64Value value) {
        if (maxRowsToTransferBuilder_ == null) {
          if (maxRowsToTransfer_ != null) {
            maxRowsToTransfer_ =
              com.google.protobuf.Int64Value.newBuilder(maxRowsToTransfer_).mergeFrom(value).buildPartial();
          } else {
            maxRowsToTransfer_ = value;
          }
          onChanged();
        } else {
          maxRowsToTransferBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of rows that can be passed to a remote server or saved in a temporary table when using **GLOBAL IN**.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_transfer = 27 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMaxRowsToTransfer() {
        if (maxRowsToTransferBuilder_ == null) {
          maxRowsToTransfer_ = null;
          onChanged();
        } else {
          maxRowsToTransfer_ = null;
          maxRowsToTransferBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of rows that can be passed to a remote server or saved in a temporary table when using **GLOBAL IN**.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_transfer = 27 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxRowsToTransferBuilder() {
        
        onChanged();
        return getMaxRowsToTransferFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the maximum number of rows that can be passed to a remote server or saved in a temporary table when using **GLOBAL IN**.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_transfer = 27 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxRowsToTransferOrBuilder() {
        if (maxRowsToTransferBuilder_ != null) {
          return maxRowsToTransferBuilder_.getMessageOrBuilder();
        } else {
          return maxRowsToTransfer_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxRowsToTransfer_;
        }
      }
      /**
       * <pre>
       * Limits the maximum number of rows that can be passed to a remote server or saved in a temporary table when using **GLOBAL IN**.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_to_transfer = 27 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxRowsToTransferFieldBuilder() {
        if (maxRowsToTransferBuilder_ == null) {
          maxRowsToTransferBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxRowsToTransfer(),
                  getParentForChildren(),
                  isClean());
          maxRowsToTransfer_ = null;
        }
        return maxRowsToTransferBuilder_;
      }

      private com.google.protobuf.Int64Value maxBytesToTransfer_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxBytesToTransferBuilder_;
      /**
       * <pre>
       * Limits the maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary
       * table when using **GLOBAL IN**.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_transfer = 28 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the maxBytesToTransfer field is set.
       */
      public boolean hasMaxBytesToTransfer() {
        return maxBytesToTransferBuilder_ != null || maxBytesToTransfer_ != null;
      }
      /**
       * <pre>
       * Limits the maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary
       * table when using **GLOBAL IN**.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_transfer = 28 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The maxBytesToTransfer.
       */
      public com.google.protobuf.Int64Value getMaxBytesToTransfer() {
        if (maxBytesToTransferBuilder_ == null) {
          return maxBytesToTransfer_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxBytesToTransfer_;
        } else {
          return maxBytesToTransferBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary
       * table when using **GLOBAL IN**.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_transfer = 28 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxBytesToTransfer(com.google.protobuf.Int64Value value) {
        if (maxBytesToTransferBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxBytesToTransfer_ = value;
          onChanged();
        } else {
          maxBytesToTransferBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary
       * table when using **GLOBAL IN**.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_transfer = 28 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxBytesToTransfer(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxBytesToTransferBuilder_ == null) {
          maxBytesToTransfer_ = builderForValue.build();
          onChanged();
        } else {
          maxBytesToTransferBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary
       * table when using **GLOBAL IN**.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_transfer = 28 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMaxBytesToTransfer(com.google.protobuf.Int64Value value) {
        if (maxBytesToTransferBuilder_ == null) {
          if (maxBytesToTransfer_ != null) {
            maxBytesToTransfer_ =
              com.google.protobuf.Int64Value.newBuilder(maxBytesToTransfer_).mergeFrom(value).buildPartial();
          } else {
            maxBytesToTransfer_ = value;
          }
          onChanged();
        } else {
          maxBytesToTransferBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary
       * table when using **GLOBAL IN**.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_transfer = 28 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMaxBytesToTransfer() {
        if (maxBytesToTransferBuilder_ == null) {
          maxBytesToTransfer_ = null;
          onChanged();
        } else {
          maxBytesToTransfer_ = null;
          maxBytesToTransferBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary
       * table when using **GLOBAL IN**.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_transfer = 28 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxBytesToTransferBuilder() {
        
        onChanged();
        return getMaxBytesToTransferFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary
       * table when using **GLOBAL IN**.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_transfer = 28 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxBytesToTransferOrBuilder() {
        if (maxBytesToTransferBuilder_ != null) {
          return maxBytesToTransferBuilder_.getMessageOrBuilder();
        } else {
          return maxBytesToTransfer_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxBytesToTransfer_;
        }
      }
      /**
       * <pre>
       * Limits the maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary
       * table when using **GLOBAL IN**.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_to_transfer = 28 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxBytesToTransferFieldBuilder() {
        if (maxBytesToTransferBuilder_ == null) {
          maxBytesToTransferBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxBytesToTransfer(),
                  getParentForChildren(),
                  isClean());
          maxBytesToTransfer_ = null;
        }
        return maxBytesToTransferBuilder_;
      }

      private int transferOverflowMode_ = 0;
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing transfers.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode transfer_overflow_mode = 29;</code>
       * @return The enum numeric value on the wire for transferOverflowMode.
       */
      @java.lang.Override public int getTransferOverflowModeValue() {
        return transferOverflowMode_;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing transfers.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode transfer_overflow_mode = 29;</code>
       * @param value The enum numeric value on the wire for transferOverflowMode to set.
       * @return This builder for chaining.
       */
      public Builder setTransferOverflowModeValue(int value) {
        
        transferOverflowMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing transfers.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode transfer_overflow_mode = 29;</code>
       * @return The transferOverflowMode.
       */
      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode getTransferOverflowMode() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.valueOf(transferOverflowMode_);
        return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing transfers.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode transfer_overflow_mode = 29;</code>
       * @param value The transferOverflowMode to set.
       * @return This builder for chaining.
       */
      public Builder setTransferOverflowMode(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        transferOverflowMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing transfers.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode transfer_overflow_mode = 29;</code>
       * @return This builder for chaining.
       */
      public Builder clearTransferOverflowMode() {
        
        transferOverflowMode_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Int64Value maxExecutionTime_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxExecutionTimeBuilder_;
      /**
       * <pre>
       * Limits the maximum query execution time in milliseconds.
       * At this moment, this limitation is not checked when passing one of the sorting stages, as well as merging and finalizing aggregation funictions.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_execution_time = 30 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the maxExecutionTime field is set.
       */
      public boolean hasMaxExecutionTime() {
        return maxExecutionTimeBuilder_ != null || maxExecutionTime_ != null;
      }
      /**
       * <pre>
       * Limits the maximum query execution time in milliseconds.
       * At this moment, this limitation is not checked when passing one of the sorting stages, as well as merging and finalizing aggregation funictions.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_execution_time = 30 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The maxExecutionTime.
       */
      public com.google.protobuf.Int64Value getMaxExecutionTime() {
        if (maxExecutionTimeBuilder_ == null) {
          return maxExecutionTime_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxExecutionTime_;
        } else {
          return maxExecutionTimeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the maximum query execution time in milliseconds.
       * At this moment, this limitation is not checked when passing one of the sorting stages, as well as merging and finalizing aggregation funictions.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_execution_time = 30 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxExecutionTime(com.google.protobuf.Int64Value value) {
        if (maxExecutionTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxExecutionTime_ = value;
          onChanged();
        } else {
          maxExecutionTimeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum query execution time in milliseconds.
       * At this moment, this limitation is not checked when passing one of the sorting stages, as well as merging and finalizing aggregation funictions.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_execution_time = 30 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxExecutionTime(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxExecutionTimeBuilder_ == null) {
          maxExecutionTime_ = builderForValue.build();
          onChanged();
        } else {
          maxExecutionTimeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum query execution time in milliseconds.
       * At this moment, this limitation is not checked when passing one of the sorting stages, as well as merging and finalizing aggregation funictions.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_execution_time = 30 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMaxExecutionTime(com.google.protobuf.Int64Value value) {
        if (maxExecutionTimeBuilder_ == null) {
          if (maxExecutionTime_ != null) {
            maxExecutionTime_ =
              com.google.protobuf.Int64Value.newBuilder(maxExecutionTime_).mergeFrom(value).buildPartial();
          } else {
            maxExecutionTime_ = value;
          }
          onChanged();
        } else {
          maxExecutionTimeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum query execution time in milliseconds.
       * At this moment, this limitation is not checked when passing one of the sorting stages, as well as merging and finalizing aggregation funictions.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_execution_time = 30 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMaxExecutionTime() {
        if (maxExecutionTimeBuilder_ == null) {
          maxExecutionTime_ = null;
          onChanged();
        } else {
          maxExecutionTime_ = null;
          maxExecutionTimeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum query execution time in milliseconds.
       * At this moment, this limitation is not checked when passing one of the sorting stages, as well as merging and finalizing aggregation funictions.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_execution_time = 30 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxExecutionTimeBuilder() {
        
        onChanged();
        return getMaxExecutionTimeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the maximum query execution time in milliseconds.
       * At this moment, this limitation is not checked when passing one of the sorting stages, as well as merging and finalizing aggregation funictions.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_execution_time = 30 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxExecutionTimeOrBuilder() {
        if (maxExecutionTimeBuilder_ != null) {
          return maxExecutionTimeBuilder_.getMessageOrBuilder();
        } else {
          return maxExecutionTime_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxExecutionTime_;
        }
      }
      /**
       * <pre>
       * Limits the maximum query execution time in milliseconds.
       * At this moment, this limitation is not checked when passing one of the sorting stages, as well as merging and finalizing aggregation funictions.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_execution_time = 30 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxExecutionTimeFieldBuilder() {
        if (maxExecutionTimeBuilder_ == null) {
          maxExecutionTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxExecutionTime(),
                  getParentForChildren(),
                  isClean());
          maxExecutionTime_ = null;
        }
        return maxExecutionTimeBuilder_;
      }

      private int timeoutOverflowMode_ = 0;
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) of execution time.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode timeout_overflow_mode = 31;</code>
       * @return The enum numeric value on the wire for timeoutOverflowMode.
       */
      @java.lang.Override public int getTimeoutOverflowModeValue() {
        return timeoutOverflowMode_;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) of execution time.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode timeout_overflow_mode = 31;</code>
       * @param value The enum numeric value on the wire for timeoutOverflowMode to set.
       * @return This builder for chaining.
       */
      public Builder setTimeoutOverflowModeValue(int value) {
        
        timeoutOverflowMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) of execution time.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode timeout_overflow_mode = 31;</code>
       * @return The timeoutOverflowMode.
       */
      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode getTimeoutOverflowMode() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.valueOf(timeoutOverflowMode_);
        return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) of execution time.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode timeout_overflow_mode = 31;</code>
       * @param value The timeoutOverflowMode to set.
       * @return This builder for chaining.
       */
      public Builder setTimeoutOverflowMode(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        timeoutOverflowMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) of execution time.
       * * **throw**-abort query execution, return an error.
       * * **break**-stop query execution, return partial result.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode timeout_overflow_mode = 31;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimeoutOverflowMode() {
        
        timeoutOverflowMode_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Int64Value maxRowsInSet_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxRowsInSetBuilder_;
      /**
       * <pre>
       * Limit on the number of rows in the set resulting from the execution of the IN section.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_in_set = 87 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the maxRowsInSet field is set.
       */
      public boolean hasMaxRowsInSet() {
        return maxRowsInSetBuilder_ != null || maxRowsInSet_ != null;
      }
      /**
       * <pre>
       * Limit on the number of rows in the set resulting from the execution of the IN section.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_in_set = 87 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The maxRowsInSet.
       */
      public com.google.protobuf.Int64Value getMaxRowsInSet() {
        if (maxRowsInSetBuilder_ == null) {
          return maxRowsInSet_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxRowsInSet_;
        } else {
          return maxRowsInSetBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limit on the number of rows in the set resulting from the execution of the IN section.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_in_set = 87 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxRowsInSet(com.google.protobuf.Int64Value value) {
        if (maxRowsInSetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxRowsInSet_ = value;
          onChanged();
        } else {
          maxRowsInSetBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limit on the number of rows in the set resulting from the execution of the IN section.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_in_set = 87 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxRowsInSet(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxRowsInSetBuilder_ == null) {
          maxRowsInSet_ = builderForValue.build();
          onChanged();
        } else {
          maxRowsInSetBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limit on the number of rows in the set resulting from the execution of the IN section.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_in_set = 87 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMaxRowsInSet(com.google.protobuf.Int64Value value) {
        if (maxRowsInSetBuilder_ == null) {
          if (maxRowsInSet_ != null) {
            maxRowsInSet_ =
              com.google.protobuf.Int64Value.newBuilder(maxRowsInSet_).mergeFrom(value).buildPartial();
          } else {
            maxRowsInSet_ = value;
          }
          onChanged();
        } else {
          maxRowsInSetBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limit on the number of rows in the set resulting from the execution of the IN section.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_in_set = 87 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMaxRowsInSet() {
        if (maxRowsInSetBuilder_ == null) {
          maxRowsInSet_ = null;
          onChanged();
        } else {
          maxRowsInSet_ = null;
          maxRowsInSetBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limit on the number of rows in the set resulting from the execution of the IN section.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_in_set = 87 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxRowsInSetBuilder() {
        
        onChanged();
        return getMaxRowsInSetFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limit on the number of rows in the set resulting from the execution of the IN section.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_in_set = 87 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxRowsInSetOrBuilder() {
        if (maxRowsInSetBuilder_ != null) {
          return maxRowsInSetBuilder_.getMessageOrBuilder();
        } else {
          return maxRowsInSet_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxRowsInSet_;
        }
      }
      /**
       * <pre>
       * Limit on the number of rows in the set resulting from the execution of the IN section.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_in_set = 87 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxRowsInSetFieldBuilder() {
        if (maxRowsInSetBuilder_ == null) {
          maxRowsInSetBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxRowsInSet(),
                  getParentForChildren(),
                  isClean());
          maxRowsInSet_ = null;
        }
        return maxRowsInSetBuilder_;
      }

      private com.google.protobuf.Int64Value maxBytesInSet_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxBytesInSetBuilder_;
      /**
       * <pre>
       * Limit on the number of bytes in the set resulting from the execution of the IN section.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_in_set = 88 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the maxBytesInSet field is set.
       */
      public boolean hasMaxBytesInSet() {
        return maxBytesInSetBuilder_ != null || maxBytesInSet_ != null;
      }
      /**
       * <pre>
       * Limit on the number of bytes in the set resulting from the execution of the IN section.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_in_set = 88 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The maxBytesInSet.
       */
      public com.google.protobuf.Int64Value getMaxBytesInSet() {
        if (maxBytesInSetBuilder_ == null) {
          return maxBytesInSet_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxBytesInSet_;
        } else {
          return maxBytesInSetBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limit on the number of bytes in the set resulting from the execution of the IN section.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_in_set = 88 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxBytesInSet(com.google.protobuf.Int64Value value) {
        if (maxBytesInSetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxBytesInSet_ = value;
          onChanged();
        } else {
          maxBytesInSetBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limit on the number of bytes in the set resulting from the execution of the IN section.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_in_set = 88 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxBytesInSet(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxBytesInSetBuilder_ == null) {
          maxBytesInSet_ = builderForValue.build();
          onChanged();
        } else {
          maxBytesInSetBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limit on the number of bytes in the set resulting from the execution of the IN section.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_in_set = 88 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMaxBytesInSet(com.google.protobuf.Int64Value value) {
        if (maxBytesInSetBuilder_ == null) {
          if (maxBytesInSet_ != null) {
            maxBytesInSet_ =
              com.google.protobuf.Int64Value.newBuilder(maxBytesInSet_).mergeFrom(value).buildPartial();
          } else {
            maxBytesInSet_ = value;
          }
          onChanged();
        } else {
          maxBytesInSetBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limit on the number of bytes in the set resulting from the execution of the IN section.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_in_set = 88 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMaxBytesInSet() {
        if (maxBytesInSetBuilder_ == null) {
          maxBytesInSet_ = null;
          onChanged();
        } else {
          maxBytesInSet_ = null;
          maxBytesInSetBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limit on the number of bytes in the set resulting from the execution of the IN section.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_in_set = 88 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxBytesInSetBuilder() {
        
        onChanged();
        return getMaxBytesInSetFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limit on the number of bytes in the set resulting from the execution of the IN section.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_in_set = 88 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxBytesInSetOrBuilder() {
        if (maxBytesInSetBuilder_ != null) {
          return maxBytesInSetBuilder_.getMessageOrBuilder();
        } else {
          return maxBytesInSet_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxBytesInSet_;
        }
      }
      /**
       * <pre>
       * Limit on the number of bytes in the set resulting from the execution of the IN section.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_in_set = 88 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxBytesInSetFieldBuilder() {
        if (maxBytesInSetBuilder_ == null) {
          maxBytesInSetBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxBytesInSet(),
                  getParentForChildren(),
                  isClean());
          maxBytesInSet_ = null;
        }
        return maxBytesInSetBuilder_;
      }

      private int setOverflowMode_ = 0;
      /**
       * <pre>
       * Determine the behavior on exceeding max_rows_in_set or max_bytes_in_set limit.
       * Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode set_overflow_mode = 89;</code>
       * @return The enum numeric value on the wire for setOverflowMode.
       */
      @java.lang.Override public int getSetOverflowModeValue() {
        return setOverflowMode_;
      }
      /**
       * <pre>
       * Determine the behavior on exceeding max_rows_in_set or max_bytes_in_set limit.
       * Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode set_overflow_mode = 89;</code>
       * @param value The enum numeric value on the wire for setOverflowMode to set.
       * @return This builder for chaining.
       */
      public Builder setSetOverflowModeValue(int value) {
        
        setOverflowMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Determine the behavior on exceeding max_rows_in_set or max_bytes_in_set limit.
       * Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode set_overflow_mode = 89;</code>
       * @return The setOverflowMode.
       */
      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode getSetOverflowMode() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.valueOf(setOverflowMode_);
        return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Determine the behavior on exceeding max_rows_in_set or max_bytes_in_set limit.
       * Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode set_overflow_mode = 89;</code>
       * @param value The setOverflowMode to set.
       * @return This builder for chaining.
       */
      public Builder setSetOverflowMode(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        setOverflowMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Determine the behavior on exceeding max_rows_in_set or max_bytes_in_set limit.
       * Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode set_overflow_mode = 89;</code>
       * @return This builder for chaining.
       */
      public Builder clearSetOverflowMode() {
        
        setOverflowMode_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Int64Value maxRowsInJoin_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxRowsInJoinBuilder_;
      /**
       * <pre>
       * Limit on maximum size of the hash table for JOIN, in rows.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_in_join = 90 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the maxRowsInJoin field is set.
       */
      public boolean hasMaxRowsInJoin() {
        return maxRowsInJoinBuilder_ != null || maxRowsInJoin_ != null;
      }
      /**
       * <pre>
       * Limit on maximum size of the hash table for JOIN, in rows.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_in_join = 90 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The maxRowsInJoin.
       */
      public com.google.protobuf.Int64Value getMaxRowsInJoin() {
        if (maxRowsInJoinBuilder_ == null) {
          return maxRowsInJoin_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxRowsInJoin_;
        } else {
          return maxRowsInJoinBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limit on maximum size of the hash table for JOIN, in rows.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_in_join = 90 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxRowsInJoin(com.google.protobuf.Int64Value value) {
        if (maxRowsInJoinBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxRowsInJoin_ = value;
          onChanged();
        } else {
          maxRowsInJoinBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limit on maximum size of the hash table for JOIN, in rows.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_in_join = 90 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxRowsInJoin(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxRowsInJoinBuilder_ == null) {
          maxRowsInJoin_ = builderForValue.build();
          onChanged();
        } else {
          maxRowsInJoinBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limit on maximum size of the hash table for JOIN, in rows.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_in_join = 90 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMaxRowsInJoin(com.google.protobuf.Int64Value value) {
        if (maxRowsInJoinBuilder_ == null) {
          if (maxRowsInJoin_ != null) {
            maxRowsInJoin_ =
              com.google.protobuf.Int64Value.newBuilder(maxRowsInJoin_).mergeFrom(value).buildPartial();
          } else {
            maxRowsInJoin_ = value;
          }
          onChanged();
        } else {
          maxRowsInJoinBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limit on maximum size of the hash table for JOIN, in rows.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_in_join = 90 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMaxRowsInJoin() {
        if (maxRowsInJoinBuilder_ == null) {
          maxRowsInJoin_ = null;
          onChanged();
        } else {
          maxRowsInJoin_ = null;
          maxRowsInJoinBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limit on maximum size of the hash table for JOIN, in rows.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_in_join = 90 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxRowsInJoinBuilder() {
        
        onChanged();
        return getMaxRowsInJoinFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limit on maximum size of the hash table for JOIN, in rows.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_in_join = 90 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxRowsInJoinOrBuilder() {
        if (maxRowsInJoinBuilder_ != null) {
          return maxRowsInJoinBuilder_.getMessageOrBuilder();
        } else {
          return maxRowsInJoin_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxRowsInJoin_;
        }
      }
      /**
       * <pre>
       * Limit on maximum size of the hash table for JOIN, in rows.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_rows_in_join = 90 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxRowsInJoinFieldBuilder() {
        if (maxRowsInJoinBuilder_ == null) {
          maxRowsInJoinBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxRowsInJoin(),
                  getParentForChildren(),
                  isClean());
          maxRowsInJoin_ = null;
        }
        return maxRowsInJoinBuilder_;
      }

      private com.google.protobuf.Int64Value maxBytesInJoin_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxBytesInJoinBuilder_;
      /**
       * <pre>
       * Limit on maximum size of the hash table for JOIN, in bytes.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_in_join = 91 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the maxBytesInJoin field is set.
       */
      public boolean hasMaxBytesInJoin() {
        return maxBytesInJoinBuilder_ != null || maxBytesInJoin_ != null;
      }
      /**
       * <pre>
       * Limit on maximum size of the hash table for JOIN, in bytes.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_in_join = 91 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The maxBytesInJoin.
       */
      public com.google.protobuf.Int64Value getMaxBytesInJoin() {
        if (maxBytesInJoinBuilder_ == null) {
          return maxBytesInJoin_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxBytesInJoin_;
        } else {
          return maxBytesInJoinBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limit on maximum size of the hash table for JOIN, in bytes.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_in_join = 91 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxBytesInJoin(com.google.protobuf.Int64Value value) {
        if (maxBytesInJoinBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxBytesInJoin_ = value;
          onChanged();
        } else {
          maxBytesInJoinBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limit on maximum size of the hash table for JOIN, in bytes.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_in_join = 91 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxBytesInJoin(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxBytesInJoinBuilder_ == null) {
          maxBytesInJoin_ = builderForValue.build();
          onChanged();
        } else {
          maxBytesInJoinBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limit on maximum size of the hash table for JOIN, in bytes.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_in_join = 91 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMaxBytesInJoin(com.google.protobuf.Int64Value value) {
        if (maxBytesInJoinBuilder_ == null) {
          if (maxBytesInJoin_ != null) {
            maxBytesInJoin_ =
              com.google.protobuf.Int64Value.newBuilder(maxBytesInJoin_).mergeFrom(value).buildPartial();
          } else {
            maxBytesInJoin_ = value;
          }
          onChanged();
        } else {
          maxBytesInJoinBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limit on maximum size of the hash table for JOIN, in bytes.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_in_join = 91 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMaxBytesInJoin() {
        if (maxBytesInJoinBuilder_ == null) {
          maxBytesInJoin_ = null;
          onChanged();
        } else {
          maxBytesInJoin_ = null;
          maxBytesInJoinBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limit on maximum size of the hash table for JOIN, in bytes.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_in_join = 91 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxBytesInJoinBuilder() {
        
        onChanged();
        return getMaxBytesInJoinFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limit on maximum size of the hash table for JOIN, in bytes.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_in_join = 91 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxBytesInJoinOrBuilder() {
        if (maxBytesInJoinBuilder_ != null) {
          return maxBytesInJoinBuilder_.getMessageOrBuilder();
        } else {
          return maxBytesInJoin_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxBytesInJoin_;
        }
      }
      /**
       * <pre>
       * Limit on maximum size of the hash table for JOIN, in bytes.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_bytes_in_join = 91 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxBytesInJoinFieldBuilder() {
        if (maxBytesInJoinBuilder_ == null) {
          maxBytesInJoinBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxBytesInJoin(),
                  getParentForChildren(),
                  isClean());
          maxBytesInJoin_ = null;
        }
        return maxBytesInJoinBuilder_;
      }

      private int joinOverflowMode_ = 0;
      /**
       * <pre>
       * Determine the behavior on exceeding max_rows_in_join or max_bytes_in_join limit.
       * Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode join_overflow_mode = 92;</code>
       * @return The enum numeric value on the wire for joinOverflowMode.
       */
      @java.lang.Override public int getJoinOverflowModeValue() {
        return joinOverflowMode_;
      }
      /**
       * <pre>
       * Determine the behavior on exceeding max_rows_in_join or max_bytes_in_join limit.
       * Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode join_overflow_mode = 92;</code>
       * @param value The enum numeric value on the wire for joinOverflowMode to set.
       * @return This builder for chaining.
       */
      public Builder setJoinOverflowModeValue(int value) {
        
        joinOverflowMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Determine the behavior on exceeding max_rows_in_join or max_bytes_in_join limit.
       * Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode join_overflow_mode = 92;</code>
       * @return The joinOverflowMode.
       */
      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode getJoinOverflowMode() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.valueOf(joinOverflowMode_);
        return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Determine the behavior on exceeding max_rows_in_join or max_bytes_in_join limit.
       * Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode join_overflow_mode = 92;</code>
       * @param value The joinOverflowMode to set.
       * @return This builder for chaining.
       */
      public Builder setJoinOverflowMode(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.OverflowMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        joinOverflowMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Determine the behavior on exceeding max_rows_in_join or max_bytes_in_join limit.
       * Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.OverflowMode join_overflow_mode = 92;</code>
       * @return This builder for chaining.
       */
      public Builder clearJoinOverflowMode() {
        
        joinOverflowMode_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> joinAlgorithm_ =
        java.util.Collections.emptyList();
      private void ensureJoinAlgorithmIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          joinAlgorithm_ = new java.util.ArrayList<java.lang.Integer>(joinAlgorithm_);
          bitField0_ |= 0x00000001;
        }
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-join_algorithm).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserSettings.JoinAlgorithm join_algorithm = 104;</code>
       * @return A list containing the joinAlgorithm.
       */
      public java.util.List<yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.JoinAlgorithm> getJoinAlgorithmList() {
        return new com.google.protobuf.Internal.ListAdapter<
            java.lang.Integer, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.JoinAlgorithm>(joinAlgorithm_, joinAlgorithm_converter_);
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-join_algorithm).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserSettings.JoinAlgorithm join_algorithm = 104;</code>
       * @return The count of joinAlgorithm.
       */
      public int getJoinAlgorithmCount() {
        return joinAlgorithm_.size();
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-join_algorithm).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserSettings.JoinAlgorithm join_algorithm = 104;</code>
       * @param index The index of the element to return.
       * @return The joinAlgorithm at the given index.
       */
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.JoinAlgorithm getJoinAlgorithm(int index) {
        return joinAlgorithm_converter_.convert(joinAlgorithm_.get(index));
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-join_algorithm).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserSettings.JoinAlgorithm join_algorithm = 104;</code>
       * @param index The index to set the value at.
       * @param value The joinAlgorithm to set.
       * @return This builder for chaining.
       */
      public Builder setJoinAlgorithm(
          int index, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.JoinAlgorithm value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureJoinAlgorithmIsMutable();
        joinAlgorithm_.set(index, value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-join_algorithm).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserSettings.JoinAlgorithm join_algorithm = 104;</code>
       * @param value The joinAlgorithm to add.
       * @return This builder for chaining.
       */
      public Builder addJoinAlgorithm(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.JoinAlgorithm value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureJoinAlgorithmIsMutable();
        joinAlgorithm_.add(value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-join_algorithm).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserSettings.JoinAlgorithm join_algorithm = 104;</code>
       * @param values The joinAlgorithm to add.
       * @return This builder for chaining.
       */
      public Builder addAllJoinAlgorithm(
          java.lang.Iterable<? extends yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.JoinAlgorithm> values) {
        ensureJoinAlgorithmIsMutable();
        for (yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.JoinAlgorithm value : values) {
          joinAlgorithm_.add(value.getNumber());
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-join_algorithm).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserSettings.JoinAlgorithm join_algorithm = 104;</code>
       * @return This builder for chaining.
       */
      public Builder clearJoinAlgorithm() {
        joinAlgorithm_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-join_algorithm).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserSettings.JoinAlgorithm join_algorithm = 104;</code>
       * @return A list containing the enum numeric values on the wire for joinAlgorithm.
       */
      public java.util.List<java.lang.Integer>
      getJoinAlgorithmValueList() {
        return java.util.Collections.unmodifiableList(joinAlgorithm_);
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-join_algorithm).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserSettings.JoinAlgorithm join_algorithm = 104;</code>
       * @param index The index of the value to return.
       * @return The enum numeric value on the wire of joinAlgorithm at the given index.
       */
      public int getJoinAlgorithmValue(int index) {
        return joinAlgorithm_.get(index);
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-join_algorithm).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserSettings.JoinAlgorithm join_algorithm = 104;</code>
       * @param index The index of the value to return.
       * @return The enum numeric value on the wire of joinAlgorithm at the given index.
       * @return This builder for chaining.
       */
      public Builder setJoinAlgorithmValue(
          int index, int value) {
        ensureJoinAlgorithmIsMutable();
        joinAlgorithm_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-join_algorithm).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserSettings.JoinAlgorithm join_algorithm = 104;</code>
       * @param value The enum numeric value on the wire for joinAlgorithm to add.
       * @return This builder for chaining.
       */
      public Builder addJoinAlgorithmValue(int value) {
        ensureJoinAlgorithmIsMutable();
        joinAlgorithm_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-join_algorithm).
       * </pre>
       *
       * <code>repeated .yandex.cloud.mdb.clickhouse.v1.UserSettings.JoinAlgorithm join_algorithm = 104;</code>
       * @param values The enum numeric values on the wire for joinAlgorithm to add.
       * @return This builder for chaining.
       */
      public Builder addAllJoinAlgorithmValue(
          java.lang.Iterable<java.lang.Integer> values) {
        ensureJoinAlgorithmIsMutable();
        for (int value : values) {
          joinAlgorithm_.add(value);
        }
        onChanged();
        return this;
      }

      private com.google.protobuf.BoolValue anyJoinDistinctRightTableKeys_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> anyJoinDistinctRightTableKeysBuilder_;
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#any_join_distinct_right_table_keys).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue any_join_distinct_right_table_keys = 105;</code>
       * @return Whether the anyJoinDistinctRightTableKeys field is set.
       */
      public boolean hasAnyJoinDistinctRightTableKeys() {
        return anyJoinDistinctRightTableKeysBuilder_ != null || anyJoinDistinctRightTableKeys_ != null;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#any_join_distinct_right_table_keys).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue any_join_distinct_right_table_keys = 105;</code>
       * @return The anyJoinDistinctRightTableKeys.
       */
      public com.google.protobuf.BoolValue getAnyJoinDistinctRightTableKeys() {
        if (anyJoinDistinctRightTableKeysBuilder_ == null) {
          return anyJoinDistinctRightTableKeys_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : anyJoinDistinctRightTableKeys_;
        } else {
          return anyJoinDistinctRightTableKeysBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#any_join_distinct_right_table_keys).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue any_join_distinct_right_table_keys = 105;</code>
       */
      public Builder setAnyJoinDistinctRightTableKeys(com.google.protobuf.BoolValue value) {
        if (anyJoinDistinctRightTableKeysBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          anyJoinDistinctRightTableKeys_ = value;
          onChanged();
        } else {
          anyJoinDistinctRightTableKeysBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#any_join_distinct_right_table_keys).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue any_join_distinct_right_table_keys = 105;</code>
       */
      public Builder setAnyJoinDistinctRightTableKeys(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (anyJoinDistinctRightTableKeysBuilder_ == null) {
          anyJoinDistinctRightTableKeys_ = builderForValue.build();
          onChanged();
        } else {
          anyJoinDistinctRightTableKeysBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#any_join_distinct_right_table_keys).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue any_join_distinct_right_table_keys = 105;</code>
       */
      public Builder mergeAnyJoinDistinctRightTableKeys(com.google.protobuf.BoolValue value) {
        if (anyJoinDistinctRightTableKeysBuilder_ == null) {
          if (anyJoinDistinctRightTableKeys_ != null) {
            anyJoinDistinctRightTableKeys_ =
              com.google.protobuf.BoolValue.newBuilder(anyJoinDistinctRightTableKeys_).mergeFrom(value).buildPartial();
          } else {
            anyJoinDistinctRightTableKeys_ = value;
          }
          onChanged();
        } else {
          anyJoinDistinctRightTableKeysBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#any_join_distinct_right_table_keys).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue any_join_distinct_right_table_keys = 105;</code>
       */
      public Builder clearAnyJoinDistinctRightTableKeys() {
        if (anyJoinDistinctRightTableKeysBuilder_ == null) {
          anyJoinDistinctRightTableKeys_ = null;
          onChanged();
        } else {
          anyJoinDistinctRightTableKeys_ = null;
          anyJoinDistinctRightTableKeysBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#any_join_distinct_right_table_keys).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue any_join_distinct_right_table_keys = 105;</code>
       */
      public com.google.protobuf.BoolValue.Builder getAnyJoinDistinctRightTableKeysBuilder() {
        
        onChanged();
        return getAnyJoinDistinctRightTableKeysFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#any_join_distinct_right_table_keys).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue any_join_distinct_right_table_keys = 105;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getAnyJoinDistinctRightTableKeysOrBuilder() {
        if (anyJoinDistinctRightTableKeysBuilder_ != null) {
          return anyJoinDistinctRightTableKeysBuilder_.getMessageOrBuilder();
        } else {
          return anyJoinDistinctRightTableKeys_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : anyJoinDistinctRightTableKeys_;
        }
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#any_join_distinct_right_table_keys).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue any_join_distinct_right_table_keys = 105;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getAnyJoinDistinctRightTableKeysFieldBuilder() {
        if (anyJoinDistinctRightTableKeysBuilder_ == null) {
          anyJoinDistinctRightTableKeysBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getAnyJoinDistinctRightTableKeys(),
                  getParentForChildren(),
                  isClean());
          anyJoinDistinctRightTableKeys_ = null;
        }
        return anyJoinDistinctRightTableKeysBuilder_;
      }

      private com.google.protobuf.Int64Value maxColumnsToRead_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxColumnsToReadBuilder_;
      /**
       * <pre>
       * Limits the maximum number of columns that can be read from a table in a single query.
       * If the query requires to read more columns to complete, then it will be aborted.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_columns_to_read = 32 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the maxColumnsToRead field is set.
       */
      public boolean hasMaxColumnsToRead() {
        return maxColumnsToReadBuilder_ != null || maxColumnsToRead_ != null;
      }
      /**
       * <pre>
       * Limits the maximum number of columns that can be read from a table in a single query.
       * If the query requires to read more columns to complete, then it will be aborted.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_columns_to_read = 32 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The maxColumnsToRead.
       */
      public com.google.protobuf.Int64Value getMaxColumnsToRead() {
        if (maxColumnsToReadBuilder_ == null) {
          return maxColumnsToRead_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxColumnsToRead_;
        } else {
          return maxColumnsToReadBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the maximum number of columns that can be read from a table in a single query.
       * If the query requires to read more columns to complete, then it will be aborted.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_columns_to_read = 32 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxColumnsToRead(com.google.protobuf.Int64Value value) {
        if (maxColumnsToReadBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxColumnsToRead_ = value;
          onChanged();
        } else {
          maxColumnsToReadBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of columns that can be read from a table in a single query.
       * If the query requires to read more columns to complete, then it will be aborted.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_columns_to_read = 32 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxColumnsToRead(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxColumnsToReadBuilder_ == null) {
          maxColumnsToRead_ = builderForValue.build();
          onChanged();
        } else {
          maxColumnsToReadBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of columns that can be read from a table in a single query.
       * If the query requires to read more columns to complete, then it will be aborted.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_columns_to_read = 32 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMaxColumnsToRead(com.google.protobuf.Int64Value value) {
        if (maxColumnsToReadBuilder_ == null) {
          if (maxColumnsToRead_ != null) {
            maxColumnsToRead_ =
              com.google.protobuf.Int64Value.newBuilder(maxColumnsToRead_).mergeFrom(value).buildPartial();
          } else {
            maxColumnsToRead_ = value;
          }
          onChanged();
        } else {
          maxColumnsToReadBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of columns that can be read from a table in a single query.
       * If the query requires to read more columns to complete, then it will be aborted.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_columns_to_read = 32 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMaxColumnsToRead() {
        if (maxColumnsToReadBuilder_ == null) {
          maxColumnsToRead_ = null;
          onChanged();
        } else {
          maxColumnsToRead_ = null;
          maxColumnsToReadBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of columns that can be read from a table in a single query.
       * If the query requires to read more columns to complete, then it will be aborted.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_columns_to_read = 32 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxColumnsToReadBuilder() {
        
        onChanged();
        return getMaxColumnsToReadFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the maximum number of columns that can be read from a table in a single query.
       * If the query requires to read more columns to complete, then it will be aborted.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_columns_to_read = 32 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxColumnsToReadOrBuilder() {
        if (maxColumnsToReadBuilder_ != null) {
          return maxColumnsToReadBuilder_.getMessageOrBuilder();
        } else {
          return maxColumnsToRead_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxColumnsToRead_;
        }
      }
      /**
       * <pre>
       * Limits the maximum number of columns that can be read from a table in a single query.
       * If the query requires to read more columns to complete, then it will be aborted.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_columns_to_read = 32 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxColumnsToReadFieldBuilder() {
        if (maxColumnsToReadBuilder_ == null) {
          maxColumnsToReadBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxColumnsToRead(),
                  getParentForChildren(),
                  isClean());
          maxColumnsToRead_ = null;
        }
        return maxColumnsToReadBuilder_;
      }

      private com.google.protobuf.Int64Value maxTemporaryColumns_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxTemporaryColumnsBuilder_;
      /**
       * <pre>
       * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_columns = 33 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the maxTemporaryColumns field is set.
       */
      public boolean hasMaxTemporaryColumns() {
        return maxTemporaryColumnsBuilder_ != null || maxTemporaryColumns_ != null;
      }
      /**
       * <pre>
       * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_columns = 33 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The maxTemporaryColumns.
       */
      public com.google.protobuf.Int64Value getMaxTemporaryColumns() {
        if (maxTemporaryColumnsBuilder_ == null) {
          return maxTemporaryColumns_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxTemporaryColumns_;
        } else {
          return maxTemporaryColumnsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_columns = 33 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxTemporaryColumns(com.google.protobuf.Int64Value value) {
        if (maxTemporaryColumnsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxTemporaryColumns_ = value;
          onChanged();
        } else {
          maxTemporaryColumnsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_columns = 33 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxTemporaryColumns(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxTemporaryColumnsBuilder_ == null) {
          maxTemporaryColumns_ = builderForValue.build();
          onChanged();
        } else {
          maxTemporaryColumnsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_columns = 33 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMaxTemporaryColumns(com.google.protobuf.Int64Value value) {
        if (maxTemporaryColumnsBuilder_ == null) {
          if (maxTemporaryColumns_ != null) {
            maxTemporaryColumns_ =
              com.google.protobuf.Int64Value.newBuilder(maxTemporaryColumns_).mergeFrom(value).buildPartial();
          } else {
            maxTemporaryColumns_ = value;
          }
          onChanged();
        } else {
          maxTemporaryColumnsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_columns = 33 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMaxTemporaryColumns() {
        if (maxTemporaryColumnsBuilder_ == null) {
          maxTemporaryColumns_ = null;
          onChanged();
        } else {
          maxTemporaryColumns_ = null;
          maxTemporaryColumnsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_columns = 33 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxTemporaryColumnsBuilder() {
        
        onChanged();
        return getMaxTemporaryColumnsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_columns = 33 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxTemporaryColumnsOrBuilder() {
        if (maxTemporaryColumnsBuilder_ != null) {
          return maxTemporaryColumnsBuilder_.getMessageOrBuilder();
        } else {
          return maxTemporaryColumns_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxTemporaryColumns_;
        }
      }
      /**
       * <pre>
       * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_columns = 33 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxTemporaryColumnsFieldBuilder() {
        if (maxTemporaryColumnsBuilder_ == null) {
          maxTemporaryColumnsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxTemporaryColumns(),
                  getParentForChildren(),
                  isClean());
          maxTemporaryColumns_ = null;
        }
        return maxTemporaryColumnsBuilder_;
      }

      private com.google.protobuf.Int64Value maxTemporaryNonConstColumns_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxTemporaryNonConstColumnsBuilder_;
      /**
       * <pre>
       * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_non_const_columns = 34 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the maxTemporaryNonConstColumns field is set.
       */
      public boolean hasMaxTemporaryNonConstColumns() {
        return maxTemporaryNonConstColumnsBuilder_ != null || maxTemporaryNonConstColumns_ != null;
      }
      /**
       * <pre>
       * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_non_const_columns = 34 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The maxTemporaryNonConstColumns.
       */
      public com.google.protobuf.Int64Value getMaxTemporaryNonConstColumns() {
        if (maxTemporaryNonConstColumnsBuilder_ == null) {
          return maxTemporaryNonConstColumns_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxTemporaryNonConstColumns_;
        } else {
          return maxTemporaryNonConstColumnsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_non_const_columns = 34 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxTemporaryNonConstColumns(com.google.protobuf.Int64Value value) {
        if (maxTemporaryNonConstColumnsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxTemporaryNonConstColumns_ = value;
          onChanged();
        } else {
          maxTemporaryNonConstColumnsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_non_const_columns = 34 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxTemporaryNonConstColumns(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxTemporaryNonConstColumnsBuilder_ == null) {
          maxTemporaryNonConstColumns_ = builderForValue.build();
          onChanged();
        } else {
          maxTemporaryNonConstColumnsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_non_const_columns = 34 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMaxTemporaryNonConstColumns(com.google.protobuf.Int64Value value) {
        if (maxTemporaryNonConstColumnsBuilder_ == null) {
          if (maxTemporaryNonConstColumns_ != null) {
            maxTemporaryNonConstColumns_ =
              com.google.protobuf.Int64Value.newBuilder(maxTemporaryNonConstColumns_).mergeFrom(value).buildPartial();
          } else {
            maxTemporaryNonConstColumns_ = value;
          }
          onChanged();
        } else {
          maxTemporaryNonConstColumnsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_non_const_columns = 34 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMaxTemporaryNonConstColumns() {
        if (maxTemporaryNonConstColumnsBuilder_ == null) {
          maxTemporaryNonConstColumns_ = null;
          onChanged();
        } else {
          maxTemporaryNonConstColumns_ = null;
          maxTemporaryNonConstColumnsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_non_const_columns = 34 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxTemporaryNonConstColumnsBuilder() {
        
        onChanged();
        return getMaxTemporaryNonConstColumnsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_non_const_columns = 34 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxTemporaryNonConstColumnsOrBuilder() {
        if (maxTemporaryNonConstColumnsBuilder_ != null) {
          return maxTemporaryNonConstColumnsBuilder_.getMessageOrBuilder();
        } else {
          return maxTemporaryNonConstColumns_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxTemporaryNonConstColumns_;
        }
      }
      /**
       * <pre>
       * Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.
       * Minimal value and default value: **0**, no limitation is set.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_non_const_columns = 34 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxTemporaryNonConstColumnsFieldBuilder() {
        if (maxTemporaryNonConstColumnsBuilder_ == null) {
          maxTemporaryNonConstColumnsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxTemporaryNonConstColumns(),
                  getParentForChildren(),
                  isClean());
          maxTemporaryNonConstColumns_ = null;
        }
        return maxTemporaryNonConstColumnsBuilder_;
      }

      private com.google.protobuf.Int64Value maxQuerySize_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxQuerySizeBuilder_;
      /**
       * <pre>
       * Limits the size of the part of a query that can be transferred to RAM for parsing with the SQL parser, in bytes.
       * Value must be greater than **0** (default: **262144**).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_query_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_query_size = 35 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return Whether the maxQuerySize field is set.
       */
      public boolean hasMaxQuerySize() {
        return maxQuerySizeBuilder_ != null || maxQuerySize_ != null;
      }
      /**
       * <pre>
       * Limits the size of the part of a query that can be transferred to RAM for parsing with the SQL parser, in bytes.
       * Value must be greater than **0** (default: **262144**).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_query_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_query_size = 35 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return The maxQuerySize.
       */
      public com.google.protobuf.Int64Value getMaxQuerySize() {
        if (maxQuerySizeBuilder_ == null) {
          return maxQuerySize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxQuerySize_;
        } else {
          return maxQuerySizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the size of the part of a query that can be transferred to RAM for parsing with the SQL parser, in bytes.
       * Value must be greater than **0** (default: **262144**).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_query_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_query_size = 35 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setMaxQuerySize(com.google.protobuf.Int64Value value) {
        if (maxQuerySizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxQuerySize_ = value;
          onChanged();
        } else {
          maxQuerySizeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the size of the part of a query that can be transferred to RAM for parsing with the SQL parser, in bytes.
       * Value must be greater than **0** (default: **262144**).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_query_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_query_size = 35 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setMaxQuerySize(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxQuerySizeBuilder_ == null) {
          maxQuerySize_ = builderForValue.build();
          onChanged();
        } else {
          maxQuerySizeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the size of the part of a query that can be transferred to RAM for parsing with the SQL parser, in bytes.
       * Value must be greater than **0** (default: **262144**).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_query_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_query_size = 35 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder mergeMaxQuerySize(com.google.protobuf.Int64Value value) {
        if (maxQuerySizeBuilder_ == null) {
          if (maxQuerySize_ != null) {
            maxQuerySize_ =
              com.google.protobuf.Int64Value.newBuilder(maxQuerySize_).mergeFrom(value).buildPartial();
          } else {
            maxQuerySize_ = value;
          }
          onChanged();
        } else {
          maxQuerySizeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the size of the part of a query that can be transferred to RAM for parsing with the SQL parser, in bytes.
       * Value must be greater than **0** (default: **262144**).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_query_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_query_size = 35 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder clearMaxQuerySize() {
        if (maxQuerySizeBuilder_ == null) {
          maxQuerySize_ = null;
          onChanged();
        } else {
          maxQuerySize_ = null;
          maxQuerySizeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the size of the part of a query that can be transferred to RAM for parsing with the SQL parser, in bytes.
       * Value must be greater than **0** (default: **262144**).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_query_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_query_size = 35 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxQuerySizeBuilder() {
        
        onChanged();
        return getMaxQuerySizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the size of the part of a query that can be transferred to RAM for parsing with the SQL parser, in bytes.
       * Value must be greater than **0** (default: **262144**).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_query_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_query_size = 35 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxQuerySizeOrBuilder() {
        if (maxQuerySizeBuilder_ != null) {
          return maxQuerySizeBuilder_.getMessageOrBuilder();
        } else {
          return maxQuerySize_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxQuerySize_;
        }
      }
      /**
       * <pre>
       * Limits the size of the part of a query that can be transferred to RAM for parsing with the SQL parser, in bytes.
       * Value must be greater than **0** (default: **262144**).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_query_size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_query_size = 35 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxQuerySizeFieldBuilder() {
        if (maxQuerySizeBuilder_ == null) {
          maxQuerySizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxQuerySize(),
                  getParentForChildren(),
                  isClean());
          maxQuerySize_ = null;
        }
        return maxQuerySizeBuilder_;
      }

      private com.google.protobuf.Int64Value maxAstDepth_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxAstDepthBuilder_;
      /**
       * <pre>
       * Limits the maximum depth of query syntax tree.
       * Executing a big and complex query may result in building a syntax tree of enormous depth.
       * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
       * For example, the **SELECT *** query may result in more complex and deeper syntax tree, compared to the **SELECT ... WHERE ...** query, containing constraints and conditions, in the most cases.
       * A user can be forced to construct more optimized queries, if this setting is used.
       * Value must be greater than **0** (default: **1000**).
       * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-depth).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_ast_depth = 36 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return Whether the maxAstDepth field is set.
       */
      public boolean hasMaxAstDepth() {
        return maxAstDepthBuilder_ != null || maxAstDepth_ != null;
      }
      /**
       * <pre>
       * Limits the maximum depth of query syntax tree.
       * Executing a big and complex query may result in building a syntax tree of enormous depth.
       * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
       * For example, the **SELECT *** query may result in more complex and deeper syntax tree, compared to the **SELECT ... WHERE ...** query, containing constraints and conditions, in the most cases.
       * A user can be forced to construct more optimized queries, if this setting is used.
       * Value must be greater than **0** (default: **1000**).
       * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-depth).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_ast_depth = 36 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return The maxAstDepth.
       */
      public com.google.protobuf.Int64Value getMaxAstDepth() {
        if (maxAstDepthBuilder_ == null) {
          return maxAstDepth_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxAstDepth_;
        } else {
          return maxAstDepthBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the maximum depth of query syntax tree.
       * Executing a big and complex query may result in building a syntax tree of enormous depth.
       * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
       * For example, the **SELECT *** query may result in more complex and deeper syntax tree, compared to the **SELECT ... WHERE ...** query, containing constraints and conditions, in the most cases.
       * A user can be forced to construct more optimized queries, if this setting is used.
       * Value must be greater than **0** (default: **1000**).
       * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-depth).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_ast_depth = 36 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setMaxAstDepth(com.google.protobuf.Int64Value value) {
        if (maxAstDepthBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxAstDepth_ = value;
          onChanged();
        } else {
          maxAstDepthBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum depth of query syntax tree.
       * Executing a big and complex query may result in building a syntax tree of enormous depth.
       * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
       * For example, the **SELECT *** query may result in more complex and deeper syntax tree, compared to the **SELECT ... WHERE ...** query, containing constraints and conditions, in the most cases.
       * A user can be forced to construct more optimized queries, if this setting is used.
       * Value must be greater than **0** (default: **1000**).
       * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-depth).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_ast_depth = 36 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setMaxAstDepth(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxAstDepthBuilder_ == null) {
          maxAstDepth_ = builderForValue.build();
          onChanged();
        } else {
          maxAstDepthBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum depth of query syntax tree.
       * Executing a big and complex query may result in building a syntax tree of enormous depth.
       * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
       * For example, the **SELECT *** query may result in more complex and deeper syntax tree, compared to the **SELECT ... WHERE ...** query, containing constraints and conditions, in the most cases.
       * A user can be forced to construct more optimized queries, if this setting is used.
       * Value must be greater than **0** (default: **1000**).
       * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-depth).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_ast_depth = 36 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder mergeMaxAstDepth(com.google.protobuf.Int64Value value) {
        if (maxAstDepthBuilder_ == null) {
          if (maxAstDepth_ != null) {
            maxAstDepth_ =
              com.google.protobuf.Int64Value.newBuilder(maxAstDepth_).mergeFrom(value).buildPartial();
          } else {
            maxAstDepth_ = value;
          }
          onChanged();
        } else {
          maxAstDepthBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum depth of query syntax tree.
       * Executing a big and complex query may result in building a syntax tree of enormous depth.
       * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
       * For example, the **SELECT *** query may result in more complex and deeper syntax tree, compared to the **SELECT ... WHERE ...** query, containing constraints and conditions, in the most cases.
       * A user can be forced to construct more optimized queries, if this setting is used.
       * Value must be greater than **0** (default: **1000**).
       * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-depth).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_ast_depth = 36 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder clearMaxAstDepth() {
        if (maxAstDepthBuilder_ == null) {
          maxAstDepth_ = null;
          onChanged();
        } else {
          maxAstDepth_ = null;
          maxAstDepthBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum depth of query syntax tree.
       * Executing a big and complex query may result in building a syntax tree of enormous depth.
       * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
       * For example, the **SELECT *** query may result in more complex and deeper syntax tree, compared to the **SELECT ... WHERE ...** query, containing constraints and conditions, in the most cases.
       * A user can be forced to construct more optimized queries, if this setting is used.
       * Value must be greater than **0** (default: **1000**).
       * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-depth).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_ast_depth = 36 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxAstDepthBuilder() {
        
        onChanged();
        return getMaxAstDepthFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the maximum depth of query syntax tree.
       * Executing a big and complex query may result in building a syntax tree of enormous depth.
       * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
       * For example, the **SELECT *** query may result in more complex and deeper syntax tree, compared to the **SELECT ... WHERE ...** query, containing constraints and conditions, in the most cases.
       * A user can be forced to construct more optimized queries, if this setting is used.
       * Value must be greater than **0** (default: **1000**).
       * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-depth).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_ast_depth = 36 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxAstDepthOrBuilder() {
        if (maxAstDepthBuilder_ != null) {
          return maxAstDepthBuilder_.getMessageOrBuilder();
        } else {
          return maxAstDepth_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxAstDepth_;
        }
      }
      /**
       * <pre>
       * Limits the maximum depth of query syntax tree.
       * Executing a big and complex query may result in building a syntax tree of enormous depth.
       * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
       * For example, the **SELECT *** query may result in more complex and deeper syntax tree, compared to the **SELECT ... WHERE ...** query, containing constraints and conditions, in the most cases.
       * A user can be forced to construct more optimized queries, if this setting is used.
       * Value must be greater than **0** (default: **1000**).
       * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-depth).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_ast_depth = 36 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxAstDepthFieldBuilder() {
        if (maxAstDepthBuilder_ == null) {
          maxAstDepthBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxAstDepth(),
                  getParentForChildren(),
                  isClean());
          maxAstDepth_ = null;
        }
        return maxAstDepthBuilder_;
      }

      private com.google.protobuf.Int64Value maxAstElements_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxAstElementsBuilder_;
      /**
       * <pre>
       * Limits the maximum size of query syntax tree in number of nodes.
       * Executing a big and complex query may result in building a syntax tree of enormous size.
       * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
       * Value must be greater than **0** (default: **50000**).
       * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-elements).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_ast_elements = 37 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return Whether the maxAstElements field is set.
       */
      public boolean hasMaxAstElements() {
        return maxAstElementsBuilder_ != null || maxAstElements_ != null;
      }
      /**
       * <pre>
       * Limits the maximum size of query syntax tree in number of nodes.
       * Executing a big and complex query may result in building a syntax tree of enormous size.
       * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
       * Value must be greater than **0** (default: **50000**).
       * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-elements).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_ast_elements = 37 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return The maxAstElements.
       */
      public com.google.protobuf.Int64Value getMaxAstElements() {
        if (maxAstElementsBuilder_ == null) {
          return maxAstElements_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxAstElements_;
        } else {
          return maxAstElementsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the maximum size of query syntax tree in number of nodes.
       * Executing a big and complex query may result in building a syntax tree of enormous size.
       * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
       * Value must be greater than **0** (default: **50000**).
       * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-elements).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_ast_elements = 37 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setMaxAstElements(com.google.protobuf.Int64Value value) {
        if (maxAstElementsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxAstElements_ = value;
          onChanged();
        } else {
          maxAstElementsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum size of query syntax tree in number of nodes.
       * Executing a big and complex query may result in building a syntax tree of enormous size.
       * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
       * Value must be greater than **0** (default: **50000**).
       * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-elements).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_ast_elements = 37 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setMaxAstElements(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxAstElementsBuilder_ == null) {
          maxAstElements_ = builderForValue.build();
          onChanged();
        } else {
          maxAstElementsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum size of query syntax tree in number of nodes.
       * Executing a big and complex query may result in building a syntax tree of enormous size.
       * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
       * Value must be greater than **0** (default: **50000**).
       * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-elements).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_ast_elements = 37 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder mergeMaxAstElements(com.google.protobuf.Int64Value value) {
        if (maxAstElementsBuilder_ == null) {
          if (maxAstElements_ != null) {
            maxAstElements_ =
              com.google.protobuf.Int64Value.newBuilder(maxAstElements_).mergeFrom(value).buildPartial();
          } else {
            maxAstElements_ = value;
          }
          onChanged();
        } else {
          maxAstElementsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum size of query syntax tree in number of nodes.
       * Executing a big and complex query may result in building a syntax tree of enormous size.
       * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
       * Value must be greater than **0** (default: **50000**).
       * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-elements).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_ast_elements = 37 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder clearMaxAstElements() {
        if (maxAstElementsBuilder_ == null) {
          maxAstElements_ = null;
          onChanged();
        } else {
          maxAstElements_ = null;
          maxAstElementsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum size of query syntax tree in number of nodes.
       * Executing a big and complex query may result in building a syntax tree of enormous size.
       * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
       * Value must be greater than **0** (default: **50000**).
       * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-elements).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_ast_elements = 37 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxAstElementsBuilder() {
        
        onChanged();
        return getMaxAstElementsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the maximum size of query syntax tree in number of nodes.
       * Executing a big and complex query may result in building a syntax tree of enormous size.
       * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
       * Value must be greater than **0** (default: **50000**).
       * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-elements).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_ast_elements = 37 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxAstElementsOrBuilder() {
        if (maxAstElementsBuilder_ != null) {
          return maxAstElementsBuilder_.getMessageOrBuilder();
        } else {
          return maxAstElements_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxAstElements_;
        }
      }
      /**
       * <pre>
       * Limits the maximum size of query syntax tree in number of nodes.
       * Executing a big and complex query may result in building a syntax tree of enormous size.
       * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
       * Value must be greater than **0** (default: **50000**).
       * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-elements).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_ast_elements = 37 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxAstElementsFieldBuilder() {
        if (maxAstElementsBuilder_ == null) {
          maxAstElementsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxAstElements(),
                  getParentForChildren(),
                  isClean());
          maxAstElements_ = null;
        }
        return maxAstElementsBuilder_;
      }

      private com.google.protobuf.Int64Value maxExpandedAstElements_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxExpandedAstElementsBuilder_;
      /**
       * <pre>
       * Limits the maximum size of query syntax tree in number of nodes after expansion of aliases and the asterisk values.
       * Executing a big and complex query may result in building a syntax tree of enormous size.
       * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
       * Value must be greater than **0** (default: **500000**).
       * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_expanded_ast_elements = 38 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return Whether the maxExpandedAstElements field is set.
       */
      public boolean hasMaxExpandedAstElements() {
        return maxExpandedAstElementsBuilder_ != null || maxExpandedAstElements_ != null;
      }
      /**
       * <pre>
       * Limits the maximum size of query syntax tree in number of nodes after expansion of aliases and the asterisk values.
       * Executing a big and complex query may result in building a syntax tree of enormous size.
       * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
       * Value must be greater than **0** (default: **500000**).
       * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_expanded_ast_elements = 38 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return The maxExpandedAstElements.
       */
      public com.google.protobuf.Int64Value getMaxExpandedAstElements() {
        if (maxExpandedAstElementsBuilder_ == null) {
          return maxExpandedAstElements_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxExpandedAstElements_;
        } else {
          return maxExpandedAstElementsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the maximum size of query syntax tree in number of nodes after expansion of aliases and the asterisk values.
       * Executing a big and complex query may result in building a syntax tree of enormous size.
       * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
       * Value must be greater than **0** (default: **500000**).
       * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_expanded_ast_elements = 38 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setMaxExpandedAstElements(com.google.protobuf.Int64Value value) {
        if (maxExpandedAstElementsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxExpandedAstElements_ = value;
          onChanged();
        } else {
          maxExpandedAstElementsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum size of query syntax tree in number of nodes after expansion of aliases and the asterisk values.
       * Executing a big and complex query may result in building a syntax tree of enormous size.
       * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
       * Value must be greater than **0** (default: **500000**).
       * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_expanded_ast_elements = 38 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setMaxExpandedAstElements(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxExpandedAstElementsBuilder_ == null) {
          maxExpandedAstElements_ = builderForValue.build();
          onChanged();
        } else {
          maxExpandedAstElementsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum size of query syntax tree in number of nodes after expansion of aliases and the asterisk values.
       * Executing a big and complex query may result in building a syntax tree of enormous size.
       * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
       * Value must be greater than **0** (default: **500000**).
       * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_expanded_ast_elements = 38 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder mergeMaxExpandedAstElements(com.google.protobuf.Int64Value value) {
        if (maxExpandedAstElementsBuilder_ == null) {
          if (maxExpandedAstElements_ != null) {
            maxExpandedAstElements_ =
              com.google.protobuf.Int64Value.newBuilder(maxExpandedAstElements_).mergeFrom(value).buildPartial();
          } else {
            maxExpandedAstElements_ = value;
          }
          onChanged();
        } else {
          maxExpandedAstElementsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum size of query syntax tree in number of nodes after expansion of aliases and the asterisk values.
       * Executing a big and complex query may result in building a syntax tree of enormous size.
       * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
       * Value must be greater than **0** (default: **500000**).
       * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_expanded_ast_elements = 38 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder clearMaxExpandedAstElements() {
        if (maxExpandedAstElementsBuilder_ == null) {
          maxExpandedAstElements_ = null;
          onChanged();
        } else {
          maxExpandedAstElements_ = null;
          maxExpandedAstElementsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum size of query syntax tree in number of nodes after expansion of aliases and the asterisk values.
       * Executing a big and complex query may result in building a syntax tree of enormous size.
       * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
       * Value must be greater than **0** (default: **500000**).
       * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_expanded_ast_elements = 38 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxExpandedAstElementsBuilder() {
        
        onChanged();
        return getMaxExpandedAstElementsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the maximum size of query syntax tree in number of nodes after expansion of aliases and the asterisk values.
       * Executing a big and complex query may result in building a syntax tree of enormous size.
       * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
       * Value must be greater than **0** (default: **500000**).
       * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_expanded_ast_elements = 38 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxExpandedAstElementsOrBuilder() {
        if (maxExpandedAstElementsBuilder_ != null) {
          return maxExpandedAstElementsBuilder_.getMessageOrBuilder();
        } else {
          return maxExpandedAstElements_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxExpandedAstElements_;
        }
      }
      /**
       * <pre>
       * Limits the maximum size of query syntax tree in number of nodes after expansion of aliases and the asterisk values.
       * Executing a big and complex query may result in building a syntax tree of enormous size.
       * By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
       * Value must be greater than **0** (default: **500000**).
       * If a too small value is set, it may render ClickHouse unable to execute even simple queries.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_expanded_ast_elements = 38 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxExpandedAstElementsFieldBuilder() {
        if (maxExpandedAstElementsBuilder_ == null) {
          maxExpandedAstElementsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxExpandedAstElements(),
                  getParentForChildren(),
                  isClean());
          maxExpandedAstElements_ = null;
        }
        return maxExpandedAstElementsBuilder_;
      }

      private com.google.protobuf.Int64Value minExecutionSpeed_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> minExecutionSpeedBuilder_;
      /**
       * <pre>
       * Minimal execution speed in rows per second.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_execution_speed = 84 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the minExecutionSpeed field is set.
       */
      public boolean hasMinExecutionSpeed() {
        return minExecutionSpeedBuilder_ != null || minExecutionSpeed_ != null;
      }
      /**
       * <pre>
       * Minimal execution speed in rows per second.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_execution_speed = 84 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The minExecutionSpeed.
       */
      public com.google.protobuf.Int64Value getMinExecutionSpeed() {
        if (minExecutionSpeedBuilder_ == null) {
          return minExecutionSpeed_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : minExecutionSpeed_;
        } else {
          return minExecutionSpeedBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Minimal execution speed in rows per second.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_execution_speed = 84 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMinExecutionSpeed(com.google.protobuf.Int64Value value) {
        if (minExecutionSpeedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          minExecutionSpeed_ = value;
          onChanged();
        } else {
          minExecutionSpeedBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Minimal execution speed in rows per second.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_execution_speed = 84 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMinExecutionSpeed(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (minExecutionSpeedBuilder_ == null) {
          minExecutionSpeed_ = builderForValue.build();
          onChanged();
        } else {
          minExecutionSpeedBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Minimal execution speed in rows per second.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_execution_speed = 84 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMinExecutionSpeed(com.google.protobuf.Int64Value value) {
        if (minExecutionSpeedBuilder_ == null) {
          if (minExecutionSpeed_ != null) {
            minExecutionSpeed_ =
              com.google.protobuf.Int64Value.newBuilder(minExecutionSpeed_).mergeFrom(value).buildPartial();
          } else {
            minExecutionSpeed_ = value;
          }
          onChanged();
        } else {
          minExecutionSpeedBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Minimal execution speed in rows per second.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_execution_speed = 84 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMinExecutionSpeed() {
        if (minExecutionSpeedBuilder_ == null) {
          minExecutionSpeed_ = null;
          onChanged();
        } else {
          minExecutionSpeed_ = null;
          minExecutionSpeedBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Minimal execution speed in rows per second.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_execution_speed = 84 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMinExecutionSpeedBuilder() {
        
        onChanged();
        return getMinExecutionSpeedFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Minimal execution speed in rows per second.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_execution_speed = 84 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMinExecutionSpeedOrBuilder() {
        if (minExecutionSpeedBuilder_ != null) {
          return minExecutionSpeedBuilder_.getMessageOrBuilder();
        } else {
          return minExecutionSpeed_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : minExecutionSpeed_;
        }
      }
      /**
       * <pre>
       * Minimal execution speed in rows per second.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_execution_speed = 84 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMinExecutionSpeedFieldBuilder() {
        if (minExecutionSpeedBuilder_ == null) {
          minExecutionSpeedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMinExecutionSpeed(),
                  getParentForChildren(),
                  isClean());
          minExecutionSpeed_ = null;
        }
        return minExecutionSpeedBuilder_;
      }

      private com.google.protobuf.Int64Value minExecutionSpeedBytes_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> minExecutionSpeedBytesBuilder_;
      /**
       * <pre>
       * Minimal execution speed in bytes per second.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_execution_speed_bytes = 85 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the minExecutionSpeedBytes field is set.
       */
      public boolean hasMinExecutionSpeedBytes() {
        return minExecutionSpeedBytesBuilder_ != null || minExecutionSpeedBytes_ != null;
      }
      /**
       * <pre>
       * Minimal execution speed in bytes per second.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_execution_speed_bytes = 85 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The minExecutionSpeedBytes.
       */
      public com.google.protobuf.Int64Value getMinExecutionSpeedBytes() {
        if (minExecutionSpeedBytesBuilder_ == null) {
          return minExecutionSpeedBytes_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : minExecutionSpeedBytes_;
        } else {
          return minExecutionSpeedBytesBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Minimal execution speed in bytes per second.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_execution_speed_bytes = 85 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMinExecutionSpeedBytes(com.google.protobuf.Int64Value value) {
        if (minExecutionSpeedBytesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          minExecutionSpeedBytes_ = value;
          onChanged();
        } else {
          minExecutionSpeedBytesBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Minimal execution speed in bytes per second.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_execution_speed_bytes = 85 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMinExecutionSpeedBytes(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (minExecutionSpeedBytesBuilder_ == null) {
          minExecutionSpeedBytes_ = builderForValue.build();
          onChanged();
        } else {
          minExecutionSpeedBytesBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Minimal execution speed in bytes per second.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_execution_speed_bytes = 85 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMinExecutionSpeedBytes(com.google.protobuf.Int64Value value) {
        if (minExecutionSpeedBytesBuilder_ == null) {
          if (minExecutionSpeedBytes_ != null) {
            minExecutionSpeedBytes_ =
              com.google.protobuf.Int64Value.newBuilder(minExecutionSpeedBytes_).mergeFrom(value).buildPartial();
          } else {
            minExecutionSpeedBytes_ = value;
          }
          onChanged();
        } else {
          minExecutionSpeedBytesBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Minimal execution speed in bytes per second.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_execution_speed_bytes = 85 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMinExecutionSpeedBytes() {
        if (minExecutionSpeedBytesBuilder_ == null) {
          minExecutionSpeedBytes_ = null;
          onChanged();
        } else {
          minExecutionSpeedBytes_ = null;
          minExecutionSpeedBytesBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Minimal execution speed in bytes per second.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_execution_speed_bytes = 85 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMinExecutionSpeedBytesBuilder() {
        
        onChanged();
        return getMinExecutionSpeedBytesFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Minimal execution speed in bytes per second.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_execution_speed_bytes = 85 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMinExecutionSpeedBytesOrBuilder() {
        if (minExecutionSpeedBytesBuilder_ != null) {
          return minExecutionSpeedBytesBuilder_.getMessageOrBuilder();
        } else {
          return minExecutionSpeedBytes_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : minExecutionSpeedBytes_;
        }
      }
      /**
       * <pre>
       * Minimal execution speed in bytes per second.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_execution_speed_bytes = 85 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMinExecutionSpeedBytesFieldBuilder() {
        if (minExecutionSpeedBytesBuilder_ == null) {
          minExecutionSpeedBytesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMinExecutionSpeedBytes(),
                  getParentForChildren(),
                  isClean());
          minExecutionSpeedBytes_ = null;
        }
        return minExecutionSpeedBytesBuilder_;
      }

      private int countDistinctImplementation_ = 0;
      /**
       * <pre>
       * Aggregate function to use for implementation of count(DISTINCT ...).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.CountDistinctImplementation count_distinct_implementation = 86;</code>
       * @return The enum numeric value on the wire for countDistinctImplementation.
       */
      @java.lang.Override public int getCountDistinctImplementationValue() {
        return countDistinctImplementation_;
      }
      /**
       * <pre>
       * Aggregate function to use for implementation of count(DISTINCT ...).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.CountDistinctImplementation count_distinct_implementation = 86;</code>
       * @param value The enum numeric value on the wire for countDistinctImplementation to set.
       * @return This builder for chaining.
       */
      public Builder setCountDistinctImplementationValue(int value) {
        
        countDistinctImplementation_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Aggregate function to use for implementation of count(DISTINCT ...).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.CountDistinctImplementation count_distinct_implementation = 86;</code>
       * @return The countDistinctImplementation.
       */
      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.CountDistinctImplementation getCountDistinctImplementation() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.CountDistinctImplementation result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.CountDistinctImplementation.valueOf(countDistinctImplementation_);
        return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.CountDistinctImplementation.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Aggregate function to use for implementation of count(DISTINCT ...).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.CountDistinctImplementation count_distinct_implementation = 86;</code>
       * @param value The countDistinctImplementation to set.
       * @return This builder for chaining.
       */
      public Builder setCountDistinctImplementation(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.CountDistinctImplementation value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        countDistinctImplementation_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Aggregate function to use for implementation of count(DISTINCT ...).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.CountDistinctImplementation count_distinct_implementation = 86;</code>
       * @return This builder for chaining.
       */
      public Builder clearCountDistinctImplementation() {
        
        countDistinctImplementation_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.BoolValue inputFormatValuesInterpretExpressions_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> inputFormatValuesInterpretExpressionsBuilder_;
      /**
       * <pre>
       * Enables or disables SQL parser if the fast stream parser cannot parse the data.
       * Enable this setting, if the data that you want to insert into a table contains SQL expressions.
       * For example, the stream parser is unable to parse a value that contains **now()** expression; therefore an **INSERT** query for this value will fail and no data will be inserted into a table.
       * With enabled SQL parser, this expression is parsed correctly: the **now()** expression will be parsed as SQL function, interpreted, and the current date and time will be inserted into the table as a result.
       * This setting has effect only if you use [Values](https://clickhouse.com/docs/en/interfaces/formats/#data-format-values) format when inserting data.
       * Default value: **true** (SQL parser is enabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-input_format_values_interpret_expressions).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_values_interpret_expressions = 61;</code>
       * @return Whether the inputFormatValuesInterpretExpressions field is set.
       */
      public boolean hasInputFormatValuesInterpretExpressions() {
        return inputFormatValuesInterpretExpressionsBuilder_ != null || inputFormatValuesInterpretExpressions_ != null;
      }
      /**
       * <pre>
       * Enables or disables SQL parser if the fast stream parser cannot parse the data.
       * Enable this setting, if the data that you want to insert into a table contains SQL expressions.
       * For example, the stream parser is unable to parse a value that contains **now()** expression; therefore an **INSERT** query for this value will fail and no data will be inserted into a table.
       * With enabled SQL parser, this expression is parsed correctly: the **now()** expression will be parsed as SQL function, interpreted, and the current date and time will be inserted into the table as a result.
       * This setting has effect only if you use [Values](https://clickhouse.com/docs/en/interfaces/formats/#data-format-values) format when inserting data.
       * Default value: **true** (SQL parser is enabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-input_format_values_interpret_expressions).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_values_interpret_expressions = 61;</code>
       * @return The inputFormatValuesInterpretExpressions.
       */
      public com.google.protobuf.BoolValue getInputFormatValuesInterpretExpressions() {
        if (inputFormatValuesInterpretExpressionsBuilder_ == null) {
          return inputFormatValuesInterpretExpressions_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : inputFormatValuesInterpretExpressions_;
        } else {
          return inputFormatValuesInterpretExpressionsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enables or disables SQL parser if the fast stream parser cannot parse the data.
       * Enable this setting, if the data that you want to insert into a table contains SQL expressions.
       * For example, the stream parser is unable to parse a value that contains **now()** expression; therefore an **INSERT** query for this value will fail and no data will be inserted into a table.
       * With enabled SQL parser, this expression is parsed correctly: the **now()** expression will be parsed as SQL function, interpreted, and the current date and time will be inserted into the table as a result.
       * This setting has effect only if you use [Values](https://clickhouse.com/docs/en/interfaces/formats/#data-format-values) format when inserting data.
       * Default value: **true** (SQL parser is enabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-input_format_values_interpret_expressions).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_values_interpret_expressions = 61;</code>
       */
      public Builder setInputFormatValuesInterpretExpressions(com.google.protobuf.BoolValue value) {
        if (inputFormatValuesInterpretExpressionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          inputFormatValuesInterpretExpressions_ = value;
          onChanged();
        } else {
          inputFormatValuesInterpretExpressionsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables SQL parser if the fast stream parser cannot parse the data.
       * Enable this setting, if the data that you want to insert into a table contains SQL expressions.
       * For example, the stream parser is unable to parse a value that contains **now()** expression; therefore an **INSERT** query for this value will fail and no data will be inserted into a table.
       * With enabled SQL parser, this expression is parsed correctly: the **now()** expression will be parsed as SQL function, interpreted, and the current date and time will be inserted into the table as a result.
       * This setting has effect only if you use [Values](https://clickhouse.com/docs/en/interfaces/formats/#data-format-values) format when inserting data.
       * Default value: **true** (SQL parser is enabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-input_format_values_interpret_expressions).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_values_interpret_expressions = 61;</code>
       */
      public Builder setInputFormatValuesInterpretExpressions(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (inputFormatValuesInterpretExpressionsBuilder_ == null) {
          inputFormatValuesInterpretExpressions_ = builderForValue.build();
          onChanged();
        } else {
          inputFormatValuesInterpretExpressionsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables SQL parser if the fast stream parser cannot parse the data.
       * Enable this setting, if the data that you want to insert into a table contains SQL expressions.
       * For example, the stream parser is unable to parse a value that contains **now()** expression; therefore an **INSERT** query for this value will fail and no data will be inserted into a table.
       * With enabled SQL parser, this expression is parsed correctly: the **now()** expression will be parsed as SQL function, interpreted, and the current date and time will be inserted into the table as a result.
       * This setting has effect only if you use [Values](https://clickhouse.com/docs/en/interfaces/formats/#data-format-values) format when inserting data.
       * Default value: **true** (SQL parser is enabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-input_format_values_interpret_expressions).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_values_interpret_expressions = 61;</code>
       */
      public Builder mergeInputFormatValuesInterpretExpressions(com.google.protobuf.BoolValue value) {
        if (inputFormatValuesInterpretExpressionsBuilder_ == null) {
          if (inputFormatValuesInterpretExpressions_ != null) {
            inputFormatValuesInterpretExpressions_ =
              com.google.protobuf.BoolValue.newBuilder(inputFormatValuesInterpretExpressions_).mergeFrom(value).buildPartial();
          } else {
            inputFormatValuesInterpretExpressions_ = value;
          }
          onChanged();
        } else {
          inputFormatValuesInterpretExpressionsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables SQL parser if the fast stream parser cannot parse the data.
       * Enable this setting, if the data that you want to insert into a table contains SQL expressions.
       * For example, the stream parser is unable to parse a value that contains **now()** expression; therefore an **INSERT** query for this value will fail and no data will be inserted into a table.
       * With enabled SQL parser, this expression is parsed correctly: the **now()** expression will be parsed as SQL function, interpreted, and the current date and time will be inserted into the table as a result.
       * This setting has effect only if you use [Values](https://clickhouse.com/docs/en/interfaces/formats/#data-format-values) format when inserting data.
       * Default value: **true** (SQL parser is enabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-input_format_values_interpret_expressions).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_values_interpret_expressions = 61;</code>
       */
      public Builder clearInputFormatValuesInterpretExpressions() {
        if (inputFormatValuesInterpretExpressionsBuilder_ == null) {
          inputFormatValuesInterpretExpressions_ = null;
          onChanged();
        } else {
          inputFormatValuesInterpretExpressions_ = null;
          inputFormatValuesInterpretExpressionsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables SQL parser if the fast stream parser cannot parse the data.
       * Enable this setting, if the data that you want to insert into a table contains SQL expressions.
       * For example, the stream parser is unable to parse a value that contains **now()** expression; therefore an **INSERT** query for this value will fail and no data will be inserted into a table.
       * With enabled SQL parser, this expression is parsed correctly: the **now()** expression will be parsed as SQL function, interpreted, and the current date and time will be inserted into the table as a result.
       * This setting has effect only if you use [Values](https://clickhouse.com/docs/en/interfaces/formats/#data-format-values) format when inserting data.
       * Default value: **true** (SQL parser is enabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-input_format_values_interpret_expressions).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_values_interpret_expressions = 61;</code>
       */
      public com.google.protobuf.BoolValue.Builder getInputFormatValuesInterpretExpressionsBuilder() {
        
        onChanged();
        return getInputFormatValuesInterpretExpressionsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enables or disables SQL parser if the fast stream parser cannot parse the data.
       * Enable this setting, if the data that you want to insert into a table contains SQL expressions.
       * For example, the stream parser is unable to parse a value that contains **now()** expression; therefore an **INSERT** query for this value will fail and no data will be inserted into a table.
       * With enabled SQL parser, this expression is parsed correctly: the **now()** expression will be parsed as SQL function, interpreted, and the current date and time will be inserted into the table as a result.
       * This setting has effect only if you use [Values](https://clickhouse.com/docs/en/interfaces/formats/#data-format-values) format when inserting data.
       * Default value: **true** (SQL parser is enabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-input_format_values_interpret_expressions).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_values_interpret_expressions = 61;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getInputFormatValuesInterpretExpressionsOrBuilder() {
        if (inputFormatValuesInterpretExpressionsBuilder_ != null) {
          return inputFormatValuesInterpretExpressionsBuilder_.getMessageOrBuilder();
        } else {
          return inputFormatValuesInterpretExpressions_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : inputFormatValuesInterpretExpressions_;
        }
      }
      /**
       * <pre>
       * Enables or disables SQL parser if the fast stream parser cannot parse the data.
       * Enable this setting, if the data that you want to insert into a table contains SQL expressions.
       * For example, the stream parser is unable to parse a value that contains **now()** expression; therefore an **INSERT** query for this value will fail and no data will be inserted into a table.
       * With enabled SQL parser, this expression is parsed correctly: the **now()** expression will be parsed as SQL function, interpreted, and the current date and time will be inserted into the table as a result.
       * This setting has effect only if you use [Values](https://clickhouse.com/docs/en/interfaces/formats/#data-format-values) format when inserting data.
       * Default value: **true** (SQL parser is enabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-input_format_values_interpret_expressions).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_values_interpret_expressions = 61;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getInputFormatValuesInterpretExpressionsFieldBuilder() {
        if (inputFormatValuesInterpretExpressionsBuilder_ == null) {
          inputFormatValuesInterpretExpressionsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getInputFormatValuesInterpretExpressions(),
                  getParentForChildren(),
                  isClean());
          inputFormatValuesInterpretExpressions_ = null;
        }
        return inputFormatValuesInterpretExpressionsBuilder_;
      }

      private com.google.protobuf.BoolValue inputFormatDefaultsForOmittedFields_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> inputFormatDefaultsForOmittedFieldsBuilder_;
      /**
       * <pre>
       * Enables or disables replacing omitted input values with default values of the respective columns when performing **INSERT** queries.
       * Default value: **true** (replacing is enabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_defaults_for_omitted_fields = 62;</code>
       * @return Whether the inputFormatDefaultsForOmittedFields field is set.
       */
      public boolean hasInputFormatDefaultsForOmittedFields() {
        return inputFormatDefaultsForOmittedFieldsBuilder_ != null || inputFormatDefaultsForOmittedFields_ != null;
      }
      /**
       * <pre>
       * Enables or disables replacing omitted input values with default values of the respective columns when performing **INSERT** queries.
       * Default value: **true** (replacing is enabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_defaults_for_omitted_fields = 62;</code>
       * @return The inputFormatDefaultsForOmittedFields.
       */
      public com.google.protobuf.BoolValue getInputFormatDefaultsForOmittedFields() {
        if (inputFormatDefaultsForOmittedFieldsBuilder_ == null) {
          return inputFormatDefaultsForOmittedFields_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : inputFormatDefaultsForOmittedFields_;
        } else {
          return inputFormatDefaultsForOmittedFieldsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enables or disables replacing omitted input values with default values of the respective columns when performing **INSERT** queries.
       * Default value: **true** (replacing is enabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_defaults_for_omitted_fields = 62;</code>
       */
      public Builder setInputFormatDefaultsForOmittedFields(com.google.protobuf.BoolValue value) {
        if (inputFormatDefaultsForOmittedFieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          inputFormatDefaultsForOmittedFields_ = value;
          onChanged();
        } else {
          inputFormatDefaultsForOmittedFieldsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables replacing omitted input values with default values of the respective columns when performing **INSERT** queries.
       * Default value: **true** (replacing is enabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_defaults_for_omitted_fields = 62;</code>
       */
      public Builder setInputFormatDefaultsForOmittedFields(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (inputFormatDefaultsForOmittedFieldsBuilder_ == null) {
          inputFormatDefaultsForOmittedFields_ = builderForValue.build();
          onChanged();
        } else {
          inputFormatDefaultsForOmittedFieldsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables replacing omitted input values with default values of the respective columns when performing **INSERT** queries.
       * Default value: **true** (replacing is enabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_defaults_for_omitted_fields = 62;</code>
       */
      public Builder mergeInputFormatDefaultsForOmittedFields(com.google.protobuf.BoolValue value) {
        if (inputFormatDefaultsForOmittedFieldsBuilder_ == null) {
          if (inputFormatDefaultsForOmittedFields_ != null) {
            inputFormatDefaultsForOmittedFields_ =
              com.google.protobuf.BoolValue.newBuilder(inputFormatDefaultsForOmittedFields_).mergeFrom(value).buildPartial();
          } else {
            inputFormatDefaultsForOmittedFields_ = value;
          }
          onChanged();
        } else {
          inputFormatDefaultsForOmittedFieldsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables replacing omitted input values with default values of the respective columns when performing **INSERT** queries.
       * Default value: **true** (replacing is enabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_defaults_for_omitted_fields = 62;</code>
       */
      public Builder clearInputFormatDefaultsForOmittedFields() {
        if (inputFormatDefaultsForOmittedFieldsBuilder_ == null) {
          inputFormatDefaultsForOmittedFields_ = null;
          onChanged();
        } else {
          inputFormatDefaultsForOmittedFields_ = null;
          inputFormatDefaultsForOmittedFieldsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables replacing omitted input values with default values of the respective columns when performing **INSERT** queries.
       * Default value: **true** (replacing is enabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_defaults_for_omitted_fields = 62;</code>
       */
      public com.google.protobuf.BoolValue.Builder getInputFormatDefaultsForOmittedFieldsBuilder() {
        
        onChanged();
        return getInputFormatDefaultsForOmittedFieldsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enables or disables replacing omitted input values with default values of the respective columns when performing **INSERT** queries.
       * Default value: **true** (replacing is enabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_defaults_for_omitted_fields = 62;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getInputFormatDefaultsForOmittedFieldsOrBuilder() {
        if (inputFormatDefaultsForOmittedFieldsBuilder_ != null) {
          return inputFormatDefaultsForOmittedFieldsBuilder_.getMessageOrBuilder();
        } else {
          return inputFormatDefaultsForOmittedFields_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : inputFormatDefaultsForOmittedFields_;
        }
      }
      /**
       * <pre>
       * Enables or disables replacing omitted input values with default values of the respective columns when performing **INSERT** queries.
       * Default value: **true** (replacing is enabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_defaults_for_omitted_fields = 62;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getInputFormatDefaultsForOmittedFieldsFieldBuilder() {
        if (inputFormatDefaultsForOmittedFieldsBuilder_ == null) {
          inputFormatDefaultsForOmittedFieldsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getInputFormatDefaultsForOmittedFields(),
                  getParentForChildren(),
                  isClean());
          inputFormatDefaultsForOmittedFields_ = null;
        }
        return inputFormatDefaultsForOmittedFieldsBuilder_;
      }

      private com.google.protobuf.BoolValue inputFormatNullAsDefault_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> inputFormatNullAsDefaultBuilder_;
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_null_as_default).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_null_as_default = 106;</code>
       * @return Whether the inputFormatNullAsDefault field is set.
       */
      public boolean hasInputFormatNullAsDefault() {
        return inputFormatNullAsDefaultBuilder_ != null || inputFormatNullAsDefault_ != null;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_null_as_default).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_null_as_default = 106;</code>
       * @return The inputFormatNullAsDefault.
       */
      public com.google.protobuf.BoolValue getInputFormatNullAsDefault() {
        if (inputFormatNullAsDefaultBuilder_ == null) {
          return inputFormatNullAsDefault_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : inputFormatNullAsDefault_;
        } else {
          return inputFormatNullAsDefaultBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_null_as_default).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_null_as_default = 106;</code>
       */
      public Builder setInputFormatNullAsDefault(com.google.protobuf.BoolValue value) {
        if (inputFormatNullAsDefaultBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          inputFormatNullAsDefault_ = value;
          onChanged();
        } else {
          inputFormatNullAsDefaultBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_null_as_default).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_null_as_default = 106;</code>
       */
      public Builder setInputFormatNullAsDefault(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (inputFormatNullAsDefaultBuilder_ == null) {
          inputFormatNullAsDefault_ = builderForValue.build();
          onChanged();
        } else {
          inputFormatNullAsDefaultBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_null_as_default).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_null_as_default = 106;</code>
       */
      public Builder mergeInputFormatNullAsDefault(com.google.protobuf.BoolValue value) {
        if (inputFormatNullAsDefaultBuilder_ == null) {
          if (inputFormatNullAsDefault_ != null) {
            inputFormatNullAsDefault_ =
              com.google.protobuf.BoolValue.newBuilder(inputFormatNullAsDefault_).mergeFrom(value).buildPartial();
          } else {
            inputFormatNullAsDefault_ = value;
          }
          onChanged();
        } else {
          inputFormatNullAsDefaultBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_null_as_default).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_null_as_default = 106;</code>
       */
      public Builder clearInputFormatNullAsDefault() {
        if (inputFormatNullAsDefaultBuilder_ == null) {
          inputFormatNullAsDefault_ = null;
          onChanged();
        } else {
          inputFormatNullAsDefault_ = null;
          inputFormatNullAsDefaultBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_null_as_default).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_null_as_default = 106;</code>
       */
      public com.google.protobuf.BoolValue.Builder getInputFormatNullAsDefaultBuilder() {
        
        onChanged();
        return getInputFormatNullAsDefaultFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_null_as_default).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_null_as_default = 106;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getInputFormatNullAsDefaultOrBuilder() {
        if (inputFormatNullAsDefaultBuilder_ != null) {
          return inputFormatNullAsDefaultBuilder_.getMessageOrBuilder();
        } else {
          return inputFormatNullAsDefault_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : inputFormatNullAsDefault_;
        }
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_null_as_default).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_null_as_default = 106;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getInputFormatNullAsDefaultFieldBuilder() {
        if (inputFormatNullAsDefaultBuilder_ == null) {
          inputFormatNullAsDefaultBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getInputFormatNullAsDefault(),
                  getParentForChildren(),
                  isClean());
          inputFormatNullAsDefault_ = null;
        }
        return inputFormatNullAsDefaultBuilder_;
      }

      private int dateTimeInputFormat_ = 0;
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#date_time_input_format).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.DateTimeInputFormat date_time_input_format = 107;</code>
       * @return The enum numeric value on the wire for dateTimeInputFormat.
       */
      @java.lang.Override public int getDateTimeInputFormatValue() {
        return dateTimeInputFormat_;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#date_time_input_format).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.DateTimeInputFormat date_time_input_format = 107;</code>
       * @param value The enum numeric value on the wire for dateTimeInputFormat to set.
       * @return This builder for chaining.
       */
      public Builder setDateTimeInputFormatValue(int value) {
        
        dateTimeInputFormat_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#date_time_input_format).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.DateTimeInputFormat date_time_input_format = 107;</code>
       * @return The dateTimeInputFormat.
       */
      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DateTimeInputFormat getDateTimeInputFormat() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DateTimeInputFormat result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DateTimeInputFormat.valueOf(dateTimeInputFormat_);
        return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DateTimeInputFormat.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#date_time_input_format).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.DateTimeInputFormat date_time_input_format = 107;</code>
       * @param value The dateTimeInputFormat to set.
       * @return This builder for chaining.
       */
      public Builder setDateTimeInputFormat(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DateTimeInputFormat value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        dateTimeInputFormat_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#date_time_input_format).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.DateTimeInputFormat date_time_input_format = 107;</code>
       * @return This builder for chaining.
       */
      public Builder clearDateTimeInputFormat() {
        
        dateTimeInputFormat_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.BoolValue inputFormatWithNamesUseHeader_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> inputFormatWithNamesUseHeaderBuilder_;
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_with_names_use_header).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_with_names_use_header = 108;</code>
       * @return Whether the inputFormatWithNamesUseHeader field is set.
       */
      public boolean hasInputFormatWithNamesUseHeader() {
        return inputFormatWithNamesUseHeaderBuilder_ != null || inputFormatWithNamesUseHeader_ != null;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_with_names_use_header).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_with_names_use_header = 108;</code>
       * @return The inputFormatWithNamesUseHeader.
       */
      public com.google.protobuf.BoolValue getInputFormatWithNamesUseHeader() {
        if (inputFormatWithNamesUseHeaderBuilder_ == null) {
          return inputFormatWithNamesUseHeader_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : inputFormatWithNamesUseHeader_;
        } else {
          return inputFormatWithNamesUseHeaderBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_with_names_use_header).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_with_names_use_header = 108;</code>
       */
      public Builder setInputFormatWithNamesUseHeader(com.google.protobuf.BoolValue value) {
        if (inputFormatWithNamesUseHeaderBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          inputFormatWithNamesUseHeader_ = value;
          onChanged();
        } else {
          inputFormatWithNamesUseHeaderBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_with_names_use_header).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_with_names_use_header = 108;</code>
       */
      public Builder setInputFormatWithNamesUseHeader(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (inputFormatWithNamesUseHeaderBuilder_ == null) {
          inputFormatWithNamesUseHeader_ = builderForValue.build();
          onChanged();
        } else {
          inputFormatWithNamesUseHeaderBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_with_names_use_header).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_with_names_use_header = 108;</code>
       */
      public Builder mergeInputFormatWithNamesUseHeader(com.google.protobuf.BoolValue value) {
        if (inputFormatWithNamesUseHeaderBuilder_ == null) {
          if (inputFormatWithNamesUseHeader_ != null) {
            inputFormatWithNamesUseHeader_ =
              com.google.protobuf.BoolValue.newBuilder(inputFormatWithNamesUseHeader_).mergeFrom(value).buildPartial();
          } else {
            inputFormatWithNamesUseHeader_ = value;
          }
          onChanged();
        } else {
          inputFormatWithNamesUseHeaderBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_with_names_use_header).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_with_names_use_header = 108;</code>
       */
      public Builder clearInputFormatWithNamesUseHeader() {
        if (inputFormatWithNamesUseHeaderBuilder_ == null) {
          inputFormatWithNamesUseHeader_ = null;
          onChanged();
        } else {
          inputFormatWithNamesUseHeader_ = null;
          inputFormatWithNamesUseHeaderBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_with_names_use_header).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_with_names_use_header = 108;</code>
       */
      public com.google.protobuf.BoolValue.Builder getInputFormatWithNamesUseHeaderBuilder() {
        
        onChanged();
        return getInputFormatWithNamesUseHeaderFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_with_names_use_header).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_with_names_use_header = 108;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getInputFormatWithNamesUseHeaderOrBuilder() {
        if (inputFormatWithNamesUseHeaderBuilder_ != null) {
          return inputFormatWithNamesUseHeaderBuilder_.getMessageOrBuilder();
        } else {
          return inputFormatWithNamesUseHeader_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : inputFormatWithNamesUseHeader_;
        }
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#input_format_with_names_use_header).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_with_names_use_header = 108;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getInputFormatWithNamesUseHeaderFieldBuilder() {
        if (inputFormatWithNamesUseHeaderBuilder_ == null) {
          inputFormatWithNamesUseHeaderBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getInputFormatWithNamesUseHeader(),
                  getParentForChildren(),
                  isClean());
          inputFormatWithNamesUseHeader_ = null;
        }
        return inputFormatWithNamesUseHeaderBuilder_;
      }

      private com.google.protobuf.BoolValue outputFormatJsonQuote64BitIntegers_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> outputFormatJsonQuote64BitIntegersBuilder_;
      /**
       * <pre>
       * Enables quoting of 64-bit integers in JSON output format.
       * If this setting is enabled, then 64-bit integers (**UInt64** and **Int64**) will be quoted when written to JSON output in order to maintain compatibility with the most of the JavaScript engines.
       * Otherwise, such integers will not be quoted.
       * Default value: **false** (quoting 64-bit integers is disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue output_format_json_quote_64bit_integers = 63 [json_name = "outputFormatJsonQuote_64bitIntegers"];</code>
       * @return Whether the outputFormatJsonQuote64bitIntegers field is set.
       */
      public boolean hasOutputFormatJsonQuote64BitIntegers() {
        return outputFormatJsonQuote64BitIntegersBuilder_ != null || outputFormatJsonQuote64BitIntegers_ != null;
      }
      /**
       * <pre>
       * Enables quoting of 64-bit integers in JSON output format.
       * If this setting is enabled, then 64-bit integers (**UInt64** and **Int64**) will be quoted when written to JSON output in order to maintain compatibility with the most of the JavaScript engines.
       * Otherwise, such integers will not be quoted.
       * Default value: **false** (quoting 64-bit integers is disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue output_format_json_quote_64bit_integers = 63 [json_name = "outputFormatJsonQuote_64bitIntegers"];</code>
       * @return The outputFormatJsonQuote64bitIntegers.
       */
      public com.google.protobuf.BoolValue getOutputFormatJsonQuote64BitIntegers() {
        if (outputFormatJsonQuote64BitIntegersBuilder_ == null) {
          return outputFormatJsonQuote64BitIntegers_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : outputFormatJsonQuote64BitIntegers_;
        } else {
          return outputFormatJsonQuote64BitIntegersBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enables quoting of 64-bit integers in JSON output format.
       * If this setting is enabled, then 64-bit integers (**UInt64** and **Int64**) will be quoted when written to JSON output in order to maintain compatibility with the most of the JavaScript engines.
       * Otherwise, such integers will not be quoted.
       * Default value: **false** (quoting 64-bit integers is disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue output_format_json_quote_64bit_integers = 63 [json_name = "outputFormatJsonQuote_64bitIntegers"];</code>
       */
      public Builder setOutputFormatJsonQuote64BitIntegers(com.google.protobuf.BoolValue value) {
        if (outputFormatJsonQuote64BitIntegersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          outputFormatJsonQuote64BitIntegers_ = value;
          onChanged();
        } else {
          outputFormatJsonQuote64BitIntegersBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables quoting of 64-bit integers in JSON output format.
       * If this setting is enabled, then 64-bit integers (**UInt64** and **Int64**) will be quoted when written to JSON output in order to maintain compatibility with the most of the JavaScript engines.
       * Otherwise, such integers will not be quoted.
       * Default value: **false** (quoting 64-bit integers is disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue output_format_json_quote_64bit_integers = 63 [json_name = "outputFormatJsonQuote_64bitIntegers"];</code>
       */
      public Builder setOutputFormatJsonQuote64BitIntegers(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (outputFormatJsonQuote64BitIntegersBuilder_ == null) {
          outputFormatJsonQuote64BitIntegers_ = builderForValue.build();
          onChanged();
        } else {
          outputFormatJsonQuote64BitIntegersBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enables quoting of 64-bit integers in JSON output format.
       * If this setting is enabled, then 64-bit integers (**UInt64** and **Int64**) will be quoted when written to JSON output in order to maintain compatibility with the most of the JavaScript engines.
       * Otherwise, such integers will not be quoted.
       * Default value: **false** (quoting 64-bit integers is disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue output_format_json_quote_64bit_integers = 63 [json_name = "outputFormatJsonQuote_64bitIntegers"];</code>
       */
      public Builder mergeOutputFormatJsonQuote64BitIntegers(com.google.protobuf.BoolValue value) {
        if (outputFormatJsonQuote64BitIntegersBuilder_ == null) {
          if (outputFormatJsonQuote64BitIntegers_ != null) {
            outputFormatJsonQuote64BitIntegers_ =
              com.google.protobuf.BoolValue.newBuilder(outputFormatJsonQuote64BitIntegers_).mergeFrom(value).buildPartial();
          } else {
            outputFormatJsonQuote64BitIntegers_ = value;
          }
          onChanged();
        } else {
          outputFormatJsonQuote64BitIntegersBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables quoting of 64-bit integers in JSON output format.
       * If this setting is enabled, then 64-bit integers (**UInt64** and **Int64**) will be quoted when written to JSON output in order to maintain compatibility with the most of the JavaScript engines.
       * Otherwise, such integers will not be quoted.
       * Default value: **false** (quoting 64-bit integers is disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue output_format_json_quote_64bit_integers = 63 [json_name = "outputFormatJsonQuote_64bitIntegers"];</code>
       */
      public Builder clearOutputFormatJsonQuote64BitIntegers() {
        if (outputFormatJsonQuote64BitIntegersBuilder_ == null) {
          outputFormatJsonQuote64BitIntegers_ = null;
          onChanged();
        } else {
          outputFormatJsonQuote64BitIntegers_ = null;
          outputFormatJsonQuote64BitIntegersBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enables quoting of 64-bit integers in JSON output format.
       * If this setting is enabled, then 64-bit integers (**UInt64** and **Int64**) will be quoted when written to JSON output in order to maintain compatibility with the most of the JavaScript engines.
       * Otherwise, such integers will not be quoted.
       * Default value: **false** (quoting 64-bit integers is disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue output_format_json_quote_64bit_integers = 63 [json_name = "outputFormatJsonQuote_64bitIntegers"];</code>
       */
      public com.google.protobuf.BoolValue.Builder getOutputFormatJsonQuote64BitIntegersBuilder() {
        
        onChanged();
        return getOutputFormatJsonQuote64BitIntegersFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enables quoting of 64-bit integers in JSON output format.
       * If this setting is enabled, then 64-bit integers (**UInt64** and **Int64**) will be quoted when written to JSON output in order to maintain compatibility with the most of the JavaScript engines.
       * Otherwise, such integers will not be quoted.
       * Default value: **false** (quoting 64-bit integers is disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue output_format_json_quote_64bit_integers = 63 [json_name = "outputFormatJsonQuote_64bitIntegers"];</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getOutputFormatJsonQuote64BitIntegersOrBuilder() {
        if (outputFormatJsonQuote64BitIntegersBuilder_ != null) {
          return outputFormatJsonQuote64BitIntegersBuilder_.getMessageOrBuilder();
        } else {
          return outputFormatJsonQuote64BitIntegers_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : outputFormatJsonQuote64BitIntegers_;
        }
      }
      /**
       * <pre>
       * Enables quoting of 64-bit integers in JSON output format.
       * If this setting is enabled, then 64-bit integers (**UInt64** and **Int64**) will be quoted when written to JSON output in order to maintain compatibility with the most of the JavaScript engines.
       * Otherwise, such integers will not be quoted.
       * Default value: **false** (quoting 64-bit integers is disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue output_format_json_quote_64bit_integers = 63 [json_name = "outputFormatJsonQuote_64bitIntegers"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getOutputFormatJsonQuote64BitIntegersFieldBuilder() {
        if (outputFormatJsonQuote64BitIntegersBuilder_ == null) {
          outputFormatJsonQuote64BitIntegersBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getOutputFormatJsonQuote64BitIntegers(),
                  getParentForChildren(),
                  isClean());
          outputFormatJsonQuote64BitIntegers_ = null;
        }
        return outputFormatJsonQuote64BitIntegersBuilder_;
      }

      private com.google.protobuf.BoolValue outputFormatJsonQuoteDenormals_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> outputFormatJsonQuoteDenormalsBuilder_;
      /**
       * <pre>
       * Enables special floating-point values (**+nan**, **-nan**, **+inf** and **-inf**) in JSON output format.
       * Default value: **false** (special values do not present in output).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue output_format_json_quote_denormals = 64;</code>
       * @return Whether the outputFormatJsonQuoteDenormals field is set.
       */
      public boolean hasOutputFormatJsonQuoteDenormals() {
        return outputFormatJsonQuoteDenormalsBuilder_ != null || outputFormatJsonQuoteDenormals_ != null;
      }
      /**
       * <pre>
       * Enables special floating-point values (**+nan**, **-nan**, **+inf** and **-inf**) in JSON output format.
       * Default value: **false** (special values do not present in output).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue output_format_json_quote_denormals = 64;</code>
       * @return The outputFormatJsonQuoteDenormals.
       */
      public com.google.protobuf.BoolValue getOutputFormatJsonQuoteDenormals() {
        if (outputFormatJsonQuoteDenormalsBuilder_ == null) {
          return outputFormatJsonQuoteDenormals_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : outputFormatJsonQuoteDenormals_;
        } else {
          return outputFormatJsonQuoteDenormalsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enables special floating-point values (**+nan**, **-nan**, **+inf** and **-inf**) in JSON output format.
       * Default value: **false** (special values do not present in output).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue output_format_json_quote_denormals = 64;</code>
       */
      public Builder setOutputFormatJsonQuoteDenormals(com.google.protobuf.BoolValue value) {
        if (outputFormatJsonQuoteDenormalsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          outputFormatJsonQuoteDenormals_ = value;
          onChanged();
        } else {
          outputFormatJsonQuoteDenormalsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables special floating-point values (**+nan**, **-nan**, **+inf** and **-inf**) in JSON output format.
       * Default value: **false** (special values do not present in output).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue output_format_json_quote_denormals = 64;</code>
       */
      public Builder setOutputFormatJsonQuoteDenormals(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (outputFormatJsonQuoteDenormalsBuilder_ == null) {
          outputFormatJsonQuoteDenormals_ = builderForValue.build();
          onChanged();
        } else {
          outputFormatJsonQuoteDenormalsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enables special floating-point values (**+nan**, **-nan**, **+inf** and **-inf**) in JSON output format.
       * Default value: **false** (special values do not present in output).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue output_format_json_quote_denormals = 64;</code>
       */
      public Builder mergeOutputFormatJsonQuoteDenormals(com.google.protobuf.BoolValue value) {
        if (outputFormatJsonQuoteDenormalsBuilder_ == null) {
          if (outputFormatJsonQuoteDenormals_ != null) {
            outputFormatJsonQuoteDenormals_ =
              com.google.protobuf.BoolValue.newBuilder(outputFormatJsonQuoteDenormals_).mergeFrom(value).buildPartial();
          } else {
            outputFormatJsonQuoteDenormals_ = value;
          }
          onChanged();
        } else {
          outputFormatJsonQuoteDenormalsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables special floating-point values (**+nan**, **-nan**, **+inf** and **-inf**) in JSON output format.
       * Default value: **false** (special values do not present in output).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue output_format_json_quote_denormals = 64;</code>
       */
      public Builder clearOutputFormatJsonQuoteDenormals() {
        if (outputFormatJsonQuoteDenormalsBuilder_ == null) {
          outputFormatJsonQuoteDenormals_ = null;
          onChanged();
        } else {
          outputFormatJsonQuoteDenormals_ = null;
          outputFormatJsonQuoteDenormalsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enables special floating-point values (**+nan**, **-nan**, **+inf** and **-inf**) in JSON output format.
       * Default value: **false** (special values do not present in output).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue output_format_json_quote_denormals = 64;</code>
       */
      public com.google.protobuf.BoolValue.Builder getOutputFormatJsonQuoteDenormalsBuilder() {
        
        onChanged();
        return getOutputFormatJsonQuoteDenormalsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enables special floating-point values (**+nan**, **-nan**, **+inf** and **-inf**) in JSON output format.
       * Default value: **false** (special values do not present in output).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue output_format_json_quote_denormals = 64;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getOutputFormatJsonQuoteDenormalsOrBuilder() {
        if (outputFormatJsonQuoteDenormalsBuilder_ != null) {
          return outputFormatJsonQuoteDenormalsBuilder_.getMessageOrBuilder();
        } else {
          return outputFormatJsonQuoteDenormals_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : outputFormatJsonQuoteDenormals_;
        }
      }
      /**
       * <pre>
       * Enables special floating-point values (**+nan**, **-nan**, **+inf** and **-inf**) in JSON output format.
       * Default value: **false** (special values do not present in output).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue output_format_json_quote_denormals = 64;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getOutputFormatJsonQuoteDenormalsFieldBuilder() {
        if (outputFormatJsonQuoteDenormalsBuilder_ == null) {
          outputFormatJsonQuoteDenormalsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getOutputFormatJsonQuoteDenormals(),
                  getParentForChildren(),
                  isClean());
          outputFormatJsonQuoteDenormals_ = null;
        }
        return outputFormatJsonQuoteDenormalsBuilder_;
      }

      private int dateTimeOutputFormat_ = 0;
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#date_time_output_format).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.DateTimeOutputFormat date_time_output_format = 109;</code>
       * @return The enum numeric value on the wire for dateTimeOutputFormat.
       */
      @java.lang.Override public int getDateTimeOutputFormatValue() {
        return dateTimeOutputFormat_;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#date_time_output_format).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.DateTimeOutputFormat date_time_output_format = 109;</code>
       * @param value The enum numeric value on the wire for dateTimeOutputFormat to set.
       * @return This builder for chaining.
       */
      public Builder setDateTimeOutputFormatValue(int value) {
        
        dateTimeOutputFormat_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#date_time_output_format).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.DateTimeOutputFormat date_time_output_format = 109;</code>
       * @return The dateTimeOutputFormat.
       */
      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DateTimeOutputFormat getDateTimeOutputFormat() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DateTimeOutputFormat result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DateTimeOutputFormat.valueOf(dateTimeOutputFormat_);
        return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DateTimeOutputFormat.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#date_time_output_format).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.DateTimeOutputFormat date_time_output_format = 109;</code>
       * @param value The dateTimeOutputFormat to set.
       * @return This builder for chaining.
       */
      public Builder setDateTimeOutputFormat(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.DateTimeOutputFormat value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        dateTimeOutputFormat_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#date_time_output_format).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.DateTimeOutputFormat date_time_output_format = 109;</code>
       * @return This builder for chaining.
       */
      public Builder clearDateTimeOutputFormat() {
        
        dateTimeOutputFormat_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.BoolValue lowCardinalityAllowInNativeFormat_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> lowCardinalityAllowInNativeFormatBuilder_;
      /**
       * <pre>
       * Determines whether to use LowCardinality type in Native format.
       * * **true** (default)-yes, use.
       * * **false**-convert LowCardinality columns to regular columns when doing **SELECT**, and convert regular columns to LowCardinality when doing **INSERT**.
       * LowCardinality columns (aka sparse columns) store data in more effective way, compared to regular columns, by using hash tables.
       * If data to insert suits this storage format, ClickHouse will place them into LowCardinality column.
       * If you use a third-party ClickHouse client that can't work with LowCardinality columns, then this client will not be able to correctly interpret the result of the query that asks for data stored in LowCardinality column.
       * Disable this setting to convert LowCardinality column to regular column when creating the result, so such clients will be able to process the result.
       * Official ClickHouse client works with LowCardinality columns out-of-the-box.
       * Default value: **true** (LowCardinality columns are used in Native format).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue low_cardinality_allow_in_native_format = 78;</code>
       * @return Whether the lowCardinalityAllowInNativeFormat field is set.
       */
      public boolean hasLowCardinalityAllowInNativeFormat() {
        return lowCardinalityAllowInNativeFormatBuilder_ != null || lowCardinalityAllowInNativeFormat_ != null;
      }
      /**
       * <pre>
       * Determines whether to use LowCardinality type in Native format.
       * * **true** (default)-yes, use.
       * * **false**-convert LowCardinality columns to regular columns when doing **SELECT**, and convert regular columns to LowCardinality when doing **INSERT**.
       * LowCardinality columns (aka sparse columns) store data in more effective way, compared to regular columns, by using hash tables.
       * If data to insert suits this storage format, ClickHouse will place them into LowCardinality column.
       * If you use a third-party ClickHouse client that can't work with LowCardinality columns, then this client will not be able to correctly interpret the result of the query that asks for data stored in LowCardinality column.
       * Disable this setting to convert LowCardinality column to regular column when creating the result, so such clients will be able to process the result.
       * Official ClickHouse client works with LowCardinality columns out-of-the-box.
       * Default value: **true** (LowCardinality columns are used in Native format).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue low_cardinality_allow_in_native_format = 78;</code>
       * @return The lowCardinalityAllowInNativeFormat.
       */
      public com.google.protobuf.BoolValue getLowCardinalityAllowInNativeFormat() {
        if (lowCardinalityAllowInNativeFormatBuilder_ == null) {
          return lowCardinalityAllowInNativeFormat_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : lowCardinalityAllowInNativeFormat_;
        } else {
          return lowCardinalityAllowInNativeFormatBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Determines whether to use LowCardinality type in Native format.
       * * **true** (default)-yes, use.
       * * **false**-convert LowCardinality columns to regular columns when doing **SELECT**, and convert regular columns to LowCardinality when doing **INSERT**.
       * LowCardinality columns (aka sparse columns) store data in more effective way, compared to regular columns, by using hash tables.
       * If data to insert suits this storage format, ClickHouse will place them into LowCardinality column.
       * If you use a third-party ClickHouse client that can't work with LowCardinality columns, then this client will not be able to correctly interpret the result of the query that asks for data stored in LowCardinality column.
       * Disable this setting to convert LowCardinality column to regular column when creating the result, so such clients will be able to process the result.
       * Official ClickHouse client works with LowCardinality columns out-of-the-box.
       * Default value: **true** (LowCardinality columns are used in Native format).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue low_cardinality_allow_in_native_format = 78;</code>
       */
      public Builder setLowCardinalityAllowInNativeFormat(com.google.protobuf.BoolValue value) {
        if (lowCardinalityAllowInNativeFormatBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          lowCardinalityAllowInNativeFormat_ = value;
          onChanged();
        } else {
          lowCardinalityAllowInNativeFormatBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Determines whether to use LowCardinality type in Native format.
       * * **true** (default)-yes, use.
       * * **false**-convert LowCardinality columns to regular columns when doing **SELECT**, and convert regular columns to LowCardinality when doing **INSERT**.
       * LowCardinality columns (aka sparse columns) store data in more effective way, compared to regular columns, by using hash tables.
       * If data to insert suits this storage format, ClickHouse will place them into LowCardinality column.
       * If you use a third-party ClickHouse client that can't work with LowCardinality columns, then this client will not be able to correctly interpret the result of the query that asks for data stored in LowCardinality column.
       * Disable this setting to convert LowCardinality column to regular column when creating the result, so such clients will be able to process the result.
       * Official ClickHouse client works with LowCardinality columns out-of-the-box.
       * Default value: **true** (LowCardinality columns are used in Native format).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue low_cardinality_allow_in_native_format = 78;</code>
       */
      public Builder setLowCardinalityAllowInNativeFormat(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (lowCardinalityAllowInNativeFormatBuilder_ == null) {
          lowCardinalityAllowInNativeFormat_ = builderForValue.build();
          onChanged();
        } else {
          lowCardinalityAllowInNativeFormatBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Determines whether to use LowCardinality type in Native format.
       * * **true** (default)-yes, use.
       * * **false**-convert LowCardinality columns to regular columns when doing **SELECT**, and convert regular columns to LowCardinality when doing **INSERT**.
       * LowCardinality columns (aka sparse columns) store data in more effective way, compared to regular columns, by using hash tables.
       * If data to insert suits this storage format, ClickHouse will place them into LowCardinality column.
       * If you use a third-party ClickHouse client that can't work with LowCardinality columns, then this client will not be able to correctly interpret the result of the query that asks for data stored in LowCardinality column.
       * Disable this setting to convert LowCardinality column to regular column when creating the result, so such clients will be able to process the result.
       * Official ClickHouse client works with LowCardinality columns out-of-the-box.
       * Default value: **true** (LowCardinality columns are used in Native format).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue low_cardinality_allow_in_native_format = 78;</code>
       */
      public Builder mergeLowCardinalityAllowInNativeFormat(com.google.protobuf.BoolValue value) {
        if (lowCardinalityAllowInNativeFormatBuilder_ == null) {
          if (lowCardinalityAllowInNativeFormat_ != null) {
            lowCardinalityAllowInNativeFormat_ =
              com.google.protobuf.BoolValue.newBuilder(lowCardinalityAllowInNativeFormat_).mergeFrom(value).buildPartial();
          } else {
            lowCardinalityAllowInNativeFormat_ = value;
          }
          onChanged();
        } else {
          lowCardinalityAllowInNativeFormatBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Determines whether to use LowCardinality type in Native format.
       * * **true** (default)-yes, use.
       * * **false**-convert LowCardinality columns to regular columns when doing **SELECT**, and convert regular columns to LowCardinality when doing **INSERT**.
       * LowCardinality columns (aka sparse columns) store data in more effective way, compared to regular columns, by using hash tables.
       * If data to insert suits this storage format, ClickHouse will place them into LowCardinality column.
       * If you use a third-party ClickHouse client that can't work with LowCardinality columns, then this client will not be able to correctly interpret the result of the query that asks for data stored in LowCardinality column.
       * Disable this setting to convert LowCardinality column to regular column when creating the result, so such clients will be able to process the result.
       * Official ClickHouse client works with LowCardinality columns out-of-the-box.
       * Default value: **true** (LowCardinality columns are used in Native format).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue low_cardinality_allow_in_native_format = 78;</code>
       */
      public Builder clearLowCardinalityAllowInNativeFormat() {
        if (lowCardinalityAllowInNativeFormatBuilder_ == null) {
          lowCardinalityAllowInNativeFormat_ = null;
          onChanged();
        } else {
          lowCardinalityAllowInNativeFormat_ = null;
          lowCardinalityAllowInNativeFormatBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Determines whether to use LowCardinality type in Native format.
       * * **true** (default)-yes, use.
       * * **false**-convert LowCardinality columns to regular columns when doing **SELECT**, and convert regular columns to LowCardinality when doing **INSERT**.
       * LowCardinality columns (aka sparse columns) store data in more effective way, compared to regular columns, by using hash tables.
       * If data to insert suits this storage format, ClickHouse will place them into LowCardinality column.
       * If you use a third-party ClickHouse client that can't work with LowCardinality columns, then this client will not be able to correctly interpret the result of the query that asks for data stored in LowCardinality column.
       * Disable this setting to convert LowCardinality column to regular column when creating the result, so such clients will be able to process the result.
       * Official ClickHouse client works with LowCardinality columns out-of-the-box.
       * Default value: **true** (LowCardinality columns are used in Native format).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue low_cardinality_allow_in_native_format = 78;</code>
       */
      public com.google.protobuf.BoolValue.Builder getLowCardinalityAllowInNativeFormatBuilder() {
        
        onChanged();
        return getLowCardinalityAllowInNativeFormatFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Determines whether to use LowCardinality type in Native format.
       * * **true** (default)-yes, use.
       * * **false**-convert LowCardinality columns to regular columns when doing **SELECT**, and convert regular columns to LowCardinality when doing **INSERT**.
       * LowCardinality columns (aka sparse columns) store data in more effective way, compared to regular columns, by using hash tables.
       * If data to insert suits this storage format, ClickHouse will place them into LowCardinality column.
       * If you use a third-party ClickHouse client that can't work with LowCardinality columns, then this client will not be able to correctly interpret the result of the query that asks for data stored in LowCardinality column.
       * Disable this setting to convert LowCardinality column to regular column when creating the result, so such clients will be able to process the result.
       * Official ClickHouse client works with LowCardinality columns out-of-the-box.
       * Default value: **true** (LowCardinality columns are used in Native format).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue low_cardinality_allow_in_native_format = 78;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getLowCardinalityAllowInNativeFormatOrBuilder() {
        if (lowCardinalityAllowInNativeFormatBuilder_ != null) {
          return lowCardinalityAllowInNativeFormatBuilder_.getMessageOrBuilder();
        } else {
          return lowCardinalityAllowInNativeFormat_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : lowCardinalityAllowInNativeFormat_;
        }
      }
      /**
       * <pre>
       * Determines whether to use LowCardinality type in Native format.
       * * **true** (default)-yes, use.
       * * **false**-convert LowCardinality columns to regular columns when doing **SELECT**, and convert regular columns to LowCardinality when doing **INSERT**.
       * LowCardinality columns (aka sparse columns) store data in more effective way, compared to regular columns, by using hash tables.
       * If data to insert suits this storage format, ClickHouse will place them into LowCardinality column.
       * If you use a third-party ClickHouse client that can't work with LowCardinality columns, then this client will not be able to correctly interpret the result of the query that asks for data stored in LowCardinality column.
       * Disable this setting to convert LowCardinality column to regular column when creating the result, so such clients will be able to process the result.
       * Official ClickHouse client works with LowCardinality columns out-of-the-box.
       * Default value: **true** (LowCardinality columns are used in Native format).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue low_cardinality_allow_in_native_format = 78;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getLowCardinalityAllowInNativeFormatFieldBuilder() {
        if (lowCardinalityAllowInNativeFormatBuilder_ == null) {
          lowCardinalityAllowInNativeFormatBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getLowCardinalityAllowInNativeFormat(),
                  getParentForChildren(),
                  isClean());
          lowCardinalityAllowInNativeFormat_ = null;
        }
        return lowCardinalityAllowInNativeFormatBuilder_;
      }

      private com.google.protobuf.BoolValue allowSuspiciousLowCardinalityTypes_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> allowSuspiciousLowCardinalityTypesBuilder_;
      /**
       * <pre>
       * Allows specifying **LowCardinality** modifier for types of small fixed size (8 or less) in CREATE TABLE statements. Enabling this may increase merge times and memory consumption.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#allow_suspicious_low_cardinality_types).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue allow_suspicious_low_cardinality_types = 110;</code>
       * @return Whether the allowSuspiciousLowCardinalityTypes field is set.
       */
      public boolean hasAllowSuspiciousLowCardinalityTypes() {
        return allowSuspiciousLowCardinalityTypesBuilder_ != null || allowSuspiciousLowCardinalityTypes_ != null;
      }
      /**
       * <pre>
       * Allows specifying **LowCardinality** modifier for types of small fixed size (8 or less) in CREATE TABLE statements. Enabling this may increase merge times and memory consumption.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#allow_suspicious_low_cardinality_types).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue allow_suspicious_low_cardinality_types = 110;</code>
       * @return The allowSuspiciousLowCardinalityTypes.
       */
      public com.google.protobuf.BoolValue getAllowSuspiciousLowCardinalityTypes() {
        if (allowSuspiciousLowCardinalityTypesBuilder_ == null) {
          return allowSuspiciousLowCardinalityTypes_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : allowSuspiciousLowCardinalityTypes_;
        } else {
          return allowSuspiciousLowCardinalityTypesBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Allows specifying **LowCardinality** modifier for types of small fixed size (8 or less) in CREATE TABLE statements. Enabling this may increase merge times and memory consumption.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#allow_suspicious_low_cardinality_types).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue allow_suspicious_low_cardinality_types = 110;</code>
       */
      public Builder setAllowSuspiciousLowCardinalityTypes(com.google.protobuf.BoolValue value) {
        if (allowSuspiciousLowCardinalityTypesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          allowSuspiciousLowCardinalityTypes_ = value;
          onChanged();
        } else {
          allowSuspiciousLowCardinalityTypesBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Allows specifying **LowCardinality** modifier for types of small fixed size (8 or less) in CREATE TABLE statements. Enabling this may increase merge times and memory consumption.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#allow_suspicious_low_cardinality_types).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue allow_suspicious_low_cardinality_types = 110;</code>
       */
      public Builder setAllowSuspiciousLowCardinalityTypes(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (allowSuspiciousLowCardinalityTypesBuilder_ == null) {
          allowSuspiciousLowCardinalityTypes_ = builderForValue.build();
          onChanged();
        } else {
          allowSuspiciousLowCardinalityTypesBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Allows specifying **LowCardinality** modifier for types of small fixed size (8 or less) in CREATE TABLE statements. Enabling this may increase merge times and memory consumption.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#allow_suspicious_low_cardinality_types).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue allow_suspicious_low_cardinality_types = 110;</code>
       */
      public Builder mergeAllowSuspiciousLowCardinalityTypes(com.google.protobuf.BoolValue value) {
        if (allowSuspiciousLowCardinalityTypesBuilder_ == null) {
          if (allowSuspiciousLowCardinalityTypes_ != null) {
            allowSuspiciousLowCardinalityTypes_ =
              com.google.protobuf.BoolValue.newBuilder(allowSuspiciousLowCardinalityTypes_).mergeFrom(value).buildPartial();
          } else {
            allowSuspiciousLowCardinalityTypes_ = value;
          }
          onChanged();
        } else {
          allowSuspiciousLowCardinalityTypesBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Allows specifying **LowCardinality** modifier for types of small fixed size (8 or less) in CREATE TABLE statements. Enabling this may increase merge times and memory consumption.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#allow_suspicious_low_cardinality_types).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue allow_suspicious_low_cardinality_types = 110;</code>
       */
      public Builder clearAllowSuspiciousLowCardinalityTypes() {
        if (allowSuspiciousLowCardinalityTypesBuilder_ == null) {
          allowSuspiciousLowCardinalityTypes_ = null;
          onChanged();
        } else {
          allowSuspiciousLowCardinalityTypes_ = null;
          allowSuspiciousLowCardinalityTypesBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Allows specifying **LowCardinality** modifier for types of small fixed size (8 or less) in CREATE TABLE statements. Enabling this may increase merge times and memory consumption.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#allow_suspicious_low_cardinality_types).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue allow_suspicious_low_cardinality_types = 110;</code>
       */
      public com.google.protobuf.BoolValue.Builder getAllowSuspiciousLowCardinalityTypesBuilder() {
        
        onChanged();
        return getAllowSuspiciousLowCardinalityTypesFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Allows specifying **LowCardinality** modifier for types of small fixed size (8 or less) in CREATE TABLE statements. Enabling this may increase merge times and memory consumption.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#allow_suspicious_low_cardinality_types).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue allow_suspicious_low_cardinality_types = 110;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getAllowSuspiciousLowCardinalityTypesOrBuilder() {
        if (allowSuspiciousLowCardinalityTypesBuilder_ != null) {
          return allowSuspiciousLowCardinalityTypesBuilder_.getMessageOrBuilder();
        } else {
          return allowSuspiciousLowCardinalityTypes_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : allowSuspiciousLowCardinalityTypes_;
        }
      }
      /**
       * <pre>
       * Allows specifying **LowCardinality** modifier for types of small fixed size (8 or less) in CREATE TABLE statements. Enabling this may increase merge times and memory consumption.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#allow_suspicious_low_cardinality_types).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue allow_suspicious_low_cardinality_types = 110;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getAllowSuspiciousLowCardinalityTypesFieldBuilder() {
        if (allowSuspiciousLowCardinalityTypesBuilder_ == null) {
          allowSuspiciousLowCardinalityTypesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getAllowSuspiciousLowCardinalityTypes(),
                  getParentForChildren(),
                  isClean());
          allowSuspiciousLowCardinalityTypes_ = null;
        }
        return allowSuspiciousLowCardinalityTypesBuilder_;
      }

      private com.google.protobuf.BoolValue emptyResultForAggregationByEmptySet_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> emptyResultForAggregationByEmptySetBuilder_;
      /**
       * <pre>
       * Enables returning of empty result when aggregating without keys (with **GROUP BY** operation absent) on empty set (e.g., **SELECT count(*) FROM table WHERE 0**).
       * * **true**-ClickHouse will return an empty result for such queries.
       * * **false** (default)-ClickHouse will return a single-line result consisting of **NULL** values for aggregation functions, in accordance with SQL standard.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue empty_result_for_aggregation_by_empty_set = 79;</code>
       * @return Whether the emptyResultForAggregationByEmptySet field is set.
       */
      public boolean hasEmptyResultForAggregationByEmptySet() {
        return emptyResultForAggregationByEmptySetBuilder_ != null || emptyResultForAggregationByEmptySet_ != null;
      }
      /**
       * <pre>
       * Enables returning of empty result when aggregating without keys (with **GROUP BY** operation absent) on empty set (e.g., **SELECT count(*) FROM table WHERE 0**).
       * * **true**-ClickHouse will return an empty result for such queries.
       * * **false** (default)-ClickHouse will return a single-line result consisting of **NULL** values for aggregation functions, in accordance with SQL standard.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue empty_result_for_aggregation_by_empty_set = 79;</code>
       * @return The emptyResultForAggregationByEmptySet.
       */
      public com.google.protobuf.BoolValue getEmptyResultForAggregationByEmptySet() {
        if (emptyResultForAggregationByEmptySetBuilder_ == null) {
          return emptyResultForAggregationByEmptySet_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : emptyResultForAggregationByEmptySet_;
        } else {
          return emptyResultForAggregationByEmptySetBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enables returning of empty result when aggregating without keys (with **GROUP BY** operation absent) on empty set (e.g., **SELECT count(*) FROM table WHERE 0**).
       * * **true**-ClickHouse will return an empty result for such queries.
       * * **false** (default)-ClickHouse will return a single-line result consisting of **NULL** values for aggregation functions, in accordance with SQL standard.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue empty_result_for_aggregation_by_empty_set = 79;</code>
       */
      public Builder setEmptyResultForAggregationByEmptySet(com.google.protobuf.BoolValue value) {
        if (emptyResultForAggregationByEmptySetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          emptyResultForAggregationByEmptySet_ = value;
          onChanged();
        } else {
          emptyResultForAggregationByEmptySetBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables returning of empty result when aggregating without keys (with **GROUP BY** operation absent) on empty set (e.g., **SELECT count(*) FROM table WHERE 0**).
       * * **true**-ClickHouse will return an empty result for such queries.
       * * **false** (default)-ClickHouse will return a single-line result consisting of **NULL** values for aggregation functions, in accordance with SQL standard.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue empty_result_for_aggregation_by_empty_set = 79;</code>
       */
      public Builder setEmptyResultForAggregationByEmptySet(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (emptyResultForAggregationByEmptySetBuilder_ == null) {
          emptyResultForAggregationByEmptySet_ = builderForValue.build();
          onChanged();
        } else {
          emptyResultForAggregationByEmptySetBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enables returning of empty result when aggregating without keys (with **GROUP BY** operation absent) on empty set (e.g., **SELECT count(*) FROM table WHERE 0**).
       * * **true**-ClickHouse will return an empty result for such queries.
       * * **false** (default)-ClickHouse will return a single-line result consisting of **NULL** values for aggregation functions, in accordance with SQL standard.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue empty_result_for_aggregation_by_empty_set = 79;</code>
       */
      public Builder mergeEmptyResultForAggregationByEmptySet(com.google.protobuf.BoolValue value) {
        if (emptyResultForAggregationByEmptySetBuilder_ == null) {
          if (emptyResultForAggregationByEmptySet_ != null) {
            emptyResultForAggregationByEmptySet_ =
              com.google.protobuf.BoolValue.newBuilder(emptyResultForAggregationByEmptySet_).mergeFrom(value).buildPartial();
          } else {
            emptyResultForAggregationByEmptySet_ = value;
          }
          onChanged();
        } else {
          emptyResultForAggregationByEmptySetBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables returning of empty result when aggregating without keys (with **GROUP BY** operation absent) on empty set (e.g., **SELECT count(*) FROM table WHERE 0**).
       * * **true**-ClickHouse will return an empty result for such queries.
       * * **false** (default)-ClickHouse will return a single-line result consisting of **NULL** values for aggregation functions, in accordance with SQL standard.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue empty_result_for_aggregation_by_empty_set = 79;</code>
       */
      public Builder clearEmptyResultForAggregationByEmptySet() {
        if (emptyResultForAggregationByEmptySetBuilder_ == null) {
          emptyResultForAggregationByEmptySet_ = null;
          onChanged();
        } else {
          emptyResultForAggregationByEmptySet_ = null;
          emptyResultForAggregationByEmptySetBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enables returning of empty result when aggregating without keys (with **GROUP BY** operation absent) on empty set (e.g., **SELECT count(*) FROM table WHERE 0**).
       * * **true**-ClickHouse will return an empty result for such queries.
       * * **false** (default)-ClickHouse will return a single-line result consisting of **NULL** values for aggregation functions, in accordance with SQL standard.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue empty_result_for_aggregation_by_empty_set = 79;</code>
       */
      public com.google.protobuf.BoolValue.Builder getEmptyResultForAggregationByEmptySetBuilder() {
        
        onChanged();
        return getEmptyResultForAggregationByEmptySetFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enables returning of empty result when aggregating without keys (with **GROUP BY** operation absent) on empty set (e.g., **SELECT count(*) FROM table WHERE 0**).
       * * **true**-ClickHouse will return an empty result for such queries.
       * * **false** (default)-ClickHouse will return a single-line result consisting of **NULL** values for aggregation functions, in accordance with SQL standard.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue empty_result_for_aggregation_by_empty_set = 79;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getEmptyResultForAggregationByEmptySetOrBuilder() {
        if (emptyResultForAggregationByEmptySetBuilder_ != null) {
          return emptyResultForAggregationByEmptySetBuilder_.getMessageOrBuilder();
        } else {
          return emptyResultForAggregationByEmptySet_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : emptyResultForAggregationByEmptySet_;
        }
      }
      /**
       * <pre>
       * Enables returning of empty result when aggregating without keys (with **GROUP BY** operation absent) on empty set (e.g., **SELECT count(*) FROM table WHERE 0**).
       * * **true**-ClickHouse will return an empty result for such queries.
       * * **false** (default)-ClickHouse will return a single-line result consisting of **NULL** values for aggregation functions, in accordance with SQL standard.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue empty_result_for_aggregation_by_empty_set = 79;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getEmptyResultForAggregationByEmptySetFieldBuilder() {
        if (emptyResultForAggregationByEmptySetBuilder_ == null) {
          emptyResultForAggregationByEmptySetBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getEmptyResultForAggregationByEmptySet(),
                  getParentForChildren(),
                  isClean());
          emptyResultForAggregationByEmptySet_ = null;
        }
        return emptyResultForAggregationByEmptySetBuilder_;
      }

      private com.google.protobuf.Int64Value httpConnectionTimeout_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> httpConnectionTimeoutBuilder_;
      /**
       * <pre>
       * HTTP connection timeout, in milliseconds.
       * Value must be greater than **0** (default: **1000**, 1 second).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_connection_timeout = 65;</code>
       * @return Whether the httpConnectionTimeout field is set.
       */
      public boolean hasHttpConnectionTimeout() {
        return httpConnectionTimeoutBuilder_ != null || httpConnectionTimeout_ != null;
      }
      /**
       * <pre>
       * HTTP connection timeout, in milliseconds.
       * Value must be greater than **0** (default: **1000**, 1 second).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_connection_timeout = 65;</code>
       * @return The httpConnectionTimeout.
       */
      public com.google.protobuf.Int64Value getHttpConnectionTimeout() {
        if (httpConnectionTimeoutBuilder_ == null) {
          return httpConnectionTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : httpConnectionTimeout_;
        } else {
          return httpConnectionTimeoutBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * HTTP connection timeout, in milliseconds.
       * Value must be greater than **0** (default: **1000**, 1 second).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_connection_timeout = 65;</code>
       */
      public Builder setHttpConnectionTimeout(com.google.protobuf.Int64Value value) {
        if (httpConnectionTimeoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          httpConnectionTimeout_ = value;
          onChanged();
        } else {
          httpConnectionTimeoutBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * HTTP connection timeout, in milliseconds.
       * Value must be greater than **0** (default: **1000**, 1 second).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_connection_timeout = 65;</code>
       */
      public Builder setHttpConnectionTimeout(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (httpConnectionTimeoutBuilder_ == null) {
          httpConnectionTimeout_ = builderForValue.build();
          onChanged();
        } else {
          httpConnectionTimeoutBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * HTTP connection timeout, in milliseconds.
       * Value must be greater than **0** (default: **1000**, 1 second).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_connection_timeout = 65;</code>
       */
      public Builder mergeHttpConnectionTimeout(com.google.protobuf.Int64Value value) {
        if (httpConnectionTimeoutBuilder_ == null) {
          if (httpConnectionTimeout_ != null) {
            httpConnectionTimeout_ =
              com.google.protobuf.Int64Value.newBuilder(httpConnectionTimeout_).mergeFrom(value).buildPartial();
          } else {
            httpConnectionTimeout_ = value;
          }
          onChanged();
        } else {
          httpConnectionTimeoutBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * HTTP connection timeout, in milliseconds.
       * Value must be greater than **0** (default: **1000**, 1 second).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_connection_timeout = 65;</code>
       */
      public Builder clearHttpConnectionTimeout() {
        if (httpConnectionTimeoutBuilder_ == null) {
          httpConnectionTimeout_ = null;
          onChanged();
        } else {
          httpConnectionTimeout_ = null;
          httpConnectionTimeoutBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * HTTP connection timeout, in milliseconds.
       * Value must be greater than **0** (default: **1000**, 1 second).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_connection_timeout = 65;</code>
       */
      public com.google.protobuf.Int64Value.Builder getHttpConnectionTimeoutBuilder() {
        
        onChanged();
        return getHttpConnectionTimeoutFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * HTTP connection timeout, in milliseconds.
       * Value must be greater than **0** (default: **1000**, 1 second).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_connection_timeout = 65;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getHttpConnectionTimeoutOrBuilder() {
        if (httpConnectionTimeoutBuilder_ != null) {
          return httpConnectionTimeoutBuilder_.getMessageOrBuilder();
        } else {
          return httpConnectionTimeout_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : httpConnectionTimeout_;
        }
      }
      /**
       * <pre>
       * HTTP connection timeout, in milliseconds.
       * Value must be greater than **0** (default: **1000**, 1 second).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_connection_timeout = 65;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getHttpConnectionTimeoutFieldBuilder() {
        if (httpConnectionTimeoutBuilder_ == null) {
          httpConnectionTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getHttpConnectionTimeout(),
                  getParentForChildren(),
                  isClean());
          httpConnectionTimeout_ = null;
        }
        return httpConnectionTimeoutBuilder_;
      }

      private com.google.protobuf.Int64Value httpReceiveTimeout_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> httpReceiveTimeoutBuilder_;
      /**
       * <pre>
       * HTTP receive timeout, in milliseconds.
       * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_receive_timeout = 66;</code>
       * @return Whether the httpReceiveTimeout field is set.
       */
      public boolean hasHttpReceiveTimeout() {
        return httpReceiveTimeoutBuilder_ != null || httpReceiveTimeout_ != null;
      }
      /**
       * <pre>
       * HTTP receive timeout, in milliseconds.
       * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_receive_timeout = 66;</code>
       * @return The httpReceiveTimeout.
       */
      public com.google.protobuf.Int64Value getHttpReceiveTimeout() {
        if (httpReceiveTimeoutBuilder_ == null) {
          return httpReceiveTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : httpReceiveTimeout_;
        } else {
          return httpReceiveTimeoutBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * HTTP receive timeout, in milliseconds.
       * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_receive_timeout = 66;</code>
       */
      public Builder setHttpReceiveTimeout(com.google.protobuf.Int64Value value) {
        if (httpReceiveTimeoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          httpReceiveTimeout_ = value;
          onChanged();
        } else {
          httpReceiveTimeoutBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * HTTP receive timeout, in milliseconds.
       * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_receive_timeout = 66;</code>
       */
      public Builder setHttpReceiveTimeout(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (httpReceiveTimeoutBuilder_ == null) {
          httpReceiveTimeout_ = builderForValue.build();
          onChanged();
        } else {
          httpReceiveTimeoutBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * HTTP receive timeout, in milliseconds.
       * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_receive_timeout = 66;</code>
       */
      public Builder mergeHttpReceiveTimeout(com.google.protobuf.Int64Value value) {
        if (httpReceiveTimeoutBuilder_ == null) {
          if (httpReceiveTimeout_ != null) {
            httpReceiveTimeout_ =
              com.google.protobuf.Int64Value.newBuilder(httpReceiveTimeout_).mergeFrom(value).buildPartial();
          } else {
            httpReceiveTimeout_ = value;
          }
          onChanged();
        } else {
          httpReceiveTimeoutBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * HTTP receive timeout, in milliseconds.
       * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_receive_timeout = 66;</code>
       */
      public Builder clearHttpReceiveTimeout() {
        if (httpReceiveTimeoutBuilder_ == null) {
          httpReceiveTimeout_ = null;
          onChanged();
        } else {
          httpReceiveTimeout_ = null;
          httpReceiveTimeoutBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * HTTP receive timeout, in milliseconds.
       * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_receive_timeout = 66;</code>
       */
      public com.google.protobuf.Int64Value.Builder getHttpReceiveTimeoutBuilder() {
        
        onChanged();
        return getHttpReceiveTimeoutFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * HTTP receive timeout, in milliseconds.
       * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_receive_timeout = 66;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getHttpReceiveTimeoutOrBuilder() {
        if (httpReceiveTimeoutBuilder_ != null) {
          return httpReceiveTimeoutBuilder_.getMessageOrBuilder();
        } else {
          return httpReceiveTimeout_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : httpReceiveTimeout_;
        }
      }
      /**
       * <pre>
       * HTTP receive timeout, in milliseconds.
       * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_receive_timeout = 66;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getHttpReceiveTimeoutFieldBuilder() {
        if (httpReceiveTimeoutBuilder_ == null) {
          httpReceiveTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getHttpReceiveTimeout(),
                  getParentForChildren(),
                  isClean());
          httpReceiveTimeout_ = null;
        }
        return httpReceiveTimeoutBuilder_;
      }

      private com.google.protobuf.Int64Value httpSendTimeout_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> httpSendTimeoutBuilder_;
      /**
       * <pre>
       * HTTP send timeout, in milliseconds.
       * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_send_timeout = 67;</code>
       * @return Whether the httpSendTimeout field is set.
       */
      public boolean hasHttpSendTimeout() {
        return httpSendTimeoutBuilder_ != null || httpSendTimeout_ != null;
      }
      /**
       * <pre>
       * HTTP send timeout, in milliseconds.
       * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_send_timeout = 67;</code>
       * @return The httpSendTimeout.
       */
      public com.google.protobuf.Int64Value getHttpSendTimeout() {
        if (httpSendTimeoutBuilder_ == null) {
          return httpSendTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : httpSendTimeout_;
        } else {
          return httpSendTimeoutBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * HTTP send timeout, in milliseconds.
       * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_send_timeout = 67;</code>
       */
      public Builder setHttpSendTimeout(com.google.protobuf.Int64Value value) {
        if (httpSendTimeoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          httpSendTimeout_ = value;
          onChanged();
        } else {
          httpSendTimeoutBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * HTTP send timeout, in milliseconds.
       * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_send_timeout = 67;</code>
       */
      public Builder setHttpSendTimeout(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (httpSendTimeoutBuilder_ == null) {
          httpSendTimeout_ = builderForValue.build();
          onChanged();
        } else {
          httpSendTimeoutBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * HTTP send timeout, in milliseconds.
       * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_send_timeout = 67;</code>
       */
      public Builder mergeHttpSendTimeout(com.google.protobuf.Int64Value value) {
        if (httpSendTimeoutBuilder_ == null) {
          if (httpSendTimeout_ != null) {
            httpSendTimeout_ =
              com.google.protobuf.Int64Value.newBuilder(httpSendTimeout_).mergeFrom(value).buildPartial();
          } else {
            httpSendTimeout_ = value;
          }
          onChanged();
        } else {
          httpSendTimeoutBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * HTTP send timeout, in milliseconds.
       * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_send_timeout = 67;</code>
       */
      public Builder clearHttpSendTimeout() {
        if (httpSendTimeoutBuilder_ == null) {
          httpSendTimeout_ = null;
          onChanged();
        } else {
          httpSendTimeout_ = null;
          httpSendTimeoutBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * HTTP send timeout, in milliseconds.
       * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_send_timeout = 67;</code>
       */
      public com.google.protobuf.Int64Value.Builder getHttpSendTimeoutBuilder() {
        
        onChanged();
        return getHttpSendTimeoutFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * HTTP send timeout, in milliseconds.
       * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_send_timeout = 67;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getHttpSendTimeoutOrBuilder() {
        if (httpSendTimeoutBuilder_ != null) {
          return httpSendTimeoutBuilder_.getMessageOrBuilder();
        } else {
          return httpSendTimeout_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : httpSendTimeout_;
        }
      }
      /**
       * <pre>
       * HTTP send timeout, in milliseconds.
       * Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_send_timeout = 67;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getHttpSendTimeoutFieldBuilder() {
        if (httpSendTimeoutBuilder_ == null) {
          httpSendTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getHttpSendTimeout(),
                  getParentForChildren(),
                  isClean());
          httpSendTimeout_ = null;
        }
        return httpSendTimeoutBuilder_;
      }

      private com.google.protobuf.BoolValue enableHttpCompression_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> enableHttpCompressionBuilder_;
      /**
       * <pre>
       * Enables or disables data compression in HTTP responses.
       * By default, ClickHouse stores data compressed. When executing a query, its result is uncompressed.
       * Use this setting to command ClickHouse to compress the result when sending it via HTTP.
       * Enable this setting and add the **Accept-Encoding: &lt;compression method&gt;** HTTP header in a HTTP request to force compression of HTTP response from ClickHouse.
       * ClickHouse support the following compression methods: **gzip**, **br** and **deflate**.
       * Default value: **false** (compression is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/interfaces/http/).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue enable_http_compression = 68;</code>
       * @return Whether the enableHttpCompression field is set.
       */
      public boolean hasEnableHttpCompression() {
        return enableHttpCompressionBuilder_ != null || enableHttpCompression_ != null;
      }
      /**
       * <pre>
       * Enables or disables data compression in HTTP responses.
       * By default, ClickHouse stores data compressed. When executing a query, its result is uncompressed.
       * Use this setting to command ClickHouse to compress the result when sending it via HTTP.
       * Enable this setting and add the **Accept-Encoding: &lt;compression method&gt;** HTTP header in a HTTP request to force compression of HTTP response from ClickHouse.
       * ClickHouse support the following compression methods: **gzip**, **br** and **deflate**.
       * Default value: **false** (compression is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/interfaces/http/).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue enable_http_compression = 68;</code>
       * @return The enableHttpCompression.
       */
      public com.google.protobuf.BoolValue getEnableHttpCompression() {
        if (enableHttpCompressionBuilder_ == null) {
          return enableHttpCompression_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : enableHttpCompression_;
        } else {
          return enableHttpCompressionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enables or disables data compression in HTTP responses.
       * By default, ClickHouse stores data compressed. When executing a query, its result is uncompressed.
       * Use this setting to command ClickHouse to compress the result when sending it via HTTP.
       * Enable this setting and add the **Accept-Encoding: &lt;compression method&gt;** HTTP header in a HTTP request to force compression of HTTP response from ClickHouse.
       * ClickHouse support the following compression methods: **gzip**, **br** and **deflate**.
       * Default value: **false** (compression is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/interfaces/http/).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue enable_http_compression = 68;</code>
       */
      public Builder setEnableHttpCompression(com.google.protobuf.BoolValue value) {
        if (enableHttpCompressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          enableHttpCompression_ = value;
          onChanged();
        } else {
          enableHttpCompressionBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables data compression in HTTP responses.
       * By default, ClickHouse stores data compressed. When executing a query, its result is uncompressed.
       * Use this setting to command ClickHouse to compress the result when sending it via HTTP.
       * Enable this setting and add the **Accept-Encoding: &lt;compression method&gt;** HTTP header in a HTTP request to force compression of HTTP response from ClickHouse.
       * ClickHouse support the following compression methods: **gzip**, **br** and **deflate**.
       * Default value: **false** (compression is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/interfaces/http/).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue enable_http_compression = 68;</code>
       */
      public Builder setEnableHttpCompression(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (enableHttpCompressionBuilder_ == null) {
          enableHttpCompression_ = builderForValue.build();
          onChanged();
        } else {
          enableHttpCompressionBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables data compression in HTTP responses.
       * By default, ClickHouse stores data compressed. When executing a query, its result is uncompressed.
       * Use this setting to command ClickHouse to compress the result when sending it via HTTP.
       * Enable this setting and add the **Accept-Encoding: &lt;compression method&gt;** HTTP header in a HTTP request to force compression of HTTP response from ClickHouse.
       * ClickHouse support the following compression methods: **gzip**, **br** and **deflate**.
       * Default value: **false** (compression is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/interfaces/http/).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue enable_http_compression = 68;</code>
       */
      public Builder mergeEnableHttpCompression(com.google.protobuf.BoolValue value) {
        if (enableHttpCompressionBuilder_ == null) {
          if (enableHttpCompression_ != null) {
            enableHttpCompression_ =
              com.google.protobuf.BoolValue.newBuilder(enableHttpCompression_).mergeFrom(value).buildPartial();
          } else {
            enableHttpCompression_ = value;
          }
          onChanged();
        } else {
          enableHttpCompressionBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables data compression in HTTP responses.
       * By default, ClickHouse stores data compressed. When executing a query, its result is uncompressed.
       * Use this setting to command ClickHouse to compress the result when sending it via HTTP.
       * Enable this setting and add the **Accept-Encoding: &lt;compression method&gt;** HTTP header in a HTTP request to force compression of HTTP response from ClickHouse.
       * ClickHouse support the following compression methods: **gzip**, **br** and **deflate**.
       * Default value: **false** (compression is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/interfaces/http/).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue enable_http_compression = 68;</code>
       */
      public Builder clearEnableHttpCompression() {
        if (enableHttpCompressionBuilder_ == null) {
          enableHttpCompression_ = null;
          onChanged();
        } else {
          enableHttpCompression_ = null;
          enableHttpCompressionBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables data compression in HTTP responses.
       * By default, ClickHouse stores data compressed. When executing a query, its result is uncompressed.
       * Use this setting to command ClickHouse to compress the result when sending it via HTTP.
       * Enable this setting and add the **Accept-Encoding: &lt;compression method&gt;** HTTP header in a HTTP request to force compression of HTTP response from ClickHouse.
       * ClickHouse support the following compression methods: **gzip**, **br** and **deflate**.
       * Default value: **false** (compression is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/interfaces/http/).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue enable_http_compression = 68;</code>
       */
      public com.google.protobuf.BoolValue.Builder getEnableHttpCompressionBuilder() {
        
        onChanged();
        return getEnableHttpCompressionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enables or disables data compression in HTTP responses.
       * By default, ClickHouse stores data compressed. When executing a query, its result is uncompressed.
       * Use this setting to command ClickHouse to compress the result when sending it via HTTP.
       * Enable this setting and add the **Accept-Encoding: &lt;compression method&gt;** HTTP header in a HTTP request to force compression of HTTP response from ClickHouse.
       * ClickHouse support the following compression methods: **gzip**, **br** and **deflate**.
       * Default value: **false** (compression is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/interfaces/http/).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue enable_http_compression = 68;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getEnableHttpCompressionOrBuilder() {
        if (enableHttpCompressionBuilder_ != null) {
          return enableHttpCompressionBuilder_.getMessageOrBuilder();
        } else {
          return enableHttpCompression_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : enableHttpCompression_;
        }
      }
      /**
       * <pre>
       * Enables or disables data compression in HTTP responses.
       * By default, ClickHouse stores data compressed. When executing a query, its result is uncompressed.
       * Use this setting to command ClickHouse to compress the result when sending it via HTTP.
       * Enable this setting and add the **Accept-Encoding: &lt;compression method&gt;** HTTP header in a HTTP request to force compression of HTTP response from ClickHouse.
       * ClickHouse support the following compression methods: **gzip**, **br** and **deflate**.
       * Default value: **false** (compression is disabled).
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/interfaces/http/).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue enable_http_compression = 68;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getEnableHttpCompressionFieldBuilder() {
        if (enableHttpCompressionBuilder_ == null) {
          enableHttpCompressionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getEnableHttpCompression(),
                  getParentForChildren(),
                  isClean());
          enableHttpCompression_ = null;
        }
        return enableHttpCompressionBuilder_;
      }

      private com.google.protobuf.BoolValue sendProgressInHttpHeaders_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> sendProgressInHttpHeadersBuilder_;
      /**
       * <pre>
       * Enables progress notifications using **X-ClickHouse-Progress** HTTP header.
       * Default value: **false** (notifications disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue send_progress_in_http_headers = 69;</code>
       * @return Whether the sendProgressInHttpHeaders field is set.
       */
      public boolean hasSendProgressInHttpHeaders() {
        return sendProgressInHttpHeadersBuilder_ != null || sendProgressInHttpHeaders_ != null;
      }
      /**
       * <pre>
       * Enables progress notifications using **X-ClickHouse-Progress** HTTP header.
       * Default value: **false** (notifications disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue send_progress_in_http_headers = 69;</code>
       * @return The sendProgressInHttpHeaders.
       */
      public com.google.protobuf.BoolValue getSendProgressInHttpHeaders() {
        if (sendProgressInHttpHeadersBuilder_ == null) {
          return sendProgressInHttpHeaders_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : sendProgressInHttpHeaders_;
        } else {
          return sendProgressInHttpHeadersBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enables progress notifications using **X-ClickHouse-Progress** HTTP header.
       * Default value: **false** (notifications disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue send_progress_in_http_headers = 69;</code>
       */
      public Builder setSendProgressInHttpHeaders(com.google.protobuf.BoolValue value) {
        if (sendProgressInHttpHeadersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sendProgressInHttpHeaders_ = value;
          onChanged();
        } else {
          sendProgressInHttpHeadersBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables progress notifications using **X-ClickHouse-Progress** HTTP header.
       * Default value: **false** (notifications disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue send_progress_in_http_headers = 69;</code>
       */
      public Builder setSendProgressInHttpHeaders(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (sendProgressInHttpHeadersBuilder_ == null) {
          sendProgressInHttpHeaders_ = builderForValue.build();
          onChanged();
        } else {
          sendProgressInHttpHeadersBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enables progress notifications using **X-ClickHouse-Progress** HTTP header.
       * Default value: **false** (notifications disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue send_progress_in_http_headers = 69;</code>
       */
      public Builder mergeSendProgressInHttpHeaders(com.google.protobuf.BoolValue value) {
        if (sendProgressInHttpHeadersBuilder_ == null) {
          if (sendProgressInHttpHeaders_ != null) {
            sendProgressInHttpHeaders_ =
              com.google.protobuf.BoolValue.newBuilder(sendProgressInHttpHeaders_).mergeFrom(value).buildPartial();
          } else {
            sendProgressInHttpHeaders_ = value;
          }
          onChanged();
        } else {
          sendProgressInHttpHeadersBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables progress notifications using **X-ClickHouse-Progress** HTTP header.
       * Default value: **false** (notifications disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue send_progress_in_http_headers = 69;</code>
       */
      public Builder clearSendProgressInHttpHeaders() {
        if (sendProgressInHttpHeadersBuilder_ == null) {
          sendProgressInHttpHeaders_ = null;
          onChanged();
        } else {
          sendProgressInHttpHeaders_ = null;
          sendProgressInHttpHeadersBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enables progress notifications using **X-ClickHouse-Progress** HTTP header.
       * Default value: **false** (notifications disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue send_progress_in_http_headers = 69;</code>
       */
      public com.google.protobuf.BoolValue.Builder getSendProgressInHttpHeadersBuilder() {
        
        onChanged();
        return getSendProgressInHttpHeadersFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enables progress notifications using **X-ClickHouse-Progress** HTTP header.
       * Default value: **false** (notifications disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue send_progress_in_http_headers = 69;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getSendProgressInHttpHeadersOrBuilder() {
        if (sendProgressInHttpHeadersBuilder_ != null) {
          return sendProgressInHttpHeadersBuilder_.getMessageOrBuilder();
        } else {
          return sendProgressInHttpHeaders_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : sendProgressInHttpHeaders_;
        }
      }
      /**
       * <pre>
       * Enables progress notifications using **X-ClickHouse-Progress** HTTP header.
       * Default value: **false** (notifications disabled).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue send_progress_in_http_headers = 69;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getSendProgressInHttpHeadersFieldBuilder() {
        if (sendProgressInHttpHeadersBuilder_ == null) {
          sendProgressInHttpHeadersBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getSendProgressInHttpHeaders(),
                  getParentForChildren(),
                  isClean());
          sendProgressInHttpHeaders_ = null;
        }
        return sendProgressInHttpHeadersBuilder_;
      }

      private com.google.protobuf.Int64Value httpHeadersProgressInterval_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> httpHeadersProgressIntervalBuilder_;
      /**
       * <pre>
       * Minimum interval between progress notifications with **X-ClickHouse-Progress** HTTP header, in milliseconds.
       * Value must be greater than **0** (default: **100**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_headers_progress_interval = 70;</code>
       * @return Whether the httpHeadersProgressInterval field is set.
       */
      public boolean hasHttpHeadersProgressInterval() {
        return httpHeadersProgressIntervalBuilder_ != null || httpHeadersProgressInterval_ != null;
      }
      /**
       * <pre>
       * Minimum interval between progress notifications with **X-ClickHouse-Progress** HTTP header, in milliseconds.
       * Value must be greater than **0** (default: **100**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_headers_progress_interval = 70;</code>
       * @return The httpHeadersProgressInterval.
       */
      public com.google.protobuf.Int64Value getHttpHeadersProgressInterval() {
        if (httpHeadersProgressIntervalBuilder_ == null) {
          return httpHeadersProgressInterval_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : httpHeadersProgressInterval_;
        } else {
          return httpHeadersProgressIntervalBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Minimum interval between progress notifications with **X-ClickHouse-Progress** HTTP header, in milliseconds.
       * Value must be greater than **0** (default: **100**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_headers_progress_interval = 70;</code>
       */
      public Builder setHttpHeadersProgressInterval(com.google.protobuf.Int64Value value) {
        if (httpHeadersProgressIntervalBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          httpHeadersProgressInterval_ = value;
          onChanged();
        } else {
          httpHeadersProgressIntervalBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Minimum interval between progress notifications with **X-ClickHouse-Progress** HTTP header, in milliseconds.
       * Value must be greater than **0** (default: **100**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_headers_progress_interval = 70;</code>
       */
      public Builder setHttpHeadersProgressInterval(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (httpHeadersProgressIntervalBuilder_ == null) {
          httpHeadersProgressInterval_ = builderForValue.build();
          onChanged();
        } else {
          httpHeadersProgressIntervalBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Minimum interval between progress notifications with **X-ClickHouse-Progress** HTTP header, in milliseconds.
       * Value must be greater than **0** (default: **100**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_headers_progress_interval = 70;</code>
       */
      public Builder mergeHttpHeadersProgressInterval(com.google.protobuf.Int64Value value) {
        if (httpHeadersProgressIntervalBuilder_ == null) {
          if (httpHeadersProgressInterval_ != null) {
            httpHeadersProgressInterval_ =
              com.google.protobuf.Int64Value.newBuilder(httpHeadersProgressInterval_).mergeFrom(value).buildPartial();
          } else {
            httpHeadersProgressInterval_ = value;
          }
          onChanged();
        } else {
          httpHeadersProgressIntervalBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Minimum interval between progress notifications with **X-ClickHouse-Progress** HTTP header, in milliseconds.
       * Value must be greater than **0** (default: **100**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_headers_progress_interval = 70;</code>
       */
      public Builder clearHttpHeadersProgressInterval() {
        if (httpHeadersProgressIntervalBuilder_ == null) {
          httpHeadersProgressInterval_ = null;
          onChanged();
        } else {
          httpHeadersProgressInterval_ = null;
          httpHeadersProgressIntervalBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Minimum interval between progress notifications with **X-ClickHouse-Progress** HTTP header, in milliseconds.
       * Value must be greater than **0** (default: **100**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_headers_progress_interval = 70;</code>
       */
      public com.google.protobuf.Int64Value.Builder getHttpHeadersProgressIntervalBuilder() {
        
        onChanged();
        return getHttpHeadersProgressIntervalFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Minimum interval between progress notifications with **X-ClickHouse-Progress** HTTP header, in milliseconds.
       * Value must be greater than **0** (default: **100**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_headers_progress_interval = 70;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getHttpHeadersProgressIntervalOrBuilder() {
        if (httpHeadersProgressIntervalBuilder_ != null) {
          return httpHeadersProgressIntervalBuilder_.getMessageOrBuilder();
        } else {
          return httpHeadersProgressInterval_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : httpHeadersProgressInterval_;
        }
      }
      /**
       * <pre>
       * Minimum interval between progress notifications with **X-ClickHouse-Progress** HTTP header, in milliseconds.
       * Value must be greater than **0** (default: **100**).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value http_headers_progress_interval = 70;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getHttpHeadersProgressIntervalFieldBuilder() {
        if (httpHeadersProgressIntervalBuilder_ == null) {
          httpHeadersProgressIntervalBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getHttpHeadersProgressInterval(),
                  getParentForChildren(),
                  isClean());
          httpHeadersProgressInterval_ = null;
        }
        return httpHeadersProgressIntervalBuilder_;
      }

      private com.google.protobuf.BoolValue addHttpCorsHeader_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> addHttpCorsHeaderBuilder_;
      /**
       * <pre>
       * Adds CORS header in HTTP responses.
       * Default value: **false** (header is not added).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue add_http_cors_header = 71;</code>
       * @return Whether the addHttpCorsHeader field is set.
       */
      public boolean hasAddHttpCorsHeader() {
        return addHttpCorsHeaderBuilder_ != null || addHttpCorsHeader_ != null;
      }
      /**
       * <pre>
       * Adds CORS header in HTTP responses.
       * Default value: **false** (header is not added).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue add_http_cors_header = 71;</code>
       * @return The addHttpCorsHeader.
       */
      public com.google.protobuf.BoolValue getAddHttpCorsHeader() {
        if (addHttpCorsHeaderBuilder_ == null) {
          return addHttpCorsHeader_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : addHttpCorsHeader_;
        } else {
          return addHttpCorsHeaderBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Adds CORS header in HTTP responses.
       * Default value: **false** (header is not added).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue add_http_cors_header = 71;</code>
       */
      public Builder setAddHttpCorsHeader(com.google.protobuf.BoolValue value) {
        if (addHttpCorsHeaderBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          addHttpCorsHeader_ = value;
          onChanged();
        } else {
          addHttpCorsHeaderBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Adds CORS header in HTTP responses.
       * Default value: **false** (header is not added).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue add_http_cors_header = 71;</code>
       */
      public Builder setAddHttpCorsHeader(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (addHttpCorsHeaderBuilder_ == null) {
          addHttpCorsHeader_ = builderForValue.build();
          onChanged();
        } else {
          addHttpCorsHeaderBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Adds CORS header in HTTP responses.
       * Default value: **false** (header is not added).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue add_http_cors_header = 71;</code>
       */
      public Builder mergeAddHttpCorsHeader(com.google.protobuf.BoolValue value) {
        if (addHttpCorsHeaderBuilder_ == null) {
          if (addHttpCorsHeader_ != null) {
            addHttpCorsHeader_ =
              com.google.protobuf.BoolValue.newBuilder(addHttpCorsHeader_).mergeFrom(value).buildPartial();
          } else {
            addHttpCorsHeader_ = value;
          }
          onChanged();
        } else {
          addHttpCorsHeaderBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Adds CORS header in HTTP responses.
       * Default value: **false** (header is not added).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue add_http_cors_header = 71;</code>
       */
      public Builder clearAddHttpCorsHeader() {
        if (addHttpCorsHeaderBuilder_ == null) {
          addHttpCorsHeader_ = null;
          onChanged();
        } else {
          addHttpCorsHeader_ = null;
          addHttpCorsHeaderBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Adds CORS header in HTTP responses.
       * Default value: **false** (header is not added).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue add_http_cors_header = 71;</code>
       */
      public com.google.protobuf.BoolValue.Builder getAddHttpCorsHeaderBuilder() {
        
        onChanged();
        return getAddHttpCorsHeaderFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Adds CORS header in HTTP responses.
       * Default value: **false** (header is not added).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue add_http_cors_header = 71;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getAddHttpCorsHeaderOrBuilder() {
        if (addHttpCorsHeaderBuilder_ != null) {
          return addHttpCorsHeaderBuilder_.getMessageOrBuilder();
        } else {
          return addHttpCorsHeader_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : addHttpCorsHeader_;
        }
      }
      /**
       * <pre>
       * Adds CORS header in HTTP responses.
       * Default value: **false** (header is not added).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue add_http_cors_header = 71;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getAddHttpCorsHeaderFieldBuilder() {
        if (addHttpCorsHeaderBuilder_ == null) {
          addHttpCorsHeaderBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getAddHttpCorsHeader(),
                  getParentForChildren(),
                  isClean());
          addHttpCorsHeader_ = null;
        }
        return addHttpCorsHeaderBuilder_;
      }

      private com.google.protobuf.BoolValue cancelHttpReadonlyQueriesOnClientClose_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> cancelHttpReadonlyQueriesOnClientCloseBuilder_;
      /**
       * <pre>
       * Cancels HTTP read-only queries (e.g. SELECT) when a client closes the connection without waiting for the response.
       * Default value: **false**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#cancel-http-readonly-queries-on-client-close).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue cancel_http_readonly_queries_on_client_close = 111;</code>
       * @return Whether the cancelHttpReadonlyQueriesOnClientClose field is set.
       */
      public boolean hasCancelHttpReadonlyQueriesOnClientClose() {
        return cancelHttpReadonlyQueriesOnClientCloseBuilder_ != null || cancelHttpReadonlyQueriesOnClientClose_ != null;
      }
      /**
       * <pre>
       * Cancels HTTP read-only queries (e.g. SELECT) when a client closes the connection without waiting for the response.
       * Default value: **false**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#cancel-http-readonly-queries-on-client-close).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue cancel_http_readonly_queries_on_client_close = 111;</code>
       * @return The cancelHttpReadonlyQueriesOnClientClose.
       */
      public com.google.protobuf.BoolValue getCancelHttpReadonlyQueriesOnClientClose() {
        if (cancelHttpReadonlyQueriesOnClientCloseBuilder_ == null) {
          return cancelHttpReadonlyQueriesOnClientClose_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : cancelHttpReadonlyQueriesOnClientClose_;
        } else {
          return cancelHttpReadonlyQueriesOnClientCloseBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Cancels HTTP read-only queries (e.g. SELECT) when a client closes the connection without waiting for the response.
       * Default value: **false**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#cancel-http-readonly-queries-on-client-close).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue cancel_http_readonly_queries_on_client_close = 111;</code>
       */
      public Builder setCancelHttpReadonlyQueriesOnClientClose(com.google.protobuf.BoolValue value) {
        if (cancelHttpReadonlyQueriesOnClientCloseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          cancelHttpReadonlyQueriesOnClientClose_ = value;
          onChanged();
        } else {
          cancelHttpReadonlyQueriesOnClientCloseBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Cancels HTTP read-only queries (e.g. SELECT) when a client closes the connection without waiting for the response.
       * Default value: **false**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#cancel-http-readonly-queries-on-client-close).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue cancel_http_readonly_queries_on_client_close = 111;</code>
       */
      public Builder setCancelHttpReadonlyQueriesOnClientClose(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (cancelHttpReadonlyQueriesOnClientCloseBuilder_ == null) {
          cancelHttpReadonlyQueriesOnClientClose_ = builderForValue.build();
          onChanged();
        } else {
          cancelHttpReadonlyQueriesOnClientCloseBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Cancels HTTP read-only queries (e.g. SELECT) when a client closes the connection without waiting for the response.
       * Default value: **false**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#cancel-http-readonly-queries-on-client-close).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue cancel_http_readonly_queries_on_client_close = 111;</code>
       */
      public Builder mergeCancelHttpReadonlyQueriesOnClientClose(com.google.protobuf.BoolValue value) {
        if (cancelHttpReadonlyQueriesOnClientCloseBuilder_ == null) {
          if (cancelHttpReadonlyQueriesOnClientClose_ != null) {
            cancelHttpReadonlyQueriesOnClientClose_ =
              com.google.protobuf.BoolValue.newBuilder(cancelHttpReadonlyQueriesOnClientClose_).mergeFrom(value).buildPartial();
          } else {
            cancelHttpReadonlyQueriesOnClientClose_ = value;
          }
          onChanged();
        } else {
          cancelHttpReadonlyQueriesOnClientCloseBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Cancels HTTP read-only queries (e.g. SELECT) when a client closes the connection without waiting for the response.
       * Default value: **false**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#cancel-http-readonly-queries-on-client-close).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue cancel_http_readonly_queries_on_client_close = 111;</code>
       */
      public Builder clearCancelHttpReadonlyQueriesOnClientClose() {
        if (cancelHttpReadonlyQueriesOnClientCloseBuilder_ == null) {
          cancelHttpReadonlyQueriesOnClientClose_ = null;
          onChanged();
        } else {
          cancelHttpReadonlyQueriesOnClientClose_ = null;
          cancelHttpReadonlyQueriesOnClientCloseBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Cancels HTTP read-only queries (e.g. SELECT) when a client closes the connection without waiting for the response.
       * Default value: **false**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#cancel-http-readonly-queries-on-client-close).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue cancel_http_readonly_queries_on_client_close = 111;</code>
       */
      public com.google.protobuf.BoolValue.Builder getCancelHttpReadonlyQueriesOnClientCloseBuilder() {
        
        onChanged();
        return getCancelHttpReadonlyQueriesOnClientCloseFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Cancels HTTP read-only queries (e.g. SELECT) when a client closes the connection without waiting for the response.
       * Default value: **false**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#cancel-http-readonly-queries-on-client-close).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue cancel_http_readonly_queries_on_client_close = 111;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getCancelHttpReadonlyQueriesOnClientCloseOrBuilder() {
        if (cancelHttpReadonlyQueriesOnClientCloseBuilder_ != null) {
          return cancelHttpReadonlyQueriesOnClientCloseBuilder_.getMessageOrBuilder();
        } else {
          return cancelHttpReadonlyQueriesOnClientClose_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : cancelHttpReadonlyQueriesOnClientClose_;
        }
      }
      /**
       * <pre>
       * Cancels HTTP read-only queries (e.g. SELECT) when a client closes the connection without waiting for the response.
       * Default value: **false**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#cancel-http-readonly-queries-on-client-close).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue cancel_http_readonly_queries_on_client_close = 111;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getCancelHttpReadonlyQueriesOnClientCloseFieldBuilder() {
        if (cancelHttpReadonlyQueriesOnClientCloseBuilder_ == null) {
          cancelHttpReadonlyQueriesOnClientCloseBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getCancelHttpReadonlyQueriesOnClientClose(),
                  getParentForChildren(),
                  isClean());
          cancelHttpReadonlyQueriesOnClientClose_ = null;
        }
        return cancelHttpReadonlyQueriesOnClientCloseBuilder_;
      }

      private com.google.protobuf.Int64Value maxHttpGetRedirects_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxHttpGetRedirectsBuilder_;
      /**
       * <pre>
       * Limits the maximum number of HTTP GET redirect hops for [URL-engine](https://clickhouse.com/docs/en/engines/table-engines/special/url) tables.
       * If the parameter is set to **0** (default), no hops is allowed.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_http_get_redirects).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_http_get_redirects = 112;</code>
       * @return Whether the maxHttpGetRedirects field is set.
       */
      public boolean hasMaxHttpGetRedirects() {
        return maxHttpGetRedirectsBuilder_ != null || maxHttpGetRedirects_ != null;
      }
      /**
       * <pre>
       * Limits the maximum number of HTTP GET redirect hops for [URL-engine](https://clickhouse.com/docs/en/engines/table-engines/special/url) tables.
       * If the parameter is set to **0** (default), no hops is allowed.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_http_get_redirects).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_http_get_redirects = 112;</code>
       * @return The maxHttpGetRedirects.
       */
      public com.google.protobuf.Int64Value getMaxHttpGetRedirects() {
        if (maxHttpGetRedirectsBuilder_ == null) {
          return maxHttpGetRedirects_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxHttpGetRedirects_;
        } else {
          return maxHttpGetRedirectsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits the maximum number of HTTP GET redirect hops for [URL-engine](https://clickhouse.com/docs/en/engines/table-engines/special/url) tables.
       * If the parameter is set to **0** (default), no hops is allowed.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_http_get_redirects).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_http_get_redirects = 112;</code>
       */
      public Builder setMaxHttpGetRedirects(com.google.protobuf.Int64Value value) {
        if (maxHttpGetRedirectsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxHttpGetRedirects_ = value;
          onChanged();
        } else {
          maxHttpGetRedirectsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of HTTP GET redirect hops for [URL-engine](https://clickhouse.com/docs/en/engines/table-engines/special/url) tables.
       * If the parameter is set to **0** (default), no hops is allowed.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_http_get_redirects).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_http_get_redirects = 112;</code>
       */
      public Builder setMaxHttpGetRedirects(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxHttpGetRedirectsBuilder_ == null) {
          maxHttpGetRedirects_ = builderForValue.build();
          onChanged();
        } else {
          maxHttpGetRedirectsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of HTTP GET redirect hops for [URL-engine](https://clickhouse.com/docs/en/engines/table-engines/special/url) tables.
       * If the parameter is set to **0** (default), no hops is allowed.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_http_get_redirects).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_http_get_redirects = 112;</code>
       */
      public Builder mergeMaxHttpGetRedirects(com.google.protobuf.Int64Value value) {
        if (maxHttpGetRedirectsBuilder_ == null) {
          if (maxHttpGetRedirects_ != null) {
            maxHttpGetRedirects_ =
              com.google.protobuf.Int64Value.newBuilder(maxHttpGetRedirects_).mergeFrom(value).buildPartial();
          } else {
            maxHttpGetRedirects_ = value;
          }
          onChanged();
        } else {
          maxHttpGetRedirectsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of HTTP GET redirect hops for [URL-engine](https://clickhouse.com/docs/en/engines/table-engines/special/url) tables.
       * If the parameter is set to **0** (default), no hops is allowed.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_http_get_redirects).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_http_get_redirects = 112;</code>
       */
      public Builder clearMaxHttpGetRedirects() {
        if (maxHttpGetRedirectsBuilder_ == null) {
          maxHttpGetRedirects_ = null;
          onChanged();
        } else {
          maxHttpGetRedirects_ = null;
          maxHttpGetRedirectsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits the maximum number of HTTP GET redirect hops for [URL-engine](https://clickhouse.com/docs/en/engines/table-engines/special/url) tables.
       * If the parameter is set to **0** (default), no hops is allowed.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_http_get_redirects).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_http_get_redirects = 112;</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxHttpGetRedirectsBuilder() {
        
        onChanged();
        return getMaxHttpGetRedirectsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits the maximum number of HTTP GET redirect hops for [URL-engine](https://clickhouse.com/docs/en/engines/table-engines/special/url) tables.
       * If the parameter is set to **0** (default), no hops is allowed.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_http_get_redirects).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_http_get_redirects = 112;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxHttpGetRedirectsOrBuilder() {
        if (maxHttpGetRedirectsBuilder_ != null) {
          return maxHttpGetRedirectsBuilder_.getMessageOrBuilder();
        } else {
          return maxHttpGetRedirects_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxHttpGetRedirects_;
        }
      }
      /**
       * <pre>
       * Limits the maximum number of HTTP GET redirect hops for [URL-engine](https://clickhouse.com/docs/en/engines/table-engines/special/url) tables.
       * If the parameter is set to **0** (default), no hops is allowed.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_http_get_redirects).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_http_get_redirects = 112;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxHttpGetRedirectsFieldBuilder() {
        if (maxHttpGetRedirectsBuilder_ == null) {
          maxHttpGetRedirectsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxHttpGetRedirects(),
                  getParentForChildren(),
                  isClean());
          maxHttpGetRedirects_ = null;
        }
        return maxHttpGetRedirectsBuilder_;
      }

      private com.google.protobuf.BoolValue joinedSubqueryRequiresAlias_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> joinedSubqueryRequiresAliasBuilder_;
      /**
       * <code>.google.protobuf.BoolValue joined_subquery_requires_alias = 93;</code>
       * @return Whether the joinedSubqueryRequiresAlias field is set.
       */
      public boolean hasJoinedSubqueryRequiresAlias() {
        return joinedSubqueryRequiresAliasBuilder_ != null || joinedSubqueryRequiresAlias_ != null;
      }
      /**
       * <code>.google.protobuf.BoolValue joined_subquery_requires_alias = 93;</code>
       * @return The joinedSubqueryRequiresAlias.
       */
      public com.google.protobuf.BoolValue getJoinedSubqueryRequiresAlias() {
        if (joinedSubqueryRequiresAliasBuilder_ == null) {
          return joinedSubqueryRequiresAlias_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : joinedSubqueryRequiresAlias_;
        } else {
          return joinedSubqueryRequiresAliasBuilder_.getMessage();
        }
      }
      /**
       * <code>.google.protobuf.BoolValue joined_subquery_requires_alias = 93;</code>
       */
      public Builder setJoinedSubqueryRequiresAlias(com.google.protobuf.BoolValue value) {
        if (joinedSubqueryRequiresAliasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          joinedSubqueryRequiresAlias_ = value;
          onChanged();
        } else {
          joinedSubqueryRequiresAliasBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.google.protobuf.BoolValue joined_subquery_requires_alias = 93;</code>
       */
      public Builder setJoinedSubqueryRequiresAlias(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (joinedSubqueryRequiresAliasBuilder_ == null) {
          joinedSubqueryRequiresAlias_ = builderForValue.build();
          onChanged();
        } else {
          joinedSubqueryRequiresAliasBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.google.protobuf.BoolValue joined_subquery_requires_alias = 93;</code>
       */
      public Builder mergeJoinedSubqueryRequiresAlias(com.google.protobuf.BoolValue value) {
        if (joinedSubqueryRequiresAliasBuilder_ == null) {
          if (joinedSubqueryRequiresAlias_ != null) {
            joinedSubqueryRequiresAlias_ =
              com.google.protobuf.BoolValue.newBuilder(joinedSubqueryRequiresAlias_).mergeFrom(value).buildPartial();
          } else {
            joinedSubqueryRequiresAlias_ = value;
          }
          onChanged();
        } else {
          joinedSubqueryRequiresAliasBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.google.protobuf.BoolValue joined_subquery_requires_alias = 93;</code>
       */
      public Builder clearJoinedSubqueryRequiresAlias() {
        if (joinedSubqueryRequiresAliasBuilder_ == null) {
          joinedSubqueryRequiresAlias_ = null;
          onChanged();
        } else {
          joinedSubqueryRequiresAlias_ = null;
          joinedSubqueryRequiresAliasBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.google.protobuf.BoolValue joined_subquery_requires_alias = 93;</code>
       */
      public com.google.protobuf.BoolValue.Builder getJoinedSubqueryRequiresAliasBuilder() {
        
        onChanged();
        return getJoinedSubqueryRequiresAliasFieldBuilder().getBuilder();
      }
      /**
       * <code>.google.protobuf.BoolValue joined_subquery_requires_alias = 93;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getJoinedSubqueryRequiresAliasOrBuilder() {
        if (joinedSubqueryRequiresAliasBuilder_ != null) {
          return joinedSubqueryRequiresAliasBuilder_.getMessageOrBuilder();
        } else {
          return joinedSubqueryRequiresAlias_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : joinedSubqueryRequiresAlias_;
        }
      }
      /**
       * <code>.google.protobuf.BoolValue joined_subquery_requires_alias = 93;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getJoinedSubqueryRequiresAliasFieldBuilder() {
        if (joinedSubqueryRequiresAliasBuilder_ == null) {
          joinedSubqueryRequiresAliasBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getJoinedSubqueryRequiresAlias(),
                  getParentForChildren(),
                  isClean());
          joinedSubqueryRequiresAlias_ = null;
        }
        return joinedSubqueryRequiresAliasBuilder_;
      }

      private com.google.protobuf.BoolValue joinUseNulls_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> joinUseNullsBuilder_;
      /**
       * <code>.google.protobuf.BoolValue join_use_nulls = 94;</code>
       * @return Whether the joinUseNulls field is set.
       */
      public boolean hasJoinUseNulls() {
        return joinUseNullsBuilder_ != null || joinUseNulls_ != null;
      }
      /**
       * <code>.google.protobuf.BoolValue join_use_nulls = 94;</code>
       * @return The joinUseNulls.
       */
      public com.google.protobuf.BoolValue getJoinUseNulls() {
        if (joinUseNullsBuilder_ == null) {
          return joinUseNulls_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : joinUseNulls_;
        } else {
          return joinUseNullsBuilder_.getMessage();
        }
      }
      /**
       * <code>.google.protobuf.BoolValue join_use_nulls = 94;</code>
       */
      public Builder setJoinUseNulls(com.google.protobuf.BoolValue value) {
        if (joinUseNullsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          joinUseNulls_ = value;
          onChanged();
        } else {
          joinUseNullsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.google.protobuf.BoolValue join_use_nulls = 94;</code>
       */
      public Builder setJoinUseNulls(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (joinUseNullsBuilder_ == null) {
          joinUseNulls_ = builderForValue.build();
          onChanged();
        } else {
          joinUseNullsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.google.protobuf.BoolValue join_use_nulls = 94;</code>
       */
      public Builder mergeJoinUseNulls(com.google.protobuf.BoolValue value) {
        if (joinUseNullsBuilder_ == null) {
          if (joinUseNulls_ != null) {
            joinUseNulls_ =
              com.google.protobuf.BoolValue.newBuilder(joinUseNulls_).mergeFrom(value).buildPartial();
          } else {
            joinUseNulls_ = value;
          }
          onChanged();
        } else {
          joinUseNullsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.google.protobuf.BoolValue join_use_nulls = 94;</code>
       */
      public Builder clearJoinUseNulls() {
        if (joinUseNullsBuilder_ == null) {
          joinUseNulls_ = null;
          onChanged();
        } else {
          joinUseNulls_ = null;
          joinUseNullsBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.google.protobuf.BoolValue join_use_nulls = 94;</code>
       */
      public com.google.protobuf.BoolValue.Builder getJoinUseNullsBuilder() {
        
        onChanged();
        return getJoinUseNullsFieldBuilder().getBuilder();
      }
      /**
       * <code>.google.protobuf.BoolValue join_use_nulls = 94;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getJoinUseNullsOrBuilder() {
        if (joinUseNullsBuilder_ != null) {
          return joinUseNullsBuilder_.getMessageOrBuilder();
        } else {
          return joinUseNulls_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : joinUseNulls_;
        }
      }
      /**
       * <code>.google.protobuf.BoolValue join_use_nulls = 94;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getJoinUseNullsFieldBuilder() {
        if (joinUseNullsBuilder_ == null) {
          joinUseNullsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getJoinUseNulls(),
                  getParentForChildren(),
                  isClean());
          joinUseNulls_ = null;
        }
        return joinUseNullsBuilder_;
      }

      private com.google.protobuf.BoolValue transformNullIn_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> transformNullInBuilder_;
      /**
       * <code>.google.protobuf.BoolValue transform_null_in = 95;</code>
       * @return Whether the transformNullIn field is set.
       */
      public boolean hasTransformNullIn() {
        return transformNullInBuilder_ != null || transformNullIn_ != null;
      }
      /**
       * <code>.google.protobuf.BoolValue transform_null_in = 95;</code>
       * @return The transformNullIn.
       */
      public com.google.protobuf.BoolValue getTransformNullIn() {
        if (transformNullInBuilder_ == null) {
          return transformNullIn_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : transformNullIn_;
        } else {
          return transformNullInBuilder_.getMessage();
        }
      }
      /**
       * <code>.google.protobuf.BoolValue transform_null_in = 95;</code>
       */
      public Builder setTransformNullIn(com.google.protobuf.BoolValue value) {
        if (transformNullInBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          transformNullIn_ = value;
          onChanged();
        } else {
          transformNullInBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.google.protobuf.BoolValue transform_null_in = 95;</code>
       */
      public Builder setTransformNullIn(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (transformNullInBuilder_ == null) {
          transformNullIn_ = builderForValue.build();
          onChanged();
        } else {
          transformNullInBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.google.protobuf.BoolValue transform_null_in = 95;</code>
       */
      public Builder mergeTransformNullIn(com.google.protobuf.BoolValue value) {
        if (transformNullInBuilder_ == null) {
          if (transformNullIn_ != null) {
            transformNullIn_ =
              com.google.protobuf.BoolValue.newBuilder(transformNullIn_).mergeFrom(value).buildPartial();
          } else {
            transformNullIn_ = value;
          }
          onChanged();
        } else {
          transformNullInBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.google.protobuf.BoolValue transform_null_in = 95;</code>
       */
      public Builder clearTransformNullIn() {
        if (transformNullInBuilder_ == null) {
          transformNullIn_ = null;
          onChanged();
        } else {
          transformNullIn_ = null;
          transformNullInBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.google.protobuf.BoolValue transform_null_in = 95;</code>
       */
      public com.google.protobuf.BoolValue.Builder getTransformNullInBuilder() {
        
        onChanged();
        return getTransformNullInFieldBuilder().getBuilder();
      }
      /**
       * <code>.google.protobuf.BoolValue transform_null_in = 95;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getTransformNullInOrBuilder() {
        if (transformNullInBuilder_ != null) {
          return transformNullInBuilder_.getMessageOrBuilder();
        } else {
          return transformNullIn_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : transformNullIn_;
        }
      }
      /**
       * <code>.google.protobuf.BoolValue transform_null_in = 95;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getTransformNullInFieldBuilder() {
        if (transformNullInBuilder_ == null) {
          transformNullInBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getTransformNullIn(),
                  getParentForChildren(),
                  isClean());
          transformNullIn_ = null;
        }
        return transformNullInBuilder_;
      }

      private int quotaMode_ = 0;
      /**
       * <pre>
       * Quota accounting mode. Possible values: QUOTA_MODE_DEFAULT, QUOTA_MODE_KEYED and QUOTA_MODE_KEYED_BY_IP.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.QuotaMode quota_mode = 80;</code>
       * @return The enum numeric value on the wire for quotaMode.
       */
      @java.lang.Override public int getQuotaModeValue() {
        return quotaMode_;
      }
      /**
       * <pre>
       * Quota accounting mode. Possible values: QUOTA_MODE_DEFAULT, QUOTA_MODE_KEYED and QUOTA_MODE_KEYED_BY_IP.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.QuotaMode quota_mode = 80;</code>
       * @param value The enum numeric value on the wire for quotaMode to set.
       * @return This builder for chaining.
       */
      public Builder setQuotaModeValue(int value) {
        
        quotaMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Quota accounting mode. Possible values: QUOTA_MODE_DEFAULT, QUOTA_MODE_KEYED and QUOTA_MODE_KEYED_BY_IP.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.QuotaMode quota_mode = 80;</code>
       * @return The quotaMode.
       */
      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.QuotaMode getQuotaMode() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.QuotaMode result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.QuotaMode.valueOf(quotaMode_);
        return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.QuotaMode.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Quota accounting mode. Possible values: QUOTA_MODE_DEFAULT, QUOTA_MODE_KEYED and QUOTA_MODE_KEYED_BY_IP.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.QuotaMode quota_mode = 80;</code>
       * @param value The quotaMode to set.
       * @return This builder for chaining.
       */
      public Builder setQuotaMode(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.QuotaMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        quotaMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Quota accounting mode. Possible values: QUOTA_MODE_DEFAULT, QUOTA_MODE_KEYED and QUOTA_MODE_KEYED_BY_IP.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.QuotaMode quota_mode = 80;</code>
       * @return This builder for chaining.
       */
      public Builder clearQuotaMode() {
        
        quotaMode_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.BoolValue flattenNested_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> flattenNestedBuilder_;
      /**
       * <pre>
       * Sets the data format of a [nested](https://clickhouse.com/docs/en/sql-reference/data-types/nested-data-structures/nested) columns.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#flatten-nested).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue flatten_nested = 113;</code>
       * @return Whether the flattenNested field is set.
       */
      public boolean hasFlattenNested() {
        return flattenNestedBuilder_ != null || flattenNested_ != null;
      }
      /**
       * <pre>
       * Sets the data format of a [nested](https://clickhouse.com/docs/en/sql-reference/data-types/nested-data-structures/nested) columns.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#flatten-nested).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue flatten_nested = 113;</code>
       * @return The flattenNested.
       */
      public com.google.protobuf.BoolValue getFlattenNested() {
        if (flattenNestedBuilder_ == null) {
          return flattenNested_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : flattenNested_;
        } else {
          return flattenNestedBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Sets the data format of a [nested](https://clickhouse.com/docs/en/sql-reference/data-types/nested-data-structures/nested) columns.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#flatten-nested).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue flatten_nested = 113;</code>
       */
      public Builder setFlattenNested(com.google.protobuf.BoolValue value) {
        if (flattenNestedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          flattenNested_ = value;
          onChanged();
        } else {
          flattenNestedBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Sets the data format of a [nested](https://clickhouse.com/docs/en/sql-reference/data-types/nested-data-structures/nested) columns.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#flatten-nested).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue flatten_nested = 113;</code>
       */
      public Builder setFlattenNested(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (flattenNestedBuilder_ == null) {
          flattenNested_ = builderForValue.build();
          onChanged();
        } else {
          flattenNestedBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Sets the data format of a [nested](https://clickhouse.com/docs/en/sql-reference/data-types/nested-data-structures/nested) columns.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#flatten-nested).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue flatten_nested = 113;</code>
       */
      public Builder mergeFlattenNested(com.google.protobuf.BoolValue value) {
        if (flattenNestedBuilder_ == null) {
          if (flattenNested_ != null) {
            flattenNested_ =
              com.google.protobuf.BoolValue.newBuilder(flattenNested_).mergeFrom(value).buildPartial();
          } else {
            flattenNested_ = value;
          }
          onChanged();
        } else {
          flattenNestedBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Sets the data format of a [nested](https://clickhouse.com/docs/en/sql-reference/data-types/nested-data-structures/nested) columns.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#flatten-nested).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue flatten_nested = 113;</code>
       */
      public Builder clearFlattenNested() {
        if (flattenNestedBuilder_ == null) {
          flattenNested_ = null;
          onChanged();
        } else {
          flattenNested_ = null;
          flattenNestedBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Sets the data format of a [nested](https://clickhouse.com/docs/en/sql-reference/data-types/nested-data-structures/nested) columns.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#flatten-nested).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue flatten_nested = 113;</code>
       */
      public com.google.protobuf.BoolValue.Builder getFlattenNestedBuilder() {
        
        onChanged();
        return getFlattenNestedFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Sets the data format of a [nested](https://clickhouse.com/docs/en/sql-reference/data-types/nested-data-structures/nested) columns.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#flatten-nested).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue flatten_nested = 113;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getFlattenNestedOrBuilder() {
        if (flattenNestedBuilder_ != null) {
          return flattenNestedBuilder_.getMessageOrBuilder();
        } else {
          return flattenNested_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : flattenNested_;
        }
      }
      /**
       * <pre>
       * Sets the data format of a [nested](https://clickhouse.com/docs/en/sql-reference/data-types/nested-data-structures/nested) columns.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#flatten-nested).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue flatten_nested = 113;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getFlattenNestedFieldBuilder() {
        if (flattenNestedBuilder_ == null) {
          flattenNestedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getFlattenNested(),
                  getParentForChildren(),
                  isClean());
          flattenNested_ = null;
        }
        return flattenNestedBuilder_;
      }

      private java.lang.Object formatRegexp_ = "";
      /**
       * <pre>
       * Regular expression (for Regexp format)
       * </pre>
       *
       * <code>string format_regexp = 114;</code>
       * @return The formatRegexp.
       */
      public java.lang.String getFormatRegexp() {
        java.lang.Object ref = formatRegexp_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          formatRegexp_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Regular expression (for Regexp format)
       * </pre>
       *
       * <code>string format_regexp = 114;</code>
       * @return The bytes for formatRegexp.
       */
      public com.google.protobuf.ByteString
          getFormatRegexpBytes() {
        java.lang.Object ref = formatRegexp_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          formatRegexp_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Regular expression (for Regexp format)
       * </pre>
       *
       * <code>string format_regexp = 114;</code>
       * @param value The formatRegexp to set.
       * @return This builder for chaining.
       */
      public Builder setFormatRegexp(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        formatRegexp_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Regular expression (for Regexp format)
       * </pre>
       *
       * <code>string format_regexp = 114;</code>
       * @return This builder for chaining.
       */
      public Builder clearFormatRegexp() {
        
        formatRegexp_ = getDefaultInstance().getFormatRegexp();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Regular expression (for Regexp format)
       * </pre>
       *
       * <code>string format_regexp = 114;</code>
       * @param value The bytes for formatRegexp to set.
       * @return This builder for chaining.
       */
      public Builder setFormatRegexpBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        formatRegexp_ = value;
        onChanged();
        return this;
      }

      private int formatRegexpEscapingRule_ = 0;
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#format_regexp_escaping_rule).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.FormatRegexpEscapingRule format_regexp_escaping_rule = 115;</code>
       * @return The enum numeric value on the wire for formatRegexpEscapingRule.
       */
      @java.lang.Override public int getFormatRegexpEscapingRuleValue() {
        return formatRegexpEscapingRule_;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#format_regexp_escaping_rule).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.FormatRegexpEscapingRule format_regexp_escaping_rule = 115;</code>
       * @param value The enum numeric value on the wire for formatRegexpEscapingRule to set.
       * @return This builder for chaining.
       */
      public Builder setFormatRegexpEscapingRuleValue(int value) {
        
        formatRegexpEscapingRule_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#format_regexp_escaping_rule).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.FormatRegexpEscapingRule format_regexp_escaping_rule = 115;</code>
       * @return The formatRegexpEscapingRule.
       */
      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.FormatRegexpEscapingRule getFormatRegexpEscapingRule() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.FormatRegexpEscapingRule result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.FormatRegexpEscapingRule.valueOf(formatRegexpEscapingRule_);
        return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.FormatRegexpEscapingRule.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#format_regexp_escaping_rule).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.FormatRegexpEscapingRule format_regexp_escaping_rule = 115;</code>
       * @param value The formatRegexpEscapingRule to set.
       * @return This builder for chaining.
       */
      public Builder setFormatRegexpEscapingRule(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.FormatRegexpEscapingRule value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        formatRegexpEscapingRule_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#format_regexp_escaping_rule).
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.FormatRegexpEscapingRule format_regexp_escaping_rule = 115;</code>
       * @return This builder for chaining.
       */
      public Builder clearFormatRegexpEscapingRule() {
        
        formatRegexpEscapingRule_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.BoolValue formatRegexpSkipUnmatched_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> formatRegexpSkipUnmatchedBuilder_;
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#format_regexp_skip_unmatched).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue format_regexp_skip_unmatched = 116;</code>
       * @return Whether the formatRegexpSkipUnmatched field is set.
       */
      public boolean hasFormatRegexpSkipUnmatched() {
        return formatRegexpSkipUnmatchedBuilder_ != null || formatRegexpSkipUnmatched_ != null;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#format_regexp_skip_unmatched).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue format_regexp_skip_unmatched = 116;</code>
       * @return The formatRegexpSkipUnmatched.
       */
      public com.google.protobuf.BoolValue getFormatRegexpSkipUnmatched() {
        if (formatRegexpSkipUnmatchedBuilder_ == null) {
          return formatRegexpSkipUnmatched_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : formatRegexpSkipUnmatched_;
        } else {
          return formatRegexpSkipUnmatchedBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#format_regexp_skip_unmatched).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue format_regexp_skip_unmatched = 116;</code>
       */
      public Builder setFormatRegexpSkipUnmatched(com.google.protobuf.BoolValue value) {
        if (formatRegexpSkipUnmatchedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          formatRegexpSkipUnmatched_ = value;
          onChanged();
        } else {
          formatRegexpSkipUnmatchedBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#format_regexp_skip_unmatched).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue format_regexp_skip_unmatched = 116;</code>
       */
      public Builder setFormatRegexpSkipUnmatched(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (formatRegexpSkipUnmatchedBuilder_ == null) {
          formatRegexpSkipUnmatched_ = builderForValue.build();
          onChanged();
        } else {
          formatRegexpSkipUnmatchedBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#format_regexp_skip_unmatched).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue format_regexp_skip_unmatched = 116;</code>
       */
      public Builder mergeFormatRegexpSkipUnmatched(com.google.protobuf.BoolValue value) {
        if (formatRegexpSkipUnmatchedBuilder_ == null) {
          if (formatRegexpSkipUnmatched_ != null) {
            formatRegexpSkipUnmatched_ =
              com.google.protobuf.BoolValue.newBuilder(formatRegexpSkipUnmatched_).mergeFrom(value).buildPartial();
          } else {
            formatRegexpSkipUnmatched_ = value;
          }
          onChanged();
        } else {
          formatRegexpSkipUnmatchedBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#format_regexp_skip_unmatched).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue format_regexp_skip_unmatched = 116;</code>
       */
      public Builder clearFormatRegexpSkipUnmatched() {
        if (formatRegexpSkipUnmatchedBuilder_ == null) {
          formatRegexpSkipUnmatched_ = null;
          onChanged();
        } else {
          formatRegexpSkipUnmatched_ = null;
          formatRegexpSkipUnmatchedBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#format_regexp_skip_unmatched).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue format_regexp_skip_unmatched = 116;</code>
       */
      public com.google.protobuf.BoolValue.Builder getFormatRegexpSkipUnmatchedBuilder() {
        
        onChanged();
        return getFormatRegexpSkipUnmatchedFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#format_regexp_skip_unmatched).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue format_regexp_skip_unmatched = 116;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getFormatRegexpSkipUnmatchedOrBuilder() {
        if (formatRegexpSkipUnmatchedBuilder_ != null) {
          return formatRegexpSkipUnmatchedBuilder_.getMessageOrBuilder();
        } else {
          return formatRegexpSkipUnmatched_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : formatRegexpSkipUnmatched_;
        }
      }
      /**
       * <pre>
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#format_regexp_skip_unmatched).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue format_regexp_skip_unmatched = 116;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getFormatRegexpSkipUnmatchedFieldBuilder() {
        if (formatRegexpSkipUnmatchedBuilder_ == null) {
          formatRegexpSkipUnmatchedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getFormatRegexpSkipUnmatched(),
                  getParentForChildren(),
                  isClean());
          formatRegexpSkipUnmatched_ = null;
        }
        return formatRegexpSkipUnmatchedBuilder_;
      }

      private com.google.protobuf.BoolValue asyncInsert_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> asyncInsertBuilder_;
      /**
       * <pre>
       * Enables asynchronous inserts.
       * Disabled by default.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue async_insert = 117;</code>
       * @return Whether the asyncInsert field is set.
       */
      public boolean hasAsyncInsert() {
        return asyncInsertBuilder_ != null || asyncInsert_ != null;
      }
      /**
       * <pre>
       * Enables asynchronous inserts.
       * Disabled by default.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue async_insert = 117;</code>
       * @return The asyncInsert.
       */
      public com.google.protobuf.BoolValue getAsyncInsert() {
        if (asyncInsertBuilder_ == null) {
          return asyncInsert_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : asyncInsert_;
        } else {
          return asyncInsertBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enables asynchronous inserts.
       * Disabled by default.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue async_insert = 117;</code>
       */
      public Builder setAsyncInsert(com.google.protobuf.BoolValue value) {
        if (asyncInsertBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          asyncInsert_ = value;
          onChanged();
        } else {
          asyncInsertBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables asynchronous inserts.
       * Disabled by default.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue async_insert = 117;</code>
       */
      public Builder setAsyncInsert(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (asyncInsertBuilder_ == null) {
          asyncInsert_ = builderForValue.build();
          onChanged();
        } else {
          asyncInsertBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enables asynchronous inserts.
       * Disabled by default.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue async_insert = 117;</code>
       */
      public Builder mergeAsyncInsert(com.google.protobuf.BoolValue value) {
        if (asyncInsertBuilder_ == null) {
          if (asyncInsert_ != null) {
            asyncInsert_ =
              com.google.protobuf.BoolValue.newBuilder(asyncInsert_).mergeFrom(value).buildPartial();
          } else {
            asyncInsert_ = value;
          }
          onChanged();
        } else {
          asyncInsertBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables asynchronous inserts.
       * Disabled by default.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue async_insert = 117;</code>
       */
      public Builder clearAsyncInsert() {
        if (asyncInsertBuilder_ == null) {
          asyncInsert_ = null;
          onChanged();
        } else {
          asyncInsert_ = null;
          asyncInsertBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enables asynchronous inserts.
       * Disabled by default.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue async_insert = 117;</code>
       */
      public com.google.protobuf.BoolValue.Builder getAsyncInsertBuilder() {
        
        onChanged();
        return getAsyncInsertFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enables asynchronous inserts.
       * Disabled by default.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue async_insert = 117;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getAsyncInsertOrBuilder() {
        if (asyncInsertBuilder_ != null) {
          return asyncInsertBuilder_.getMessageOrBuilder();
        } else {
          return asyncInsert_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : asyncInsert_;
        }
      }
      /**
       * <pre>
       * Enables asynchronous inserts.
       * Disabled by default.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue async_insert = 117;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getAsyncInsertFieldBuilder() {
        if (asyncInsertBuilder_ == null) {
          asyncInsertBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getAsyncInsert(),
                  getParentForChildren(),
                  isClean());
          asyncInsert_ = null;
        }
        return asyncInsertBuilder_;
      }

      private com.google.protobuf.Int64Value asyncInsertThreads_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> asyncInsertThreadsBuilder_;
      /**
       * <pre>
       * The maximum number of threads for background data parsing and insertion.
       * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **16**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-threads).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_threads = 118;</code>
       * @return Whether the asyncInsertThreads field is set.
       */
      public boolean hasAsyncInsertThreads() {
        return asyncInsertThreadsBuilder_ != null || asyncInsertThreads_ != null;
      }
      /**
       * <pre>
       * The maximum number of threads for background data parsing and insertion.
       * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **16**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-threads).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_threads = 118;</code>
       * @return The asyncInsertThreads.
       */
      public com.google.protobuf.Int64Value getAsyncInsertThreads() {
        if (asyncInsertThreadsBuilder_ == null) {
          return asyncInsertThreads_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : asyncInsertThreads_;
        } else {
          return asyncInsertThreadsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The maximum number of threads for background data parsing and insertion.
       * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **16**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-threads).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_threads = 118;</code>
       */
      public Builder setAsyncInsertThreads(com.google.protobuf.Int64Value value) {
        if (asyncInsertThreadsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          asyncInsertThreads_ = value;
          onChanged();
        } else {
          asyncInsertThreadsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum number of threads for background data parsing and insertion.
       * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **16**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-threads).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_threads = 118;</code>
       */
      public Builder setAsyncInsertThreads(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (asyncInsertThreadsBuilder_ == null) {
          asyncInsertThreads_ = builderForValue.build();
          onChanged();
        } else {
          asyncInsertThreadsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The maximum number of threads for background data parsing and insertion.
       * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **16**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-threads).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_threads = 118;</code>
       */
      public Builder mergeAsyncInsertThreads(com.google.protobuf.Int64Value value) {
        if (asyncInsertThreadsBuilder_ == null) {
          if (asyncInsertThreads_ != null) {
            asyncInsertThreads_ =
              com.google.protobuf.Int64Value.newBuilder(asyncInsertThreads_).mergeFrom(value).buildPartial();
          } else {
            asyncInsertThreads_ = value;
          }
          onChanged();
        } else {
          asyncInsertThreadsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum number of threads for background data parsing and insertion.
       * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **16**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-threads).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_threads = 118;</code>
       */
      public Builder clearAsyncInsertThreads() {
        if (asyncInsertThreadsBuilder_ == null) {
          asyncInsertThreads_ = null;
          onChanged();
        } else {
          asyncInsertThreads_ = null;
          asyncInsertThreadsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The maximum number of threads for background data parsing and insertion.
       * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **16**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-threads).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_threads = 118;</code>
       */
      public com.google.protobuf.Int64Value.Builder getAsyncInsertThreadsBuilder() {
        
        onChanged();
        return getAsyncInsertThreadsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The maximum number of threads for background data parsing and insertion.
       * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **16**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-threads).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_threads = 118;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getAsyncInsertThreadsOrBuilder() {
        if (asyncInsertThreadsBuilder_ != null) {
          return asyncInsertThreadsBuilder_.getMessageOrBuilder();
        } else {
          return asyncInsertThreads_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : asyncInsertThreads_;
        }
      }
      /**
       * <pre>
       * The maximum number of threads for background data parsing and insertion.
       * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **16**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-threads).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_threads = 118;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getAsyncInsertThreadsFieldBuilder() {
        if (asyncInsertThreadsBuilder_ == null) {
          asyncInsertThreadsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getAsyncInsertThreads(),
                  getParentForChildren(),
                  isClean());
          asyncInsertThreads_ = null;
        }
        return asyncInsertThreadsBuilder_;
      }

      private com.google.protobuf.BoolValue waitForAsyncInsert_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> waitForAsyncInsertBuilder_;
      /**
       * <pre>
       * Enables waiting for processing of asynchronous insertion. If enabled, server returns OK only after the data is inserted.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue wait_for_async_insert = 119;</code>
       * @return Whether the waitForAsyncInsert field is set.
       */
      public boolean hasWaitForAsyncInsert() {
        return waitForAsyncInsertBuilder_ != null || waitForAsyncInsert_ != null;
      }
      /**
       * <pre>
       * Enables waiting for processing of asynchronous insertion. If enabled, server returns OK only after the data is inserted.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue wait_for_async_insert = 119;</code>
       * @return The waitForAsyncInsert.
       */
      public com.google.protobuf.BoolValue getWaitForAsyncInsert() {
        if (waitForAsyncInsertBuilder_ == null) {
          return waitForAsyncInsert_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : waitForAsyncInsert_;
        } else {
          return waitForAsyncInsertBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enables waiting for processing of asynchronous insertion. If enabled, server returns OK only after the data is inserted.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue wait_for_async_insert = 119;</code>
       */
      public Builder setWaitForAsyncInsert(com.google.protobuf.BoolValue value) {
        if (waitForAsyncInsertBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          waitForAsyncInsert_ = value;
          onChanged();
        } else {
          waitForAsyncInsertBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables waiting for processing of asynchronous insertion. If enabled, server returns OK only after the data is inserted.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue wait_for_async_insert = 119;</code>
       */
      public Builder setWaitForAsyncInsert(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (waitForAsyncInsertBuilder_ == null) {
          waitForAsyncInsert_ = builderForValue.build();
          onChanged();
        } else {
          waitForAsyncInsertBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enables waiting for processing of asynchronous insertion. If enabled, server returns OK only after the data is inserted.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue wait_for_async_insert = 119;</code>
       */
      public Builder mergeWaitForAsyncInsert(com.google.protobuf.BoolValue value) {
        if (waitForAsyncInsertBuilder_ == null) {
          if (waitForAsyncInsert_ != null) {
            waitForAsyncInsert_ =
              com.google.protobuf.BoolValue.newBuilder(waitForAsyncInsert_).mergeFrom(value).buildPartial();
          } else {
            waitForAsyncInsert_ = value;
          }
          onChanged();
        } else {
          waitForAsyncInsertBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables waiting for processing of asynchronous insertion. If enabled, server returns OK only after the data is inserted.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue wait_for_async_insert = 119;</code>
       */
      public Builder clearWaitForAsyncInsert() {
        if (waitForAsyncInsertBuilder_ == null) {
          waitForAsyncInsert_ = null;
          onChanged();
        } else {
          waitForAsyncInsert_ = null;
          waitForAsyncInsertBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enables waiting for processing of asynchronous insertion. If enabled, server returns OK only after the data is inserted.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue wait_for_async_insert = 119;</code>
       */
      public com.google.protobuf.BoolValue.Builder getWaitForAsyncInsertBuilder() {
        
        onChanged();
        return getWaitForAsyncInsertFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enables waiting for processing of asynchronous insertion. If enabled, server returns OK only after the data is inserted.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue wait_for_async_insert = 119;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getWaitForAsyncInsertOrBuilder() {
        if (waitForAsyncInsertBuilder_ != null) {
          return waitForAsyncInsertBuilder_.getMessageOrBuilder();
        } else {
          return waitForAsyncInsert_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : waitForAsyncInsert_;
        }
      }
      /**
       * <pre>
       * Enables waiting for processing of asynchronous insertion. If enabled, server returns OK only after the data is inserted.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert).
       * </pre>
       *
       * <code>.google.protobuf.BoolValue wait_for_async_insert = 119;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getWaitForAsyncInsertFieldBuilder() {
        if (waitForAsyncInsertBuilder_ == null) {
          waitForAsyncInsertBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getWaitForAsyncInsert(),
                  getParentForChildren(),
                  isClean());
          waitForAsyncInsert_ = null;
        }
        return waitForAsyncInsertBuilder_;
      }

      private com.google.protobuf.Int64Value waitForAsyncInsertTimeout_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> waitForAsyncInsertTimeoutBuilder_;
      /**
       * <pre>
       * The timeout (in seconds) for waiting for processing of asynchronous insertion.
       * Default value: **120**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert-timeout).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value wait_for_async_insert_timeout = 120;</code>
       * @return Whether the waitForAsyncInsertTimeout field is set.
       */
      public boolean hasWaitForAsyncInsertTimeout() {
        return waitForAsyncInsertTimeoutBuilder_ != null || waitForAsyncInsertTimeout_ != null;
      }
      /**
       * <pre>
       * The timeout (in seconds) for waiting for processing of asynchronous insertion.
       * Default value: **120**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert-timeout).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value wait_for_async_insert_timeout = 120;</code>
       * @return The waitForAsyncInsertTimeout.
       */
      public com.google.protobuf.Int64Value getWaitForAsyncInsertTimeout() {
        if (waitForAsyncInsertTimeoutBuilder_ == null) {
          return waitForAsyncInsertTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : waitForAsyncInsertTimeout_;
        } else {
          return waitForAsyncInsertTimeoutBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The timeout (in seconds) for waiting for processing of asynchronous insertion.
       * Default value: **120**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert-timeout).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value wait_for_async_insert_timeout = 120;</code>
       */
      public Builder setWaitForAsyncInsertTimeout(com.google.protobuf.Int64Value value) {
        if (waitForAsyncInsertTimeoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          waitForAsyncInsertTimeout_ = value;
          onChanged();
        } else {
          waitForAsyncInsertTimeoutBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The timeout (in seconds) for waiting for processing of asynchronous insertion.
       * Default value: **120**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert-timeout).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value wait_for_async_insert_timeout = 120;</code>
       */
      public Builder setWaitForAsyncInsertTimeout(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (waitForAsyncInsertTimeoutBuilder_ == null) {
          waitForAsyncInsertTimeout_ = builderForValue.build();
          onChanged();
        } else {
          waitForAsyncInsertTimeoutBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The timeout (in seconds) for waiting for processing of asynchronous insertion.
       * Default value: **120**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert-timeout).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value wait_for_async_insert_timeout = 120;</code>
       */
      public Builder mergeWaitForAsyncInsertTimeout(com.google.protobuf.Int64Value value) {
        if (waitForAsyncInsertTimeoutBuilder_ == null) {
          if (waitForAsyncInsertTimeout_ != null) {
            waitForAsyncInsertTimeout_ =
              com.google.protobuf.Int64Value.newBuilder(waitForAsyncInsertTimeout_).mergeFrom(value).buildPartial();
          } else {
            waitForAsyncInsertTimeout_ = value;
          }
          onChanged();
        } else {
          waitForAsyncInsertTimeoutBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The timeout (in seconds) for waiting for processing of asynchronous insertion.
       * Default value: **120**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert-timeout).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value wait_for_async_insert_timeout = 120;</code>
       */
      public Builder clearWaitForAsyncInsertTimeout() {
        if (waitForAsyncInsertTimeoutBuilder_ == null) {
          waitForAsyncInsertTimeout_ = null;
          onChanged();
        } else {
          waitForAsyncInsertTimeout_ = null;
          waitForAsyncInsertTimeoutBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The timeout (in seconds) for waiting for processing of asynchronous insertion.
       * Default value: **120**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert-timeout).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value wait_for_async_insert_timeout = 120;</code>
       */
      public com.google.protobuf.Int64Value.Builder getWaitForAsyncInsertTimeoutBuilder() {
        
        onChanged();
        return getWaitForAsyncInsertTimeoutFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The timeout (in seconds) for waiting for processing of asynchronous insertion.
       * Default value: **120**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert-timeout).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value wait_for_async_insert_timeout = 120;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getWaitForAsyncInsertTimeoutOrBuilder() {
        if (waitForAsyncInsertTimeoutBuilder_ != null) {
          return waitForAsyncInsertTimeoutBuilder_.getMessageOrBuilder();
        } else {
          return waitForAsyncInsertTimeout_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : waitForAsyncInsertTimeout_;
        }
      }
      /**
       * <pre>
       * The timeout (in seconds) for waiting for processing of asynchronous insertion.
       * Default value: **120**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#wait-for-async-insert-timeout).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value wait_for_async_insert_timeout = 120;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getWaitForAsyncInsertTimeoutFieldBuilder() {
        if (waitForAsyncInsertTimeoutBuilder_ == null) {
          waitForAsyncInsertTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getWaitForAsyncInsertTimeout(),
                  getParentForChildren(),
                  isClean());
          waitForAsyncInsertTimeout_ = null;
        }
        return waitForAsyncInsertTimeoutBuilder_;
      }

      private com.google.protobuf.Int64Value asyncInsertMaxDataSize_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> asyncInsertMaxDataSizeBuilder_;
      /**
       * <pre>
       * The maximum size of the unparsed data in bytes collected per query before being inserted.
       * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **100000**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-max-data-size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_max_data_size = 121;</code>
       * @return Whether the asyncInsertMaxDataSize field is set.
       */
      public boolean hasAsyncInsertMaxDataSize() {
        return asyncInsertMaxDataSizeBuilder_ != null || asyncInsertMaxDataSize_ != null;
      }
      /**
       * <pre>
       * The maximum size of the unparsed data in bytes collected per query before being inserted.
       * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **100000**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-max-data-size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_max_data_size = 121;</code>
       * @return The asyncInsertMaxDataSize.
       */
      public com.google.protobuf.Int64Value getAsyncInsertMaxDataSize() {
        if (asyncInsertMaxDataSizeBuilder_ == null) {
          return asyncInsertMaxDataSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : asyncInsertMaxDataSize_;
        } else {
          return asyncInsertMaxDataSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The maximum size of the unparsed data in bytes collected per query before being inserted.
       * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **100000**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-max-data-size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_max_data_size = 121;</code>
       */
      public Builder setAsyncInsertMaxDataSize(com.google.protobuf.Int64Value value) {
        if (asyncInsertMaxDataSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          asyncInsertMaxDataSize_ = value;
          onChanged();
        } else {
          asyncInsertMaxDataSizeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size of the unparsed data in bytes collected per query before being inserted.
       * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **100000**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-max-data-size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_max_data_size = 121;</code>
       */
      public Builder setAsyncInsertMaxDataSize(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (asyncInsertMaxDataSizeBuilder_ == null) {
          asyncInsertMaxDataSize_ = builderForValue.build();
          onChanged();
        } else {
          asyncInsertMaxDataSizeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size of the unparsed data in bytes collected per query before being inserted.
       * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **100000**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-max-data-size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_max_data_size = 121;</code>
       */
      public Builder mergeAsyncInsertMaxDataSize(com.google.protobuf.Int64Value value) {
        if (asyncInsertMaxDataSizeBuilder_ == null) {
          if (asyncInsertMaxDataSize_ != null) {
            asyncInsertMaxDataSize_ =
              com.google.protobuf.Int64Value.newBuilder(asyncInsertMaxDataSize_).mergeFrom(value).buildPartial();
          } else {
            asyncInsertMaxDataSize_ = value;
          }
          onChanged();
        } else {
          asyncInsertMaxDataSizeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size of the unparsed data in bytes collected per query before being inserted.
       * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **100000**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-max-data-size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_max_data_size = 121;</code>
       */
      public Builder clearAsyncInsertMaxDataSize() {
        if (asyncInsertMaxDataSizeBuilder_ == null) {
          asyncInsertMaxDataSize_ = null;
          onChanged();
        } else {
          asyncInsertMaxDataSize_ = null;
          asyncInsertMaxDataSizeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size of the unparsed data in bytes collected per query before being inserted.
       * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **100000**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-max-data-size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_max_data_size = 121;</code>
       */
      public com.google.protobuf.Int64Value.Builder getAsyncInsertMaxDataSizeBuilder() {
        
        onChanged();
        return getAsyncInsertMaxDataSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The maximum size of the unparsed data in bytes collected per query before being inserted.
       * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **100000**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-max-data-size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_max_data_size = 121;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getAsyncInsertMaxDataSizeOrBuilder() {
        if (asyncInsertMaxDataSizeBuilder_ != null) {
          return asyncInsertMaxDataSizeBuilder_.getMessageOrBuilder();
        } else {
          return asyncInsertMaxDataSize_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : asyncInsertMaxDataSize_;
        }
      }
      /**
       * <pre>
       * The maximum size of the unparsed data in bytes collected per query before being inserted.
       * If the parameter is set to **0**, asynchronous insertions are disabled. Default value: **100000**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-max-data-size).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_max_data_size = 121;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getAsyncInsertMaxDataSizeFieldBuilder() {
        if (asyncInsertMaxDataSizeBuilder_ == null) {
          asyncInsertMaxDataSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getAsyncInsertMaxDataSize(),
                  getParentForChildren(),
                  isClean());
          asyncInsertMaxDataSize_ = null;
        }
        return asyncInsertMaxDataSizeBuilder_;
      }

      private com.google.protobuf.Int64Value asyncInsertBusyTimeout_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> asyncInsertBusyTimeoutBuilder_;
      /**
       * <pre>
       * The maximum timeout in milliseconds since the first INSERT query before inserting collected data.
       * If the parameter is set to **0**, the timeout is disabled. Default value: **200**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-busy-timeout-ms).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_busy_timeout = 122;</code>
       * @return Whether the asyncInsertBusyTimeout field is set.
       */
      public boolean hasAsyncInsertBusyTimeout() {
        return asyncInsertBusyTimeoutBuilder_ != null || asyncInsertBusyTimeout_ != null;
      }
      /**
       * <pre>
       * The maximum timeout in milliseconds since the first INSERT query before inserting collected data.
       * If the parameter is set to **0**, the timeout is disabled. Default value: **200**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-busy-timeout-ms).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_busy_timeout = 122;</code>
       * @return The asyncInsertBusyTimeout.
       */
      public com.google.protobuf.Int64Value getAsyncInsertBusyTimeout() {
        if (asyncInsertBusyTimeoutBuilder_ == null) {
          return asyncInsertBusyTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : asyncInsertBusyTimeout_;
        } else {
          return asyncInsertBusyTimeoutBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The maximum timeout in milliseconds since the first INSERT query before inserting collected data.
       * If the parameter is set to **0**, the timeout is disabled. Default value: **200**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-busy-timeout-ms).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_busy_timeout = 122;</code>
       */
      public Builder setAsyncInsertBusyTimeout(com.google.protobuf.Int64Value value) {
        if (asyncInsertBusyTimeoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          asyncInsertBusyTimeout_ = value;
          onChanged();
        } else {
          asyncInsertBusyTimeoutBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum timeout in milliseconds since the first INSERT query before inserting collected data.
       * If the parameter is set to **0**, the timeout is disabled. Default value: **200**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-busy-timeout-ms).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_busy_timeout = 122;</code>
       */
      public Builder setAsyncInsertBusyTimeout(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (asyncInsertBusyTimeoutBuilder_ == null) {
          asyncInsertBusyTimeout_ = builderForValue.build();
          onChanged();
        } else {
          asyncInsertBusyTimeoutBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The maximum timeout in milliseconds since the first INSERT query before inserting collected data.
       * If the parameter is set to **0**, the timeout is disabled. Default value: **200**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-busy-timeout-ms).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_busy_timeout = 122;</code>
       */
      public Builder mergeAsyncInsertBusyTimeout(com.google.protobuf.Int64Value value) {
        if (asyncInsertBusyTimeoutBuilder_ == null) {
          if (asyncInsertBusyTimeout_ != null) {
            asyncInsertBusyTimeout_ =
              com.google.protobuf.Int64Value.newBuilder(asyncInsertBusyTimeout_).mergeFrom(value).buildPartial();
          } else {
            asyncInsertBusyTimeout_ = value;
          }
          onChanged();
        } else {
          asyncInsertBusyTimeoutBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum timeout in milliseconds since the first INSERT query before inserting collected data.
       * If the parameter is set to **0**, the timeout is disabled. Default value: **200**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-busy-timeout-ms).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_busy_timeout = 122;</code>
       */
      public Builder clearAsyncInsertBusyTimeout() {
        if (asyncInsertBusyTimeoutBuilder_ == null) {
          asyncInsertBusyTimeout_ = null;
          onChanged();
        } else {
          asyncInsertBusyTimeout_ = null;
          asyncInsertBusyTimeoutBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The maximum timeout in milliseconds since the first INSERT query before inserting collected data.
       * If the parameter is set to **0**, the timeout is disabled. Default value: **200**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-busy-timeout-ms).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_busy_timeout = 122;</code>
       */
      public com.google.protobuf.Int64Value.Builder getAsyncInsertBusyTimeoutBuilder() {
        
        onChanged();
        return getAsyncInsertBusyTimeoutFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The maximum timeout in milliseconds since the first INSERT query before inserting collected data.
       * If the parameter is set to **0**, the timeout is disabled. Default value: **200**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-busy-timeout-ms).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_busy_timeout = 122;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getAsyncInsertBusyTimeoutOrBuilder() {
        if (asyncInsertBusyTimeoutBuilder_ != null) {
          return asyncInsertBusyTimeoutBuilder_.getMessageOrBuilder();
        } else {
          return asyncInsertBusyTimeout_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : asyncInsertBusyTimeout_;
        }
      }
      /**
       * <pre>
       * The maximum timeout in milliseconds since the first INSERT query before inserting collected data.
       * If the parameter is set to **0**, the timeout is disabled. Default value: **200**.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-busy-timeout-ms).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_busy_timeout = 122;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getAsyncInsertBusyTimeoutFieldBuilder() {
        if (asyncInsertBusyTimeoutBuilder_ == null) {
          asyncInsertBusyTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getAsyncInsertBusyTimeout(),
                  getParentForChildren(),
                  isClean());
          asyncInsertBusyTimeout_ = null;
        }
        return asyncInsertBusyTimeoutBuilder_;
      }

      private com.google.protobuf.Int64Value asyncInsertStaleTimeout_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> asyncInsertStaleTimeoutBuilder_;
      /**
       * <pre>
       * The maximum timeout in milliseconds since the last INSERT query before dumping collected data. If enabled, the settings prolongs the [async_insert_busy_timeout] with every INSERT query as long as [async_insert_max_data_size] is not exceeded.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-stale-timeout-ms).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_stale_timeout = 123;</code>
       * @return Whether the asyncInsertStaleTimeout field is set.
       */
      public boolean hasAsyncInsertStaleTimeout() {
        return asyncInsertStaleTimeoutBuilder_ != null || asyncInsertStaleTimeout_ != null;
      }
      /**
       * <pre>
       * The maximum timeout in milliseconds since the last INSERT query before dumping collected data. If enabled, the settings prolongs the [async_insert_busy_timeout] with every INSERT query as long as [async_insert_max_data_size] is not exceeded.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-stale-timeout-ms).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_stale_timeout = 123;</code>
       * @return The asyncInsertStaleTimeout.
       */
      public com.google.protobuf.Int64Value getAsyncInsertStaleTimeout() {
        if (asyncInsertStaleTimeoutBuilder_ == null) {
          return asyncInsertStaleTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : asyncInsertStaleTimeout_;
        } else {
          return asyncInsertStaleTimeoutBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The maximum timeout in milliseconds since the last INSERT query before dumping collected data. If enabled, the settings prolongs the [async_insert_busy_timeout] with every INSERT query as long as [async_insert_max_data_size] is not exceeded.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-stale-timeout-ms).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_stale_timeout = 123;</code>
       */
      public Builder setAsyncInsertStaleTimeout(com.google.protobuf.Int64Value value) {
        if (asyncInsertStaleTimeoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          asyncInsertStaleTimeout_ = value;
          onChanged();
        } else {
          asyncInsertStaleTimeoutBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum timeout in milliseconds since the last INSERT query before dumping collected data. If enabled, the settings prolongs the [async_insert_busy_timeout] with every INSERT query as long as [async_insert_max_data_size] is not exceeded.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-stale-timeout-ms).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_stale_timeout = 123;</code>
       */
      public Builder setAsyncInsertStaleTimeout(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (asyncInsertStaleTimeoutBuilder_ == null) {
          asyncInsertStaleTimeout_ = builderForValue.build();
          onChanged();
        } else {
          asyncInsertStaleTimeoutBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The maximum timeout in milliseconds since the last INSERT query before dumping collected data. If enabled, the settings prolongs the [async_insert_busy_timeout] with every INSERT query as long as [async_insert_max_data_size] is not exceeded.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-stale-timeout-ms).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_stale_timeout = 123;</code>
       */
      public Builder mergeAsyncInsertStaleTimeout(com.google.protobuf.Int64Value value) {
        if (asyncInsertStaleTimeoutBuilder_ == null) {
          if (asyncInsertStaleTimeout_ != null) {
            asyncInsertStaleTimeout_ =
              com.google.protobuf.Int64Value.newBuilder(asyncInsertStaleTimeout_).mergeFrom(value).buildPartial();
          } else {
            asyncInsertStaleTimeout_ = value;
          }
          onChanged();
        } else {
          asyncInsertStaleTimeoutBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum timeout in milliseconds since the last INSERT query before dumping collected data. If enabled, the settings prolongs the [async_insert_busy_timeout] with every INSERT query as long as [async_insert_max_data_size] is not exceeded.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-stale-timeout-ms).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_stale_timeout = 123;</code>
       */
      public Builder clearAsyncInsertStaleTimeout() {
        if (asyncInsertStaleTimeoutBuilder_ == null) {
          asyncInsertStaleTimeout_ = null;
          onChanged();
        } else {
          asyncInsertStaleTimeout_ = null;
          asyncInsertStaleTimeoutBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The maximum timeout in milliseconds since the last INSERT query before dumping collected data. If enabled, the settings prolongs the [async_insert_busy_timeout] with every INSERT query as long as [async_insert_max_data_size] is not exceeded.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-stale-timeout-ms).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_stale_timeout = 123;</code>
       */
      public com.google.protobuf.Int64Value.Builder getAsyncInsertStaleTimeoutBuilder() {
        
        onChanged();
        return getAsyncInsertStaleTimeoutFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The maximum timeout in milliseconds since the last INSERT query before dumping collected data. If enabled, the settings prolongs the [async_insert_busy_timeout] with every INSERT query as long as [async_insert_max_data_size] is not exceeded.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-stale-timeout-ms).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_stale_timeout = 123;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getAsyncInsertStaleTimeoutOrBuilder() {
        if (asyncInsertStaleTimeoutBuilder_ != null) {
          return asyncInsertStaleTimeoutBuilder_.getMessageOrBuilder();
        } else {
          return asyncInsertStaleTimeout_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : asyncInsertStaleTimeout_;
        }
      }
      /**
       * <pre>
       * The maximum timeout in milliseconds since the last INSERT query before dumping collected data. If enabled, the settings prolongs the [async_insert_busy_timeout] with every INSERT query as long as [async_insert_max_data_size] is not exceeded.
       * More info see in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#async-insert-stale-timeout-ms).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value async_insert_stale_timeout = 123;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getAsyncInsertStaleTimeoutFieldBuilder() {
        if (asyncInsertStaleTimeoutBuilder_ == null) {
          asyncInsertStaleTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getAsyncInsertStaleTimeout(),
                  getParentForChildren(),
                  isClean());
          asyncInsertStaleTimeout_ = null;
        }
        return asyncInsertStaleTimeoutBuilder_;
      }

      private com.google.protobuf.Int64Value memoryProfilerStep_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> memoryProfilerStepBuilder_;
      /**
       * <pre>
       * Memory profiler step (in bytes).
       * If the next query step requires more memory than this parameter specifies, the memory profiler collects the allocating stack trace. Values lower than a few megabytes slow down query processing.
       * Default value: **4194304** (4 MB). Zero means disabled memory profiler.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_profiler_step = 124;</code>
       * @return Whether the memoryProfilerStep field is set.
       */
      public boolean hasMemoryProfilerStep() {
        return memoryProfilerStepBuilder_ != null || memoryProfilerStep_ != null;
      }
      /**
       * <pre>
       * Memory profiler step (in bytes).
       * If the next query step requires more memory than this parameter specifies, the memory profiler collects the allocating stack trace. Values lower than a few megabytes slow down query processing.
       * Default value: **4194304** (4 MB). Zero means disabled memory profiler.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_profiler_step = 124;</code>
       * @return The memoryProfilerStep.
       */
      public com.google.protobuf.Int64Value getMemoryProfilerStep() {
        if (memoryProfilerStepBuilder_ == null) {
          return memoryProfilerStep_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : memoryProfilerStep_;
        } else {
          return memoryProfilerStepBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Memory profiler step (in bytes).
       * If the next query step requires more memory than this parameter specifies, the memory profiler collects the allocating stack trace. Values lower than a few megabytes slow down query processing.
       * Default value: **4194304** (4 MB). Zero means disabled memory profiler.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_profiler_step = 124;</code>
       */
      public Builder setMemoryProfilerStep(com.google.protobuf.Int64Value value) {
        if (memoryProfilerStepBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          memoryProfilerStep_ = value;
          onChanged();
        } else {
          memoryProfilerStepBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Memory profiler step (in bytes).
       * If the next query step requires more memory than this parameter specifies, the memory profiler collects the allocating stack trace. Values lower than a few megabytes slow down query processing.
       * Default value: **4194304** (4 MB). Zero means disabled memory profiler.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_profiler_step = 124;</code>
       */
      public Builder setMemoryProfilerStep(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (memoryProfilerStepBuilder_ == null) {
          memoryProfilerStep_ = builderForValue.build();
          onChanged();
        } else {
          memoryProfilerStepBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Memory profiler step (in bytes).
       * If the next query step requires more memory than this parameter specifies, the memory profiler collects the allocating stack trace. Values lower than a few megabytes slow down query processing.
       * Default value: **4194304** (4 MB). Zero means disabled memory profiler.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_profiler_step = 124;</code>
       */
      public Builder mergeMemoryProfilerStep(com.google.protobuf.Int64Value value) {
        if (memoryProfilerStepBuilder_ == null) {
          if (memoryProfilerStep_ != null) {
            memoryProfilerStep_ =
              com.google.protobuf.Int64Value.newBuilder(memoryProfilerStep_).mergeFrom(value).buildPartial();
          } else {
            memoryProfilerStep_ = value;
          }
          onChanged();
        } else {
          memoryProfilerStepBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Memory profiler step (in bytes).
       * If the next query step requires more memory than this parameter specifies, the memory profiler collects the allocating stack trace. Values lower than a few megabytes slow down query processing.
       * Default value: **4194304** (4 MB). Zero means disabled memory profiler.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_profiler_step = 124;</code>
       */
      public Builder clearMemoryProfilerStep() {
        if (memoryProfilerStepBuilder_ == null) {
          memoryProfilerStep_ = null;
          onChanged();
        } else {
          memoryProfilerStep_ = null;
          memoryProfilerStepBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Memory profiler step (in bytes).
       * If the next query step requires more memory than this parameter specifies, the memory profiler collects the allocating stack trace. Values lower than a few megabytes slow down query processing.
       * Default value: **4194304** (4 MB). Zero means disabled memory profiler.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_profiler_step = 124;</code>
       */
      public com.google.protobuf.Int64Value.Builder getMemoryProfilerStepBuilder() {
        
        onChanged();
        return getMemoryProfilerStepFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Memory profiler step (in bytes).
       * If the next query step requires more memory than this parameter specifies, the memory profiler collects the allocating stack trace. Values lower than a few megabytes slow down query processing.
       * Default value: **4194304** (4 MB). Zero means disabled memory profiler.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_profiler_step = 124;</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMemoryProfilerStepOrBuilder() {
        if (memoryProfilerStepBuilder_ != null) {
          return memoryProfilerStepBuilder_.getMessageOrBuilder();
        } else {
          return memoryProfilerStep_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : memoryProfilerStep_;
        }
      }
      /**
       * <pre>
       * Memory profiler step (in bytes).
       * If the next query step requires more memory than this parameter specifies, the memory profiler collects the allocating stack trace. Values lower than a few megabytes slow down query processing.
       * Default value: **4194304** (4 MB). Zero means disabled memory profiler.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_profiler_step = 124;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMemoryProfilerStepFieldBuilder() {
        if (memoryProfilerStepBuilder_ == null) {
          memoryProfilerStepBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMemoryProfilerStep(),
                  getParentForChildren(),
                  isClean());
          memoryProfilerStep_ = null;
        }
        return memoryProfilerStepBuilder_;
      }

      private com.google.protobuf.DoubleValue memoryProfilerSampleProbability_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.DoubleValue, com.google.protobuf.DoubleValue.Builder, com.google.protobuf.DoubleValueOrBuilder> memoryProfilerSampleProbabilityBuilder_;
      /**
       * <pre>
       * Collect random allocations and deallocations and write them into system.trace_log with 'MemorySample' trace_type. The probability is for every alloc/free regardless to the size of the allocation.
       * Possible values: from **0** to **1**. Default: **0**.
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue memory_profiler_sample_probability = 125;</code>
       * @return Whether the memoryProfilerSampleProbability field is set.
       */
      public boolean hasMemoryProfilerSampleProbability() {
        return memoryProfilerSampleProbabilityBuilder_ != null || memoryProfilerSampleProbability_ != null;
      }
      /**
       * <pre>
       * Collect random allocations and deallocations and write them into system.trace_log with 'MemorySample' trace_type. The probability is for every alloc/free regardless to the size of the allocation.
       * Possible values: from **0** to **1**. Default: **0**.
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue memory_profiler_sample_probability = 125;</code>
       * @return The memoryProfilerSampleProbability.
       */
      public com.google.protobuf.DoubleValue getMemoryProfilerSampleProbability() {
        if (memoryProfilerSampleProbabilityBuilder_ == null) {
          return memoryProfilerSampleProbability_ == null ? com.google.protobuf.DoubleValue.getDefaultInstance() : memoryProfilerSampleProbability_;
        } else {
          return memoryProfilerSampleProbabilityBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Collect random allocations and deallocations and write them into system.trace_log with 'MemorySample' trace_type. The probability is for every alloc/free regardless to the size of the allocation.
       * Possible values: from **0** to **1**. Default: **0**.
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue memory_profiler_sample_probability = 125;</code>
       */
      public Builder setMemoryProfilerSampleProbability(com.google.protobuf.DoubleValue value) {
        if (memoryProfilerSampleProbabilityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          memoryProfilerSampleProbability_ = value;
          onChanged();
        } else {
          memoryProfilerSampleProbabilityBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Collect random allocations and deallocations and write them into system.trace_log with 'MemorySample' trace_type. The probability is for every alloc/free regardless to the size of the allocation.
       * Possible values: from **0** to **1**. Default: **0**.
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue memory_profiler_sample_probability = 125;</code>
       */
      public Builder setMemoryProfilerSampleProbability(
          com.google.protobuf.DoubleValue.Builder builderForValue) {
        if (memoryProfilerSampleProbabilityBuilder_ == null) {
          memoryProfilerSampleProbability_ = builderForValue.build();
          onChanged();
        } else {
          memoryProfilerSampleProbabilityBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Collect random allocations and deallocations and write them into system.trace_log with 'MemorySample' trace_type. The probability is for every alloc/free regardless to the size of the allocation.
       * Possible values: from **0** to **1**. Default: **0**.
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue memory_profiler_sample_probability = 125;</code>
       */
      public Builder mergeMemoryProfilerSampleProbability(com.google.protobuf.DoubleValue value) {
        if (memoryProfilerSampleProbabilityBuilder_ == null) {
          if (memoryProfilerSampleProbability_ != null) {
            memoryProfilerSampleProbability_ =
              com.google.protobuf.DoubleValue.newBuilder(memoryProfilerSampleProbability_).mergeFrom(value).buildPartial();
          } else {
            memoryProfilerSampleProbability_ = value;
          }
          onChanged();
        } else {
          memoryProfilerSampleProbabilityBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Collect random allocations and deallocations and write them into system.trace_log with 'MemorySample' trace_type. The probability is for every alloc/free regardless to the size of the allocation.
       * Possible values: from **0** to **1**. Default: **0**.
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue memory_profiler_sample_probability = 125;</code>
       */
      public Builder clearMemoryProfilerSampleProbability() {
        if (memoryProfilerSampleProbabilityBuilder_ == null) {
          memoryProfilerSampleProbability_ = null;
          onChanged();
        } else {
          memoryProfilerSampleProbability_ = null;
          memoryProfilerSampleProbabilityBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Collect random allocations and deallocations and write them into system.trace_log with 'MemorySample' trace_type. The probability is for every alloc/free regardless to the size of the allocation.
       * Possible values: from **0** to **1**. Default: **0**.
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue memory_profiler_sample_probability = 125;</code>
       */
      public com.google.protobuf.DoubleValue.Builder getMemoryProfilerSampleProbabilityBuilder() {
        
        onChanged();
        return getMemoryProfilerSampleProbabilityFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Collect random allocations and deallocations and write them into system.trace_log with 'MemorySample' trace_type. The probability is for every alloc/free regardless to the size of the allocation.
       * Possible values: from **0** to **1**. Default: **0**.
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue memory_profiler_sample_probability = 125;</code>
       */
      public com.google.protobuf.DoubleValueOrBuilder getMemoryProfilerSampleProbabilityOrBuilder() {
        if (memoryProfilerSampleProbabilityBuilder_ != null) {
          return memoryProfilerSampleProbabilityBuilder_.getMessageOrBuilder();
        } else {
          return memoryProfilerSampleProbability_ == null ?
              com.google.protobuf.DoubleValue.getDefaultInstance() : memoryProfilerSampleProbability_;
        }
      }
      /**
       * <pre>
       * Collect random allocations and deallocations and write them into system.trace_log with 'MemorySample' trace_type. The probability is for every alloc/free regardless to the size of the allocation.
       * Possible values: from **0** to **1**. Default: **0**.
       * </pre>
       *
       * <code>.google.protobuf.DoubleValue memory_profiler_sample_probability = 125;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.DoubleValue, com.google.protobuf.DoubleValue.Builder, com.google.protobuf.DoubleValueOrBuilder> 
          getMemoryProfilerSampleProbabilityFieldBuilder() {
        if (memoryProfilerSampleProbabilityBuilder_ == null) {
          memoryProfilerSampleProbabilityBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.DoubleValue, com.google.protobuf.DoubleValue.Builder, com.google.protobuf.DoubleValueOrBuilder>(
                  getMemoryProfilerSampleProbability(),
                  getParentForChildren(),
                  isClean());
          memoryProfilerSampleProbability_ = null;
        }
        return memoryProfilerSampleProbabilityBuilder_;
      }

      private com.google.protobuf.Int64Value maxFinalThreads_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxFinalThreadsBuilder_;
      /**
       * <pre>
       * Sets the maximum number of parallel threads for the SELECT query data read phase with the FINAL modifier.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max-final-threads).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_final_threads = 126 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the maxFinalThreads field is set.
       */
      public boolean hasMaxFinalThreads() {
        return maxFinalThreadsBuilder_ != null || maxFinalThreads_ != null;
      }
      /**
       * <pre>
       * Sets the maximum number of parallel threads for the SELECT query data read phase with the FINAL modifier.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max-final-threads).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_final_threads = 126 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The maxFinalThreads.
       */
      public com.google.protobuf.Int64Value getMaxFinalThreads() {
        if (maxFinalThreadsBuilder_ == null) {
          return maxFinalThreads_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxFinalThreads_;
        } else {
          return maxFinalThreadsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Sets the maximum number of parallel threads for the SELECT query data read phase with the FINAL modifier.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max-final-threads).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_final_threads = 126 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxFinalThreads(com.google.protobuf.Int64Value value) {
        if (maxFinalThreadsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxFinalThreads_ = value;
          onChanged();
        } else {
          maxFinalThreadsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Sets the maximum number of parallel threads for the SELECT query data read phase with the FINAL modifier.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max-final-threads).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_final_threads = 126 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxFinalThreads(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxFinalThreadsBuilder_ == null) {
          maxFinalThreads_ = builderForValue.build();
          onChanged();
        } else {
          maxFinalThreadsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Sets the maximum number of parallel threads for the SELECT query data read phase with the FINAL modifier.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max-final-threads).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_final_threads = 126 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMaxFinalThreads(com.google.protobuf.Int64Value value) {
        if (maxFinalThreadsBuilder_ == null) {
          if (maxFinalThreads_ != null) {
            maxFinalThreads_ =
              com.google.protobuf.Int64Value.newBuilder(maxFinalThreads_).mergeFrom(value).buildPartial();
          } else {
            maxFinalThreads_ = value;
          }
          onChanged();
        } else {
          maxFinalThreadsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Sets the maximum number of parallel threads for the SELECT query data read phase with the FINAL modifier.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max-final-threads).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_final_threads = 126 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMaxFinalThreads() {
        if (maxFinalThreadsBuilder_ == null) {
          maxFinalThreads_ = null;
          onChanged();
        } else {
          maxFinalThreads_ = null;
          maxFinalThreadsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Sets the maximum number of parallel threads for the SELECT query data read phase with the FINAL modifier.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max-final-threads).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_final_threads = 126 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxFinalThreadsBuilder() {
        
        onChanged();
        return getMaxFinalThreadsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Sets the maximum number of parallel threads for the SELECT query data read phase with the FINAL modifier.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max-final-threads).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_final_threads = 126 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxFinalThreadsOrBuilder() {
        if (maxFinalThreadsBuilder_ != null) {
          return maxFinalThreadsBuilder_.getMessageOrBuilder();
        } else {
          return maxFinalThreads_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxFinalThreads_;
        }
      }
      /**
       * <pre>
       * Sets the maximum number of parallel threads for the SELECT query data read phase with the FINAL modifier.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max-final-threads).
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_final_threads = 126 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxFinalThreadsFieldBuilder() {
        if (maxFinalThreadsBuilder_ == null) {
          maxFinalThreadsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxFinalThreads(),
                  getParentForChildren(),
                  isClean());
          maxFinalThreads_ = null;
        }
        return maxFinalThreadsBuilder_;
      }

      private com.google.protobuf.BoolValue inputFormatParallelParsing_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> inputFormatParallelParsingBuilder_;
      /**
       * <pre>
       * Enables or disables order-preserving parallel parsing of data formats. Supported only for [TSV](https://clickhouse.com/docs/en/interfaces/formats#tabseparated), [TKSV](https://clickhouse.com/docs/en/interfaces/formats#tskv), [CSV](https://clickhouse.com/docs/en/interfaces/formats#csv) and [JSONEachRow](https://clickhouse.com/docs/en/interfaces/formats#jsoneachrow) formats.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_parallel_parsing = 127;</code>
       * @return Whether the inputFormatParallelParsing field is set.
       */
      public boolean hasInputFormatParallelParsing() {
        return inputFormatParallelParsingBuilder_ != null || inputFormatParallelParsing_ != null;
      }
      /**
       * <pre>
       * Enables or disables order-preserving parallel parsing of data formats. Supported only for [TSV](https://clickhouse.com/docs/en/interfaces/formats#tabseparated), [TKSV](https://clickhouse.com/docs/en/interfaces/formats#tskv), [CSV](https://clickhouse.com/docs/en/interfaces/formats#csv) and [JSONEachRow](https://clickhouse.com/docs/en/interfaces/formats#jsoneachrow) formats.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_parallel_parsing = 127;</code>
       * @return The inputFormatParallelParsing.
       */
      public com.google.protobuf.BoolValue getInputFormatParallelParsing() {
        if (inputFormatParallelParsingBuilder_ == null) {
          return inputFormatParallelParsing_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : inputFormatParallelParsing_;
        } else {
          return inputFormatParallelParsingBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enables or disables order-preserving parallel parsing of data formats. Supported only for [TSV](https://clickhouse.com/docs/en/interfaces/formats#tabseparated), [TKSV](https://clickhouse.com/docs/en/interfaces/formats#tskv), [CSV](https://clickhouse.com/docs/en/interfaces/formats#csv) and [JSONEachRow](https://clickhouse.com/docs/en/interfaces/formats#jsoneachrow) formats.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_parallel_parsing = 127;</code>
       */
      public Builder setInputFormatParallelParsing(com.google.protobuf.BoolValue value) {
        if (inputFormatParallelParsingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          inputFormatParallelParsing_ = value;
          onChanged();
        } else {
          inputFormatParallelParsingBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables order-preserving parallel parsing of data formats. Supported only for [TSV](https://clickhouse.com/docs/en/interfaces/formats#tabseparated), [TKSV](https://clickhouse.com/docs/en/interfaces/formats#tskv), [CSV](https://clickhouse.com/docs/en/interfaces/formats#csv) and [JSONEachRow](https://clickhouse.com/docs/en/interfaces/formats#jsoneachrow) formats.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_parallel_parsing = 127;</code>
       */
      public Builder setInputFormatParallelParsing(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (inputFormatParallelParsingBuilder_ == null) {
          inputFormatParallelParsing_ = builderForValue.build();
          onChanged();
        } else {
          inputFormatParallelParsingBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables order-preserving parallel parsing of data formats. Supported only for [TSV](https://clickhouse.com/docs/en/interfaces/formats#tabseparated), [TKSV](https://clickhouse.com/docs/en/interfaces/formats#tskv), [CSV](https://clickhouse.com/docs/en/interfaces/formats#csv) and [JSONEachRow](https://clickhouse.com/docs/en/interfaces/formats#jsoneachrow) formats.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_parallel_parsing = 127;</code>
       */
      public Builder mergeInputFormatParallelParsing(com.google.protobuf.BoolValue value) {
        if (inputFormatParallelParsingBuilder_ == null) {
          if (inputFormatParallelParsing_ != null) {
            inputFormatParallelParsing_ =
              com.google.protobuf.BoolValue.newBuilder(inputFormatParallelParsing_).mergeFrom(value).buildPartial();
          } else {
            inputFormatParallelParsing_ = value;
          }
          onChanged();
        } else {
          inputFormatParallelParsingBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables order-preserving parallel parsing of data formats. Supported only for [TSV](https://clickhouse.com/docs/en/interfaces/formats#tabseparated), [TKSV](https://clickhouse.com/docs/en/interfaces/formats#tskv), [CSV](https://clickhouse.com/docs/en/interfaces/formats#csv) and [JSONEachRow](https://clickhouse.com/docs/en/interfaces/formats#jsoneachrow) formats.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_parallel_parsing = 127;</code>
       */
      public Builder clearInputFormatParallelParsing() {
        if (inputFormatParallelParsingBuilder_ == null) {
          inputFormatParallelParsing_ = null;
          onChanged();
        } else {
          inputFormatParallelParsing_ = null;
          inputFormatParallelParsingBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables order-preserving parallel parsing of data formats. Supported only for [TSV](https://clickhouse.com/docs/en/interfaces/formats#tabseparated), [TKSV](https://clickhouse.com/docs/en/interfaces/formats#tskv), [CSV](https://clickhouse.com/docs/en/interfaces/formats#csv) and [JSONEachRow](https://clickhouse.com/docs/en/interfaces/formats#jsoneachrow) formats.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_parallel_parsing = 127;</code>
       */
      public com.google.protobuf.BoolValue.Builder getInputFormatParallelParsingBuilder() {
        
        onChanged();
        return getInputFormatParallelParsingFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enables or disables order-preserving parallel parsing of data formats. Supported only for [TSV](https://clickhouse.com/docs/en/interfaces/formats#tabseparated), [TKSV](https://clickhouse.com/docs/en/interfaces/formats#tskv), [CSV](https://clickhouse.com/docs/en/interfaces/formats#csv) and [JSONEachRow](https://clickhouse.com/docs/en/interfaces/formats#jsoneachrow) formats.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_parallel_parsing = 127;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getInputFormatParallelParsingOrBuilder() {
        if (inputFormatParallelParsingBuilder_ != null) {
          return inputFormatParallelParsingBuilder_.getMessageOrBuilder();
        } else {
          return inputFormatParallelParsing_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : inputFormatParallelParsing_;
        }
      }
      /**
       * <pre>
       * Enables or disables order-preserving parallel parsing of data formats. Supported only for [TSV](https://clickhouse.com/docs/en/interfaces/formats#tabseparated), [TKSV](https://clickhouse.com/docs/en/interfaces/formats#tskv), [CSV](https://clickhouse.com/docs/en/interfaces/formats#csv) and [JSONEachRow](https://clickhouse.com/docs/en/interfaces/formats#jsoneachrow) formats.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_parallel_parsing = 127;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getInputFormatParallelParsingFieldBuilder() {
        if (inputFormatParallelParsingBuilder_ == null) {
          inputFormatParallelParsingBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getInputFormatParallelParsing(),
                  getParentForChildren(),
                  isClean());
          inputFormatParallelParsing_ = null;
        }
        return inputFormatParallelParsingBuilder_;
      }

      private com.google.protobuf.BoolValue inputFormatImportNestedJson_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> inputFormatImportNestedJsonBuilder_;
      /**
       * <pre>
       * Enables or disables the insertion of JSON data with nested objects.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_import_nested_json = 128;</code>
       * @return Whether the inputFormatImportNestedJson field is set.
       */
      public boolean hasInputFormatImportNestedJson() {
        return inputFormatImportNestedJsonBuilder_ != null || inputFormatImportNestedJson_ != null;
      }
      /**
       * <pre>
       * Enables or disables the insertion of JSON data with nested objects.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_import_nested_json = 128;</code>
       * @return The inputFormatImportNestedJson.
       */
      public com.google.protobuf.BoolValue getInputFormatImportNestedJson() {
        if (inputFormatImportNestedJsonBuilder_ == null) {
          return inputFormatImportNestedJson_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : inputFormatImportNestedJson_;
        } else {
          return inputFormatImportNestedJsonBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enables or disables the insertion of JSON data with nested objects.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_import_nested_json = 128;</code>
       */
      public Builder setInputFormatImportNestedJson(com.google.protobuf.BoolValue value) {
        if (inputFormatImportNestedJsonBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          inputFormatImportNestedJson_ = value;
          onChanged();
        } else {
          inputFormatImportNestedJsonBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables the insertion of JSON data with nested objects.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_import_nested_json = 128;</code>
       */
      public Builder setInputFormatImportNestedJson(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (inputFormatImportNestedJsonBuilder_ == null) {
          inputFormatImportNestedJson_ = builderForValue.build();
          onChanged();
        } else {
          inputFormatImportNestedJsonBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables the insertion of JSON data with nested objects.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_import_nested_json = 128;</code>
       */
      public Builder mergeInputFormatImportNestedJson(com.google.protobuf.BoolValue value) {
        if (inputFormatImportNestedJsonBuilder_ == null) {
          if (inputFormatImportNestedJson_ != null) {
            inputFormatImportNestedJson_ =
              com.google.protobuf.BoolValue.newBuilder(inputFormatImportNestedJson_).mergeFrom(value).buildPartial();
          } else {
            inputFormatImportNestedJson_ = value;
          }
          onChanged();
        } else {
          inputFormatImportNestedJsonBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables the insertion of JSON data with nested objects.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_import_nested_json = 128;</code>
       */
      public Builder clearInputFormatImportNestedJson() {
        if (inputFormatImportNestedJsonBuilder_ == null) {
          inputFormatImportNestedJson_ = null;
          onChanged();
        } else {
          inputFormatImportNestedJson_ = null;
          inputFormatImportNestedJsonBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enables or disables the insertion of JSON data with nested objects.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_import_nested_json = 128;</code>
       */
      public com.google.protobuf.BoolValue.Builder getInputFormatImportNestedJsonBuilder() {
        
        onChanged();
        return getInputFormatImportNestedJsonFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enables or disables the insertion of JSON data with nested objects.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_import_nested_json = 128;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getInputFormatImportNestedJsonOrBuilder() {
        if (inputFormatImportNestedJsonBuilder_ != null) {
          return inputFormatImportNestedJsonBuilder_.getMessageOrBuilder();
        } else {
          return inputFormatImportNestedJson_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : inputFormatImportNestedJson_;
        }
      }
      /**
       * <pre>
       * Enables or disables the insertion of JSON data with nested objects.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#input-format-parallel-parsing)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue input_format_import_nested_json = 128;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getInputFormatImportNestedJsonFieldBuilder() {
        if (inputFormatImportNestedJsonBuilder_ == null) {
          inputFormatImportNestedJsonBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getInputFormatImportNestedJson(),
                  getParentForChildren(),
                  isClean());
          inputFormatImportNestedJson_ = null;
        }
        return inputFormatImportNestedJsonBuilder_;
      }

      private int localFilesystemReadMethod_ = 0;
      /**
       * <pre>
       * Method of reading data from local filesystem, one of: read, pread, mmap, io_uring, pread_threadpool. The 'io_uring' method is experimental and does not work for Log, TinyLog, StripeLog, File, Set and Join, and other tables with append-able files in presence of concurrent reads and writes.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.LocalFilesystemReadMethod local_filesystem_read_method = 129;</code>
       * @return The enum numeric value on the wire for localFilesystemReadMethod.
       */
      @java.lang.Override public int getLocalFilesystemReadMethodValue() {
        return localFilesystemReadMethod_;
      }
      /**
       * <pre>
       * Method of reading data from local filesystem, one of: read, pread, mmap, io_uring, pread_threadpool. The 'io_uring' method is experimental and does not work for Log, TinyLog, StripeLog, File, Set and Join, and other tables with append-able files in presence of concurrent reads and writes.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.LocalFilesystemReadMethod local_filesystem_read_method = 129;</code>
       * @param value The enum numeric value on the wire for localFilesystemReadMethod to set.
       * @return This builder for chaining.
       */
      public Builder setLocalFilesystemReadMethodValue(int value) {
        
        localFilesystemReadMethod_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Method of reading data from local filesystem, one of: read, pread, mmap, io_uring, pread_threadpool. The 'io_uring' method is experimental and does not work for Log, TinyLog, StripeLog, File, Set and Join, and other tables with append-able files in presence of concurrent reads and writes.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.LocalFilesystemReadMethod local_filesystem_read_method = 129;</code>
       * @return The localFilesystemReadMethod.
       */
      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.LocalFilesystemReadMethod getLocalFilesystemReadMethod() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.LocalFilesystemReadMethod result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.LocalFilesystemReadMethod.valueOf(localFilesystemReadMethod_);
        return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.LocalFilesystemReadMethod.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Method of reading data from local filesystem, one of: read, pread, mmap, io_uring, pread_threadpool. The 'io_uring' method is experimental and does not work for Log, TinyLog, StripeLog, File, Set and Join, and other tables with append-able files in presence of concurrent reads and writes.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.LocalFilesystemReadMethod local_filesystem_read_method = 129;</code>
       * @param value The localFilesystemReadMethod to set.
       * @return This builder for chaining.
       */
      public Builder setLocalFilesystemReadMethod(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.LocalFilesystemReadMethod value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        localFilesystemReadMethod_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Method of reading data from local filesystem, one of: read, pread, mmap, io_uring, pread_threadpool. The 'io_uring' method is experimental and does not work for Log, TinyLog, StripeLog, File, Set and Join, and other tables with append-able files in presence of concurrent reads and writes.
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.LocalFilesystemReadMethod local_filesystem_read_method = 129;</code>
       * @return This builder for chaining.
       */
      public Builder clearLocalFilesystemReadMethod() {
        
        localFilesystemReadMethod_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Int64Value maxReadBufferSize_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxReadBufferSizeBuilder_;
      /**
       * <pre>
       * The maximum size of the buffer to read from the filesystem.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/codebrowser/ClickHouse/src/Core/Settings.h.html#DB::SettingsTraits::Data::max_read_buffer_size)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_read_buffer_size = 130 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return Whether the maxReadBufferSize field is set.
       */
      public boolean hasMaxReadBufferSize() {
        return maxReadBufferSizeBuilder_ != null || maxReadBufferSize_ != null;
      }
      /**
       * <pre>
       * The maximum size of the buffer to read from the filesystem.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/codebrowser/ClickHouse/src/Core/Settings.h.html#DB::SettingsTraits::Data::max_read_buffer_size)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_read_buffer_size = 130 [(.yandex.cloud.value) = "&gt;0"];</code>
       * @return The maxReadBufferSize.
       */
      public com.google.protobuf.Int64Value getMaxReadBufferSize() {
        if (maxReadBufferSizeBuilder_ == null) {
          return maxReadBufferSize_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxReadBufferSize_;
        } else {
          return maxReadBufferSizeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The maximum size of the buffer to read from the filesystem.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/codebrowser/ClickHouse/src/Core/Settings.h.html#DB::SettingsTraits::Data::max_read_buffer_size)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_read_buffer_size = 130 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setMaxReadBufferSize(com.google.protobuf.Int64Value value) {
        if (maxReadBufferSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxReadBufferSize_ = value;
          onChanged();
        } else {
          maxReadBufferSizeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size of the buffer to read from the filesystem.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/codebrowser/ClickHouse/src/Core/Settings.h.html#DB::SettingsTraits::Data::max_read_buffer_size)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_read_buffer_size = 130 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder setMaxReadBufferSize(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxReadBufferSizeBuilder_ == null) {
          maxReadBufferSize_ = builderForValue.build();
          onChanged();
        } else {
          maxReadBufferSizeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size of the buffer to read from the filesystem.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/codebrowser/ClickHouse/src/Core/Settings.h.html#DB::SettingsTraits::Data::max_read_buffer_size)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_read_buffer_size = 130 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder mergeMaxReadBufferSize(com.google.protobuf.Int64Value value) {
        if (maxReadBufferSizeBuilder_ == null) {
          if (maxReadBufferSize_ != null) {
            maxReadBufferSize_ =
              com.google.protobuf.Int64Value.newBuilder(maxReadBufferSize_).mergeFrom(value).buildPartial();
          } else {
            maxReadBufferSize_ = value;
          }
          onChanged();
        } else {
          maxReadBufferSizeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size of the buffer to read from the filesystem.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/codebrowser/ClickHouse/src/Core/Settings.h.html#DB::SettingsTraits::Data::max_read_buffer_size)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_read_buffer_size = 130 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public Builder clearMaxReadBufferSize() {
        if (maxReadBufferSizeBuilder_ == null) {
          maxReadBufferSize_ = null;
          onChanged();
        } else {
          maxReadBufferSize_ = null;
          maxReadBufferSizeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The maximum size of the buffer to read from the filesystem.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/codebrowser/ClickHouse/src/Core/Settings.h.html#DB::SettingsTraits::Data::max_read_buffer_size)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_read_buffer_size = 130 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxReadBufferSizeBuilder() {
        
        onChanged();
        return getMaxReadBufferSizeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The maximum size of the buffer to read from the filesystem.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/codebrowser/ClickHouse/src/Core/Settings.h.html#DB::SettingsTraits::Data::max_read_buffer_size)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_read_buffer_size = 130 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxReadBufferSizeOrBuilder() {
        if (maxReadBufferSizeBuilder_ != null) {
          return maxReadBufferSizeBuilder_.getMessageOrBuilder();
        } else {
          return maxReadBufferSize_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxReadBufferSize_;
        }
      }
      /**
       * <pre>
       * The maximum size of the buffer to read from the filesystem.
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/codebrowser/ClickHouse/src/Core/Settings.h.html#DB::SettingsTraits::Data::max_read_buffer_size)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_read_buffer_size = 130 [(.yandex.cloud.value) = "&gt;0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxReadBufferSizeFieldBuilder() {
        if (maxReadBufferSizeBuilder_ == null) {
          maxReadBufferSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxReadBufferSize(),
                  getParentForChildren(),
                  isClean());
          maxReadBufferSize_ = null;
        }
        return maxReadBufferSizeBuilder_;
      }

      private com.google.protobuf.Int64Value insertKeeperMaxRetries_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> insertKeeperMaxRetriesBuilder_;
      /**
       * <pre>
       * The setting sets the maximum number of retries for ClickHouse Keeper (or ZooKeeper) requests during insert into replicated MergeTree. Only Keeper requests which failed due to network error, Keeper session timeout, or request timeout are considered for retries.
       * Default: 20 from 23.2, 0(disabled) before
       * Min_version: 22.11
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#insert_keeper_max_retries)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value insert_keeper_max_retries = 131 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the insertKeeperMaxRetries field is set.
       */
      public boolean hasInsertKeeperMaxRetries() {
        return insertKeeperMaxRetriesBuilder_ != null || insertKeeperMaxRetries_ != null;
      }
      /**
       * <pre>
       * The setting sets the maximum number of retries for ClickHouse Keeper (or ZooKeeper) requests during insert into replicated MergeTree. Only Keeper requests which failed due to network error, Keeper session timeout, or request timeout are considered for retries.
       * Default: 20 from 23.2, 0(disabled) before
       * Min_version: 22.11
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#insert_keeper_max_retries)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value insert_keeper_max_retries = 131 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The insertKeeperMaxRetries.
       */
      public com.google.protobuf.Int64Value getInsertKeeperMaxRetries() {
        if (insertKeeperMaxRetriesBuilder_ == null) {
          return insertKeeperMaxRetries_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : insertKeeperMaxRetries_;
        } else {
          return insertKeeperMaxRetriesBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The setting sets the maximum number of retries for ClickHouse Keeper (or ZooKeeper) requests during insert into replicated MergeTree. Only Keeper requests which failed due to network error, Keeper session timeout, or request timeout are considered for retries.
       * Default: 20 from 23.2, 0(disabled) before
       * Min_version: 22.11
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#insert_keeper_max_retries)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value insert_keeper_max_retries = 131 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setInsertKeeperMaxRetries(com.google.protobuf.Int64Value value) {
        if (insertKeeperMaxRetriesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          insertKeeperMaxRetries_ = value;
          onChanged();
        } else {
          insertKeeperMaxRetriesBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The setting sets the maximum number of retries for ClickHouse Keeper (or ZooKeeper) requests during insert into replicated MergeTree. Only Keeper requests which failed due to network error, Keeper session timeout, or request timeout are considered for retries.
       * Default: 20 from 23.2, 0(disabled) before
       * Min_version: 22.11
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#insert_keeper_max_retries)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value insert_keeper_max_retries = 131 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setInsertKeeperMaxRetries(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (insertKeeperMaxRetriesBuilder_ == null) {
          insertKeeperMaxRetries_ = builderForValue.build();
          onChanged();
        } else {
          insertKeeperMaxRetriesBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The setting sets the maximum number of retries for ClickHouse Keeper (or ZooKeeper) requests during insert into replicated MergeTree. Only Keeper requests which failed due to network error, Keeper session timeout, or request timeout are considered for retries.
       * Default: 20 from 23.2, 0(disabled) before
       * Min_version: 22.11
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#insert_keeper_max_retries)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value insert_keeper_max_retries = 131 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeInsertKeeperMaxRetries(com.google.protobuf.Int64Value value) {
        if (insertKeeperMaxRetriesBuilder_ == null) {
          if (insertKeeperMaxRetries_ != null) {
            insertKeeperMaxRetries_ =
              com.google.protobuf.Int64Value.newBuilder(insertKeeperMaxRetries_).mergeFrom(value).buildPartial();
          } else {
            insertKeeperMaxRetries_ = value;
          }
          onChanged();
        } else {
          insertKeeperMaxRetriesBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The setting sets the maximum number of retries for ClickHouse Keeper (or ZooKeeper) requests during insert into replicated MergeTree. Only Keeper requests which failed due to network error, Keeper session timeout, or request timeout are considered for retries.
       * Default: 20 from 23.2, 0(disabled) before
       * Min_version: 22.11
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#insert_keeper_max_retries)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value insert_keeper_max_retries = 131 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearInsertKeeperMaxRetries() {
        if (insertKeeperMaxRetriesBuilder_ == null) {
          insertKeeperMaxRetries_ = null;
          onChanged();
        } else {
          insertKeeperMaxRetries_ = null;
          insertKeeperMaxRetriesBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The setting sets the maximum number of retries for ClickHouse Keeper (or ZooKeeper) requests during insert into replicated MergeTree. Only Keeper requests which failed due to network error, Keeper session timeout, or request timeout are considered for retries.
       * Default: 20 from 23.2, 0(disabled) before
       * Min_version: 22.11
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#insert_keeper_max_retries)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value insert_keeper_max_retries = 131 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getInsertKeeperMaxRetriesBuilder() {
        
        onChanged();
        return getInsertKeeperMaxRetriesFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The setting sets the maximum number of retries for ClickHouse Keeper (or ZooKeeper) requests during insert into replicated MergeTree. Only Keeper requests which failed due to network error, Keeper session timeout, or request timeout are considered for retries.
       * Default: 20 from 23.2, 0(disabled) before
       * Min_version: 22.11
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#insert_keeper_max_retries)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value insert_keeper_max_retries = 131 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getInsertKeeperMaxRetriesOrBuilder() {
        if (insertKeeperMaxRetriesBuilder_ != null) {
          return insertKeeperMaxRetriesBuilder_.getMessageOrBuilder();
        } else {
          return insertKeeperMaxRetries_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : insertKeeperMaxRetries_;
        }
      }
      /**
       * <pre>
       * The setting sets the maximum number of retries for ClickHouse Keeper (or ZooKeeper) requests during insert into replicated MergeTree. Only Keeper requests which failed due to network error, Keeper session timeout, or request timeout are considered for retries.
       * Default: 20 from 23.2, 0(disabled) before
       * Min_version: 22.11
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#insert_keeper_max_retries)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value insert_keeper_max_retries = 131 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getInsertKeeperMaxRetriesFieldBuilder() {
        if (insertKeeperMaxRetriesBuilder_ == null) {
          insertKeeperMaxRetriesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getInsertKeeperMaxRetries(),
                  getParentForChildren(),
                  isClean());
          insertKeeperMaxRetries_ = null;
        }
        return insertKeeperMaxRetriesBuilder_;
      }

      private com.google.protobuf.Int64Value maxTemporaryDataOnDiskSizeForUser_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxTemporaryDataOnDiskSizeForUserBuilder_;
      /**
       * <pre>
       * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running user queries. Zero means unlimited.
       * Default: 0 - unlimited
       * Min_version: 22.10
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_user)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_user = 132 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the maxTemporaryDataOnDiskSizeForUser field is set.
       */
      public boolean hasMaxTemporaryDataOnDiskSizeForUser() {
        return maxTemporaryDataOnDiskSizeForUserBuilder_ != null || maxTemporaryDataOnDiskSizeForUser_ != null;
      }
      /**
       * <pre>
       * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running user queries. Zero means unlimited.
       * Default: 0 - unlimited
       * Min_version: 22.10
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_user)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_user = 132 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The maxTemporaryDataOnDiskSizeForUser.
       */
      public com.google.protobuf.Int64Value getMaxTemporaryDataOnDiskSizeForUser() {
        if (maxTemporaryDataOnDiskSizeForUserBuilder_ == null) {
          return maxTemporaryDataOnDiskSizeForUser_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxTemporaryDataOnDiskSizeForUser_;
        } else {
          return maxTemporaryDataOnDiskSizeForUserBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running user queries. Zero means unlimited.
       * Default: 0 - unlimited
       * Min_version: 22.10
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_user)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_user = 132 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxTemporaryDataOnDiskSizeForUser(com.google.protobuf.Int64Value value) {
        if (maxTemporaryDataOnDiskSizeForUserBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxTemporaryDataOnDiskSizeForUser_ = value;
          onChanged();
        } else {
          maxTemporaryDataOnDiskSizeForUserBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running user queries. Zero means unlimited.
       * Default: 0 - unlimited
       * Min_version: 22.10
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_user)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_user = 132 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxTemporaryDataOnDiskSizeForUser(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxTemporaryDataOnDiskSizeForUserBuilder_ == null) {
          maxTemporaryDataOnDiskSizeForUser_ = builderForValue.build();
          onChanged();
        } else {
          maxTemporaryDataOnDiskSizeForUserBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running user queries. Zero means unlimited.
       * Default: 0 - unlimited
       * Min_version: 22.10
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_user)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_user = 132 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMaxTemporaryDataOnDiskSizeForUser(com.google.protobuf.Int64Value value) {
        if (maxTemporaryDataOnDiskSizeForUserBuilder_ == null) {
          if (maxTemporaryDataOnDiskSizeForUser_ != null) {
            maxTemporaryDataOnDiskSizeForUser_ =
              com.google.protobuf.Int64Value.newBuilder(maxTemporaryDataOnDiskSizeForUser_).mergeFrom(value).buildPartial();
          } else {
            maxTemporaryDataOnDiskSizeForUser_ = value;
          }
          onChanged();
        } else {
          maxTemporaryDataOnDiskSizeForUserBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running user queries. Zero means unlimited.
       * Default: 0 - unlimited
       * Min_version: 22.10
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_user)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_user = 132 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMaxTemporaryDataOnDiskSizeForUser() {
        if (maxTemporaryDataOnDiskSizeForUserBuilder_ == null) {
          maxTemporaryDataOnDiskSizeForUser_ = null;
          onChanged();
        } else {
          maxTemporaryDataOnDiskSizeForUser_ = null;
          maxTemporaryDataOnDiskSizeForUserBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running user queries. Zero means unlimited.
       * Default: 0 - unlimited
       * Min_version: 22.10
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_user)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_user = 132 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxTemporaryDataOnDiskSizeForUserBuilder() {
        
        onChanged();
        return getMaxTemporaryDataOnDiskSizeForUserFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running user queries. Zero means unlimited.
       * Default: 0 - unlimited
       * Min_version: 22.10
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_user)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_user = 132 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxTemporaryDataOnDiskSizeForUserOrBuilder() {
        if (maxTemporaryDataOnDiskSizeForUserBuilder_ != null) {
          return maxTemporaryDataOnDiskSizeForUserBuilder_.getMessageOrBuilder();
        } else {
          return maxTemporaryDataOnDiskSizeForUser_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxTemporaryDataOnDiskSizeForUser_;
        }
      }
      /**
       * <pre>
       * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running user queries. Zero means unlimited.
       * Default: 0 - unlimited
       * Min_version: 22.10
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_user)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_user = 132 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxTemporaryDataOnDiskSizeForUserFieldBuilder() {
        if (maxTemporaryDataOnDiskSizeForUserBuilder_ == null) {
          maxTemporaryDataOnDiskSizeForUserBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxTemporaryDataOnDiskSizeForUser(),
                  getParentForChildren(),
                  isClean());
          maxTemporaryDataOnDiskSizeForUser_ = null;
        }
        return maxTemporaryDataOnDiskSizeForUserBuilder_;
      }

      private com.google.protobuf.Int64Value maxTemporaryDataOnDiskSizeForQuery_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxTemporaryDataOnDiskSizeForQueryBuilder_;
      /**
       * <pre>
       * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running queries. Zero means unlimited.
       * Default: 0 - unlimited
       * Min_version: 22.10
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_query)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_query = 133 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the maxTemporaryDataOnDiskSizeForQuery field is set.
       */
      public boolean hasMaxTemporaryDataOnDiskSizeForQuery() {
        return maxTemporaryDataOnDiskSizeForQueryBuilder_ != null || maxTemporaryDataOnDiskSizeForQuery_ != null;
      }
      /**
       * <pre>
       * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running queries. Zero means unlimited.
       * Default: 0 - unlimited
       * Min_version: 22.10
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_query)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_query = 133 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The maxTemporaryDataOnDiskSizeForQuery.
       */
      public com.google.protobuf.Int64Value getMaxTemporaryDataOnDiskSizeForQuery() {
        if (maxTemporaryDataOnDiskSizeForQueryBuilder_ == null) {
          return maxTemporaryDataOnDiskSizeForQuery_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxTemporaryDataOnDiskSizeForQuery_;
        } else {
          return maxTemporaryDataOnDiskSizeForQueryBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running queries. Zero means unlimited.
       * Default: 0 - unlimited
       * Min_version: 22.10
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_query)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_query = 133 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxTemporaryDataOnDiskSizeForQuery(com.google.protobuf.Int64Value value) {
        if (maxTemporaryDataOnDiskSizeForQueryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxTemporaryDataOnDiskSizeForQuery_ = value;
          onChanged();
        } else {
          maxTemporaryDataOnDiskSizeForQueryBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running queries. Zero means unlimited.
       * Default: 0 - unlimited
       * Min_version: 22.10
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_query)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_query = 133 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxTemporaryDataOnDiskSizeForQuery(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxTemporaryDataOnDiskSizeForQueryBuilder_ == null) {
          maxTemporaryDataOnDiskSizeForQuery_ = builderForValue.build();
          onChanged();
        } else {
          maxTemporaryDataOnDiskSizeForQueryBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running queries. Zero means unlimited.
       * Default: 0 - unlimited
       * Min_version: 22.10
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_query)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_query = 133 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMaxTemporaryDataOnDiskSizeForQuery(com.google.protobuf.Int64Value value) {
        if (maxTemporaryDataOnDiskSizeForQueryBuilder_ == null) {
          if (maxTemporaryDataOnDiskSizeForQuery_ != null) {
            maxTemporaryDataOnDiskSizeForQuery_ =
              com.google.protobuf.Int64Value.newBuilder(maxTemporaryDataOnDiskSizeForQuery_).mergeFrom(value).buildPartial();
          } else {
            maxTemporaryDataOnDiskSizeForQuery_ = value;
          }
          onChanged();
        } else {
          maxTemporaryDataOnDiskSizeForQueryBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running queries. Zero means unlimited.
       * Default: 0 - unlimited
       * Min_version: 22.10
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_query)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_query = 133 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMaxTemporaryDataOnDiskSizeForQuery() {
        if (maxTemporaryDataOnDiskSizeForQueryBuilder_ == null) {
          maxTemporaryDataOnDiskSizeForQuery_ = null;
          onChanged();
        } else {
          maxTemporaryDataOnDiskSizeForQuery_ = null;
          maxTemporaryDataOnDiskSizeForQueryBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running queries. Zero means unlimited.
       * Default: 0 - unlimited
       * Min_version: 22.10
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_query)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_query = 133 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxTemporaryDataOnDiskSizeForQueryBuilder() {
        
        onChanged();
        return getMaxTemporaryDataOnDiskSizeForQueryFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running queries. Zero means unlimited.
       * Default: 0 - unlimited
       * Min_version: 22.10
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_query)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_query = 133 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxTemporaryDataOnDiskSizeForQueryOrBuilder() {
        if (maxTemporaryDataOnDiskSizeForQueryBuilder_ != null) {
          return maxTemporaryDataOnDiskSizeForQueryBuilder_.getMessageOrBuilder();
        } else {
          return maxTemporaryDataOnDiskSizeForQuery_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxTemporaryDataOnDiskSizeForQuery_;
        }
      }
      /**
       * <pre>
       * The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running queries. Zero means unlimited.
       * Default: 0 - unlimited
       * Min_version: 22.10
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity#settings_max_temporary_data_on_disk_size_for_query)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_temporary_data_on_disk_size_for_query = 133 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxTemporaryDataOnDiskSizeForQueryFieldBuilder() {
        if (maxTemporaryDataOnDiskSizeForQueryBuilder_ == null) {
          maxTemporaryDataOnDiskSizeForQueryBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxTemporaryDataOnDiskSizeForQuery(),
                  getParentForChildren(),
                  isClean());
          maxTemporaryDataOnDiskSizeForQuery_ = null;
        }
        return maxTemporaryDataOnDiskSizeForQueryBuilder_;
      }

      private com.google.protobuf.Int64Value maxParserDepth_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxParserDepthBuilder_;
      /**
       * <pre>
       * Limits maximum recursion depth in the recursive descent parser. Allows controlling the stack size.
       * Default: 1000
       * Special: 0 - unlimited
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_parser_depth)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_parser_depth = 134 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the maxParserDepth field is set.
       */
      public boolean hasMaxParserDepth() {
        return maxParserDepthBuilder_ != null || maxParserDepth_ != null;
      }
      /**
       * <pre>
       * Limits maximum recursion depth in the recursive descent parser. Allows controlling the stack size.
       * Default: 1000
       * Special: 0 - unlimited
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_parser_depth)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_parser_depth = 134 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The maxParserDepth.
       */
      public com.google.protobuf.Int64Value getMaxParserDepth() {
        if (maxParserDepthBuilder_ == null) {
          return maxParserDepth_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxParserDepth_;
        } else {
          return maxParserDepthBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Limits maximum recursion depth in the recursive descent parser. Allows controlling the stack size.
       * Default: 1000
       * Special: 0 - unlimited
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_parser_depth)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_parser_depth = 134 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxParserDepth(com.google.protobuf.Int64Value value) {
        if (maxParserDepthBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxParserDepth_ = value;
          onChanged();
        } else {
          maxParserDepthBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits maximum recursion depth in the recursive descent parser. Allows controlling the stack size.
       * Default: 1000
       * Special: 0 - unlimited
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_parser_depth)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_parser_depth = 134 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxParserDepth(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxParserDepthBuilder_ == null) {
          maxParserDepth_ = builderForValue.build();
          onChanged();
        } else {
          maxParserDepthBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Limits maximum recursion depth in the recursive descent parser. Allows controlling the stack size.
       * Default: 1000
       * Special: 0 - unlimited
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_parser_depth)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_parser_depth = 134 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMaxParserDepth(com.google.protobuf.Int64Value value) {
        if (maxParserDepthBuilder_ == null) {
          if (maxParserDepth_ != null) {
            maxParserDepth_ =
              com.google.protobuf.Int64Value.newBuilder(maxParserDepth_).mergeFrom(value).buildPartial();
          } else {
            maxParserDepth_ = value;
          }
          onChanged();
        } else {
          maxParserDepthBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Limits maximum recursion depth in the recursive descent parser. Allows controlling the stack size.
       * Default: 1000
       * Special: 0 - unlimited
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_parser_depth)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_parser_depth = 134 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMaxParserDepth() {
        if (maxParserDepthBuilder_ == null) {
          maxParserDepth_ = null;
          onChanged();
        } else {
          maxParserDepth_ = null;
          maxParserDepthBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Limits maximum recursion depth in the recursive descent parser. Allows controlling the stack size.
       * Default: 1000
       * Special: 0 - unlimited
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_parser_depth)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_parser_depth = 134 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxParserDepthBuilder() {
        
        onChanged();
        return getMaxParserDepthFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Limits maximum recursion depth in the recursive descent parser. Allows controlling the stack size.
       * Default: 1000
       * Special: 0 - unlimited
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_parser_depth)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_parser_depth = 134 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxParserDepthOrBuilder() {
        if (maxParserDepthBuilder_ != null) {
          return maxParserDepthBuilder_.getMessageOrBuilder();
        } else {
          return maxParserDepth_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxParserDepth_;
        }
      }
      /**
       * <pre>
       * Limits maximum recursion depth in the recursive descent parser. Allows controlling the stack size.
       * Default: 1000
       * Special: 0 - unlimited
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_parser_depth)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_parser_depth = 134 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxParserDepthFieldBuilder() {
        if (maxParserDepthBuilder_ == null) {
          maxParserDepthBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxParserDepth(),
                  getParentForChildren(),
                  isClean());
          maxParserDepth_ = null;
        }
        return maxParserDepthBuilder_;
      }

      private int remoteFilesystemReadMethod_ = 0;
      /**
       * <pre>
       * Method of reading data from remote filesystem, one of: read, threadpool.
       * Default: read
       * Min_version: 21.11
       * See in-depth description in [ClickHouse GitHub](https://github.com/ClickHouse/ClickHouse/blob/f9558345e886876b9132d9c018e357f7fa9b22a3/src/Core/Settings.h#L660)
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.RemoteFilesystemReadMethod remote_filesystem_read_method = 135;</code>
       * @return The enum numeric value on the wire for remoteFilesystemReadMethod.
       */
      @java.lang.Override public int getRemoteFilesystemReadMethodValue() {
        return remoteFilesystemReadMethod_;
      }
      /**
       * <pre>
       * Method of reading data from remote filesystem, one of: read, threadpool.
       * Default: read
       * Min_version: 21.11
       * See in-depth description in [ClickHouse GitHub](https://github.com/ClickHouse/ClickHouse/blob/f9558345e886876b9132d9c018e357f7fa9b22a3/src/Core/Settings.h#L660)
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.RemoteFilesystemReadMethod remote_filesystem_read_method = 135;</code>
       * @param value The enum numeric value on the wire for remoteFilesystemReadMethod to set.
       * @return This builder for chaining.
       */
      public Builder setRemoteFilesystemReadMethodValue(int value) {
        
        remoteFilesystemReadMethod_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Method of reading data from remote filesystem, one of: read, threadpool.
       * Default: read
       * Min_version: 21.11
       * See in-depth description in [ClickHouse GitHub](https://github.com/ClickHouse/ClickHouse/blob/f9558345e886876b9132d9c018e357f7fa9b22a3/src/Core/Settings.h#L660)
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.RemoteFilesystemReadMethod remote_filesystem_read_method = 135;</code>
       * @return The remoteFilesystemReadMethod.
       */
      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.RemoteFilesystemReadMethod getRemoteFilesystemReadMethod() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.RemoteFilesystemReadMethod result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.RemoteFilesystemReadMethod.valueOf(remoteFilesystemReadMethod_);
        return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.RemoteFilesystemReadMethod.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Method of reading data from remote filesystem, one of: read, threadpool.
       * Default: read
       * Min_version: 21.11
       * See in-depth description in [ClickHouse GitHub](https://github.com/ClickHouse/ClickHouse/blob/f9558345e886876b9132d9c018e357f7fa9b22a3/src/Core/Settings.h#L660)
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.RemoteFilesystemReadMethod remote_filesystem_read_method = 135;</code>
       * @param value The remoteFilesystemReadMethod to set.
       * @return This builder for chaining.
       */
      public Builder setRemoteFilesystemReadMethod(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.RemoteFilesystemReadMethod value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        remoteFilesystemReadMethod_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Method of reading data from remote filesystem, one of: read, threadpool.
       * Default: read
       * Min_version: 21.11
       * See in-depth description in [ClickHouse GitHub](https://github.com/ClickHouse/ClickHouse/blob/f9558345e886876b9132d9c018e357f7fa9b22a3/src/Core/Settings.h#L660)
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.RemoteFilesystemReadMethod remote_filesystem_read_method = 135;</code>
       * @return This builder for chaining.
       */
      public Builder clearRemoteFilesystemReadMethod() {
        
        remoteFilesystemReadMethod_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Int64Value memoryOvercommitRatioDenominator_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> memoryOvercommitRatioDenominatorBuilder_;
      /**
       * <pre>
       * It represents soft memory limit in case when hard limit is reached on user level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
       * Default: 1GiB
       * Min_version: 22.5
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator = 136 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the memoryOvercommitRatioDenominator field is set.
       */
      public boolean hasMemoryOvercommitRatioDenominator() {
        return memoryOvercommitRatioDenominatorBuilder_ != null || memoryOvercommitRatioDenominator_ != null;
      }
      /**
       * <pre>
       * It represents soft memory limit in case when hard limit is reached on user level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
       * Default: 1GiB
       * Min_version: 22.5
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator = 136 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The memoryOvercommitRatioDenominator.
       */
      public com.google.protobuf.Int64Value getMemoryOvercommitRatioDenominator() {
        if (memoryOvercommitRatioDenominatorBuilder_ == null) {
          return memoryOvercommitRatioDenominator_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : memoryOvercommitRatioDenominator_;
        } else {
          return memoryOvercommitRatioDenominatorBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * It represents soft memory limit in case when hard limit is reached on user level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
       * Default: 1GiB
       * Min_version: 22.5
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator = 136 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMemoryOvercommitRatioDenominator(com.google.protobuf.Int64Value value) {
        if (memoryOvercommitRatioDenominatorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          memoryOvercommitRatioDenominator_ = value;
          onChanged();
        } else {
          memoryOvercommitRatioDenominatorBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * It represents soft memory limit in case when hard limit is reached on user level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
       * Default: 1GiB
       * Min_version: 22.5
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator = 136 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMemoryOvercommitRatioDenominator(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (memoryOvercommitRatioDenominatorBuilder_ == null) {
          memoryOvercommitRatioDenominator_ = builderForValue.build();
          onChanged();
        } else {
          memoryOvercommitRatioDenominatorBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * It represents soft memory limit in case when hard limit is reached on user level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
       * Default: 1GiB
       * Min_version: 22.5
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator = 136 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMemoryOvercommitRatioDenominator(com.google.protobuf.Int64Value value) {
        if (memoryOvercommitRatioDenominatorBuilder_ == null) {
          if (memoryOvercommitRatioDenominator_ != null) {
            memoryOvercommitRatioDenominator_ =
              com.google.protobuf.Int64Value.newBuilder(memoryOvercommitRatioDenominator_).mergeFrom(value).buildPartial();
          } else {
            memoryOvercommitRatioDenominator_ = value;
          }
          onChanged();
        } else {
          memoryOvercommitRatioDenominatorBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * It represents soft memory limit in case when hard limit is reached on user level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
       * Default: 1GiB
       * Min_version: 22.5
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator = 136 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMemoryOvercommitRatioDenominator() {
        if (memoryOvercommitRatioDenominatorBuilder_ == null) {
          memoryOvercommitRatioDenominator_ = null;
          onChanged();
        } else {
          memoryOvercommitRatioDenominator_ = null;
          memoryOvercommitRatioDenominatorBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * It represents soft memory limit in case when hard limit is reached on user level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
       * Default: 1GiB
       * Min_version: 22.5
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator = 136 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMemoryOvercommitRatioDenominatorBuilder() {
        
        onChanged();
        return getMemoryOvercommitRatioDenominatorFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * It represents soft memory limit in case when hard limit is reached on user level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
       * Default: 1GiB
       * Min_version: 22.5
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator = 136 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMemoryOvercommitRatioDenominatorOrBuilder() {
        if (memoryOvercommitRatioDenominatorBuilder_ != null) {
          return memoryOvercommitRatioDenominatorBuilder_.getMessageOrBuilder();
        } else {
          return memoryOvercommitRatioDenominator_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : memoryOvercommitRatioDenominator_;
        }
      }
      /**
       * <pre>
       * It represents soft memory limit in case when hard limit is reached on user level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
       * Default: 1GiB
       * Min_version: 22.5
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator = 136 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMemoryOvercommitRatioDenominatorFieldBuilder() {
        if (memoryOvercommitRatioDenominatorBuilder_ == null) {
          memoryOvercommitRatioDenominatorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMemoryOvercommitRatioDenominator(),
                  getParentForChildren(),
                  isClean());
          memoryOvercommitRatioDenominator_ = null;
        }
        return memoryOvercommitRatioDenominatorBuilder_;
      }

      private com.google.protobuf.Int64Value memoryOvercommitRatioDenominatorForUser_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> memoryOvercommitRatioDenominatorForUserBuilder_;
      /**
       * <pre>
       * It represents soft memory limit in case when hard limit is reached on global level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
       * Default: 1GiB
       * Min_version: 22.5
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator_for_user)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator_for_user = 137 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the memoryOvercommitRatioDenominatorForUser field is set.
       */
      public boolean hasMemoryOvercommitRatioDenominatorForUser() {
        return memoryOvercommitRatioDenominatorForUserBuilder_ != null || memoryOvercommitRatioDenominatorForUser_ != null;
      }
      /**
       * <pre>
       * It represents soft memory limit in case when hard limit is reached on global level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
       * Default: 1GiB
       * Min_version: 22.5
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator_for_user)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator_for_user = 137 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The memoryOvercommitRatioDenominatorForUser.
       */
      public com.google.protobuf.Int64Value getMemoryOvercommitRatioDenominatorForUser() {
        if (memoryOvercommitRatioDenominatorForUserBuilder_ == null) {
          return memoryOvercommitRatioDenominatorForUser_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : memoryOvercommitRatioDenominatorForUser_;
        } else {
          return memoryOvercommitRatioDenominatorForUserBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * It represents soft memory limit in case when hard limit is reached on global level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
       * Default: 1GiB
       * Min_version: 22.5
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator_for_user)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator_for_user = 137 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMemoryOvercommitRatioDenominatorForUser(com.google.protobuf.Int64Value value) {
        if (memoryOvercommitRatioDenominatorForUserBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          memoryOvercommitRatioDenominatorForUser_ = value;
          onChanged();
        } else {
          memoryOvercommitRatioDenominatorForUserBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * It represents soft memory limit in case when hard limit is reached on global level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
       * Default: 1GiB
       * Min_version: 22.5
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator_for_user)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator_for_user = 137 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMemoryOvercommitRatioDenominatorForUser(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (memoryOvercommitRatioDenominatorForUserBuilder_ == null) {
          memoryOvercommitRatioDenominatorForUser_ = builderForValue.build();
          onChanged();
        } else {
          memoryOvercommitRatioDenominatorForUserBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * It represents soft memory limit in case when hard limit is reached on global level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
       * Default: 1GiB
       * Min_version: 22.5
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator_for_user)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator_for_user = 137 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMemoryOvercommitRatioDenominatorForUser(com.google.protobuf.Int64Value value) {
        if (memoryOvercommitRatioDenominatorForUserBuilder_ == null) {
          if (memoryOvercommitRatioDenominatorForUser_ != null) {
            memoryOvercommitRatioDenominatorForUser_ =
              com.google.protobuf.Int64Value.newBuilder(memoryOvercommitRatioDenominatorForUser_).mergeFrom(value).buildPartial();
          } else {
            memoryOvercommitRatioDenominatorForUser_ = value;
          }
          onChanged();
        } else {
          memoryOvercommitRatioDenominatorForUserBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * It represents soft memory limit in case when hard limit is reached on global level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
       * Default: 1GiB
       * Min_version: 22.5
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator_for_user)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator_for_user = 137 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMemoryOvercommitRatioDenominatorForUser() {
        if (memoryOvercommitRatioDenominatorForUserBuilder_ == null) {
          memoryOvercommitRatioDenominatorForUser_ = null;
          onChanged();
        } else {
          memoryOvercommitRatioDenominatorForUser_ = null;
          memoryOvercommitRatioDenominatorForUserBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * It represents soft memory limit in case when hard limit is reached on global level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
       * Default: 1GiB
       * Min_version: 22.5
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator_for_user)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator_for_user = 137 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMemoryOvercommitRatioDenominatorForUserBuilder() {
        
        onChanged();
        return getMemoryOvercommitRatioDenominatorForUserFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * It represents soft memory limit in case when hard limit is reached on global level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
       * Default: 1GiB
       * Min_version: 22.5
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator_for_user)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator_for_user = 137 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMemoryOvercommitRatioDenominatorForUserOrBuilder() {
        if (memoryOvercommitRatioDenominatorForUserBuilder_ != null) {
          return memoryOvercommitRatioDenominatorForUserBuilder_.getMessageOrBuilder();
        } else {
          return memoryOvercommitRatioDenominatorForUser_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : memoryOvercommitRatioDenominatorForUser_;
        }
      }
      /**
       * <pre>
       * It represents soft memory limit in case when hard limit is reached on global level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
       * Default: 1GiB
       * Min_version: 22.5
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_overcommit_ratio_denominator_for_user)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_overcommit_ratio_denominator_for_user = 137 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMemoryOvercommitRatioDenominatorForUserFieldBuilder() {
        if (memoryOvercommitRatioDenominatorForUserBuilder_ == null) {
          memoryOvercommitRatioDenominatorForUserBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMemoryOvercommitRatioDenominatorForUser(),
                  getParentForChildren(),
                  isClean());
          memoryOvercommitRatioDenominatorForUser_ = null;
        }
        return memoryOvercommitRatioDenominatorForUserBuilder_;
      }

      private com.google.protobuf.Int64Value memoryUsageOvercommitMaxWaitMicroseconds_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> memoryUsageOvercommitMaxWaitMicrosecondsBuilder_;
      /**
       * <pre>
       * Maximum time thread will wait for memory to be freed in the case of memory overcommit on a user level. If the timeout is reached and memory is not freed, an exception is thrown.
       * Default: 5000000
       * Min_version: 22.5
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_usage_overcommit_max_wait_microseconds)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_usage_overcommit_max_wait_microseconds = 138 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the memoryUsageOvercommitMaxWaitMicroseconds field is set.
       */
      public boolean hasMemoryUsageOvercommitMaxWaitMicroseconds() {
        return memoryUsageOvercommitMaxWaitMicrosecondsBuilder_ != null || memoryUsageOvercommitMaxWaitMicroseconds_ != null;
      }
      /**
       * <pre>
       * Maximum time thread will wait for memory to be freed in the case of memory overcommit on a user level. If the timeout is reached and memory is not freed, an exception is thrown.
       * Default: 5000000
       * Min_version: 22.5
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_usage_overcommit_max_wait_microseconds)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_usage_overcommit_max_wait_microseconds = 138 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The memoryUsageOvercommitMaxWaitMicroseconds.
       */
      public com.google.protobuf.Int64Value getMemoryUsageOvercommitMaxWaitMicroseconds() {
        if (memoryUsageOvercommitMaxWaitMicrosecondsBuilder_ == null) {
          return memoryUsageOvercommitMaxWaitMicroseconds_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : memoryUsageOvercommitMaxWaitMicroseconds_;
        } else {
          return memoryUsageOvercommitMaxWaitMicrosecondsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Maximum time thread will wait for memory to be freed in the case of memory overcommit on a user level. If the timeout is reached and memory is not freed, an exception is thrown.
       * Default: 5000000
       * Min_version: 22.5
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_usage_overcommit_max_wait_microseconds)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_usage_overcommit_max_wait_microseconds = 138 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMemoryUsageOvercommitMaxWaitMicroseconds(com.google.protobuf.Int64Value value) {
        if (memoryUsageOvercommitMaxWaitMicrosecondsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          memoryUsageOvercommitMaxWaitMicroseconds_ = value;
          onChanged();
        } else {
          memoryUsageOvercommitMaxWaitMicrosecondsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Maximum time thread will wait for memory to be freed in the case of memory overcommit on a user level. If the timeout is reached and memory is not freed, an exception is thrown.
       * Default: 5000000
       * Min_version: 22.5
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_usage_overcommit_max_wait_microseconds)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_usage_overcommit_max_wait_microseconds = 138 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMemoryUsageOvercommitMaxWaitMicroseconds(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (memoryUsageOvercommitMaxWaitMicrosecondsBuilder_ == null) {
          memoryUsageOvercommitMaxWaitMicroseconds_ = builderForValue.build();
          onChanged();
        } else {
          memoryUsageOvercommitMaxWaitMicrosecondsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Maximum time thread will wait for memory to be freed in the case of memory overcommit on a user level. If the timeout is reached and memory is not freed, an exception is thrown.
       * Default: 5000000
       * Min_version: 22.5
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_usage_overcommit_max_wait_microseconds)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_usage_overcommit_max_wait_microseconds = 138 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMemoryUsageOvercommitMaxWaitMicroseconds(com.google.protobuf.Int64Value value) {
        if (memoryUsageOvercommitMaxWaitMicrosecondsBuilder_ == null) {
          if (memoryUsageOvercommitMaxWaitMicroseconds_ != null) {
            memoryUsageOvercommitMaxWaitMicroseconds_ =
              com.google.protobuf.Int64Value.newBuilder(memoryUsageOvercommitMaxWaitMicroseconds_).mergeFrom(value).buildPartial();
          } else {
            memoryUsageOvercommitMaxWaitMicroseconds_ = value;
          }
          onChanged();
        } else {
          memoryUsageOvercommitMaxWaitMicrosecondsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Maximum time thread will wait for memory to be freed in the case of memory overcommit on a user level. If the timeout is reached and memory is not freed, an exception is thrown.
       * Default: 5000000
       * Min_version: 22.5
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_usage_overcommit_max_wait_microseconds)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_usage_overcommit_max_wait_microseconds = 138 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMemoryUsageOvercommitMaxWaitMicroseconds() {
        if (memoryUsageOvercommitMaxWaitMicrosecondsBuilder_ == null) {
          memoryUsageOvercommitMaxWaitMicroseconds_ = null;
          onChanged();
        } else {
          memoryUsageOvercommitMaxWaitMicroseconds_ = null;
          memoryUsageOvercommitMaxWaitMicrosecondsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Maximum time thread will wait for memory to be freed in the case of memory overcommit on a user level. If the timeout is reached and memory is not freed, an exception is thrown.
       * Default: 5000000
       * Min_version: 22.5
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_usage_overcommit_max_wait_microseconds)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_usage_overcommit_max_wait_microseconds = 138 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMemoryUsageOvercommitMaxWaitMicrosecondsBuilder() {
        
        onChanged();
        return getMemoryUsageOvercommitMaxWaitMicrosecondsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Maximum time thread will wait for memory to be freed in the case of memory overcommit on a user level. If the timeout is reached and memory is not freed, an exception is thrown.
       * Default: 5000000
       * Min_version: 22.5
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_usage_overcommit_max_wait_microseconds)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_usage_overcommit_max_wait_microseconds = 138 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMemoryUsageOvercommitMaxWaitMicrosecondsOrBuilder() {
        if (memoryUsageOvercommitMaxWaitMicrosecondsBuilder_ != null) {
          return memoryUsageOvercommitMaxWaitMicrosecondsBuilder_.getMessageOrBuilder();
        } else {
          return memoryUsageOvercommitMaxWaitMicroseconds_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : memoryUsageOvercommitMaxWaitMicroseconds_;
        }
      }
      /**
       * <pre>
       * Maximum time thread will wait for memory to be freed in the case of memory overcommit on a user level. If the timeout is reached and memory is not freed, an exception is thrown.
       * Default: 5000000
       * Min_version: 22.5
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#memory_usage_overcommit_max_wait_microseconds)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value memory_usage_overcommit_max_wait_microseconds = 138 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMemoryUsageOvercommitMaxWaitMicrosecondsFieldBuilder() {
        if (memoryUsageOvercommitMaxWaitMicrosecondsBuilder_ == null) {
          memoryUsageOvercommitMaxWaitMicrosecondsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMemoryUsageOvercommitMaxWaitMicroseconds(),
                  getParentForChildren(),
                  isClean());
          memoryUsageOvercommitMaxWaitMicroseconds_ = null;
        }
        return memoryUsageOvercommitMaxWaitMicrosecondsBuilder_;
      }

      private com.google.protobuf.BoolValue logQueryThreads_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> logQueryThreadsBuilder_;
      /**
       * <pre>
       * Setting up query threads logging. Query threads log into the [system.query_thread_log](https://clickhouse.com/docs/en/operations/system-tables/query_thread_log) table. This setting has effect only when [log_queries](https://clickhouse.com/docs/en/operations/settings/settings#log-queries) is true. Queries threads run by ClickHouse with this setup are logged according to the rules in the [query_thread_log](https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-query_thread_log) server configuration parameter.
       * Default: true
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#log_query_threads)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue log_query_threads = 139;</code>
       * @return Whether the logQueryThreads field is set.
       */
      public boolean hasLogQueryThreads() {
        return logQueryThreadsBuilder_ != null || logQueryThreads_ != null;
      }
      /**
       * <pre>
       * Setting up query threads logging. Query threads log into the [system.query_thread_log](https://clickhouse.com/docs/en/operations/system-tables/query_thread_log) table. This setting has effect only when [log_queries](https://clickhouse.com/docs/en/operations/settings/settings#log-queries) is true. Queries threads run by ClickHouse with this setup are logged according to the rules in the [query_thread_log](https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-query_thread_log) server configuration parameter.
       * Default: true
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#log_query_threads)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue log_query_threads = 139;</code>
       * @return The logQueryThreads.
       */
      public com.google.protobuf.BoolValue getLogQueryThreads() {
        if (logQueryThreadsBuilder_ == null) {
          return logQueryThreads_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : logQueryThreads_;
        } else {
          return logQueryThreadsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Setting up query threads logging. Query threads log into the [system.query_thread_log](https://clickhouse.com/docs/en/operations/system-tables/query_thread_log) table. This setting has effect only when [log_queries](https://clickhouse.com/docs/en/operations/settings/settings#log-queries) is true. Queries threads run by ClickHouse with this setup are logged according to the rules in the [query_thread_log](https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-query_thread_log) server configuration parameter.
       * Default: true
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#log_query_threads)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue log_query_threads = 139;</code>
       */
      public Builder setLogQueryThreads(com.google.protobuf.BoolValue value) {
        if (logQueryThreadsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          logQueryThreads_ = value;
          onChanged();
        } else {
          logQueryThreadsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Setting up query threads logging. Query threads log into the [system.query_thread_log](https://clickhouse.com/docs/en/operations/system-tables/query_thread_log) table. This setting has effect only when [log_queries](https://clickhouse.com/docs/en/operations/settings/settings#log-queries) is true. Queries threads run by ClickHouse with this setup are logged according to the rules in the [query_thread_log](https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-query_thread_log) server configuration parameter.
       * Default: true
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#log_query_threads)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue log_query_threads = 139;</code>
       */
      public Builder setLogQueryThreads(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (logQueryThreadsBuilder_ == null) {
          logQueryThreads_ = builderForValue.build();
          onChanged();
        } else {
          logQueryThreadsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Setting up query threads logging. Query threads log into the [system.query_thread_log](https://clickhouse.com/docs/en/operations/system-tables/query_thread_log) table. This setting has effect only when [log_queries](https://clickhouse.com/docs/en/operations/settings/settings#log-queries) is true. Queries threads run by ClickHouse with this setup are logged according to the rules in the [query_thread_log](https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-query_thread_log) server configuration parameter.
       * Default: true
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#log_query_threads)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue log_query_threads = 139;</code>
       */
      public Builder mergeLogQueryThreads(com.google.protobuf.BoolValue value) {
        if (logQueryThreadsBuilder_ == null) {
          if (logQueryThreads_ != null) {
            logQueryThreads_ =
              com.google.protobuf.BoolValue.newBuilder(logQueryThreads_).mergeFrom(value).buildPartial();
          } else {
            logQueryThreads_ = value;
          }
          onChanged();
        } else {
          logQueryThreadsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Setting up query threads logging. Query threads log into the [system.query_thread_log](https://clickhouse.com/docs/en/operations/system-tables/query_thread_log) table. This setting has effect only when [log_queries](https://clickhouse.com/docs/en/operations/settings/settings#log-queries) is true. Queries threads run by ClickHouse with this setup are logged according to the rules in the [query_thread_log](https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-query_thread_log) server configuration parameter.
       * Default: true
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#log_query_threads)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue log_query_threads = 139;</code>
       */
      public Builder clearLogQueryThreads() {
        if (logQueryThreadsBuilder_ == null) {
          logQueryThreads_ = null;
          onChanged();
        } else {
          logQueryThreads_ = null;
          logQueryThreadsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Setting up query threads logging. Query threads log into the [system.query_thread_log](https://clickhouse.com/docs/en/operations/system-tables/query_thread_log) table. This setting has effect only when [log_queries](https://clickhouse.com/docs/en/operations/settings/settings#log-queries) is true. Queries threads run by ClickHouse with this setup are logged according to the rules in the [query_thread_log](https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-query_thread_log) server configuration parameter.
       * Default: true
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#log_query_threads)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue log_query_threads = 139;</code>
       */
      public com.google.protobuf.BoolValue.Builder getLogQueryThreadsBuilder() {
        
        onChanged();
        return getLogQueryThreadsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Setting up query threads logging. Query threads log into the [system.query_thread_log](https://clickhouse.com/docs/en/operations/system-tables/query_thread_log) table. This setting has effect only when [log_queries](https://clickhouse.com/docs/en/operations/settings/settings#log-queries) is true. Queries threads run by ClickHouse with this setup are logged according to the rules in the [query_thread_log](https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-query_thread_log) server configuration parameter.
       * Default: true
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#log_query_threads)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue log_query_threads = 139;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getLogQueryThreadsOrBuilder() {
        if (logQueryThreadsBuilder_ != null) {
          return logQueryThreadsBuilder_.getMessageOrBuilder();
        } else {
          return logQueryThreads_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : logQueryThreads_;
        }
      }
      /**
       * <pre>
       * Setting up query threads logging. Query threads log into the [system.query_thread_log](https://clickhouse.com/docs/en/operations/system-tables/query_thread_log) table. This setting has effect only when [log_queries](https://clickhouse.com/docs/en/operations/settings/settings#log-queries) is true. Queries threads run by ClickHouse with this setup are logged according to the rules in the [query_thread_log](https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-query_thread_log) server configuration parameter.
       * Default: true
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#log_query_threads)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue log_query_threads = 139;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getLogQueryThreadsFieldBuilder() {
        if (logQueryThreadsBuilder_ == null) {
          logQueryThreadsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getLogQueryThreads(),
                  getParentForChildren(),
                  isClean());
          logQueryThreads_ = null;
        }
        return logQueryThreadsBuilder_;
      }

      private com.google.protobuf.Int64Value maxInsertThreads_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> maxInsertThreadsBuilder_;
      /**
       * <pre>
       * The maximum number of threads to execute the INSERT SELECT query.
       * Default: 0
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_insert_threads)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_insert_threads = 140 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the maxInsertThreads field is set.
       */
      public boolean hasMaxInsertThreads() {
        return maxInsertThreadsBuilder_ != null || maxInsertThreads_ != null;
      }
      /**
       * <pre>
       * The maximum number of threads to execute the INSERT SELECT query.
       * Default: 0
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_insert_threads)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_insert_threads = 140 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The maxInsertThreads.
       */
      public com.google.protobuf.Int64Value getMaxInsertThreads() {
        if (maxInsertThreadsBuilder_ == null) {
          return maxInsertThreads_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : maxInsertThreads_;
        } else {
          return maxInsertThreadsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The maximum number of threads to execute the INSERT SELECT query.
       * Default: 0
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_insert_threads)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_insert_threads = 140 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxInsertThreads(com.google.protobuf.Int64Value value) {
        if (maxInsertThreadsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxInsertThreads_ = value;
          onChanged();
        } else {
          maxInsertThreadsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum number of threads to execute the INSERT SELECT query.
       * Default: 0
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_insert_threads)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_insert_threads = 140 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setMaxInsertThreads(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (maxInsertThreadsBuilder_ == null) {
          maxInsertThreads_ = builderForValue.build();
          onChanged();
        } else {
          maxInsertThreadsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The maximum number of threads to execute the INSERT SELECT query.
       * Default: 0
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_insert_threads)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_insert_threads = 140 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeMaxInsertThreads(com.google.protobuf.Int64Value value) {
        if (maxInsertThreadsBuilder_ == null) {
          if (maxInsertThreads_ != null) {
            maxInsertThreads_ =
              com.google.protobuf.Int64Value.newBuilder(maxInsertThreads_).mergeFrom(value).buildPartial();
          } else {
            maxInsertThreads_ = value;
          }
          onChanged();
        } else {
          maxInsertThreadsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The maximum number of threads to execute the INSERT SELECT query.
       * Default: 0
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_insert_threads)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_insert_threads = 140 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearMaxInsertThreads() {
        if (maxInsertThreadsBuilder_ == null) {
          maxInsertThreads_ = null;
          onChanged();
        } else {
          maxInsertThreads_ = null;
          maxInsertThreadsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The maximum number of threads to execute the INSERT SELECT query.
       * Default: 0
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_insert_threads)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_insert_threads = 140 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getMaxInsertThreadsBuilder() {
        
        onChanged();
        return getMaxInsertThreadsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The maximum number of threads to execute the INSERT SELECT query.
       * Default: 0
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_insert_threads)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_insert_threads = 140 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getMaxInsertThreadsOrBuilder() {
        if (maxInsertThreadsBuilder_ != null) {
          return maxInsertThreadsBuilder_.getMessageOrBuilder();
        } else {
          return maxInsertThreads_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : maxInsertThreads_;
        }
      }
      /**
       * <pre>
       * The maximum number of threads to execute the INSERT SELECT query.
       * Default: 0
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#max_insert_threads)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value max_insert_threads = 140 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMaxInsertThreadsFieldBuilder() {
        if (maxInsertThreadsBuilder_ == null) {
          maxInsertThreadsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMaxInsertThreads(),
                  getParentForChildren(),
                  isClean());
          maxInsertThreads_ = null;
        }
        return maxInsertThreadsBuilder_;
      }

      private com.google.protobuf.BoolValue useHedgedRequests_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> useHedgedRequestsBuilder_;
      /**
       * <pre>
       * Enables hedged requests logic for remote queries. It allows to establish many connections with different replicas for query. New connection is enabled in case existent connection(s) with replica(s) were not established within hedged_connection_timeout or no data was received within receive_data_timeout. Query uses the first connection which send non empty progress packet (or data packet, if allow_changing_replica_until_first_data_packet); other connections are cancelled. Queries with max_parallel_replicas &gt; 1 are supported.
       * Default: true
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#use_hedged_requests)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue use_hedged_requests = 141;</code>
       * @return Whether the useHedgedRequests field is set.
       */
      public boolean hasUseHedgedRequests() {
        return useHedgedRequestsBuilder_ != null || useHedgedRequests_ != null;
      }
      /**
       * <pre>
       * Enables hedged requests logic for remote queries. It allows to establish many connections with different replicas for query. New connection is enabled in case existent connection(s) with replica(s) were not established within hedged_connection_timeout or no data was received within receive_data_timeout. Query uses the first connection which send non empty progress packet (or data packet, if allow_changing_replica_until_first_data_packet); other connections are cancelled. Queries with max_parallel_replicas &gt; 1 are supported.
       * Default: true
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#use_hedged_requests)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue use_hedged_requests = 141;</code>
       * @return The useHedgedRequests.
       */
      public com.google.protobuf.BoolValue getUseHedgedRequests() {
        if (useHedgedRequestsBuilder_ == null) {
          return useHedgedRequests_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : useHedgedRequests_;
        } else {
          return useHedgedRequestsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enables hedged requests logic for remote queries. It allows to establish many connections with different replicas for query. New connection is enabled in case existent connection(s) with replica(s) were not established within hedged_connection_timeout or no data was received within receive_data_timeout. Query uses the first connection which send non empty progress packet (or data packet, if allow_changing_replica_until_first_data_packet); other connections are cancelled. Queries with max_parallel_replicas &gt; 1 are supported.
       * Default: true
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#use_hedged_requests)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue use_hedged_requests = 141;</code>
       */
      public Builder setUseHedgedRequests(com.google.protobuf.BoolValue value) {
        if (useHedgedRequestsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          useHedgedRequests_ = value;
          onChanged();
        } else {
          useHedgedRequestsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables hedged requests logic for remote queries. It allows to establish many connections with different replicas for query. New connection is enabled in case existent connection(s) with replica(s) were not established within hedged_connection_timeout or no data was received within receive_data_timeout. Query uses the first connection which send non empty progress packet (or data packet, if allow_changing_replica_until_first_data_packet); other connections are cancelled. Queries with max_parallel_replicas &gt; 1 are supported.
       * Default: true
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#use_hedged_requests)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue use_hedged_requests = 141;</code>
       */
      public Builder setUseHedgedRequests(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (useHedgedRequestsBuilder_ == null) {
          useHedgedRequests_ = builderForValue.build();
          onChanged();
        } else {
          useHedgedRequestsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enables hedged requests logic for remote queries. It allows to establish many connections with different replicas for query. New connection is enabled in case existent connection(s) with replica(s) were not established within hedged_connection_timeout or no data was received within receive_data_timeout. Query uses the first connection which send non empty progress packet (or data packet, if allow_changing_replica_until_first_data_packet); other connections are cancelled. Queries with max_parallel_replicas &gt; 1 are supported.
       * Default: true
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#use_hedged_requests)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue use_hedged_requests = 141;</code>
       */
      public Builder mergeUseHedgedRequests(com.google.protobuf.BoolValue value) {
        if (useHedgedRequestsBuilder_ == null) {
          if (useHedgedRequests_ != null) {
            useHedgedRequests_ =
              com.google.protobuf.BoolValue.newBuilder(useHedgedRequests_).mergeFrom(value).buildPartial();
          } else {
            useHedgedRequests_ = value;
          }
          onChanged();
        } else {
          useHedgedRequestsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables hedged requests logic for remote queries. It allows to establish many connections with different replicas for query. New connection is enabled in case existent connection(s) with replica(s) were not established within hedged_connection_timeout or no data was received within receive_data_timeout. Query uses the first connection which send non empty progress packet (or data packet, if allow_changing_replica_until_first_data_packet); other connections are cancelled. Queries with max_parallel_replicas &gt; 1 are supported.
       * Default: true
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#use_hedged_requests)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue use_hedged_requests = 141;</code>
       */
      public Builder clearUseHedgedRequests() {
        if (useHedgedRequestsBuilder_ == null) {
          useHedgedRequests_ = null;
          onChanged();
        } else {
          useHedgedRequests_ = null;
          useHedgedRequestsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enables hedged requests logic for remote queries. It allows to establish many connections with different replicas for query. New connection is enabled in case existent connection(s) with replica(s) were not established within hedged_connection_timeout or no data was received within receive_data_timeout. Query uses the first connection which send non empty progress packet (or data packet, if allow_changing_replica_until_first_data_packet); other connections are cancelled. Queries with max_parallel_replicas &gt; 1 are supported.
       * Default: true
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#use_hedged_requests)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue use_hedged_requests = 141;</code>
       */
      public com.google.protobuf.BoolValue.Builder getUseHedgedRequestsBuilder() {
        
        onChanged();
        return getUseHedgedRequestsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enables hedged requests logic for remote queries. It allows to establish many connections with different replicas for query. New connection is enabled in case existent connection(s) with replica(s) were not established within hedged_connection_timeout or no data was received within receive_data_timeout. Query uses the first connection which send non empty progress packet (or data packet, if allow_changing_replica_until_first_data_packet); other connections are cancelled. Queries with max_parallel_replicas &gt; 1 are supported.
       * Default: true
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#use_hedged_requests)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue use_hedged_requests = 141;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getUseHedgedRequestsOrBuilder() {
        if (useHedgedRequestsBuilder_ != null) {
          return useHedgedRequestsBuilder_.getMessageOrBuilder();
        } else {
          return useHedgedRequests_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : useHedgedRequests_;
        }
      }
      /**
       * <pre>
       * Enables hedged requests logic for remote queries. It allows to establish many connections with different replicas for query. New connection is enabled in case existent connection(s) with replica(s) were not established within hedged_connection_timeout or no data was received within receive_data_timeout. Query uses the first connection which send non empty progress packet (or data packet, if allow_changing_replica_until_first_data_packet); other connections are cancelled. Queries with max_parallel_replicas &gt; 1 are supported.
       * Default: true
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#use_hedged_requests)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue use_hedged_requests = 141;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getUseHedgedRequestsFieldBuilder() {
        if (useHedgedRequestsBuilder_ == null) {
          useHedgedRequestsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getUseHedgedRequests(),
                  getParentForChildren(),
                  isClean());
          useHedgedRequests_ = null;
        }
        return useHedgedRequestsBuilder_;
      }

      private com.google.protobuf.Int64Value idleConnectionTimeout_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> idleConnectionTimeoutBuilder_;
      /**
       * <pre>
       * Timeout to close idle TCP connections after specified number of milliseconds.
       * Default: 360000 (3600 seconds)
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#idle_connection_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value idle_connection_timeout = 142 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the idleConnectionTimeout field is set.
       */
      public boolean hasIdleConnectionTimeout() {
        return idleConnectionTimeoutBuilder_ != null || idleConnectionTimeout_ != null;
      }
      /**
       * <pre>
       * Timeout to close idle TCP connections after specified number of milliseconds.
       * Default: 360000 (3600 seconds)
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#idle_connection_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value idle_connection_timeout = 142 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The idleConnectionTimeout.
       */
      public com.google.protobuf.Int64Value getIdleConnectionTimeout() {
        if (idleConnectionTimeoutBuilder_ == null) {
          return idleConnectionTimeout_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : idleConnectionTimeout_;
        } else {
          return idleConnectionTimeoutBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Timeout to close idle TCP connections after specified number of milliseconds.
       * Default: 360000 (3600 seconds)
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#idle_connection_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value idle_connection_timeout = 142 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setIdleConnectionTimeout(com.google.protobuf.Int64Value value) {
        if (idleConnectionTimeoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          idleConnectionTimeout_ = value;
          onChanged();
        } else {
          idleConnectionTimeoutBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timeout to close idle TCP connections after specified number of milliseconds.
       * Default: 360000 (3600 seconds)
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#idle_connection_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value idle_connection_timeout = 142 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setIdleConnectionTimeout(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (idleConnectionTimeoutBuilder_ == null) {
          idleConnectionTimeout_ = builderForValue.build();
          onChanged();
        } else {
          idleConnectionTimeoutBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Timeout to close idle TCP connections after specified number of milliseconds.
       * Default: 360000 (3600 seconds)
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#idle_connection_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value idle_connection_timeout = 142 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeIdleConnectionTimeout(com.google.protobuf.Int64Value value) {
        if (idleConnectionTimeoutBuilder_ == null) {
          if (idleConnectionTimeout_ != null) {
            idleConnectionTimeout_ =
              com.google.protobuf.Int64Value.newBuilder(idleConnectionTimeout_).mergeFrom(value).buildPartial();
          } else {
            idleConnectionTimeout_ = value;
          }
          onChanged();
        } else {
          idleConnectionTimeoutBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timeout to close idle TCP connections after specified number of milliseconds.
       * Default: 360000 (3600 seconds)
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#idle_connection_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value idle_connection_timeout = 142 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearIdleConnectionTimeout() {
        if (idleConnectionTimeoutBuilder_ == null) {
          idleConnectionTimeout_ = null;
          onChanged();
        } else {
          idleConnectionTimeout_ = null;
          idleConnectionTimeoutBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Timeout to close idle TCP connections after specified number of milliseconds.
       * Default: 360000 (3600 seconds)
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#idle_connection_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value idle_connection_timeout = 142 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getIdleConnectionTimeoutBuilder() {
        
        onChanged();
        return getIdleConnectionTimeoutFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Timeout to close idle TCP connections after specified number of milliseconds.
       * Default: 360000 (3600 seconds)
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#idle_connection_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value idle_connection_timeout = 142 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getIdleConnectionTimeoutOrBuilder() {
        if (idleConnectionTimeoutBuilder_ != null) {
          return idleConnectionTimeoutBuilder_.getMessageOrBuilder();
        } else {
          return idleConnectionTimeout_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : idleConnectionTimeout_;
        }
      }
      /**
       * <pre>
       * Timeout to close idle TCP connections after specified number of milliseconds.
       * Default: 360000 (3600 seconds)
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#idle_connection_timeout)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value idle_connection_timeout = 142 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getIdleConnectionTimeoutFieldBuilder() {
        if (idleConnectionTimeoutBuilder_ == null) {
          idleConnectionTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getIdleConnectionTimeout(),
                  getParentForChildren(),
                  isClean());
          idleConnectionTimeout_ = null;
        }
        return idleConnectionTimeoutBuilder_;
      }

      private com.google.protobuf.Int64Value hedgedConnectionTimeoutMs_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> hedgedConnectionTimeoutMsBuilder_;
      /**
       * <pre>
       * Connection timeout for establishing connection with replica for Hedged requests.
       * Default: 50
       * See in-depth description in [ClickHouse GitHub](https://github.com/ClickHouse/ClickHouse/blob/f9558345e886876b9132d9c018e357f7fa9b22a3/src/Core/Settings.h#L64)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value hedged_connection_timeout_ms = 143 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the hedgedConnectionTimeoutMs field is set.
       */
      public boolean hasHedgedConnectionTimeoutMs() {
        return hedgedConnectionTimeoutMsBuilder_ != null || hedgedConnectionTimeoutMs_ != null;
      }
      /**
       * <pre>
       * Connection timeout for establishing connection with replica for Hedged requests.
       * Default: 50
       * See in-depth description in [ClickHouse GitHub](https://github.com/ClickHouse/ClickHouse/blob/f9558345e886876b9132d9c018e357f7fa9b22a3/src/Core/Settings.h#L64)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value hedged_connection_timeout_ms = 143 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The hedgedConnectionTimeoutMs.
       */
      public com.google.protobuf.Int64Value getHedgedConnectionTimeoutMs() {
        if (hedgedConnectionTimeoutMsBuilder_ == null) {
          return hedgedConnectionTimeoutMs_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : hedgedConnectionTimeoutMs_;
        } else {
          return hedgedConnectionTimeoutMsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Connection timeout for establishing connection with replica for Hedged requests.
       * Default: 50
       * See in-depth description in [ClickHouse GitHub](https://github.com/ClickHouse/ClickHouse/blob/f9558345e886876b9132d9c018e357f7fa9b22a3/src/Core/Settings.h#L64)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value hedged_connection_timeout_ms = 143 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setHedgedConnectionTimeoutMs(com.google.protobuf.Int64Value value) {
        if (hedgedConnectionTimeoutMsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          hedgedConnectionTimeoutMs_ = value;
          onChanged();
        } else {
          hedgedConnectionTimeoutMsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Connection timeout for establishing connection with replica for Hedged requests.
       * Default: 50
       * See in-depth description in [ClickHouse GitHub](https://github.com/ClickHouse/ClickHouse/blob/f9558345e886876b9132d9c018e357f7fa9b22a3/src/Core/Settings.h#L64)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value hedged_connection_timeout_ms = 143 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setHedgedConnectionTimeoutMs(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (hedgedConnectionTimeoutMsBuilder_ == null) {
          hedgedConnectionTimeoutMs_ = builderForValue.build();
          onChanged();
        } else {
          hedgedConnectionTimeoutMsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Connection timeout for establishing connection with replica for Hedged requests.
       * Default: 50
       * See in-depth description in [ClickHouse GitHub](https://github.com/ClickHouse/ClickHouse/blob/f9558345e886876b9132d9c018e357f7fa9b22a3/src/Core/Settings.h#L64)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value hedged_connection_timeout_ms = 143 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeHedgedConnectionTimeoutMs(com.google.protobuf.Int64Value value) {
        if (hedgedConnectionTimeoutMsBuilder_ == null) {
          if (hedgedConnectionTimeoutMs_ != null) {
            hedgedConnectionTimeoutMs_ =
              com.google.protobuf.Int64Value.newBuilder(hedgedConnectionTimeoutMs_).mergeFrom(value).buildPartial();
          } else {
            hedgedConnectionTimeoutMs_ = value;
          }
          onChanged();
        } else {
          hedgedConnectionTimeoutMsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Connection timeout for establishing connection with replica for Hedged requests.
       * Default: 50
       * See in-depth description in [ClickHouse GitHub](https://github.com/ClickHouse/ClickHouse/blob/f9558345e886876b9132d9c018e357f7fa9b22a3/src/Core/Settings.h#L64)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value hedged_connection_timeout_ms = 143 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearHedgedConnectionTimeoutMs() {
        if (hedgedConnectionTimeoutMsBuilder_ == null) {
          hedgedConnectionTimeoutMs_ = null;
          onChanged();
        } else {
          hedgedConnectionTimeoutMs_ = null;
          hedgedConnectionTimeoutMsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Connection timeout for establishing connection with replica for Hedged requests.
       * Default: 50
       * See in-depth description in [ClickHouse GitHub](https://github.com/ClickHouse/ClickHouse/blob/f9558345e886876b9132d9c018e357f7fa9b22a3/src/Core/Settings.h#L64)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value hedged_connection_timeout_ms = 143 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getHedgedConnectionTimeoutMsBuilder() {
        
        onChanged();
        return getHedgedConnectionTimeoutMsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Connection timeout for establishing connection with replica for Hedged requests.
       * Default: 50
       * See in-depth description in [ClickHouse GitHub](https://github.com/ClickHouse/ClickHouse/blob/f9558345e886876b9132d9c018e357f7fa9b22a3/src/Core/Settings.h#L64)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value hedged_connection_timeout_ms = 143 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getHedgedConnectionTimeoutMsOrBuilder() {
        if (hedgedConnectionTimeoutMsBuilder_ != null) {
          return hedgedConnectionTimeoutMsBuilder_.getMessageOrBuilder();
        } else {
          return hedgedConnectionTimeoutMs_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : hedgedConnectionTimeoutMs_;
        }
      }
      /**
       * <pre>
       * Connection timeout for establishing connection with replica for Hedged requests.
       * Default: 50
       * See in-depth description in [ClickHouse GitHub](https://github.com/ClickHouse/ClickHouse/blob/f9558345e886876b9132d9c018e357f7fa9b22a3/src/Core/Settings.h#L64)
       * </pre>
       *
       * <code>.google.protobuf.Int64Value hedged_connection_timeout_ms = 143 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getHedgedConnectionTimeoutMsFieldBuilder() {
        if (hedgedConnectionTimeoutMsBuilder_ == null) {
          hedgedConnectionTimeoutMsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getHedgedConnectionTimeoutMs(),
                  getParentForChildren(),
                  isClean());
          hedgedConnectionTimeoutMs_ = null;
        }
        return hedgedConnectionTimeoutMsBuilder_;
      }

      private int loadBalancing_ = 0;
      /**
       * <pre>
       * Specifies the algorithm of replicas selection that is used for distributed query processing, one of: random, nearest_hostname, in_order, first_or_random, round_robin.
       * Default: random
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#load_balancing)
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.LoadBalancing load_balancing = 144;</code>
       * @return The enum numeric value on the wire for loadBalancing.
       */
      @java.lang.Override public int getLoadBalancingValue() {
        return loadBalancing_;
      }
      /**
       * <pre>
       * Specifies the algorithm of replicas selection that is used for distributed query processing, one of: random, nearest_hostname, in_order, first_or_random, round_robin.
       * Default: random
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#load_balancing)
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.LoadBalancing load_balancing = 144;</code>
       * @param value The enum numeric value on the wire for loadBalancing to set.
       * @return This builder for chaining.
       */
      public Builder setLoadBalancingValue(int value) {
        
        loadBalancing_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the algorithm of replicas selection that is used for distributed query processing, one of: random, nearest_hostname, in_order, first_or_random, round_robin.
       * Default: random
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#load_balancing)
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.LoadBalancing load_balancing = 144;</code>
       * @return The loadBalancing.
       */
      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.LoadBalancing getLoadBalancing() {
        @SuppressWarnings("deprecation")
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.LoadBalancing result = yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.LoadBalancing.valueOf(loadBalancing_);
        return result == null ? yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.LoadBalancing.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Specifies the algorithm of replicas selection that is used for distributed query processing, one of: random, nearest_hostname, in_order, first_or_random, round_robin.
       * Default: random
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#load_balancing)
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.LoadBalancing load_balancing = 144;</code>
       * @param value The loadBalancing to set.
       * @return This builder for chaining.
       */
      public Builder setLoadBalancing(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings.LoadBalancing value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        loadBalancing_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the algorithm of replicas selection that is used for distributed query processing, one of: random, nearest_hostname, in_order, first_or_random, round_robin.
       * Default: random
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#load_balancing)
       * </pre>
       *
       * <code>.yandex.cloud.mdb.clickhouse.v1.UserSettings.LoadBalancing load_balancing = 144;</code>
       * @return This builder for chaining.
       */
      public Builder clearLoadBalancing() {
        
        loadBalancing_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.BoolValue preferLocalhostReplica_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> preferLocalhostReplicaBuilder_;
      /**
       * <pre>
       * Enables/disables preferable using the localhost replica when processing distributed queries.
       * Default: true
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#prefer_localhost_replica)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue prefer_localhost_replica = 145;</code>
       * @return Whether the preferLocalhostReplica field is set.
       */
      public boolean hasPreferLocalhostReplica() {
        return preferLocalhostReplicaBuilder_ != null || preferLocalhostReplica_ != null;
      }
      /**
       * <pre>
       * Enables/disables preferable using the localhost replica when processing distributed queries.
       * Default: true
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#prefer_localhost_replica)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue prefer_localhost_replica = 145;</code>
       * @return The preferLocalhostReplica.
       */
      public com.google.protobuf.BoolValue getPreferLocalhostReplica() {
        if (preferLocalhostReplicaBuilder_ == null) {
          return preferLocalhostReplica_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : preferLocalhostReplica_;
        } else {
          return preferLocalhostReplicaBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Enables/disables preferable using the localhost replica when processing distributed queries.
       * Default: true
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#prefer_localhost_replica)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue prefer_localhost_replica = 145;</code>
       */
      public Builder setPreferLocalhostReplica(com.google.protobuf.BoolValue value) {
        if (preferLocalhostReplicaBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          preferLocalhostReplica_ = value;
          onChanged();
        } else {
          preferLocalhostReplicaBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables/disables preferable using the localhost replica when processing distributed queries.
       * Default: true
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#prefer_localhost_replica)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue prefer_localhost_replica = 145;</code>
       */
      public Builder setPreferLocalhostReplica(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (preferLocalhostReplicaBuilder_ == null) {
          preferLocalhostReplica_ = builderForValue.build();
          onChanged();
        } else {
          preferLocalhostReplicaBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Enables/disables preferable using the localhost replica when processing distributed queries.
       * Default: true
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#prefer_localhost_replica)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue prefer_localhost_replica = 145;</code>
       */
      public Builder mergePreferLocalhostReplica(com.google.protobuf.BoolValue value) {
        if (preferLocalhostReplicaBuilder_ == null) {
          if (preferLocalhostReplica_ != null) {
            preferLocalhostReplica_ =
              com.google.protobuf.BoolValue.newBuilder(preferLocalhostReplica_).mergeFrom(value).buildPartial();
          } else {
            preferLocalhostReplica_ = value;
          }
          onChanged();
        } else {
          preferLocalhostReplicaBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Enables/disables preferable using the localhost replica when processing distributed queries.
       * Default: true
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#prefer_localhost_replica)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue prefer_localhost_replica = 145;</code>
       */
      public Builder clearPreferLocalhostReplica() {
        if (preferLocalhostReplicaBuilder_ == null) {
          preferLocalhostReplica_ = null;
          onChanged();
        } else {
          preferLocalhostReplica_ = null;
          preferLocalhostReplicaBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Enables/disables preferable using the localhost replica when processing distributed queries.
       * Default: true
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#prefer_localhost_replica)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue prefer_localhost_replica = 145;</code>
       */
      public com.google.protobuf.BoolValue.Builder getPreferLocalhostReplicaBuilder() {
        
        onChanged();
        return getPreferLocalhostReplicaFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Enables/disables preferable using the localhost replica when processing distributed queries.
       * Default: true
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#prefer_localhost_replica)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue prefer_localhost_replica = 145;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getPreferLocalhostReplicaOrBuilder() {
        if (preferLocalhostReplicaBuilder_ != null) {
          return preferLocalhostReplicaBuilder_.getMessageOrBuilder();
        } else {
          return preferLocalhostReplica_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : preferLocalhostReplica_;
        }
      }
      /**
       * <pre>
       * Enables/disables preferable using the localhost replica when processing distributed queries.
       * Default: true
       * See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings#prefer_localhost_replica)
       * </pre>
       *
       * <code>.google.protobuf.BoolValue prefer_localhost_replica = 145;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getPreferLocalhostReplicaFieldBuilder() {
        if (preferLocalhostReplicaBuilder_ == null) {
          preferLocalhostReplicaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getPreferLocalhostReplica(),
                  getParentForChildren(),
                  isClean());
          preferLocalhostReplica_ = null;
        }
        return preferLocalhostReplicaBuilder_;
      }

      private com.google.protobuf.BoolValue compile_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> compileBuilder_;
      /**
       * <pre>
       * The setting is deprecated and has no effect.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue compile = 44 [deprecated = true];</code>
       * @deprecated
       * @return Whether the compile field is set.
       */
      @java.lang.Deprecated public boolean hasCompile() {
        return compileBuilder_ != null || compile_ != null;
      }
      /**
       * <pre>
       * The setting is deprecated and has no effect.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue compile = 44 [deprecated = true];</code>
       * @deprecated
       * @return The compile.
       */
      @java.lang.Deprecated public com.google.protobuf.BoolValue getCompile() {
        if (compileBuilder_ == null) {
          return compile_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : compile_;
        } else {
          return compileBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The setting is deprecated and has no effect.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue compile = 44 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setCompile(com.google.protobuf.BoolValue value) {
        if (compileBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          compile_ = value;
          onChanged();
        } else {
          compileBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The setting is deprecated and has no effect.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue compile = 44 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setCompile(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (compileBuilder_ == null) {
          compile_ = builderForValue.build();
          onChanged();
        } else {
          compileBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The setting is deprecated and has no effect.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue compile = 44 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder mergeCompile(com.google.protobuf.BoolValue value) {
        if (compileBuilder_ == null) {
          if (compile_ != null) {
            compile_ =
              com.google.protobuf.BoolValue.newBuilder(compile_).mergeFrom(value).buildPartial();
          } else {
            compile_ = value;
          }
          onChanged();
        } else {
          compileBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The setting is deprecated and has no effect.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue compile = 44 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearCompile() {
        if (compileBuilder_ == null) {
          compile_ = null;
          onChanged();
        } else {
          compile_ = null;
          compileBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The setting is deprecated and has no effect.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue compile = 44 [deprecated = true];</code>
       */
      @java.lang.Deprecated public com.google.protobuf.BoolValue.Builder getCompileBuilder() {
        
        onChanged();
        return getCompileFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The setting is deprecated and has no effect.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue compile = 44 [deprecated = true];</code>
       */
      @java.lang.Deprecated public com.google.protobuf.BoolValueOrBuilder getCompileOrBuilder() {
        if (compileBuilder_ != null) {
          return compileBuilder_.getMessageOrBuilder();
        } else {
          return compile_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : compile_;
        }
      }
      /**
       * <pre>
       * The setting is deprecated and has no effect.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue compile = 44 [deprecated = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getCompileFieldBuilder() {
        if (compileBuilder_ == null) {
          compileBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getCompile(),
                  getParentForChildren(),
                  isClean());
          compile_ = null;
        }
        return compileBuilder_;
      }

      private com.google.protobuf.Int64Value minCountToCompile_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> minCountToCompileBuilder_;
      /**
       * <pre>
       * The setting is deprecated and has no effect.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_count_to_compile = 45 [deprecated = true];</code>
       * @deprecated
       * @return Whether the minCountToCompile field is set.
       */
      @java.lang.Deprecated public boolean hasMinCountToCompile() {
        return minCountToCompileBuilder_ != null || minCountToCompile_ != null;
      }
      /**
       * <pre>
       * The setting is deprecated and has no effect.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_count_to_compile = 45 [deprecated = true];</code>
       * @deprecated
       * @return The minCountToCompile.
       */
      @java.lang.Deprecated public com.google.protobuf.Int64Value getMinCountToCompile() {
        if (minCountToCompileBuilder_ == null) {
          return minCountToCompile_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : minCountToCompile_;
        } else {
          return minCountToCompileBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The setting is deprecated and has no effect.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_count_to_compile = 45 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setMinCountToCompile(com.google.protobuf.Int64Value value) {
        if (minCountToCompileBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          minCountToCompile_ = value;
          onChanged();
        } else {
          minCountToCompileBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The setting is deprecated and has no effect.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_count_to_compile = 45 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setMinCountToCompile(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (minCountToCompileBuilder_ == null) {
          minCountToCompile_ = builderForValue.build();
          onChanged();
        } else {
          minCountToCompileBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The setting is deprecated and has no effect.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_count_to_compile = 45 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder mergeMinCountToCompile(com.google.protobuf.Int64Value value) {
        if (minCountToCompileBuilder_ == null) {
          if (minCountToCompile_ != null) {
            minCountToCompile_ =
              com.google.protobuf.Int64Value.newBuilder(minCountToCompile_).mergeFrom(value).buildPartial();
          } else {
            minCountToCompile_ = value;
          }
          onChanged();
        } else {
          minCountToCompileBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The setting is deprecated and has no effect.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_count_to_compile = 45 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearMinCountToCompile() {
        if (minCountToCompileBuilder_ == null) {
          minCountToCompile_ = null;
          onChanged();
        } else {
          minCountToCompile_ = null;
          minCountToCompileBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The setting is deprecated and has no effect.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_count_to_compile = 45 [deprecated = true];</code>
       */
      @java.lang.Deprecated public com.google.protobuf.Int64Value.Builder getMinCountToCompileBuilder() {
        
        onChanged();
        return getMinCountToCompileFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The setting is deprecated and has no effect.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_count_to_compile = 45 [deprecated = true];</code>
       */
      @java.lang.Deprecated public com.google.protobuf.Int64ValueOrBuilder getMinCountToCompileOrBuilder() {
        if (minCountToCompileBuilder_ != null) {
          return minCountToCompileBuilder_.getMessageOrBuilder();
        } else {
          return minCountToCompile_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : minCountToCompile_;
        }
      }
      /**
       * <pre>
       * The setting is deprecated and has no effect.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value min_count_to_compile = 45 [deprecated = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getMinCountToCompileFieldBuilder() {
        if (minCountToCompileBuilder_ == null) {
          minCountToCompileBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getMinCountToCompile(),
                  getParentForChildren(),
                  isClean());
          minCountToCompile_ = null;
        }
        return minCountToCompileBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.clickhouse.v1.UserSettings)
    }

    // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.clickhouse.v1.UserSettings)
    private static final yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings();
    }

    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UserSettings>
        PARSER = new com.google.protobuf.AbstractParser<UserSettings>() {
      @java.lang.Override
      public UserSettings parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new UserSettings(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<UserSettings> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UserSettings> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserSettings getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UserQuotaOrBuilder extends
      // @@protoc_insertion_point(interface_extends:yandex.cloud.mdb.clickhouse.v1.UserQuota)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Duration of interval for quota in milliseconds.
     * Minimal value is 1 second.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value interval_duration = 1 [(.yandex.cloud.value) = "&gt;=1000"];</code>
     * @return Whether the intervalDuration field is set.
     */
    boolean hasIntervalDuration();
    /**
     * <pre>
     * Duration of interval for quota in milliseconds.
     * Minimal value is 1 second.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value interval_duration = 1 [(.yandex.cloud.value) = "&gt;=1000"];</code>
     * @return The intervalDuration.
     */
    com.google.protobuf.Int64Value getIntervalDuration();
    /**
     * <pre>
     * Duration of interval for quota in milliseconds.
     * Minimal value is 1 second.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value interval_duration = 1 [(.yandex.cloud.value) = "&gt;=1000"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getIntervalDurationOrBuilder();

    /**
     * <pre>
     * The total number of queries.
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value queries = 2 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the queries field is set.
     */
    boolean hasQueries();
    /**
     * <pre>
     * The total number of queries.
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value queries = 2 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The queries.
     */
    com.google.protobuf.Int64Value getQueries();
    /**
     * <pre>
     * The total number of queries.
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value queries = 2 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getQueriesOrBuilder();

    /**
     * <pre>
     * The number of queries that threw exception.
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value errors = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the errors field is set.
     */
    boolean hasErrors();
    /**
     * <pre>
     * The number of queries that threw exception.
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value errors = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The errors.
     */
    com.google.protobuf.Int64Value getErrors();
    /**
     * <pre>
     * The number of queries that threw exception.
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value errors = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getErrorsOrBuilder();

    /**
     * <pre>
     * The total number of rows given as the result..
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value result_rows = 4 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the resultRows field is set.
     */
    boolean hasResultRows();
    /**
     * <pre>
     * The total number of rows given as the result..
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value result_rows = 4 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The resultRows.
     */
    com.google.protobuf.Int64Value getResultRows();
    /**
     * <pre>
     * The total number of rows given as the result..
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value result_rows = 4 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getResultRowsOrBuilder();

    /**
     * <pre>
     * The total number of source rows read from tables for running the query, on all remote servers.
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value read_rows = 5 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the readRows field is set.
     */
    boolean hasReadRows();
    /**
     * <pre>
     * The total number of source rows read from tables for running the query, on all remote servers.
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value read_rows = 5 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The readRows.
     */
    com.google.protobuf.Int64Value getReadRows();
    /**
     * <pre>
     * The total number of source rows read from tables for running the query, on all remote servers.
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value read_rows = 5 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getReadRowsOrBuilder();

    /**
     * <pre>
     * The total query execution time, in milliseconds (wall time).
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value execution_time = 6 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the executionTime field is set.
     */
    boolean hasExecutionTime();
    /**
     * <pre>
     * The total query execution time, in milliseconds (wall time).
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value execution_time = 6 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The executionTime.
     */
    com.google.protobuf.Int64Value getExecutionTime();
    /**
     * <pre>
     * The total query execution time, in milliseconds (wall time).
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value execution_time = 6 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    com.google.protobuf.Int64ValueOrBuilder getExecutionTimeOrBuilder();
  }
  /**
   * <pre>
   * ClickHouse quota representation. Each quota associated with an user and limits it resource usage for an interval.
   * See in-depth description [ClickHouse documentation](https://clickhouse.com/docs/en/operations/quotas/).
   * </pre>
   *
   * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.UserQuota}
   */
  public static final class UserQuota extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:yandex.cloud.mdb.clickhouse.v1.UserQuota)
      UserQuotaOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UserQuota.newBuilder() to construct.
    private UserQuota(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UserQuota() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new UserQuota();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private UserQuota(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (intervalDuration_ != null) {
                subBuilder = intervalDuration_.toBuilder();
              }
              intervalDuration_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(intervalDuration_);
                intervalDuration_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (queries_ != null) {
                subBuilder = queries_.toBuilder();
              }
              queries_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(queries_);
                queries_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (errors_ != null) {
                subBuilder = errors_.toBuilder();
              }
              errors_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(errors_);
                errors_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (resultRows_ != null) {
                subBuilder = resultRows_.toBuilder();
              }
              resultRows_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(resultRows_);
                resultRows_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (readRows_ != null) {
                subBuilder = readRows_.toBuilder();
              }
              readRows_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(readRows_);
                readRows_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              com.google.protobuf.Int64Value.Builder subBuilder = null;
              if (executionTime_ != null) {
                subBuilder = executionTime_.toBuilder();
              }
              executionTime_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(executionTime_);
                executionTime_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.internal_static_yandex_cloud_mdb_clickhouse_v1_UserQuota_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.internal_static_yandex_cloud_mdb_clickhouse_v1_UserQuota_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.class, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.Builder.class);
    }

    public static final int INTERVAL_DURATION_FIELD_NUMBER = 1;
    private com.google.protobuf.Int64Value intervalDuration_;
    /**
     * <pre>
     * Duration of interval for quota in milliseconds.
     * Minimal value is 1 second.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value interval_duration = 1 [(.yandex.cloud.value) = "&gt;=1000"];</code>
     * @return Whether the intervalDuration field is set.
     */
    @java.lang.Override
    public boolean hasIntervalDuration() {
      return intervalDuration_ != null;
    }
    /**
     * <pre>
     * Duration of interval for quota in milliseconds.
     * Minimal value is 1 second.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value interval_duration = 1 [(.yandex.cloud.value) = "&gt;=1000"];</code>
     * @return The intervalDuration.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getIntervalDuration() {
      return intervalDuration_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : intervalDuration_;
    }
    /**
     * <pre>
     * Duration of interval for quota in milliseconds.
     * Minimal value is 1 second.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value interval_duration = 1 [(.yandex.cloud.value) = "&gt;=1000"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getIntervalDurationOrBuilder() {
      return getIntervalDuration();
    }

    public static final int QUERIES_FIELD_NUMBER = 2;
    private com.google.protobuf.Int64Value queries_;
    /**
     * <pre>
     * The total number of queries.
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value queries = 2 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the queries field is set.
     */
    @java.lang.Override
    public boolean hasQueries() {
      return queries_ != null;
    }
    /**
     * <pre>
     * The total number of queries.
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value queries = 2 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The queries.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getQueries() {
      return queries_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : queries_;
    }
    /**
     * <pre>
     * The total number of queries.
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value queries = 2 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getQueriesOrBuilder() {
      return getQueries();
    }

    public static final int ERRORS_FIELD_NUMBER = 3;
    private com.google.protobuf.Int64Value errors_;
    /**
     * <pre>
     * The number of queries that threw exception.
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value errors = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the errors field is set.
     */
    @java.lang.Override
    public boolean hasErrors() {
      return errors_ != null;
    }
    /**
     * <pre>
     * The number of queries that threw exception.
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value errors = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The errors.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getErrors() {
      return errors_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : errors_;
    }
    /**
     * <pre>
     * The number of queries that threw exception.
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value errors = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getErrorsOrBuilder() {
      return getErrors();
    }

    public static final int RESULT_ROWS_FIELD_NUMBER = 4;
    private com.google.protobuf.Int64Value resultRows_;
    /**
     * <pre>
     * The total number of rows given as the result..
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value result_rows = 4 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the resultRows field is set.
     */
    @java.lang.Override
    public boolean hasResultRows() {
      return resultRows_ != null;
    }
    /**
     * <pre>
     * The total number of rows given as the result..
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value result_rows = 4 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The resultRows.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getResultRows() {
      return resultRows_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : resultRows_;
    }
    /**
     * <pre>
     * The total number of rows given as the result..
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value result_rows = 4 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getResultRowsOrBuilder() {
      return getResultRows();
    }

    public static final int READ_ROWS_FIELD_NUMBER = 5;
    private com.google.protobuf.Int64Value readRows_;
    /**
     * <pre>
     * The total number of source rows read from tables for running the query, on all remote servers.
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value read_rows = 5 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the readRows field is set.
     */
    @java.lang.Override
    public boolean hasReadRows() {
      return readRows_ != null;
    }
    /**
     * <pre>
     * The total number of source rows read from tables for running the query, on all remote servers.
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value read_rows = 5 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The readRows.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getReadRows() {
      return readRows_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : readRows_;
    }
    /**
     * <pre>
     * The total number of source rows read from tables for running the query, on all remote servers.
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value read_rows = 5 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getReadRowsOrBuilder() {
      return getReadRows();
    }

    public static final int EXECUTION_TIME_FIELD_NUMBER = 6;
    private com.google.protobuf.Int64Value executionTime_;
    /**
     * <pre>
     * The total query execution time, in milliseconds (wall time).
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value execution_time = 6 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return Whether the executionTime field is set.
     */
    @java.lang.Override
    public boolean hasExecutionTime() {
      return executionTime_ != null;
    }
    /**
     * <pre>
     * The total query execution time, in milliseconds (wall time).
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value execution_time = 6 [(.yandex.cloud.value) = "&gt;=0"];</code>
     * @return The executionTime.
     */
    @java.lang.Override
    public com.google.protobuf.Int64Value getExecutionTime() {
      return executionTime_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : executionTime_;
    }
    /**
     * <pre>
     * The total query execution time, in milliseconds (wall time).
     * 0 - unlimited.
     * </pre>
     *
     * <code>.google.protobuf.Int64Value execution_time = 6 [(.yandex.cloud.value) = "&gt;=0"];</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int64ValueOrBuilder getExecutionTimeOrBuilder() {
      return getExecutionTime();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (intervalDuration_ != null) {
        output.writeMessage(1, getIntervalDuration());
      }
      if (queries_ != null) {
        output.writeMessage(2, getQueries());
      }
      if (errors_ != null) {
        output.writeMessage(3, getErrors());
      }
      if (resultRows_ != null) {
        output.writeMessage(4, getResultRows());
      }
      if (readRows_ != null) {
        output.writeMessage(5, getReadRows());
      }
      if (executionTime_ != null) {
        output.writeMessage(6, getExecutionTime());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (intervalDuration_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getIntervalDuration());
      }
      if (queries_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getQueries());
      }
      if (errors_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getErrors());
      }
      if (resultRows_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getResultRows());
      }
      if (readRows_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getReadRows());
      }
      if (executionTime_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getExecutionTime());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota)) {
        return super.equals(obj);
      }
      yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota other = (yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota) obj;

      if (hasIntervalDuration() != other.hasIntervalDuration()) return false;
      if (hasIntervalDuration()) {
        if (!getIntervalDuration()
            .equals(other.getIntervalDuration())) return false;
      }
      if (hasQueries() != other.hasQueries()) return false;
      if (hasQueries()) {
        if (!getQueries()
            .equals(other.getQueries())) return false;
      }
      if (hasErrors() != other.hasErrors()) return false;
      if (hasErrors()) {
        if (!getErrors()
            .equals(other.getErrors())) return false;
      }
      if (hasResultRows() != other.hasResultRows()) return false;
      if (hasResultRows()) {
        if (!getResultRows()
            .equals(other.getResultRows())) return false;
      }
      if (hasReadRows() != other.hasReadRows()) return false;
      if (hasReadRows()) {
        if (!getReadRows()
            .equals(other.getReadRows())) return false;
      }
      if (hasExecutionTime() != other.hasExecutionTime()) return false;
      if (hasExecutionTime()) {
        if (!getExecutionTime()
            .equals(other.getExecutionTime())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasIntervalDuration()) {
        hash = (37 * hash) + INTERVAL_DURATION_FIELD_NUMBER;
        hash = (53 * hash) + getIntervalDuration().hashCode();
      }
      if (hasQueries()) {
        hash = (37 * hash) + QUERIES_FIELD_NUMBER;
        hash = (53 * hash) + getQueries().hashCode();
      }
      if (hasErrors()) {
        hash = (37 * hash) + ERRORS_FIELD_NUMBER;
        hash = (53 * hash) + getErrors().hashCode();
      }
      if (hasResultRows()) {
        hash = (37 * hash) + RESULT_ROWS_FIELD_NUMBER;
        hash = (53 * hash) + getResultRows().hashCode();
      }
      if (hasReadRows()) {
        hash = (37 * hash) + READ_ROWS_FIELD_NUMBER;
        hash = (53 * hash) + getReadRows().hashCode();
      }
      if (hasExecutionTime()) {
        hash = (37 * hash) + EXECUTION_TIME_FIELD_NUMBER;
        hash = (53 * hash) + getExecutionTime().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * ClickHouse quota representation. Each quota associated with an user and limits it resource usage for an interval.
     * See in-depth description [ClickHouse documentation](https://clickhouse.com/docs/en/operations/quotas/).
     * </pre>
     *
     * Protobuf type {@code yandex.cloud.mdb.clickhouse.v1.UserQuota}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:yandex.cloud.mdb.clickhouse.v1.UserQuota)
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuotaOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.internal_static_yandex_cloud_mdb_clickhouse_v1_UserQuota_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.internal_static_yandex_cloud_mdb_clickhouse_v1_UserQuota_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.class, yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.Builder.class);
      }

      // Construct using yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (intervalDurationBuilder_ == null) {
          intervalDuration_ = null;
        } else {
          intervalDuration_ = null;
          intervalDurationBuilder_ = null;
        }
        if (queriesBuilder_ == null) {
          queries_ = null;
        } else {
          queries_ = null;
          queriesBuilder_ = null;
        }
        if (errorsBuilder_ == null) {
          errors_ = null;
        } else {
          errors_ = null;
          errorsBuilder_ = null;
        }
        if (resultRowsBuilder_ == null) {
          resultRows_ = null;
        } else {
          resultRows_ = null;
          resultRowsBuilder_ = null;
        }
        if (readRowsBuilder_ == null) {
          readRows_ = null;
        } else {
          readRows_ = null;
          readRowsBuilder_ = null;
        }
        if (executionTimeBuilder_ == null) {
          executionTime_ = null;
        } else {
          executionTime_ = null;
          executionTimeBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.internal_static_yandex_cloud_mdb_clickhouse_v1_UserQuota_descriptor;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota getDefaultInstanceForType() {
        return yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.getDefaultInstance();
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota build() {
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota buildPartial() {
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota result = new yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota(this);
        if (intervalDurationBuilder_ == null) {
          result.intervalDuration_ = intervalDuration_;
        } else {
          result.intervalDuration_ = intervalDurationBuilder_.build();
        }
        if (queriesBuilder_ == null) {
          result.queries_ = queries_;
        } else {
          result.queries_ = queriesBuilder_.build();
        }
        if (errorsBuilder_ == null) {
          result.errors_ = errors_;
        } else {
          result.errors_ = errorsBuilder_.build();
        }
        if (resultRowsBuilder_ == null) {
          result.resultRows_ = resultRows_;
        } else {
          result.resultRows_ = resultRowsBuilder_.build();
        }
        if (readRowsBuilder_ == null) {
          result.readRows_ = readRows_;
        } else {
          result.readRows_ = readRowsBuilder_.build();
        }
        if (executionTimeBuilder_ == null) {
          result.executionTime_ = executionTime_;
        } else {
          result.executionTime_ = executionTimeBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota) {
          return mergeFrom((yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota other) {
        if (other == yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota.getDefaultInstance()) return this;
        if (other.hasIntervalDuration()) {
          mergeIntervalDuration(other.getIntervalDuration());
        }
        if (other.hasQueries()) {
          mergeQueries(other.getQueries());
        }
        if (other.hasErrors()) {
          mergeErrors(other.getErrors());
        }
        if (other.hasResultRows()) {
          mergeResultRows(other.getResultRows());
        }
        if (other.hasReadRows()) {
          mergeReadRows(other.getReadRows());
        }
        if (other.hasExecutionTime()) {
          mergeExecutionTime(other.getExecutionTime());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private com.google.protobuf.Int64Value intervalDuration_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> intervalDurationBuilder_;
      /**
       * <pre>
       * Duration of interval for quota in milliseconds.
       * Minimal value is 1 second.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value interval_duration = 1 [(.yandex.cloud.value) = "&gt;=1000"];</code>
       * @return Whether the intervalDuration field is set.
       */
      public boolean hasIntervalDuration() {
        return intervalDurationBuilder_ != null || intervalDuration_ != null;
      }
      /**
       * <pre>
       * Duration of interval for quota in milliseconds.
       * Minimal value is 1 second.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value interval_duration = 1 [(.yandex.cloud.value) = "&gt;=1000"];</code>
       * @return The intervalDuration.
       */
      public com.google.protobuf.Int64Value getIntervalDuration() {
        if (intervalDurationBuilder_ == null) {
          return intervalDuration_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : intervalDuration_;
        } else {
          return intervalDurationBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Duration of interval for quota in milliseconds.
       * Minimal value is 1 second.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value interval_duration = 1 [(.yandex.cloud.value) = "&gt;=1000"];</code>
       */
      public Builder setIntervalDuration(com.google.protobuf.Int64Value value) {
        if (intervalDurationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          intervalDuration_ = value;
          onChanged();
        } else {
          intervalDurationBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Duration of interval for quota in milliseconds.
       * Minimal value is 1 second.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value interval_duration = 1 [(.yandex.cloud.value) = "&gt;=1000"];</code>
       */
      public Builder setIntervalDuration(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (intervalDurationBuilder_ == null) {
          intervalDuration_ = builderForValue.build();
          onChanged();
        } else {
          intervalDurationBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Duration of interval for quota in milliseconds.
       * Minimal value is 1 second.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value interval_duration = 1 [(.yandex.cloud.value) = "&gt;=1000"];</code>
       */
      public Builder mergeIntervalDuration(com.google.protobuf.Int64Value value) {
        if (intervalDurationBuilder_ == null) {
          if (intervalDuration_ != null) {
            intervalDuration_ =
              com.google.protobuf.Int64Value.newBuilder(intervalDuration_).mergeFrom(value).buildPartial();
          } else {
            intervalDuration_ = value;
          }
          onChanged();
        } else {
          intervalDurationBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Duration of interval for quota in milliseconds.
       * Minimal value is 1 second.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value interval_duration = 1 [(.yandex.cloud.value) = "&gt;=1000"];</code>
       */
      public Builder clearIntervalDuration() {
        if (intervalDurationBuilder_ == null) {
          intervalDuration_ = null;
          onChanged();
        } else {
          intervalDuration_ = null;
          intervalDurationBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Duration of interval for quota in milliseconds.
       * Minimal value is 1 second.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value interval_duration = 1 [(.yandex.cloud.value) = "&gt;=1000"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getIntervalDurationBuilder() {
        
        onChanged();
        return getIntervalDurationFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Duration of interval for quota in milliseconds.
       * Minimal value is 1 second.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value interval_duration = 1 [(.yandex.cloud.value) = "&gt;=1000"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getIntervalDurationOrBuilder() {
        if (intervalDurationBuilder_ != null) {
          return intervalDurationBuilder_.getMessageOrBuilder();
        } else {
          return intervalDuration_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : intervalDuration_;
        }
      }
      /**
       * <pre>
       * Duration of interval for quota in milliseconds.
       * Minimal value is 1 second.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value interval_duration = 1 [(.yandex.cloud.value) = "&gt;=1000"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getIntervalDurationFieldBuilder() {
        if (intervalDurationBuilder_ == null) {
          intervalDurationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getIntervalDuration(),
                  getParentForChildren(),
                  isClean());
          intervalDuration_ = null;
        }
        return intervalDurationBuilder_;
      }

      private com.google.protobuf.Int64Value queries_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> queriesBuilder_;
      /**
       * <pre>
       * The total number of queries.
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value queries = 2 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the queries field is set.
       */
      public boolean hasQueries() {
        return queriesBuilder_ != null || queries_ != null;
      }
      /**
       * <pre>
       * The total number of queries.
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value queries = 2 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The queries.
       */
      public com.google.protobuf.Int64Value getQueries() {
        if (queriesBuilder_ == null) {
          return queries_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : queries_;
        } else {
          return queriesBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The total number of queries.
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value queries = 2 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setQueries(com.google.protobuf.Int64Value value) {
        if (queriesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          queries_ = value;
          onChanged();
        } else {
          queriesBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The total number of queries.
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value queries = 2 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setQueries(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (queriesBuilder_ == null) {
          queries_ = builderForValue.build();
          onChanged();
        } else {
          queriesBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The total number of queries.
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value queries = 2 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeQueries(com.google.protobuf.Int64Value value) {
        if (queriesBuilder_ == null) {
          if (queries_ != null) {
            queries_ =
              com.google.protobuf.Int64Value.newBuilder(queries_).mergeFrom(value).buildPartial();
          } else {
            queries_ = value;
          }
          onChanged();
        } else {
          queriesBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The total number of queries.
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value queries = 2 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearQueries() {
        if (queriesBuilder_ == null) {
          queries_ = null;
          onChanged();
        } else {
          queries_ = null;
          queriesBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The total number of queries.
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value queries = 2 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getQueriesBuilder() {
        
        onChanged();
        return getQueriesFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The total number of queries.
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value queries = 2 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getQueriesOrBuilder() {
        if (queriesBuilder_ != null) {
          return queriesBuilder_.getMessageOrBuilder();
        } else {
          return queries_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : queries_;
        }
      }
      /**
       * <pre>
       * The total number of queries.
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value queries = 2 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getQueriesFieldBuilder() {
        if (queriesBuilder_ == null) {
          queriesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getQueries(),
                  getParentForChildren(),
                  isClean());
          queries_ = null;
        }
        return queriesBuilder_;
      }

      private com.google.protobuf.Int64Value errors_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> errorsBuilder_;
      /**
       * <pre>
       * The number of queries that threw exception.
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value errors = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the errors field is set.
       */
      public boolean hasErrors() {
        return errorsBuilder_ != null || errors_ != null;
      }
      /**
       * <pre>
       * The number of queries that threw exception.
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value errors = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The errors.
       */
      public com.google.protobuf.Int64Value getErrors() {
        if (errorsBuilder_ == null) {
          return errors_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : errors_;
        } else {
          return errorsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The number of queries that threw exception.
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value errors = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setErrors(com.google.protobuf.Int64Value value) {
        if (errorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          errors_ = value;
          onChanged();
        } else {
          errorsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of queries that threw exception.
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value errors = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setErrors(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (errorsBuilder_ == null) {
          errors_ = builderForValue.build();
          onChanged();
        } else {
          errorsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The number of queries that threw exception.
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value errors = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeErrors(com.google.protobuf.Int64Value value) {
        if (errorsBuilder_ == null) {
          if (errors_ != null) {
            errors_ =
              com.google.protobuf.Int64Value.newBuilder(errors_).mergeFrom(value).buildPartial();
          } else {
            errors_ = value;
          }
          onChanged();
        } else {
          errorsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The number of queries that threw exception.
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value errors = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearErrors() {
        if (errorsBuilder_ == null) {
          errors_ = null;
          onChanged();
        } else {
          errors_ = null;
          errorsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The number of queries that threw exception.
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value errors = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getErrorsBuilder() {
        
        onChanged();
        return getErrorsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The number of queries that threw exception.
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value errors = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getErrorsOrBuilder() {
        if (errorsBuilder_ != null) {
          return errorsBuilder_.getMessageOrBuilder();
        } else {
          return errors_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : errors_;
        }
      }
      /**
       * <pre>
       * The number of queries that threw exception.
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value errors = 3 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getErrorsFieldBuilder() {
        if (errorsBuilder_ == null) {
          errorsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getErrors(),
                  getParentForChildren(),
                  isClean());
          errors_ = null;
        }
        return errorsBuilder_;
      }

      private com.google.protobuf.Int64Value resultRows_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> resultRowsBuilder_;
      /**
       * <pre>
       * The total number of rows given as the result..
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value result_rows = 4 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the resultRows field is set.
       */
      public boolean hasResultRows() {
        return resultRowsBuilder_ != null || resultRows_ != null;
      }
      /**
       * <pre>
       * The total number of rows given as the result..
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value result_rows = 4 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The resultRows.
       */
      public com.google.protobuf.Int64Value getResultRows() {
        if (resultRowsBuilder_ == null) {
          return resultRows_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : resultRows_;
        } else {
          return resultRowsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The total number of rows given as the result..
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value result_rows = 4 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setResultRows(com.google.protobuf.Int64Value value) {
        if (resultRowsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          resultRows_ = value;
          onChanged();
        } else {
          resultRowsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The total number of rows given as the result..
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value result_rows = 4 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setResultRows(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (resultRowsBuilder_ == null) {
          resultRows_ = builderForValue.build();
          onChanged();
        } else {
          resultRowsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The total number of rows given as the result..
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value result_rows = 4 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeResultRows(com.google.protobuf.Int64Value value) {
        if (resultRowsBuilder_ == null) {
          if (resultRows_ != null) {
            resultRows_ =
              com.google.protobuf.Int64Value.newBuilder(resultRows_).mergeFrom(value).buildPartial();
          } else {
            resultRows_ = value;
          }
          onChanged();
        } else {
          resultRowsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The total number of rows given as the result..
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value result_rows = 4 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearResultRows() {
        if (resultRowsBuilder_ == null) {
          resultRows_ = null;
          onChanged();
        } else {
          resultRows_ = null;
          resultRowsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The total number of rows given as the result..
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value result_rows = 4 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getResultRowsBuilder() {
        
        onChanged();
        return getResultRowsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The total number of rows given as the result..
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value result_rows = 4 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getResultRowsOrBuilder() {
        if (resultRowsBuilder_ != null) {
          return resultRowsBuilder_.getMessageOrBuilder();
        } else {
          return resultRows_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : resultRows_;
        }
      }
      /**
       * <pre>
       * The total number of rows given as the result..
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value result_rows = 4 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getResultRowsFieldBuilder() {
        if (resultRowsBuilder_ == null) {
          resultRowsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getResultRows(),
                  getParentForChildren(),
                  isClean());
          resultRows_ = null;
        }
        return resultRowsBuilder_;
      }

      private com.google.protobuf.Int64Value readRows_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> readRowsBuilder_;
      /**
       * <pre>
       * The total number of source rows read from tables for running the query, on all remote servers.
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value read_rows = 5 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the readRows field is set.
       */
      public boolean hasReadRows() {
        return readRowsBuilder_ != null || readRows_ != null;
      }
      /**
       * <pre>
       * The total number of source rows read from tables for running the query, on all remote servers.
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value read_rows = 5 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The readRows.
       */
      public com.google.protobuf.Int64Value getReadRows() {
        if (readRowsBuilder_ == null) {
          return readRows_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : readRows_;
        } else {
          return readRowsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The total number of source rows read from tables for running the query, on all remote servers.
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value read_rows = 5 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setReadRows(com.google.protobuf.Int64Value value) {
        if (readRowsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          readRows_ = value;
          onChanged();
        } else {
          readRowsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The total number of source rows read from tables for running the query, on all remote servers.
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value read_rows = 5 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setReadRows(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (readRowsBuilder_ == null) {
          readRows_ = builderForValue.build();
          onChanged();
        } else {
          readRowsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The total number of source rows read from tables for running the query, on all remote servers.
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value read_rows = 5 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeReadRows(com.google.protobuf.Int64Value value) {
        if (readRowsBuilder_ == null) {
          if (readRows_ != null) {
            readRows_ =
              com.google.protobuf.Int64Value.newBuilder(readRows_).mergeFrom(value).buildPartial();
          } else {
            readRows_ = value;
          }
          onChanged();
        } else {
          readRowsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The total number of source rows read from tables for running the query, on all remote servers.
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value read_rows = 5 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearReadRows() {
        if (readRowsBuilder_ == null) {
          readRows_ = null;
          onChanged();
        } else {
          readRows_ = null;
          readRowsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The total number of source rows read from tables for running the query, on all remote servers.
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value read_rows = 5 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getReadRowsBuilder() {
        
        onChanged();
        return getReadRowsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The total number of source rows read from tables for running the query, on all remote servers.
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value read_rows = 5 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getReadRowsOrBuilder() {
        if (readRowsBuilder_ != null) {
          return readRowsBuilder_.getMessageOrBuilder();
        } else {
          return readRows_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : readRows_;
        }
      }
      /**
       * <pre>
       * The total number of source rows read from tables for running the query, on all remote servers.
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value read_rows = 5 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getReadRowsFieldBuilder() {
        if (readRowsBuilder_ == null) {
          readRowsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getReadRows(),
                  getParentForChildren(),
                  isClean());
          readRows_ = null;
        }
        return readRowsBuilder_;
      }

      private com.google.protobuf.Int64Value executionTime_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> executionTimeBuilder_;
      /**
       * <pre>
       * The total query execution time, in milliseconds (wall time).
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value execution_time = 6 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return Whether the executionTime field is set.
       */
      public boolean hasExecutionTime() {
        return executionTimeBuilder_ != null || executionTime_ != null;
      }
      /**
       * <pre>
       * The total query execution time, in milliseconds (wall time).
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value execution_time = 6 [(.yandex.cloud.value) = "&gt;=0"];</code>
       * @return The executionTime.
       */
      public com.google.protobuf.Int64Value getExecutionTime() {
        if (executionTimeBuilder_ == null) {
          return executionTime_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : executionTime_;
        } else {
          return executionTimeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The total query execution time, in milliseconds (wall time).
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value execution_time = 6 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setExecutionTime(com.google.protobuf.Int64Value value) {
        if (executionTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          executionTime_ = value;
          onChanged();
        } else {
          executionTimeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The total query execution time, in milliseconds (wall time).
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value execution_time = 6 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder setExecutionTime(
          com.google.protobuf.Int64Value.Builder builderForValue) {
        if (executionTimeBuilder_ == null) {
          executionTime_ = builderForValue.build();
          onChanged();
        } else {
          executionTimeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The total query execution time, in milliseconds (wall time).
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value execution_time = 6 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder mergeExecutionTime(com.google.protobuf.Int64Value value) {
        if (executionTimeBuilder_ == null) {
          if (executionTime_ != null) {
            executionTime_ =
              com.google.protobuf.Int64Value.newBuilder(executionTime_).mergeFrom(value).buildPartial();
          } else {
            executionTime_ = value;
          }
          onChanged();
        } else {
          executionTimeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The total query execution time, in milliseconds (wall time).
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value execution_time = 6 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public Builder clearExecutionTime() {
        if (executionTimeBuilder_ == null) {
          executionTime_ = null;
          onChanged();
        } else {
          executionTime_ = null;
          executionTimeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The total query execution time, in milliseconds (wall time).
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value execution_time = 6 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64Value.Builder getExecutionTimeBuilder() {
        
        onChanged();
        return getExecutionTimeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The total query execution time, in milliseconds (wall time).
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value execution_time = 6 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      public com.google.protobuf.Int64ValueOrBuilder getExecutionTimeOrBuilder() {
        if (executionTimeBuilder_ != null) {
          return executionTimeBuilder_.getMessageOrBuilder();
        } else {
          return executionTime_ == null ?
              com.google.protobuf.Int64Value.getDefaultInstance() : executionTime_;
        }
      }
      /**
       * <pre>
       * The total query execution time, in milliseconds (wall time).
       * 0 - unlimited.
       * </pre>
       *
       * <code>.google.protobuf.Int64Value execution_time = 6 [(.yandex.cloud.value) = "&gt;=0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
          getExecutionTimeFieldBuilder() {
        if (executionTimeBuilder_ == null) {
          executionTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                  getExecutionTime(),
                  getParentForChildren(),
                  isClean());
          executionTime_ = null;
        }
        return executionTimeBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:yandex.cloud.mdb.clickhouse.v1.UserQuota)
    }

    // @@protoc_insertion_point(class_scope:yandex.cloud.mdb.clickhouse.v1.UserQuota)
    private static final yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota();
    }

    public static yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UserQuota>
        PARSER = new com.google.protobuf.AbstractParser<UserQuota>() {
      @java.lang.Override
      public UserQuota parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new UserQuota(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<UserQuota> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UserQuota> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public yandex.cloud.api.mdb.clickhouse.v1.UserOuterClass.UserQuota getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_clickhouse_v1_User_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_clickhouse_v1_User_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_clickhouse_v1_Permission_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_clickhouse_v1_Permission_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_clickhouse_v1_UserSpec_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_clickhouse_v1_UserSpec_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_clickhouse_v1_UserSettings_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_clickhouse_v1_UserSettings_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_mdb_clickhouse_v1_UserQuota_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_mdb_clickhouse_v1_UserQuota_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n)yandex/cloud/mdb/clickhouse/v1/user.pr" +
      "oto\022\036yandex.cloud.mdb.clickhouse.v1\032\036goo" +
      "gle/protobuf/wrappers.proto\032\035yandex/clou" +
      "d/validation.proto\"\344\001\n\004User\022\014\n\004name\030\001 \001(" +
      "\t\022\022\n\ncluster_id\030\002 \001(\t\022?\n\013permissions\030\003 \003" +
      "(\0132*.yandex.cloud.mdb.clickhouse.v1.Perm" +
      "ission\022>\n\010settings\030\004 \001(\0132,.yandex.cloud." +
      "mdb.clickhouse.v1.UserSettings\0229\n\006quotas" +
      "\030\005 \003(\0132).yandex.cloud.mdb.clickhouse.v1." +
      "UserQuota\")\n\nPermission\022\025\n\rdatabase_name" +
      "\030\001 \001(\tJ\004\010\002\020\003\"\241\002\n\010UserSpec\0228\n\004name\030\001 \001(\tB" +
      "*\350\3071\001\212\3101\004<=63\362\3071\032[a-zA-Z0-9_][a-zA-Z0-9_" +
      "-]*\022\037\n\010password\030\002 \001(\tB\r\350\3071\001\212\3101\0058-128\022?\n\013" +
      "permissions\030\003 \003(\0132*.yandex.cloud.mdb.cli" +
      "ckhouse.v1.Permission\022>\n\010settings\030\004 \001(\0132" +
      ",.yandex.cloud.mdb.clickhouse.v1.UserSet" +
      "tings\0229\n\006quotas\030\005 \003(\0132).yandex.cloud.mdb" +
      ".clickhouse.v1.UserQuota\"\254c\n\014UserSetting" +
      "s\0226\n\010readonly\030\001 \001(\0132\033.google.protobuf.In" +
      "t64ValueB\007\372\3071\0030-2\022-\n\tallow_ddl\030\002 \001(\0132\032.g" +
      "oogle.protobuf.BoolValue\022A\n\035allow_intros" +
      "pection_functions\030` \001(\0132\032.google.protobu" +
      "f.BoolValue\022<\n\017connect_timeout\030\' \001(\0132\033.g" +
      "oogle.protobuf.Int64ValueB\006\372\3071\002>0\022J\n\035con" +
      "nect_timeout_with_failover\030a \001(\0132\033.googl" +
      "e.protobuf.Int64ValueB\006\372\3071\002>0\022<\n\017receive" +
      "_timeout\030( \001(\0132\033.google.protobuf.Int64Va" +
      "lueB\006\372\3071\002>0\0229\n\014send_timeout\030) \001(\0132\033.goog" +
      "le.protobuf.Int64ValueB\006\372\3071\002>0\022L\n\'timeou" +
      "t_before_checking_execution_speed\030b \001(\0132" +
      "\033.google.protobuf.Int64Value\022;\n\rinsert_q" +
      "uorum\030\003 \001(\0132\033.google.protobuf.Int64Value" +
      "B\007\372\3071\003>=0\022F\n\025insert_quorum_timeout\030\004 \001(\013" +
      "2\033.google.protobuf.Int64ValueB\n\372\3071\006>=100" +
      "0\022:\n\026insert_quorum_parallel\030c \001(\0132\032.goog" +
      "le.protobuf.BoolValue\022:\n\026insert_null_as_" +
      "default\030d \001(\0132\032.google.protobuf.BoolValu" +
      "e\022A\n\035select_sequential_consistency\030\005 \001(\013" +
      "2\032.google.protobuf.BoolValue\022V\n2deduplic" +
      "ate_blocks_in_dependent_materialized_vie" +
      "ws\030e \001(\0132\032.google.protobuf.BoolValue\022O\n!" +
      "replication_alter_partitions_sync\030* \001(\0132" +
      "\033.google.protobuf.Int64ValueB\007\372\3071\0030-2\022Z\n" +
      ")max_replica_delay_for_distributed_queri" +
      "es\030\006 \001(\0132\033.google.protobuf.Int64ValueB\n\372" +
      "\3071\006>=1000\022V\n2fallback_to_stale_replicas_" +
      "for_distributed_queries\030\007 \001(\0132\032.google.p" +
      "rotobuf.BoolValue\022e\n\030distributed_product" +
      "_mode\030+ \001(\0162C.yandex.cloud.mdb.clickhous" +
      "e.v1.UserSettings.DistributedProductMode" +
      "\022L\n(distributed_aggregation_memory_effic" +
      "ient\030H \001(\0132\032.google.protobuf.BoolValue\022A" +
      "\n\034distributed_ddl_task_timeout\030I \001(\0132\033.g" +
      "oogle.protobuf.Int64Value\022;\n\027skip_unavai" +
      "lable_shards\030Q \001(\0132\032.google.protobuf.Boo" +
      "lValue\0227\n\023compile_expressions\030. \001(\0132\032.go" +
      "ogle.protobuf.BoolValue\022M\n\037min_count_to_" +
      "compile_expression\030/ \001(\0132\033.google.protob" +
      "uf.Int64ValueB\007\372\3071\003>=0\022;\n\016max_block_size" +
      "\030\t \001(\0132\033.google.protobuf.Int64ValueB\006\372\3071" +
      "\002>0\022H\n\032min_insert_block_size_rows\0300 \001(\0132" +
      "\033.google.protobuf.Int64ValueB\007\372\3071\003>=0\022I\n" +
      "\033min_insert_block_size_bytes\0301 \001(\0132\033.goo" +
      "gle.protobuf.Int64ValueB\007\372\3071\003>=0\022B\n\025max_" +
      "insert_block_size\030\n \001(\0132\033.google.protobu" +
      "f.Int64ValueB\006\372\3071\002>0\022H\n\032min_bytes_to_use" +
      "_direct_io\0302 \001(\0132\033.google.protobuf.Int64" +
      "ValueB\007\372\3071\003>=0\022:\n\026use_uncompressed_cache" +
      "\0303 \001(\0132\032.google.protobuf.BoolValue\022M\n me" +
      "rge_tree_max_rows_to_use_cache\0304 \001(\0132\033.g" +
      "oogle.protobuf.Int64ValueB\006\372\3071\002>0\022N\n!mer" +
      "ge_tree_max_bytes_to_use_cache\0305 \001(\0132\033.g" +
      "oogle.protobuf.Int64ValueB\006\372\3071\002>0\022T\n\'mer" +
      "ge_tree_min_rows_for_concurrent_read\0306 \001" +
      "(\0132\033.google.protobuf.Int64ValueB\006\372\3071\002>0\022" +
      "U\n(merge_tree_min_bytes_for_concurrent_r" +
      "ead\0307 \001(\0132\033.google.protobuf.Int64ValueB\006" +
      "\372\3071\002>0\022G\n\"max_bytes_before_external_grou" +
      "p_by\030J \001(\0132\033.google.protobuf.Int64Value\022" +
      "C\n\036max_bytes_before_external_sort\030K \001(\0132" +
      "\033.google.protobuf.Int64Value\022A\n\034group_by" +
      "_two_level_threshold\030L \001(\0132\033.google.prot" +
      "obuf.Int64Value\022G\n\"group_by_two_level_th" +
      "reshold_bytes\030M \001(\0132\033.google.protobuf.In" +
      "t64Value\0226\n\010priority\0308 \001(\0132\033.google.prot" +
      "obuf.Int64ValueB\007\372\3071\003>=0\0228\n\013max_threads\030" +
      "\010 \001(\0132\033.google.protobuf.Int64ValueB\006\372\3071\002" +
      ">0\022>\n\020max_memory_usage\030\013 \001(\0132\033.google.pr" +
      "otobuf.Int64ValueB\007\372\3071\003>=0\022G\n\031max_memory" +
      "_usage_for_user\030\014 \001(\0132\033.google.protobuf." +
      "Int64ValueB\007\372\3071\003>=0\022:\n\025max_network_bandw" +
      "idth\0309 \001(\0132\033.google.protobuf.Int64Value\022" +
      "C\n\036max_network_bandwidth_for_user\030: \001(\0132" +
      "\033.google.protobuf.Int64Value\022D\n\037max_part" +
      "itions_per_insert_block\030f \001(\0132\033.google.p" +
      "rotobuf.Int64Value\022D\n\037max_concurrent_que" +
      "ries_for_user\030g \001(\0132\033.google.protobuf.In" +
      "t64Value\0227\n\023force_index_by_date\030; \001(\0132\032." +
      "google.protobuf.BoolValue\0225\n\021force_prima" +
      "ry_key\030< \001(\0132\032.google.protobuf.BoolValue" +
      "\022>\n\020max_rows_to_read\030\r \001(\0132\033.google.prot" +
      "obuf.Int64ValueB\007\372\3071\003>=0\022?\n\021max_bytes_to" +
      "_read\030\016 \001(\0132\033.google.protobuf.Int64Value" +
      "B\007\372\3071\003>=0\022U\n\022read_overflow_mode\030\017 \001(\01629." +
      "yandex.cloud.mdb.clickhouse.v1.UserSetti" +
      "ngs.OverflowMode\022B\n\024max_rows_to_group_by" +
      "\030\020 \001(\0132\033.google.protobuf.Int64ValueB\007\372\3071" +
      "\003>=0\022`\n\026group_by_overflow_mode\030\021 \001(\0162@.y" +
      "andex.cloud.mdb.clickhouse.v1.UserSettin" +
      "gs.GroupByOverflowMode\022>\n\020max_rows_to_so" +
      "rt\030\022 \001(\0132\033.google.protobuf.Int64ValueB\007\372" +
      "\3071\003>=0\022?\n\021max_bytes_to_sort\030\023 \001(\0132\033.goog" +
      "le.protobuf.Int64ValueB\007\372\3071\003>=0\022U\n\022sort_" +
      "overflow_mode\030\024 \001(\01629.yandex.cloud.mdb.c" +
      "lickhouse.v1.UserSettings.OverflowMode\022=" +
      "\n\017max_result_rows\030\025 \001(\0132\033.google.protobu" +
      "f.Int64ValueB\007\372\3071\003>=0\022>\n\020max_result_byte" +
      "s\030\026 \001(\0132\033.google.protobuf.Int64ValueB\007\372\307" +
      "1\003>=0\022W\n\024result_overflow_mode\030\027 \001(\01629.ya" +
      "ndex.cloud.mdb.clickhouse.v1.UserSetting" +
      "s.OverflowMode\022B\n\024max_rows_in_distinct\030\030" +
      " \001(\0132\033.google.protobuf.Int64ValueB\007\372\3071\003>" +
      "=0\022C\n\025max_bytes_in_distinct\030\031 \001(\0132\033.goog" +
      "le.protobuf.Int64ValueB\007\372\3071\003>=0\022Y\n\026disti" +
      "nct_overflow_mode\030\032 \001(\01629.yandex.cloud.m" +
      "db.clickhouse.v1.UserSettings.OverflowMo" +
      "de\022B\n\024max_rows_to_transfer\030\033 \001(\0132\033.googl" +
      "e.protobuf.Int64ValueB\007\372\3071\003>=0\022C\n\025max_by" +
      "tes_to_transfer\030\034 \001(\0132\033.google.protobuf." +
      "Int64ValueB\007\372\3071\003>=0\022Y\n\026transfer_overflow" +
      "_mode\030\035 \001(\01629.yandex.cloud.mdb.clickhous" +
      "e.v1.UserSettings.OverflowMode\022@\n\022max_ex" +
      "ecution_time\030\036 \001(\0132\033.google.protobuf.Int" +
      "64ValueB\007\372\3071\003>=0\022X\n\025timeout_overflow_mod" +
      "e\030\037 \001(\01629.yandex.cloud.mdb.clickhouse.v1" +
      ".UserSettings.OverflowMode\022=\n\017max_rows_i" +
      "n_set\030W \001(\0132\033.google.protobuf.Int64Value" +
      "B\007\372\3071\003>=0\022>\n\020max_bytes_in_set\030X \001(\0132\033.go" +
      "ogle.protobuf.Int64ValueB\007\372\3071\003>=0\022T\n\021set" +
      "_overflow_mode\030Y \001(\01629.yandex.cloud.mdb." +
      "clickhouse.v1.UserSettings.OverflowMode\022" +
      ">\n\020max_rows_in_join\030Z \001(\0132\033.google.proto" +
      "buf.Int64ValueB\007\372\3071\003>=0\022?\n\021max_bytes_in_" +
      "join\030[ \001(\0132\033.google.protobuf.Int64ValueB" +
      "\007\372\3071\003>=0\022U\n\022join_overflow_mode\030\\ \001(\01629.y" +
      "andex.cloud.mdb.clickhouse.v1.UserSettin" +
      "gs.OverflowMode\022R\n\016join_algorithm\030h \003(\0162" +
      ":.yandex.cloud.mdb.clickhouse.v1.UserSet" +
      "tings.JoinAlgorithm\022F\n\"any_join_distinct" +
      "_right_table_keys\030i \001(\0132\032.google.protobu" +
      "f.BoolValue\022A\n\023max_columns_to_read\030  \001(\013" +
      "2\033.google.protobuf.Int64ValueB\007\372\3071\003>=0\022C" +
      "\n\025max_temporary_columns\030! \001(\0132\033.google.p" +
      "rotobuf.Int64ValueB\007\372\3071\003>=0\022M\n\037max_tempo" +
      "rary_non_const_columns\030\" \001(\0132\033.google.pr" +
      "otobuf.Int64ValueB\007\372\3071\003>=0\022;\n\016max_query_" +
      "size\030# \001(\0132\033.google.protobuf.Int64ValueB" +
      "\006\372\3071\002>0\022:\n\rmax_ast_depth\030$ \001(\0132\033.google." +
      "protobuf.Int64ValueB\006\372\3071\002>0\022=\n\020max_ast_e" +
      "lements\030% \001(\0132\033.google.protobuf.Int64Val" +
      "ueB\006\372\3071\002>0\022F\n\031max_expanded_ast_elements\030" +
      "& \001(\0132\033.google.protobuf.Int64ValueB\006\372\3071\002" +
      ">0\022A\n\023min_execution_speed\030T \001(\0132\033.google" +
      ".protobuf.Int64ValueB\007\372\3071\003>=0\022G\n\031min_exe" +
      "cution_speed_bytes\030U \001(\0132\033.google.protob" +
      "uf.Int64ValueB\007\372\3071\003>=0\022o\n\035count_distinct" +
      "_implementation\030V \001(\0162H.yandex.cloud.mdb" +
      ".clickhouse.v1.UserSettings.CountDistinc" +
      "tImplementation\022M\n)input_format_values_i" +
      "nterpret_expressions\030= \001(\0132\032.google.prot" +
      "obuf.BoolValue\022L\n(input_format_defaults_" +
      "for_omitted_fields\030> \001(\0132\032.google.protob" +
      "uf.BoolValue\022@\n\034input_format_null_as_def" +
      "ault\030j \001(\0132\032.google.protobuf.BoolValue\022`" +
      "\n\026date_time_input_format\030k \001(\0162@.yandex." +
      "cloud.mdb.clickhouse.v1.UserSettings.Dat" +
      "eTimeInputFormat\022F\n\"input_format_with_na" +
      "mes_use_header\030l \001(\0132\032.google.protobuf.B" +
      "oolValue\022p\n\'output_format_json_quote_64b" +
      "it_integers\030? \001(\0132\032.google.protobuf.Bool" +
      "ValueR#outputFormatJsonQuote_64bitIntege" +
      "rs\022F\n\"output_format_json_quote_denormals" +
      "\030@ \001(\0132\032.google.protobuf.BoolValue\022b\n\027da" +
      "te_time_output_format\030m \001(\0162A.yandex.clo" +
      "ud.mdb.clickhouse.v1.UserSettings.DateTi" +
      "meOutputFormat\022J\n&low_cardinality_allow_" +
      "in_native_format\030N \001(\0132\032.google.protobuf" +
      ".BoolValue\022J\n&allow_suspicious_low_cardi" +
      "nality_types\030n \001(\0132\032.google.protobuf.Boo" +
      "lValue\022M\n)empty_result_for_aggregation_b" +
      "y_empty_set\030O \001(\0132\032.google.protobuf.Bool" +
      "Value\022<\n\027http_connection_timeout\030A \001(\0132\033" +
      ".google.protobuf.Int64Value\0229\n\024http_rece" +
      "ive_timeout\030B \001(\0132\033.google.protobuf.Int6" +
      "4Value\0226\n\021http_send_timeout\030C \001(\0132\033.goog" +
      "le.protobuf.Int64Value\022;\n\027enable_http_co" +
      "mpression\030D \001(\0132\032.google.protobuf.BoolVa" +
      "lue\022A\n\035send_progress_in_http_headers\030E \001" +
      "(\0132\032.google.protobuf.BoolValue\022C\n\036http_h" +
      "eaders_progress_interval\030F \001(\0132\033.google." +
      "protobuf.Int64Value\0228\n\024add_http_cors_hea" +
      "der\030G \001(\0132\032.google.protobuf.BoolValue\022P\n" +
      ",cancel_http_readonly_queries_on_client_" +
      "close\030o \001(\0132\032.google.protobuf.BoolValue\022" +
      ";\n\026max_http_get_redirects\030p \001(\0132\033.google" +
      ".protobuf.Int64Value\022B\n\036joined_subquery_" +
      "requires_alias\030] \001(\0132\032.google.protobuf.B" +
      "oolValue\0222\n\016join_use_nulls\030^ \001(\0132\032.googl" +
      "e.protobuf.BoolValue\0225\n\021transform_null_i" +
      "n\030_ \001(\0132\032.google.protobuf.BoolValue\022J\n\nq" +
      "uota_mode\030P \001(\01626.yandex.cloud.mdb.click" +
      "house.v1.UserSettings.QuotaMode\0222\n\016flatt" +
      "en_nested\030q \001(\0132\032.google.protobuf.BoolVa" +
      "lue\022\025\n\rformat_regexp\030r \001(\t\022j\n\033format_reg" +
      "exp_escaping_rule\030s \001(\0162E.yandex.cloud.m" +
      "db.clickhouse.v1.UserSettings.FormatRege" +
      "xpEscapingRule\022@\n\034format_regexp_skip_unm" +
      "atched\030t \001(\0132\032.google.protobuf.BoolValue" +
      "\0220\n\014async_insert\030u \001(\0132\032.google.protobuf" +
      ".BoolValue\0229\n\024async_insert_threads\030v \001(\013" +
      "2\033.google.protobuf.Int64Value\0229\n\025wait_fo" +
      "r_async_insert\030w \001(\0132\032.google.protobuf.B" +
      "oolValue\022B\n\035wait_for_async_insert_timeou" +
      "t\030x \001(\0132\033.google.protobuf.Int64Value\022?\n\032" +
      "async_insert_max_data_size\030y \001(\0132\033.googl" +
      "e.protobuf.Int64Value\022>\n\031async_insert_bu" +
      "sy_timeout\030z \001(\0132\033.google.protobuf.Int64" +
      "Value\022?\n\032async_insert_stale_timeout\030{ \001(" +
      "\0132\033.google.protobuf.Int64Value\0229\n\024memory" +
      "_profiler_step\030| \001(\0132\033.google.protobuf.I" +
      "nt64Value\022H\n\"memory_profiler_sample_prob" +
      "ability\030} \001(\0132\034.google.protobuf.DoubleVa" +
      "lue\022?\n\021max_final_threads\030~ \001(\0132\033.google." +
      "protobuf.Int64ValueB\007\372\3071\003>=0\022A\n\035input_fo" +
      "rmat_parallel_parsing\030\177 \001(\0132\032.google.pro" +
      "tobuf.BoolValue\022D\n\037input_format_import_n" +
      "ested_json\030\200\001 \001(\0132\032.google.protobuf.Bool" +
      "Value\022m\n\034local_filesystem_read_method\030\201\001" +
      " \001(\0162F.yandex.cloud.mdb.clickhouse.v1.Us" +
      "erSettings.LocalFilesystemReadMethod\022B\n\024" +
      "max_read_buffer_size\030\202\001 \001(\0132\033.google.pro" +
      "tobuf.Int64ValueB\006\372\3071\002>0\022H\n\031insert_keepe" +
      "r_max_retries\030\203\001 \001(\0132\033.google.protobuf.I" +
      "nt64ValueB\007\372\3071\003>=0\022W\n(max_temporary_data" +
      "_on_disk_size_for_user\030\204\001 \001(\0132\033.google.p" +
      "rotobuf.Int64ValueB\007\372\3071\003>=0\022X\n)max_tempo" +
      "rary_data_on_disk_size_for_query\030\205\001 \001(\0132" +
      "\033.google.protobuf.Int64ValueB\007\372\3071\003>=0\022?\n" +
      "\020max_parser_depth\030\206\001 \001(\0132\033.google.protob" +
      "uf.Int64ValueB\007\372\3071\003>=0\022o\n\035remote_filesys" +
      "tem_read_method\030\207\001 \001(\0162G.yandex.cloud.md" +
      "b.clickhouse.v1.UserSettings.RemoteFiles" +
      "ystemReadMethod\022R\n#memory_overcommit_rat" +
      "io_denominator\030\210\001 \001(\0132\033.google.protobuf." +
      "Int64ValueB\007\372\3071\003>=0\022[\n,memory_overcommit" +
      "_ratio_denominator_for_user\030\211\001 \001(\0132\033.goo" +
      "gle.protobuf.Int64ValueB\007\372\3071\003>=0\022\\\n-memo" +
      "ry_usage_overcommit_max_wait_microsecond" +
      "s\030\212\001 \001(\0132\033.google.protobuf.Int64ValueB\007\372" +
      "\3071\003>=0\0226\n\021log_query_threads\030\213\001 \001(\0132\032.goo" +
      "gle.protobuf.BoolValue\022A\n\022max_insert_thr" +
      "eads\030\214\001 \001(\0132\033.google.protobuf.Int64Value" +
      "B\007\372\3071\003>=0\0228\n\023use_hedged_requests\030\215\001 \001(\0132" +
      "\032.google.protobuf.BoolValue\022F\n\027idle_conn" +
      "ection_timeout\030\216\001 \001(\0132\033.google.protobuf." +
      "Int64ValueB\007\372\3071\003>=0\022K\n\034hedged_connection" +
      "_timeout_ms\030\217\001 \001(\0132\033.google.protobuf.Int" +
      "64ValueB\007\372\3071\003>=0\022S\n\016load_balancing\030\220\001 \001(" +
      "\0162:.yandex.cloud.mdb.clickhouse.v1.UserS" +
      "ettings.LoadBalancing\022=\n\030prefer_localhos" +
      "t_replica\030\221\001 \001(\0132\032.google.protobuf.BoolV" +
      "alue\022/\n\007compile\030, \001(\0132\032.google.protobuf." +
      "BoolValueB\002\030\001\022=\n\024min_count_to_compile\030- " +
      "\001(\0132\033.google.protobuf.Int64ValueB\002\030\001\"_\n\014" +
      "OverflowMode\022\035\n\031OVERFLOW_MODE_UNSPECIFIE" +
      "D\020\000\022\027\n\023OVERFLOW_MODE_THROW\020\001\022\027\n\023OVERFLOW" +
      "_MODE_BREAK\020\002\"\241\001\n\023GroupByOverflowMode\022&\n" +
      "\"GROUP_BY_OVERFLOW_MODE_UNSPECIFIED\020\000\022 \n" +
      "\034GROUP_BY_OVERFLOW_MODE_THROW\020\001\022 \n\034GROUP" +
      "_BY_OVERFLOW_MODE_BREAK\020\002\022\036\n\032GROUP_BY_OV" +
      "ERFLOW_MODE_ANY\020\003\"\322\001\n\026DistributedProduct" +
      "Mode\022(\n$DISTRIBUTED_PRODUCT_MODE_UNSPECI" +
      "FIED\020\000\022!\n\035DISTRIBUTED_PRODUCT_MODE_DENY\020" +
      "\001\022\"\n\036DISTRIBUTED_PRODUCT_MODE_LOCAL\020\002\022#\n" +
      "\037DISTRIBUTED_PRODUCT_MODE_GLOBAL\020\003\022\"\n\036DI" +
      "STRIBUTED_PRODUCT_MODE_ALLOW\020\004\"q\n\tQuotaM" +
      "ode\022\032\n\026QUOTA_MODE_UNSPECIFIED\020\000\022\026\n\022QUOTA" +
      "_MODE_DEFAULT\020\001\022\024\n\020QUOTA_MODE_KEYED\020\002\022\032\n" +
      "\026QUOTA_MODE_KEYED_BY_IP\020\003\"\266\002\n\033CountDisti" +
      "nctImplementation\022-\n)COUNT_DISTINCT_IMPL" +
      "EMENTATION_UNSPECIFIED\020\000\022&\n\"COUNT_DISTIN" +
      "CT_IMPLEMENTATION_UNIQ\020\001\022/\n+COUNT_DISTIN" +
      "CT_IMPLEMENTATION_UNIQ_COMBINED\020\002\0222\n.COU" +
      "NT_DISTINCT_IMPLEMENTATION_UNIQ_COMBINED" +
      "_64\020\003\022-\n)COUNT_DISTINCT_IMPLEMENTATION_U" +
      "NIQ_HLL_12\020\004\022,\n(COUNT_DISTINCT_IMPLEMENT" +
      "ATION_UNIQ_EXACT\020\005\"\220\002\n\rJoinAlgorithm\022\036\n\032" +
      "JOIN_ALGORITHM_UNSPECIFIED\020\000\022\027\n\023JOIN_ALG" +
      "ORITHM_HASH\020\001\022 \n\034JOIN_ALGORITHM_PARALLEL" +
      "_HASH\020\002\022 \n\034JOIN_ALGORITHM_PARTIAL_MERGE\020" +
      "\003\022\031\n\025JOIN_ALGORITHM_DIRECT\020\004\022\027\n\023JOIN_ALG" +
      "ORITHM_AUTO\020\005\022%\n!JOIN_ALGORITHM_FULL_SOR" +
      "TING_MERGE\020\006\022\'\n#JOIN_ALGORITHM_PREFER_PA" +
      "RTIAL_MERGE\020\007\"\255\002\n\030FormatRegexpEscapingRu" +
      "le\022+\n\'FORMAT_REGEXP_ESCAPING_RULE_UNSPEC" +
      "IFIED\020\000\022\'\n#FORMAT_REGEXP_ESCAPING_RULE_E" +
      "SCAPED\020\001\022&\n\"FORMAT_REGEXP_ESCAPING_RULE_" +
      "QUOTED\020\002\022#\n\037FORMAT_REGEXP_ESCAPING_RULE_" +
      "CSV\020\003\022$\n FORMAT_REGEXP_ESCAPING_RULE_JSO" +
      "N\020\004\022#\n\037FORMAT_REGEXP_ESCAPING_RULE_XML\020\005" +
      "\022#\n\037FORMAT_REGEXP_ESCAPING_RULE_RAW\020\006\"\262\001" +
      "\n\023DateTimeInputFormat\022&\n\"DATE_TIME_INPUT" +
      "_FORMAT_UNSPECIFIED\020\000\022&\n\"DATE_TIME_INPUT" +
      "_FORMAT_BEST_EFFORT\020\001\022 \n\034DATE_TIME_INPUT" +
      "_FORMAT_BASIC\020\002\022)\n%DATE_TIME_INPUT_FORMA" +
      "T_BEST_EFFORT_US\020\003\"\260\001\n\024DateTimeOutputFor" +
      "mat\022\'\n#DATE_TIME_OUTPUT_FORMAT_UNSPECIFI" +
      "ED\020\000\022\"\n\036DATE_TIME_OUTPUT_FORMAT_SIMPLE\020\001" +
      "\022\037\n\033DATE_TIME_OUTPUT_FORMAT_ISO\020\002\022*\n&DAT" +
      "E_TIME_OUTPUT_FORMAT_UNIX_TIMESTAMP\020\003\"\362\001" +
      "\n\031LocalFilesystemReadMethod\022,\n(LOCAL_FIL" +
      "ESYSTEM_READ_METHOD_UNSPECIFIED\020\000\022%\n!LOC" +
      "AL_FILESYSTEM_READ_METHOD_READ\020\001\0221\n-LOCA" +
      "L_FILESYSTEM_READ_METHOD_PREAD_THREADPOO" +
      "L\020\002\022&\n\"LOCAL_FILESYSTEM_READ_METHOD_PREA" +
      "D\020\003\022%\n!LOCAL_FILESYSTEM_READ_METHOD_NMAP" +
      "\020\004\"\241\001\n\032RemoteFilesystemReadMethod\022-\n)REM" +
      "OTE_FILESYSTEM_READ_METHOD_UNSPECIFIED\020\000" +
      "\022&\n\"REMOTE_FILESYSTEM_READ_METHOD_READ\020\001" +
      "\022,\n(REMOTE_FILESYSTEM_READ_METHOD_THREAD" +
      "POOL\020\002\"\320\001\n\rLoadBalancing\022\036\n\032LOAD_BALANCI" +
      "NG_UNSPECIFIED\020\000\022\031\n\025LOAD_BALANCING_RANDO" +
      "M\020\001\022#\n\037LOAD_BALANCING_NEAREST_HOSTNAME\020\002" +
      "\022\033\n\027LOAD_BALANCING_IN_ORDER\020\003\022\"\n\036LOAD_BA" +
      "LANCING_FIRST_OR_RANDOM\020\004\022\036\n\032LOAD_BALANC" +
      "ING_ROUND_ROBIN\020\005J\004\010R\020T\"\356\002\n\tUserQuota\022B\n" +
      "\021interval_duration\030\001 \001(\0132\033.google.protob" +
      "uf.Int64ValueB\n\372\3071\006>=1000\0225\n\007queries\030\002 \001" +
      "(\0132\033.google.protobuf.Int64ValueB\007\372\3071\003>=0" +
      "\0224\n\006errors\030\003 \001(\0132\033.google.protobuf.Int64" +
      "ValueB\007\372\3071\003>=0\0229\n\013result_rows\030\004 \001(\0132\033.go" +
      "ogle.protobuf.Int64ValueB\007\372\3071\003>=0\0227\n\trea" +
      "d_rows\030\005 \001(\0132\033.google.protobuf.Int64Valu" +
      "eB\007\372\3071\003>=0\022<\n\016execution_time\030\006 \001(\0132\033.goo" +
      "gle.protobuf.Int64ValueB\007\372\3071\003>=0Bs\n\"yand" +
      "ex.cloud.api.mdb.clickhouse.v1ZMgithub.c" +
      "om/yandex-cloud/go-genproto/yandex/cloud" +
      "/mdb/clickhouse/v1;clickhouseb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.WrappersProto.getDescriptor(),
          yandex.cloud.api.Validation.getDescriptor(),
        });
    internal_static_yandex_cloud_mdb_clickhouse_v1_User_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_yandex_cloud_mdb_clickhouse_v1_User_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_clickhouse_v1_User_descriptor,
        new java.lang.String[] { "Name", "ClusterId", "Permissions", "Settings", "Quotas", });
    internal_static_yandex_cloud_mdb_clickhouse_v1_Permission_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_yandex_cloud_mdb_clickhouse_v1_Permission_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_clickhouse_v1_Permission_descriptor,
        new java.lang.String[] { "DatabaseName", });
    internal_static_yandex_cloud_mdb_clickhouse_v1_UserSpec_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_yandex_cloud_mdb_clickhouse_v1_UserSpec_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_clickhouse_v1_UserSpec_descriptor,
        new java.lang.String[] { "Name", "Password", "Permissions", "Settings", "Quotas", });
    internal_static_yandex_cloud_mdb_clickhouse_v1_UserSettings_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_yandex_cloud_mdb_clickhouse_v1_UserSettings_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_clickhouse_v1_UserSettings_descriptor,
        new java.lang.String[] { "Readonly", "AllowDdl", "AllowIntrospectionFunctions", "ConnectTimeout", "ConnectTimeoutWithFailover", "ReceiveTimeout", "SendTimeout", "TimeoutBeforeCheckingExecutionSpeed", "InsertQuorum", "InsertQuorumTimeout", "InsertQuorumParallel", "InsertNullAsDefault", "SelectSequentialConsistency", "DeduplicateBlocksInDependentMaterializedViews", "ReplicationAlterPartitionsSync", "MaxReplicaDelayForDistributedQueries", "FallbackToStaleReplicasForDistributedQueries", "DistributedProductMode", "DistributedAggregationMemoryEfficient", "DistributedDdlTaskTimeout", "SkipUnavailableShards", "CompileExpressions", "MinCountToCompileExpression", "MaxBlockSize", "MinInsertBlockSizeRows", "MinInsertBlockSizeBytes", "MaxInsertBlockSize", "MinBytesToUseDirectIo", "UseUncompressedCache", "MergeTreeMaxRowsToUseCache", "MergeTreeMaxBytesToUseCache", "MergeTreeMinRowsForConcurrentRead", "MergeTreeMinBytesForConcurrentRead", "MaxBytesBeforeExternalGroupBy", "MaxBytesBeforeExternalSort", "GroupByTwoLevelThreshold", "GroupByTwoLevelThresholdBytes", "Priority", "MaxThreads", "MaxMemoryUsage", "MaxMemoryUsageForUser", "MaxNetworkBandwidth", "MaxNetworkBandwidthForUser", "MaxPartitionsPerInsertBlock", "MaxConcurrentQueriesForUser", "ForceIndexByDate", "ForcePrimaryKey", "MaxRowsToRead", "MaxBytesToRead", "ReadOverflowMode", "MaxRowsToGroupBy", "GroupByOverflowMode", "MaxRowsToSort", "MaxBytesToSort", "SortOverflowMode", "MaxResultRows", "MaxResultBytes", "ResultOverflowMode", "MaxRowsInDistinct", "MaxBytesInDistinct", "DistinctOverflowMode", "MaxRowsToTransfer", "MaxBytesToTransfer", "TransferOverflowMode", "MaxExecutionTime", "TimeoutOverflowMode", "MaxRowsInSet", "MaxBytesInSet", "SetOverflowMode", "MaxRowsInJoin", "MaxBytesInJoin", "JoinOverflowMode", "JoinAlgorithm", "AnyJoinDistinctRightTableKeys", "MaxColumnsToRead", "MaxTemporaryColumns", "MaxTemporaryNonConstColumns", "MaxQuerySize", "MaxAstDepth", "MaxAstElements", "MaxExpandedAstElements", "MinExecutionSpeed", "MinExecutionSpeedBytes", "CountDistinctImplementation", "InputFormatValuesInterpretExpressions", "InputFormatDefaultsForOmittedFields", "InputFormatNullAsDefault", "DateTimeInputFormat", "InputFormatWithNamesUseHeader", "OutputFormatJsonQuote64BitIntegers", "OutputFormatJsonQuoteDenormals", "DateTimeOutputFormat", "LowCardinalityAllowInNativeFormat", "AllowSuspiciousLowCardinalityTypes", "EmptyResultForAggregationByEmptySet", "HttpConnectionTimeout", "HttpReceiveTimeout", "HttpSendTimeout", "EnableHttpCompression", "SendProgressInHttpHeaders", "HttpHeadersProgressInterval", "AddHttpCorsHeader", "CancelHttpReadonlyQueriesOnClientClose", "MaxHttpGetRedirects", "JoinedSubqueryRequiresAlias", "JoinUseNulls", "TransformNullIn", "QuotaMode", "FlattenNested", "FormatRegexp", "FormatRegexpEscapingRule", "FormatRegexpSkipUnmatched", "AsyncInsert", "AsyncInsertThreads", "WaitForAsyncInsert", "WaitForAsyncInsertTimeout", "AsyncInsertMaxDataSize", "AsyncInsertBusyTimeout", "AsyncInsertStaleTimeout", "MemoryProfilerStep", "MemoryProfilerSampleProbability", "MaxFinalThreads", "InputFormatParallelParsing", "InputFormatImportNestedJson", "LocalFilesystemReadMethod", "MaxReadBufferSize", "InsertKeeperMaxRetries", "MaxTemporaryDataOnDiskSizeForUser", "MaxTemporaryDataOnDiskSizeForQuery", "MaxParserDepth", "RemoteFilesystemReadMethod", "MemoryOvercommitRatioDenominator", "MemoryOvercommitRatioDenominatorForUser", "MemoryUsageOvercommitMaxWaitMicroseconds", "LogQueryThreads", "MaxInsertThreads", "UseHedgedRequests", "IdleConnectionTimeout", "HedgedConnectionTimeoutMs", "LoadBalancing", "PreferLocalhostReplica", "Compile", "MinCountToCompile", });
    internal_static_yandex_cloud_mdb_clickhouse_v1_UserQuota_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_yandex_cloud_mdb_clickhouse_v1_UserQuota_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_mdb_clickhouse_v1_UserQuota_descriptor,
        new java.lang.String[] { "IntervalDuration", "Queries", "Errors", "ResultRows", "ReadRows", "ExecutionTime", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(yandex.cloud.api.Validation.length);
    registry.add(yandex.cloud.api.Validation.pattern);
    registry.add(yandex.cloud.api.Validation.required);
    registry.add(yandex.cloud.api.Validation.value);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.google.protobuf.WrappersProto.getDescriptor();
    yandex.cloud.api.Validation.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
