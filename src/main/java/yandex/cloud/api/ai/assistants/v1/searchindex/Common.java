// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yandex/cloud/ai/assistants/v1/searchindex/common.proto

package yandex.cloud.api.ai.assistants.v1.searchindex;

public final class Common {
  private Common() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface StaticChunkingStrategyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:yandex.cloud.ai.assistants.v1.searchindex.StaticChunkingStrategy)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The maximum number of tokens allowed in a single chunk.
     * Constraints: must be within the range [100, 2048].
     * Default value: 800
     * </pre>
     *
     * <code>int64 max_chunk_size_tokens = 1;</code>
     * @return The maxChunkSizeTokens.
     */
    long getMaxChunkSizeTokens();

    /**
     * <pre>
     * The number of tokens that should overlap between consecutive chunks.
     * This allows for some context from the previous chunk to be included in the next chunk.
     * Constraints: must be less than or equal to half of `max_chunk_size_tokens`.
     * Default value: 400
     * </pre>
     *
     * <code>int64 chunk_overlap_tokens = 2;</code>
     * @return The chunkOverlapTokens.
     */
    long getChunkOverlapTokens();
  }
  /**
   * <pre>
   * Defines a chunking strategy where chunks are created with a fixed maximum chunk size and an overlap between consecutive chunks.
   * </pre>
   *
   * Protobuf type {@code yandex.cloud.ai.assistants.v1.searchindex.StaticChunkingStrategy}
   */
  public static final class StaticChunkingStrategy extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:yandex.cloud.ai.assistants.v1.searchindex.StaticChunkingStrategy)
      StaticChunkingStrategyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StaticChunkingStrategy.newBuilder() to construct.
    private StaticChunkingStrategy(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StaticChunkingStrategy() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StaticChunkingStrategy();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StaticChunkingStrategy(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              maxChunkSizeTokens_ = input.readInt64();
              break;
            }
            case 16: {

              chunkOverlapTokens_ = input.readInt64();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return yandex.cloud.api.ai.assistants.v1.searchindex.Common.internal_static_yandex_cloud_ai_assistants_v1_searchindex_StaticChunkingStrategy_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return yandex.cloud.api.ai.assistants.v1.searchindex.Common.internal_static_yandex_cloud_ai_assistants_v1_searchindex_StaticChunkingStrategy_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy.class, yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy.Builder.class);
    }

    public static final int MAX_CHUNK_SIZE_TOKENS_FIELD_NUMBER = 1;
    private long maxChunkSizeTokens_;
    /**
     * <pre>
     * The maximum number of tokens allowed in a single chunk.
     * Constraints: must be within the range [100, 2048].
     * Default value: 800
     * </pre>
     *
     * <code>int64 max_chunk_size_tokens = 1;</code>
     * @return The maxChunkSizeTokens.
     */
    @java.lang.Override
    public long getMaxChunkSizeTokens() {
      return maxChunkSizeTokens_;
    }

    public static final int CHUNK_OVERLAP_TOKENS_FIELD_NUMBER = 2;
    private long chunkOverlapTokens_;
    /**
     * <pre>
     * The number of tokens that should overlap between consecutive chunks.
     * This allows for some context from the previous chunk to be included in the next chunk.
     * Constraints: must be less than or equal to half of `max_chunk_size_tokens`.
     * Default value: 400
     * </pre>
     *
     * <code>int64 chunk_overlap_tokens = 2;</code>
     * @return The chunkOverlapTokens.
     */
    @java.lang.Override
    public long getChunkOverlapTokens() {
      return chunkOverlapTokens_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (maxChunkSizeTokens_ != 0L) {
        output.writeInt64(1, maxChunkSizeTokens_);
      }
      if (chunkOverlapTokens_ != 0L) {
        output.writeInt64(2, chunkOverlapTokens_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (maxChunkSizeTokens_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, maxChunkSizeTokens_);
      }
      if (chunkOverlapTokens_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, chunkOverlapTokens_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy)) {
        return super.equals(obj);
      }
      yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy other = (yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy) obj;

      if (getMaxChunkSizeTokens()
          != other.getMaxChunkSizeTokens()) return false;
      if (getChunkOverlapTokens()
          != other.getChunkOverlapTokens()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + MAX_CHUNK_SIZE_TOKENS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getMaxChunkSizeTokens());
      hash = (37 * hash) + CHUNK_OVERLAP_TOKENS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getChunkOverlapTokens());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Defines a chunking strategy where chunks are created with a fixed maximum chunk size and an overlap between consecutive chunks.
     * </pre>
     *
     * Protobuf type {@code yandex.cloud.ai.assistants.v1.searchindex.StaticChunkingStrategy}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:yandex.cloud.ai.assistants.v1.searchindex.StaticChunkingStrategy)
        yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return yandex.cloud.api.ai.assistants.v1.searchindex.Common.internal_static_yandex_cloud_ai_assistants_v1_searchindex_StaticChunkingStrategy_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return yandex.cloud.api.ai.assistants.v1.searchindex.Common.internal_static_yandex_cloud_ai_assistants_v1_searchindex_StaticChunkingStrategy_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy.class, yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy.Builder.class);
      }

      // Construct using yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        maxChunkSizeTokens_ = 0L;

        chunkOverlapTokens_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return yandex.cloud.api.ai.assistants.v1.searchindex.Common.internal_static_yandex_cloud_ai_assistants_v1_searchindex_StaticChunkingStrategy_descriptor;
      }

      @java.lang.Override
      public yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy getDefaultInstanceForType() {
        return yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy.getDefaultInstance();
      }

      @java.lang.Override
      public yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy build() {
        yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy buildPartial() {
        yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy result = new yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy(this);
        result.maxChunkSizeTokens_ = maxChunkSizeTokens_;
        result.chunkOverlapTokens_ = chunkOverlapTokens_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy) {
          return mergeFrom((yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy other) {
        if (other == yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy.getDefaultInstance()) return this;
        if (other.getMaxChunkSizeTokens() != 0L) {
          setMaxChunkSizeTokens(other.getMaxChunkSizeTokens());
        }
        if (other.getChunkOverlapTokens() != 0L) {
          setChunkOverlapTokens(other.getChunkOverlapTokens());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long maxChunkSizeTokens_ ;
      /**
       * <pre>
       * The maximum number of tokens allowed in a single chunk.
       * Constraints: must be within the range [100, 2048].
       * Default value: 800
       * </pre>
       *
       * <code>int64 max_chunk_size_tokens = 1;</code>
       * @return The maxChunkSizeTokens.
       */
      @java.lang.Override
      public long getMaxChunkSizeTokens() {
        return maxChunkSizeTokens_;
      }
      /**
       * <pre>
       * The maximum number of tokens allowed in a single chunk.
       * Constraints: must be within the range [100, 2048].
       * Default value: 800
       * </pre>
       *
       * <code>int64 max_chunk_size_tokens = 1;</code>
       * @param value The maxChunkSizeTokens to set.
       * @return This builder for chaining.
       */
      public Builder setMaxChunkSizeTokens(long value) {
        
        maxChunkSizeTokens_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The maximum number of tokens allowed in a single chunk.
       * Constraints: must be within the range [100, 2048].
       * Default value: 800
       * </pre>
       *
       * <code>int64 max_chunk_size_tokens = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxChunkSizeTokens() {
        
        maxChunkSizeTokens_ = 0L;
        onChanged();
        return this;
      }

      private long chunkOverlapTokens_ ;
      /**
       * <pre>
       * The number of tokens that should overlap between consecutive chunks.
       * This allows for some context from the previous chunk to be included in the next chunk.
       * Constraints: must be less than or equal to half of `max_chunk_size_tokens`.
       * Default value: 400
       * </pre>
       *
       * <code>int64 chunk_overlap_tokens = 2;</code>
       * @return The chunkOverlapTokens.
       */
      @java.lang.Override
      public long getChunkOverlapTokens() {
        return chunkOverlapTokens_;
      }
      /**
       * <pre>
       * The number of tokens that should overlap between consecutive chunks.
       * This allows for some context from the previous chunk to be included in the next chunk.
       * Constraints: must be less than or equal to half of `max_chunk_size_tokens`.
       * Default value: 400
       * </pre>
       *
       * <code>int64 chunk_overlap_tokens = 2;</code>
       * @param value The chunkOverlapTokens to set.
       * @return This builder for chaining.
       */
      public Builder setChunkOverlapTokens(long value) {
        
        chunkOverlapTokens_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The number of tokens that should overlap between consecutive chunks.
       * This allows for some context from the previous chunk to be included in the next chunk.
       * Constraints: must be less than or equal to half of `max_chunk_size_tokens`.
       * Default value: 400
       * </pre>
       *
       * <code>int64 chunk_overlap_tokens = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearChunkOverlapTokens() {
        
        chunkOverlapTokens_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:yandex.cloud.ai.assistants.v1.searchindex.StaticChunkingStrategy)
    }

    // @@protoc_insertion_point(class_scope:yandex.cloud.ai.assistants.v1.searchindex.StaticChunkingStrategy)
    private static final yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy();
    }

    public static yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StaticChunkingStrategy>
        PARSER = new com.google.protobuf.AbstractParser<StaticChunkingStrategy>() {
      @java.lang.Override
      public StaticChunkingStrategy parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StaticChunkingStrategy(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StaticChunkingStrategy> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StaticChunkingStrategy> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ChunkingStrategyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:yandex.cloud.ai.assistants.v1.searchindex.ChunkingStrategy)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.yandex.cloud.ai.assistants.v1.searchindex.StaticChunkingStrategy static_strategy = 1;</code>
     * @return Whether the staticStrategy field is set.
     */
    boolean hasStaticStrategy();
    /**
     * <code>.yandex.cloud.ai.assistants.v1.searchindex.StaticChunkingStrategy static_strategy = 1;</code>
     * @return The staticStrategy.
     */
    yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy getStaticStrategy();
    /**
     * <code>.yandex.cloud.ai.assistants.v1.searchindex.StaticChunkingStrategy static_strategy = 1;</code>
     */
    yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategyOrBuilder getStaticStrategyOrBuilder();

    public yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy.StrategyCase getStrategyCase();
  }
  /**
   * <pre>
   * Defines a general strategy for chunking text into smaller segments.
   * Currently, only StaticChunkingStrategy is supported.
   * </pre>
   *
   * Protobuf type {@code yandex.cloud.ai.assistants.v1.searchindex.ChunkingStrategy}
   */
  public static final class ChunkingStrategy extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:yandex.cloud.ai.assistants.v1.searchindex.ChunkingStrategy)
      ChunkingStrategyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ChunkingStrategy.newBuilder() to construct.
    private ChunkingStrategy(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ChunkingStrategy() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ChunkingStrategy();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ChunkingStrategy(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy.Builder subBuilder = null;
              if (strategyCase_ == 1) {
                subBuilder = ((yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy) strategy_).toBuilder();
              }
              strategy_ =
                  input.readMessage(yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy) strategy_);
                strategy_ = subBuilder.buildPartial();
              }
              strategyCase_ = 1;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return yandex.cloud.api.ai.assistants.v1.searchindex.Common.internal_static_yandex_cloud_ai_assistants_v1_searchindex_ChunkingStrategy_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return yandex.cloud.api.ai.assistants.v1.searchindex.Common.internal_static_yandex_cloud_ai_assistants_v1_searchindex_ChunkingStrategy_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy.class, yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy.Builder.class);
    }

    private int strategyCase_ = 0;
    private java.lang.Object strategy_;
    public enum StrategyCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      STATIC_STRATEGY(1),
      STRATEGY_NOT_SET(0);
      private final int value;
      private StrategyCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static StrategyCase valueOf(int value) {
        return forNumber(value);
      }

      public static StrategyCase forNumber(int value) {
        switch (value) {
          case 1: return STATIC_STRATEGY;
          case 0: return STRATEGY_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public StrategyCase
    getStrategyCase() {
      return StrategyCase.forNumber(
          strategyCase_);
    }

    public static final int STATIC_STRATEGY_FIELD_NUMBER = 1;
    /**
     * <code>.yandex.cloud.ai.assistants.v1.searchindex.StaticChunkingStrategy static_strategy = 1;</code>
     * @return Whether the staticStrategy field is set.
     */
    @java.lang.Override
    public boolean hasStaticStrategy() {
      return strategyCase_ == 1;
    }
    /**
     * <code>.yandex.cloud.ai.assistants.v1.searchindex.StaticChunkingStrategy static_strategy = 1;</code>
     * @return The staticStrategy.
     */
    @java.lang.Override
    public yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy getStaticStrategy() {
      if (strategyCase_ == 1) {
         return (yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy) strategy_;
      }
      return yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy.getDefaultInstance();
    }
    /**
     * <code>.yandex.cloud.ai.assistants.v1.searchindex.StaticChunkingStrategy static_strategy = 1;</code>
     */
    @java.lang.Override
    public yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategyOrBuilder getStaticStrategyOrBuilder() {
      if (strategyCase_ == 1) {
         return (yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy) strategy_;
      }
      return yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (strategyCase_ == 1) {
        output.writeMessage(1, (yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy) strategy_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (strategyCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy) strategy_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy)) {
        return super.equals(obj);
      }
      yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy other = (yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy) obj;

      if (!getStrategyCase().equals(other.getStrategyCase())) return false;
      switch (strategyCase_) {
        case 1:
          if (!getStaticStrategy()
              .equals(other.getStaticStrategy())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (strategyCase_) {
        case 1:
          hash = (37 * hash) + STATIC_STRATEGY_FIELD_NUMBER;
          hash = (53 * hash) + getStaticStrategy().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Defines a general strategy for chunking text into smaller segments.
     * Currently, only StaticChunkingStrategy is supported.
     * </pre>
     *
     * Protobuf type {@code yandex.cloud.ai.assistants.v1.searchindex.ChunkingStrategy}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:yandex.cloud.ai.assistants.v1.searchindex.ChunkingStrategy)
        yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return yandex.cloud.api.ai.assistants.v1.searchindex.Common.internal_static_yandex_cloud_ai_assistants_v1_searchindex_ChunkingStrategy_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return yandex.cloud.api.ai.assistants.v1.searchindex.Common.internal_static_yandex_cloud_ai_assistants_v1_searchindex_ChunkingStrategy_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy.class, yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy.Builder.class);
      }

      // Construct using yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        strategyCase_ = 0;
        strategy_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return yandex.cloud.api.ai.assistants.v1.searchindex.Common.internal_static_yandex_cloud_ai_assistants_v1_searchindex_ChunkingStrategy_descriptor;
      }

      @java.lang.Override
      public yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy getDefaultInstanceForType() {
        return yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy.getDefaultInstance();
      }

      @java.lang.Override
      public yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy build() {
        yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy buildPartial() {
        yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy result = new yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy(this);
        if (strategyCase_ == 1) {
          if (staticStrategyBuilder_ == null) {
            result.strategy_ = strategy_;
          } else {
            result.strategy_ = staticStrategyBuilder_.build();
          }
        }
        result.strategyCase_ = strategyCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy) {
          return mergeFrom((yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy other) {
        if (other == yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy.getDefaultInstance()) return this;
        switch (other.getStrategyCase()) {
          case STATIC_STRATEGY: {
            mergeStaticStrategy(other.getStaticStrategy());
            break;
          }
          case STRATEGY_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int strategyCase_ = 0;
      private java.lang.Object strategy_;
      public StrategyCase
          getStrategyCase() {
        return StrategyCase.forNumber(
            strategyCase_);
      }

      public Builder clearStrategy() {
        strategyCase_ = 0;
        strategy_ = null;
        onChanged();
        return this;
      }


      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy, yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy.Builder, yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategyOrBuilder> staticStrategyBuilder_;
      /**
       * <code>.yandex.cloud.ai.assistants.v1.searchindex.StaticChunkingStrategy static_strategy = 1;</code>
       * @return Whether the staticStrategy field is set.
       */
      @java.lang.Override
      public boolean hasStaticStrategy() {
        return strategyCase_ == 1;
      }
      /**
       * <code>.yandex.cloud.ai.assistants.v1.searchindex.StaticChunkingStrategy static_strategy = 1;</code>
       * @return The staticStrategy.
       */
      @java.lang.Override
      public yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy getStaticStrategy() {
        if (staticStrategyBuilder_ == null) {
          if (strategyCase_ == 1) {
            return (yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy) strategy_;
          }
          return yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy.getDefaultInstance();
        } else {
          if (strategyCase_ == 1) {
            return staticStrategyBuilder_.getMessage();
          }
          return yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy.getDefaultInstance();
        }
      }
      /**
       * <code>.yandex.cloud.ai.assistants.v1.searchindex.StaticChunkingStrategy static_strategy = 1;</code>
       */
      public Builder setStaticStrategy(yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy value) {
        if (staticStrategyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          strategy_ = value;
          onChanged();
        } else {
          staticStrategyBuilder_.setMessage(value);
        }
        strategyCase_ = 1;
        return this;
      }
      /**
       * <code>.yandex.cloud.ai.assistants.v1.searchindex.StaticChunkingStrategy static_strategy = 1;</code>
       */
      public Builder setStaticStrategy(
          yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy.Builder builderForValue) {
        if (staticStrategyBuilder_ == null) {
          strategy_ = builderForValue.build();
          onChanged();
        } else {
          staticStrategyBuilder_.setMessage(builderForValue.build());
        }
        strategyCase_ = 1;
        return this;
      }
      /**
       * <code>.yandex.cloud.ai.assistants.v1.searchindex.StaticChunkingStrategy static_strategy = 1;</code>
       */
      public Builder mergeStaticStrategy(yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy value) {
        if (staticStrategyBuilder_ == null) {
          if (strategyCase_ == 1 &&
              strategy_ != yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy.getDefaultInstance()) {
            strategy_ = yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy.newBuilder((yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy) strategy_)
                .mergeFrom(value).buildPartial();
          } else {
            strategy_ = value;
          }
          onChanged();
        } else {
          if (strategyCase_ == 1) {
            staticStrategyBuilder_.mergeFrom(value);
          }
          staticStrategyBuilder_.setMessage(value);
        }
        strategyCase_ = 1;
        return this;
      }
      /**
       * <code>.yandex.cloud.ai.assistants.v1.searchindex.StaticChunkingStrategy static_strategy = 1;</code>
       */
      public Builder clearStaticStrategy() {
        if (staticStrategyBuilder_ == null) {
          if (strategyCase_ == 1) {
            strategyCase_ = 0;
            strategy_ = null;
            onChanged();
          }
        } else {
          if (strategyCase_ == 1) {
            strategyCase_ = 0;
            strategy_ = null;
          }
          staticStrategyBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.yandex.cloud.ai.assistants.v1.searchindex.StaticChunkingStrategy static_strategy = 1;</code>
       */
      public yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy.Builder getStaticStrategyBuilder() {
        return getStaticStrategyFieldBuilder().getBuilder();
      }
      /**
       * <code>.yandex.cloud.ai.assistants.v1.searchindex.StaticChunkingStrategy static_strategy = 1;</code>
       */
      @java.lang.Override
      public yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategyOrBuilder getStaticStrategyOrBuilder() {
        if ((strategyCase_ == 1) && (staticStrategyBuilder_ != null)) {
          return staticStrategyBuilder_.getMessageOrBuilder();
        } else {
          if (strategyCase_ == 1) {
            return (yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy) strategy_;
          }
          return yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy.getDefaultInstance();
        }
      }
      /**
       * <code>.yandex.cloud.ai.assistants.v1.searchindex.StaticChunkingStrategy static_strategy = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy, yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy.Builder, yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategyOrBuilder> 
          getStaticStrategyFieldBuilder() {
        if (staticStrategyBuilder_ == null) {
          if (!(strategyCase_ == 1)) {
            strategy_ = yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy.getDefaultInstance();
          }
          staticStrategyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy, yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy.Builder, yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategyOrBuilder>(
                  (yandex.cloud.api.ai.assistants.v1.searchindex.Common.StaticChunkingStrategy) strategy_,
                  getParentForChildren(),
                  isClean());
          strategy_ = null;
        }
        strategyCase_ = 1;
        onChanged();;
        return staticStrategyBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:yandex.cloud.ai.assistants.v1.searchindex.ChunkingStrategy)
    }

    // @@protoc_insertion_point(class_scope:yandex.cloud.ai.assistants.v1.searchindex.ChunkingStrategy)
    private static final yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy();
    }

    public static yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ChunkingStrategy>
        PARSER = new com.google.protobuf.AbstractParser<ChunkingStrategy>() {
      @java.lang.Override
      public ChunkingStrategy parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ChunkingStrategy(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ChunkingStrategy> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ChunkingStrategy> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public yandex.cloud.api.ai.assistants.v1.searchindex.Common.ChunkingStrategy getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_ai_assistants_v1_searchindex_StaticChunkingStrategy_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_ai_assistants_v1_searchindex_StaticChunkingStrategy_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_yandex_cloud_ai_assistants_v1_searchindex_ChunkingStrategy_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_yandex_cloud_ai_assistants_v1_searchindex_ChunkingStrategy_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n6yandex/cloud/ai/assistants/v1/searchin" +
      "dex/common.proto\022)yandex.cloud.ai.assist" +
      "ants.v1.searchindex\"U\n\026StaticChunkingStr" +
      "ategy\022\035\n\025max_chunk_size_tokens\030\001 \001(\003\022\034\n\024" +
      "chunk_overlap_tokens\030\002 \001(\003\"|\n\020ChunkingSt" +
      "rategy\022\\\n\017static_strategy\030\001 \001(\0132A.yandex" +
      ".cloud.ai.assistants.v1.searchindex.Stat" +
      "icChunkingStrategyH\000B\n\n\010StrategyB\212\001\n-yan" +
      "dex.cloud.api.ai.assistants.v1.searchind" +
      "exZYgithub.com/yandex-cloud/go-genproto/" +
      "yandex/cloud/ai/assistants/v1/searchinde" +
      "x;searchindexb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_yandex_cloud_ai_assistants_v1_searchindex_StaticChunkingStrategy_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_yandex_cloud_ai_assistants_v1_searchindex_StaticChunkingStrategy_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_ai_assistants_v1_searchindex_StaticChunkingStrategy_descriptor,
        new java.lang.String[] { "MaxChunkSizeTokens", "ChunkOverlapTokens", });
    internal_static_yandex_cloud_ai_assistants_v1_searchindex_ChunkingStrategy_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_yandex_cloud_ai_assistants_v1_searchindex_ChunkingStrategy_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_yandex_cloud_ai_assistants_v1_searchindex_ChunkingStrategy_descriptor,
        new java.lang.String[] { "StaticStrategy", "Strategy", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
