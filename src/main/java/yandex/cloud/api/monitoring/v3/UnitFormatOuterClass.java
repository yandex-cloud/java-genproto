// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yandex/cloud/monitoring/v3/unit_format.proto

package yandex.cloud.api.monitoring.v3;

public final class UnitFormatOuterClass {
  private UnitFormatOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code yandex.cloud.monitoring.v3.UnitFormat}
   */
  public enum UnitFormat
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNIT_FORMAT_UNSPECIFIED = 0;</code>
     */
    UNIT_FORMAT_UNSPECIFIED(0),
    /**
     * <pre>
     * None (show tick values as-is).
     * </pre>
     *
     * <code>UNIT_NONE = 1;</code>
     */
    UNIT_NONE(1),
    /**
     * <pre>
     * Count.
     * </pre>
     *
     * <code>UNIT_COUNT = 2;</code>
     */
    UNIT_COUNT(2),
    /**
     * <pre>
     * Percent (0-100).
     * </pre>
     *
     * <code>UNIT_PERCENT = 3;</code>
     */
    UNIT_PERCENT(3),
    /**
     * <pre>
     * Percent (0-1).
     * </pre>
     *
     * <code>UNIT_PERCENT_UNIT = 4;</code>
     */
    UNIT_PERCENT_UNIT(4),
    /**
     * <pre>
     * Nanoseconds (ns).
     * </pre>
     *
     * <code>UNIT_NANOSECONDS = 5;</code>
     */
    UNIT_NANOSECONDS(5),
    /**
     * <pre>
     * Microseconds (Âµs).
     * </pre>
     *
     * <code>UNIT_MICROSECONDS = 6;</code>
     */
    UNIT_MICROSECONDS(6),
    /**
     * <pre>
     * Milliseconds (ms).
     * </pre>
     *
     * <code>UNIT_MILLISECONDS = 7;</code>
     */
    UNIT_MILLISECONDS(7),
    /**
     * <pre>
     * Seconds (s).
     * </pre>
     *
     * <code>UNIT_SECONDS = 8;</code>
     */
    UNIT_SECONDS(8),
    /**
     * <pre>
     * Minutes (m).
     * </pre>
     *
     * <code>UNIT_MINUTES = 9;</code>
     */
    UNIT_MINUTES(9),
    /**
     * <pre>
     * Hours (h).
     * </pre>
     *
     * <code>UNIT_HOURS = 10;</code>
     */
    UNIT_HOURS(10),
    /**
     * <pre>
     * Days (d).
     * </pre>
     *
     * <code>UNIT_DAYS = 11;</code>
     */
    UNIT_DAYS(11),
    /**
     * <pre>
     * Bits (SI).
     * </pre>
     *
     * <code>UNIT_BITS_SI = 12;</code>
     */
    UNIT_BITS_SI(12),
    /**
     * <pre>
     * Bytes (SI).
     * </pre>
     *
     * <code>UNIT_BYTES_SI = 13;</code>
     */
    UNIT_BYTES_SI(13),
    /**
     * <pre>
     * Kilobytes (KB).
     * </pre>
     *
     * <code>UNIT_KILOBYTES = 14;</code>
     */
    UNIT_KILOBYTES(14),
    /**
     * <pre>
     * Megabytes (MB).
     * </pre>
     *
     * <code>UNIT_MEGABYTES = 15;</code>
     */
    UNIT_MEGABYTES(15),
    /**
     * <pre>
     * Gigabytes (GB).
     * </pre>
     *
     * <code>UNIT_GIGABYTES = 16;</code>
     */
    UNIT_GIGABYTES(16),
    /**
     * <pre>
     * Terabytes (TB)
     * </pre>
     *
     * <code>UNIT_TERABYTES = 17;</code>
     */
    UNIT_TERABYTES(17),
    /**
     * <pre>
     * Petabytes (PB).
     * </pre>
     *
     * <code>UNIT_PETABYTES = 18;</code>
     */
    UNIT_PETABYTES(18),
    /**
     * <pre>
     * Exabytes (EB).
     * </pre>
     *
     * <code>UNIT_EXABYTES = 19;</code>
     */
    UNIT_EXABYTES(19),
    /**
     * <pre>
     * Bits (IEC).
     * </pre>
     *
     * <code>UNIT_BITS_IEC = 20;</code>
     */
    UNIT_BITS_IEC(20),
    /**
     * <pre>
     * Bytes (IEC).
     * </pre>
     *
     * <code>UNIT_BYTES_IEC = 21;</code>
     */
    UNIT_BYTES_IEC(21),
    /**
     * <pre>
     * Kibibytes (KiB).
     * </pre>
     *
     * <code>UNIT_KIBIBYTES = 22;</code>
     */
    UNIT_KIBIBYTES(22),
    /**
     * <pre>
     * Mebibytes (MiB).
     * </pre>
     *
     * <code>UNIT_MEBIBYTES = 23;</code>
     */
    UNIT_MEBIBYTES(23),
    /**
     * <pre>
     * Gigibytes (GiB).
     * </pre>
     *
     * <code>UNIT_GIBIBYTES = 24;</code>
     */
    UNIT_GIBIBYTES(24),
    /**
     * <pre>
     * Tebibytes (TiB).
     * </pre>
     *
     * <code>UNIT_TEBIBYTES = 25;</code>
     */
    UNIT_TEBIBYTES(25),
    /**
     * <pre>
     * Pebibytes (PiB).
     * </pre>
     *
     * <code>UNIT_PEBIBYTES = 26;</code>
     */
    UNIT_PEBIBYTES(26),
    /**
     * <pre>
     * Exbibytes (EiB).
     * </pre>
     *
     * <code>UNIT_EXBIBYTES = 27;</code>
     */
    UNIT_EXBIBYTES(27),
    /**
     * <pre>
     * Requests per second (reqps).
     * </pre>
     *
     * <code>UNIT_REQUESTS_PER_SECOND = 28;</code>
     */
    UNIT_REQUESTS_PER_SECOND(28),
    /**
     * <pre>
     * Operations per second (ops).
     * </pre>
     *
     * <code>UNIT_OPERATIONS_PER_SECOND = 29;</code>
     */
    UNIT_OPERATIONS_PER_SECOND(29),
    /**
     * <pre>
     * Writes per second (wps).
     * </pre>
     *
     * <code>UNIT_WRITES_PER_SECOND = 30;</code>
     */
    UNIT_WRITES_PER_SECOND(30),
    /**
     * <pre>
     * Reads per second (rps).
     * </pre>
     *
     * <code>UNIT_READS_PER_SECOND = 31;</code>
     */
    UNIT_READS_PER_SECOND(31),
    /**
     * <pre>
     * Packets per second (pps).
     * </pre>
     *
     * <code>UNIT_PACKETS_PER_SECOND = 32;</code>
     */
    UNIT_PACKETS_PER_SECOND(32),
    /**
     * <pre>
     * IO operations per second (iops).
     * </pre>
     *
     * <code>UNIT_IO_OPERATIONS_PER_SECOND = 33;</code>
     */
    UNIT_IO_OPERATIONS_PER_SECOND(33),
    /**
     * <pre>
     * Counts per second (counts/sec).
     * </pre>
     *
     * <code>UNIT_COUNTS_PER_SECOND = 34;</code>
     */
    UNIT_COUNTS_PER_SECOND(34),
    /**
     * <pre>
     * Bits (SI) per second (bits/sec).
     * </pre>
     *
     * <code>UNIT_BITS_SI_PER_SECOND = 35;</code>
     */
    UNIT_BITS_SI_PER_SECOND(35),
    /**
     * <pre>
     * Bytes (SI) per second (bytes/sec).
     * </pre>
     *
     * <code>UNIT_BYTES_SI_PER_SECOND = 36;</code>
     */
    UNIT_BYTES_SI_PER_SECOND(36),
    /**
     * <pre>
     * Kilobits per second (KBits/sec).
     * </pre>
     *
     * <code>UNIT_KILOBITS_PER_SECOND = 37;</code>
     */
    UNIT_KILOBITS_PER_SECOND(37),
    /**
     * <pre>
     * Kilobytes per second (KB/sec).
     * </pre>
     *
     * <code>UNIT_KILOBYTES_PER_SECOND = 38;</code>
     */
    UNIT_KILOBYTES_PER_SECOND(38),
    /**
     * <pre>
     * Megabits per second (MBits/sec).
     * </pre>
     *
     * <code>UNIT_MEGABITS_PER_SECOND = 39;</code>
     */
    UNIT_MEGABITS_PER_SECOND(39),
    /**
     * <pre>
     * Megabytes per second (MB/sec).
     * </pre>
     *
     * <code>UNIT_MEGABYTES_PER_SECOND = 40;</code>
     */
    UNIT_MEGABYTES_PER_SECOND(40),
    /**
     * <pre>
     * Gigabits per second (GBits/sec).
     * </pre>
     *
     * <code>UNIT_GIGABITS_PER_SECOND = 41;</code>
     */
    UNIT_GIGABITS_PER_SECOND(41),
    /**
     * <pre>
     * Gigabytes per second (GB/sec).
     * </pre>
     *
     * <code>UNIT_GIGABYTES_PER_SECOND = 42;</code>
     */
    UNIT_GIGABYTES_PER_SECOND(42),
    /**
     * <pre>
     * Terabits per second (TBits/sec).
     * </pre>
     *
     * <code>UNIT_TERABITS_PER_SECOND = 43;</code>
     */
    UNIT_TERABITS_PER_SECOND(43),
    /**
     * <pre>
     * Terabytes per second (TB/sec).
     * </pre>
     *
     * <code>UNIT_TERABYTES_PER_SECOND = 44;</code>
     */
    UNIT_TERABYTES_PER_SECOND(44),
    /**
     * <pre>
     * Petabits per second (Pbits/sec).
     * </pre>
     *
     * <code>UNIT_PETABITS_PER_SECOND = 45;</code>
     */
    UNIT_PETABITS_PER_SECOND(45),
    /**
     * <pre>
     * Petabytes per second (PB/sec).
     * </pre>
     *
     * <code>UNIT_PETABYTES_PER_SECOND = 46;</code>
     */
    UNIT_PETABYTES_PER_SECOND(46),
    /**
     * <pre>
     * Bits (IEC) per second (bits/sec).
     * </pre>
     *
     * <code>UNIT_BITS_IEC_PER_SECOND = 47;</code>
     */
    UNIT_BITS_IEC_PER_SECOND(47),
    /**
     * <pre>
     * Bytes (IEC) per second (bytes/sec).
     * </pre>
     *
     * <code>UNIT_BYTES_IEC_PER_SECOND = 48;</code>
     */
    UNIT_BYTES_IEC_PER_SECOND(48),
    /**
     * <pre>
     * Kibibits per second (KiBits/sec).
     * </pre>
     *
     * <code>UNIT_KIBIBITS_PER_SECOND = 49;</code>
     */
    UNIT_KIBIBITS_PER_SECOND(49),
    /**
     * <pre>
     * Kibibytes per second (KiB/sec).
     * </pre>
     *
     * <code>UNIT_KIBIBYTES_PER_SECOND = 50;</code>
     */
    UNIT_KIBIBYTES_PER_SECOND(50),
    /**
     * <pre>
     * Mebibits per second (MiBits/sec).
     * </pre>
     *
     * <code>UNIT_MEBIBITS_PER_SECOND = 51;</code>
     */
    UNIT_MEBIBITS_PER_SECOND(51),
    /**
     * <pre>
     * Mebibytes per second (MiB/sec).
     * </pre>
     *
     * <code>UNIT_MEBIBYTES_PER_SECOND = 52;</code>
     */
    UNIT_MEBIBYTES_PER_SECOND(52),
    /**
     * <pre>
     * Gibibits per second (GiBits/sec).
     * </pre>
     *
     * <code>UNIT_GIBIBITS_PER_SECOND = 53;</code>
     */
    UNIT_GIBIBITS_PER_SECOND(53),
    /**
     * <pre>
     * Gibibytes per second (GiB/sec).
     * </pre>
     *
     * <code>UNIT_GIBIBYTES_PER_SECOND = 54;</code>
     */
    UNIT_GIBIBYTES_PER_SECOND(54),
    /**
     * <pre>
     * Tebibits per second (TiBits/sec).
     * </pre>
     *
     * <code>UNIT_TEBIBITS_PER_SECOND = 55;</code>
     */
    UNIT_TEBIBITS_PER_SECOND(55),
    /**
     * <pre>
     * Tebibytes per second (TiB/sec).
     * </pre>
     *
     * <code>UNIT_TEBIBYTES_PER_SECOND = 56;</code>
     */
    UNIT_TEBIBYTES_PER_SECOND(56),
    /**
     * <pre>
     * Pebibits per second (PiBits/sec).
     * </pre>
     *
     * <code>UNIT_PEBIBITS_PER_SECOND = 57;</code>
     */
    UNIT_PEBIBITS_PER_SECOND(57),
    /**
     * <pre>
     * Pebibytes per second (PiB/sec).
     * </pre>
     *
     * <code>UNIT_PEBIBYTES_PER_SECOND = 58;</code>
     */
    UNIT_PEBIBYTES_PER_SECOND(58),
    /**
     * <pre>
     * Datetime (UTC).
     * </pre>
     *
     * <code>UNIT_DATETIME_UTC = 59;</code>
     */
    UNIT_DATETIME_UTC(59),
    /**
     * <pre>
     * Datetime (local).
     * </pre>
     *
     * <code>UNIT_DATETIME_LOCAL = 60;</code>
     */
    UNIT_DATETIME_LOCAL(60),
    /**
     * <pre>
     * Hertz (Hz).
     * </pre>
     *
     * <code>UNIT_HERTZ = 61;</code>
     */
    UNIT_HERTZ(61),
    /**
     * <pre>
     * Kilohertz (KHz).
     * </pre>
     *
     * <code>UNIT_KILOHERTZ = 62;</code>
     */
    UNIT_KILOHERTZ(62),
    /**
     * <pre>
     * Megahertz (MHz).
     * </pre>
     *
     * <code>UNIT_MEGAHERTZ = 63;</code>
     */
    UNIT_MEGAHERTZ(63),
    /**
     * <pre>
     * Gigahertz (GHz).
     * </pre>
     *
     * <code>UNIT_GIGAHERTZ = 64;</code>
     */
    UNIT_GIGAHERTZ(64),
    /**
     * <pre>
     * Dollar.
     * </pre>
     *
     * <code>UNIT_DOLLAR = 65;</code>
     */
    UNIT_DOLLAR(65),
    /**
     * <pre>
     * Euro.
     * </pre>
     *
     * <code>UNIT_EURO = 66;</code>
     */
    UNIT_EURO(66),
    /**
     * <pre>
     * Rouble.
     * </pre>
     *
     * <code>UNIT_ROUBLE = 67;</code>
     */
    UNIT_ROUBLE(67),
    /**
     * <pre>
     * Celsius (Â°C).
     * </pre>
     *
     * <code>UNIT_CELSIUS = 68;</code>
     */
    UNIT_CELSIUS(68),
    /**
     * <pre>
     * Fahrenheit (Â°F).
     * </pre>
     *
     * <code>UNIT_FAHRENHEIT = 69;</code>
     */
    UNIT_FAHRENHEIT(69),
    /**
     * <pre>
     * Kelvin (K).
     * </pre>
     *
     * <code>UNIT_KELVIN = 70;</code>
     */
    UNIT_KELVIN(70),
    /**
     * <pre>
     * Flop per second (FLOP/sec).
     * </pre>
     *
     * <code>UNIT_FLOP_PER_SECOND = 71;</code>
     */
    UNIT_FLOP_PER_SECOND(71),
    /**
     * <pre>
     * Kiloflop per second (KFLOP/sec).
     * </pre>
     *
     * <code>UNIT_KILOFLOP_PER_SECOND = 72;</code>
     */
    UNIT_KILOFLOP_PER_SECOND(72),
    /**
     * <pre>
     * Megaflop per second (MFLOP/sec).
     * </pre>
     *
     * <code>UNIT_MEGAFLOP_PER_SECOND = 73;</code>
     */
    UNIT_MEGAFLOP_PER_SECOND(73),
    /**
     * <pre>
     * Gigaflop per second (GFLOP/sec).
     * </pre>
     *
     * <code>UNIT_GIGAFLOP_PER_SECOND = 74;</code>
     */
    UNIT_GIGAFLOP_PER_SECOND(74),
    /**
     * <pre>
     * Petaflop per second (PFLOP/sec).
     * </pre>
     *
     * <code>UNIT_PETAFLOP_PER_SECOND = 75;</code>
     */
    UNIT_PETAFLOP_PER_SECOND(75),
    /**
     * <pre>
     * Exaflop per second (EFLOP/sec).
     * </pre>
     *
     * <code>UNIT_EXAFLOP_PER_SECOND = 76;</code>
     */
    UNIT_EXAFLOP_PER_SECOND(76),
    /**
     * <pre>
     * Meters per second (m/sec).
     * </pre>
     *
     * <code>UNIT_METERS_PER_SECOND = 77;</code>
     */
    UNIT_METERS_PER_SECOND(77),
    /**
     * <pre>
     * Kilometers per hour (km/h).
     * </pre>
     *
     * <code>UNIT_KILOMETERS_PER_HOUR = 78;</code>
     */
    UNIT_KILOMETERS_PER_HOUR(78),
    /**
     * <pre>
     * Miles per hour (mi/h).
     * </pre>
     *
     * <code>UNIT_MILES_PER_HOUR = 79;</code>
     */
    UNIT_MILES_PER_HOUR(79),
    /**
     * <pre>
     * Millimeter.
     * </pre>
     *
     * <code>UNIT_MILLIMETER = 80;</code>
     */
    UNIT_MILLIMETER(80),
    /**
     * <pre>
     * Centimeter.
     * </pre>
     *
     * <code>UNIT_CENTIMETER = 81;</code>
     */
    UNIT_CENTIMETER(81),
    /**
     * <pre>
     * Meter.
     * </pre>
     *
     * <code>UNIT_METER = 82;</code>
     */
    UNIT_METER(82),
    /**
     * <pre>
     * Kilometer.
     * </pre>
     *
     * <code>UNIT_KILOMETER = 83;</code>
     */
    UNIT_KILOMETER(83),
    /**
     * <pre>
     * Mile.
     * </pre>
     *
     * <code>UNIT_MILE = 84;</code>
     */
    UNIT_MILE(84),
    /**
     * <pre>
     * Parts per million (ppm).
     * </pre>
     *
     * <code>UNIT_PPM = 85;</code>
     */
    UNIT_PPM(85),
    /**
     * <pre>
     * Events per second
     * </pre>
     *
     * <code>UNIT_EVENTS_PER_SECOND = 86;</code>
     */
    UNIT_EVENTS_PER_SECOND(86),
    /**
     * <pre>
     * Packets
     * </pre>
     *
     * <code>UNIT_PACKETS = 87;</code>
     */
    UNIT_PACKETS(87),
    /**
     * <pre>
     * dBm (dbm)
     * </pre>
     *
     * <code>UNIT_DBM = 88;</code>
     */
    UNIT_DBM(88),
    /**
     * <pre>
     * Virtual CPU cores based on CPU time (vcpu)
     * </pre>
     *
     * <code>UNIT_VIRTUAL_CPU = 89;</code>
     */
    UNIT_VIRTUAL_CPU(89),
    /**
     * <pre>
     * Messages per second (mps)
     * </pre>
     *
     * <code>UNIT_MESSAGES_PER_SECOND = 90;</code>
     */
    UNIT_MESSAGES_PER_SECOND(90),
    /**
     * <pre>
     * == UNIT_VIRTUAL_CPU
     * </pre>
     *
     * <code>UNIT_NANOCORE_CPU = 91;</code>
     */
    UNIT_NANOCORE_CPU(91),
    /**
     * <pre>
     * == 1000 UNIT_NANOCORE_CPU
     * </pre>
     *
     * <code>UNIT_MICROCORE_CPU = 92;</code>
     */
    UNIT_MICROCORE_CPU(92),
    /**
     * <pre>
     * == 1000 UNIT_MICROCORE_CPU
     * </pre>
     *
     * <code>UNIT_MILLICORE_CPU = 93;</code>
     */
    UNIT_MILLICORE_CPU(93),
    /**
     * <pre>
     * == 1000 UNIT_MILLICORE_CPU
     * </pre>
     *
     * <code>UNIT_CORE_CPU = 94;</code>
     */
    UNIT_CORE_CPU(94),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>UNIT_FORMAT_UNSPECIFIED = 0;</code>
     */
    public static final int UNIT_FORMAT_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * None (show tick values as-is).
     * </pre>
     *
     * <code>UNIT_NONE = 1;</code>
     */
    public static final int UNIT_NONE_VALUE = 1;
    /**
     * <pre>
     * Count.
     * </pre>
     *
     * <code>UNIT_COUNT = 2;</code>
     */
    public static final int UNIT_COUNT_VALUE = 2;
    /**
     * <pre>
     * Percent (0-100).
     * </pre>
     *
     * <code>UNIT_PERCENT = 3;</code>
     */
    public static final int UNIT_PERCENT_VALUE = 3;
    /**
     * <pre>
     * Percent (0-1).
     * </pre>
     *
     * <code>UNIT_PERCENT_UNIT = 4;</code>
     */
    public static final int UNIT_PERCENT_UNIT_VALUE = 4;
    /**
     * <pre>
     * Nanoseconds (ns).
     * </pre>
     *
     * <code>UNIT_NANOSECONDS = 5;</code>
     */
    public static final int UNIT_NANOSECONDS_VALUE = 5;
    /**
     * <pre>
     * Microseconds (Âµs).
     * </pre>
     *
     * <code>UNIT_MICROSECONDS = 6;</code>
     */
    public static final int UNIT_MICROSECONDS_VALUE = 6;
    /**
     * <pre>
     * Milliseconds (ms).
     * </pre>
     *
     * <code>UNIT_MILLISECONDS = 7;</code>
     */
    public static final int UNIT_MILLISECONDS_VALUE = 7;
    /**
     * <pre>
     * Seconds (s).
     * </pre>
     *
     * <code>UNIT_SECONDS = 8;</code>
     */
    public static final int UNIT_SECONDS_VALUE = 8;
    /**
     * <pre>
     * Minutes (m).
     * </pre>
     *
     * <code>UNIT_MINUTES = 9;</code>
     */
    public static final int UNIT_MINUTES_VALUE = 9;
    /**
     * <pre>
     * Hours (h).
     * </pre>
     *
     * <code>UNIT_HOURS = 10;</code>
     */
    public static final int UNIT_HOURS_VALUE = 10;
    /**
     * <pre>
     * Days (d).
     * </pre>
     *
     * <code>UNIT_DAYS = 11;</code>
     */
    public static final int UNIT_DAYS_VALUE = 11;
    /**
     * <pre>
     * Bits (SI).
     * </pre>
     *
     * <code>UNIT_BITS_SI = 12;</code>
     */
    public static final int UNIT_BITS_SI_VALUE = 12;
    /**
     * <pre>
     * Bytes (SI).
     * </pre>
     *
     * <code>UNIT_BYTES_SI = 13;</code>
     */
    public static final int UNIT_BYTES_SI_VALUE = 13;
    /**
     * <pre>
     * Kilobytes (KB).
     * </pre>
     *
     * <code>UNIT_KILOBYTES = 14;</code>
     */
    public static final int UNIT_KILOBYTES_VALUE = 14;
    /**
     * <pre>
     * Megabytes (MB).
     * </pre>
     *
     * <code>UNIT_MEGABYTES = 15;</code>
     */
    public static final int UNIT_MEGABYTES_VALUE = 15;
    /**
     * <pre>
     * Gigabytes (GB).
     * </pre>
     *
     * <code>UNIT_GIGABYTES = 16;</code>
     */
    public static final int UNIT_GIGABYTES_VALUE = 16;
    /**
     * <pre>
     * Terabytes (TB)
     * </pre>
     *
     * <code>UNIT_TERABYTES = 17;</code>
     */
    public static final int UNIT_TERABYTES_VALUE = 17;
    /**
     * <pre>
     * Petabytes (PB).
     * </pre>
     *
     * <code>UNIT_PETABYTES = 18;</code>
     */
    public static final int UNIT_PETABYTES_VALUE = 18;
    /**
     * <pre>
     * Exabytes (EB).
     * </pre>
     *
     * <code>UNIT_EXABYTES = 19;</code>
     */
    public static final int UNIT_EXABYTES_VALUE = 19;
    /**
     * <pre>
     * Bits (IEC).
     * </pre>
     *
     * <code>UNIT_BITS_IEC = 20;</code>
     */
    public static final int UNIT_BITS_IEC_VALUE = 20;
    /**
     * <pre>
     * Bytes (IEC).
     * </pre>
     *
     * <code>UNIT_BYTES_IEC = 21;</code>
     */
    public static final int UNIT_BYTES_IEC_VALUE = 21;
    /**
     * <pre>
     * Kibibytes (KiB).
     * </pre>
     *
     * <code>UNIT_KIBIBYTES = 22;</code>
     */
    public static final int UNIT_KIBIBYTES_VALUE = 22;
    /**
     * <pre>
     * Mebibytes (MiB).
     * </pre>
     *
     * <code>UNIT_MEBIBYTES = 23;</code>
     */
    public static final int UNIT_MEBIBYTES_VALUE = 23;
    /**
     * <pre>
     * Gigibytes (GiB).
     * </pre>
     *
     * <code>UNIT_GIBIBYTES = 24;</code>
     */
    public static final int UNIT_GIBIBYTES_VALUE = 24;
    /**
     * <pre>
     * Tebibytes (TiB).
     * </pre>
     *
     * <code>UNIT_TEBIBYTES = 25;</code>
     */
    public static final int UNIT_TEBIBYTES_VALUE = 25;
    /**
     * <pre>
     * Pebibytes (PiB).
     * </pre>
     *
     * <code>UNIT_PEBIBYTES = 26;</code>
     */
    public static final int UNIT_PEBIBYTES_VALUE = 26;
    /**
     * <pre>
     * Exbibytes (EiB).
     * </pre>
     *
     * <code>UNIT_EXBIBYTES = 27;</code>
     */
    public static final int UNIT_EXBIBYTES_VALUE = 27;
    /**
     * <pre>
     * Requests per second (reqps).
     * </pre>
     *
     * <code>UNIT_REQUESTS_PER_SECOND = 28;</code>
     */
    public static final int UNIT_REQUESTS_PER_SECOND_VALUE = 28;
    /**
     * <pre>
     * Operations per second (ops).
     * </pre>
     *
     * <code>UNIT_OPERATIONS_PER_SECOND = 29;</code>
     */
    public static final int UNIT_OPERATIONS_PER_SECOND_VALUE = 29;
    /**
     * <pre>
     * Writes per second (wps).
     * </pre>
     *
     * <code>UNIT_WRITES_PER_SECOND = 30;</code>
     */
    public static final int UNIT_WRITES_PER_SECOND_VALUE = 30;
    /**
     * <pre>
     * Reads per second (rps).
     * </pre>
     *
     * <code>UNIT_READS_PER_SECOND = 31;</code>
     */
    public static final int UNIT_READS_PER_SECOND_VALUE = 31;
    /**
     * <pre>
     * Packets per second (pps).
     * </pre>
     *
     * <code>UNIT_PACKETS_PER_SECOND = 32;</code>
     */
    public static final int UNIT_PACKETS_PER_SECOND_VALUE = 32;
    /**
     * <pre>
     * IO operations per second (iops).
     * </pre>
     *
     * <code>UNIT_IO_OPERATIONS_PER_SECOND = 33;</code>
     */
    public static final int UNIT_IO_OPERATIONS_PER_SECOND_VALUE = 33;
    /**
     * <pre>
     * Counts per second (counts/sec).
     * </pre>
     *
     * <code>UNIT_COUNTS_PER_SECOND = 34;</code>
     */
    public static final int UNIT_COUNTS_PER_SECOND_VALUE = 34;
    /**
     * <pre>
     * Bits (SI) per second (bits/sec).
     * </pre>
     *
     * <code>UNIT_BITS_SI_PER_SECOND = 35;</code>
     */
    public static final int UNIT_BITS_SI_PER_SECOND_VALUE = 35;
    /**
     * <pre>
     * Bytes (SI) per second (bytes/sec).
     * </pre>
     *
     * <code>UNIT_BYTES_SI_PER_SECOND = 36;</code>
     */
    public static final int UNIT_BYTES_SI_PER_SECOND_VALUE = 36;
    /**
     * <pre>
     * Kilobits per second (KBits/sec).
     * </pre>
     *
     * <code>UNIT_KILOBITS_PER_SECOND = 37;</code>
     */
    public static final int UNIT_KILOBITS_PER_SECOND_VALUE = 37;
    /**
     * <pre>
     * Kilobytes per second (KB/sec).
     * </pre>
     *
     * <code>UNIT_KILOBYTES_PER_SECOND = 38;</code>
     */
    public static final int UNIT_KILOBYTES_PER_SECOND_VALUE = 38;
    /**
     * <pre>
     * Megabits per second (MBits/sec).
     * </pre>
     *
     * <code>UNIT_MEGABITS_PER_SECOND = 39;</code>
     */
    public static final int UNIT_MEGABITS_PER_SECOND_VALUE = 39;
    /**
     * <pre>
     * Megabytes per second (MB/sec).
     * </pre>
     *
     * <code>UNIT_MEGABYTES_PER_SECOND = 40;</code>
     */
    public static final int UNIT_MEGABYTES_PER_SECOND_VALUE = 40;
    /**
     * <pre>
     * Gigabits per second (GBits/sec).
     * </pre>
     *
     * <code>UNIT_GIGABITS_PER_SECOND = 41;</code>
     */
    public static final int UNIT_GIGABITS_PER_SECOND_VALUE = 41;
    /**
     * <pre>
     * Gigabytes per second (GB/sec).
     * </pre>
     *
     * <code>UNIT_GIGABYTES_PER_SECOND = 42;</code>
     */
    public static final int UNIT_GIGABYTES_PER_SECOND_VALUE = 42;
    /**
     * <pre>
     * Terabits per second (TBits/sec).
     * </pre>
     *
     * <code>UNIT_TERABITS_PER_SECOND = 43;</code>
     */
    public static final int UNIT_TERABITS_PER_SECOND_VALUE = 43;
    /**
     * <pre>
     * Terabytes per second (TB/sec).
     * </pre>
     *
     * <code>UNIT_TERABYTES_PER_SECOND = 44;</code>
     */
    public static final int UNIT_TERABYTES_PER_SECOND_VALUE = 44;
    /**
     * <pre>
     * Petabits per second (Pbits/sec).
     * </pre>
     *
     * <code>UNIT_PETABITS_PER_SECOND = 45;</code>
     */
    public static final int UNIT_PETABITS_PER_SECOND_VALUE = 45;
    /**
     * <pre>
     * Petabytes per second (PB/sec).
     * </pre>
     *
     * <code>UNIT_PETABYTES_PER_SECOND = 46;</code>
     */
    public static final int UNIT_PETABYTES_PER_SECOND_VALUE = 46;
    /**
     * <pre>
     * Bits (IEC) per second (bits/sec).
     * </pre>
     *
     * <code>UNIT_BITS_IEC_PER_SECOND = 47;</code>
     */
    public static final int UNIT_BITS_IEC_PER_SECOND_VALUE = 47;
    /**
     * <pre>
     * Bytes (IEC) per second (bytes/sec).
     * </pre>
     *
     * <code>UNIT_BYTES_IEC_PER_SECOND = 48;</code>
     */
    public static final int UNIT_BYTES_IEC_PER_SECOND_VALUE = 48;
    /**
     * <pre>
     * Kibibits per second (KiBits/sec).
     * </pre>
     *
     * <code>UNIT_KIBIBITS_PER_SECOND = 49;</code>
     */
    public static final int UNIT_KIBIBITS_PER_SECOND_VALUE = 49;
    /**
     * <pre>
     * Kibibytes per second (KiB/sec).
     * </pre>
     *
     * <code>UNIT_KIBIBYTES_PER_SECOND = 50;</code>
     */
    public static final int UNIT_KIBIBYTES_PER_SECOND_VALUE = 50;
    /**
     * <pre>
     * Mebibits per second (MiBits/sec).
     * </pre>
     *
     * <code>UNIT_MEBIBITS_PER_SECOND = 51;</code>
     */
    public static final int UNIT_MEBIBITS_PER_SECOND_VALUE = 51;
    /**
     * <pre>
     * Mebibytes per second (MiB/sec).
     * </pre>
     *
     * <code>UNIT_MEBIBYTES_PER_SECOND = 52;</code>
     */
    public static final int UNIT_MEBIBYTES_PER_SECOND_VALUE = 52;
    /**
     * <pre>
     * Gibibits per second (GiBits/sec).
     * </pre>
     *
     * <code>UNIT_GIBIBITS_PER_SECOND = 53;</code>
     */
    public static final int UNIT_GIBIBITS_PER_SECOND_VALUE = 53;
    /**
     * <pre>
     * Gibibytes per second (GiB/sec).
     * </pre>
     *
     * <code>UNIT_GIBIBYTES_PER_SECOND = 54;</code>
     */
    public static final int UNIT_GIBIBYTES_PER_SECOND_VALUE = 54;
    /**
     * <pre>
     * Tebibits per second (TiBits/sec).
     * </pre>
     *
     * <code>UNIT_TEBIBITS_PER_SECOND = 55;</code>
     */
    public static final int UNIT_TEBIBITS_PER_SECOND_VALUE = 55;
    /**
     * <pre>
     * Tebibytes per second (TiB/sec).
     * </pre>
     *
     * <code>UNIT_TEBIBYTES_PER_SECOND = 56;</code>
     */
    public static final int UNIT_TEBIBYTES_PER_SECOND_VALUE = 56;
    /**
     * <pre>
     * Pebibits per second (PiBits/sec).
     * </pre>
     *
     * <code>UNIT_PEBIBITS_PER_SECOND = 57;</code>
     */
    public static final int UNIT_PEBIBITS_PER_SECOND_VALUE = 57;
    /**
     * <pre>
     * Pebibytes per second (PiB/sec).
     * </pre>
     *
     * <code>UNIT_PEBIBYTES_PER_SECOND = 58;</code>
     */
    public static final int UNIT_PEBIBYTES_PER_SECOND_VALUE = 58;
    /**
     * <pre>
     * Datetime (UTC).
     * </pre>
     *
     * <code>UNIT_DATETIME_UTC = 59;</code>
     */
    public static final int UNIT_DATETIME_UTC_VALUE = 59;
    /**
     * <pre>
     * Datetime (local).
     * </pre>
     *
     * <code>UNIT_DATETIME_LOCAL = 60;</code>
     */
    public static final int UNIT_DATETIME_LOCAL_VALUE = 60;
    /**
     * <pre>
     * Hertz (Hz).
     * </pre>
     *
     * <code>UNIT_HERTZ = 61;</code>
     */
    public static final int UNIT_HERTZ_VALUE = 61;
    /**
     * <pre>
     * Kilohertz (KHz).
     * </pre>
     *
     * <code>UNIT_KILOHERTZ = 62;</code>
     */
    public static final int UNIT_KILOHERTZ_VALUE = 62;
    /**
     * <pre>
     * Megahertz (MHz).
     * </pre>
     *
     * <code>UNIT_MEGAHERTZ = 63;</code>
     */
    public static final int UNIT_MEGAHERTZ_VALUE = 63;
    /**
     * <pre>
     * Gigahertz (GHz).
     * </pre>
     *
     * <code>UNIT_GIGAHERTZ = 64;</code>
     */
    public static final int UNIT_GIGAHERTZ_VALUE = 64;
    /**
     * <pre>
     * Dollar.
     * </pre>
     *
     * <code>UNIT_DOLLAR = 65;</code>
     */
    public static final int UNIT_DOLLAR_VALUE = 65;
    /**
     * <pre>
     * Euro.
     * </pre>
     *
     * <code>UNIT_EURO = 66;</code>
     */
    public static final int UNIT_EURO_VALUE = 66;
    /**
     * <pre>
     * Rouble.
     * </pre>
     *
     * <code>UNIT_ROUBLE = 67;</code>
     */
    public static final int UNIT_ROUBLE_VALUE = 67;
    /**
     * <pre>
     * Celsius (Â°C).
     * </pre>
     *
     * <code>UNIT_CELSIUS = 68;</code>
     */
    public static final int UNIT_CELSIUS_VALUE = 68;
    /**
     * <pre>
     * Fahrenheit (Â°F).
     * </pre>
     *
     * <code>UNIT_FAHRENHEIT = 69;</code>
     */
    public static final int UNIT_FAHRENHEIT_VALUE = 69;
    /**
     * <pre>
     * Kelvin (K).
     * </pre>
     *
     * <code>UNIT_KELVIN = 70;</code>
     */
    public static final int UNIT_KELVIN_VALUE = 70;
    /**
     * <pre>
     * Flop per second (FLOP/sec).
     * </pre>
     *
     * <code>UNIT_FLOP_PER_SECOND = 71;</code>
     */
    public static final int UNIT_FLOP_PER_SECOND_VALUE = 71;
    /**
     * <pre>
     * Kiloflop per second (KFLOP/sec).
     * </pre>
     *
     * <code>UNIT_KILOFLOP_PER_SECOND = 72;</code>
     */
    public static final int UNIT_KILOFLOP_PER_SECOND_VALUE = 72;
    /**
     * <pre>
     * Megaflop per second (MFLOP/sec).
     * </pre>
     *
     * <code>UNIT_MEGAFLOP_PER_SECOND = 73;</code>
     */
    public static final int UNIT_MEGAFLOP_PER_SECOND_VALUE = 73;
    /**
     * <pre>
     * Gigaflop per second (GFLOP/sec).
     * </pre>
     *
     * <code>UNIT_GIGAFLOP_PER_SECOND = 74;</code>
     */
    public static final int UNIT_GIGAFLOP_PER_SECOND_VALUE = 74;
    /**
     * <pre>
     * Petaflop per second (PFLOP/sec).
     * </pre>
     *
     * <code>UNIT_PETAFLOP_PER_SECOND = 75;</code>
     */
    public static final int UNIT_PETAFLOP_PER_SECOND_VALUE = 75;
    /**
     * <pre>
     * Exaflop per second (EFLOP/sec).
     * </pre>
     *
     * <code>UNIT_EXAFLOP_PER_SECOND = 76;</code>
     */
    public static final int UNIT_EXAFLOP_PER_SECOND_VALUE = 76;
    /**
     * <pre>
     * Meters per second (m/sec).
     * </pre>
     *
     * <code>UNIT_METERS_PER_SECOND = 77;</code>
     */
    public static final int UNIT_METERS_PER_SECOND_VALUE = 77;
    /**
     * <pre>
     * Kilometers per hour (km/h).
     * </pre>
     *
     * <code>UNIT_KILOMETERS_PER_HOUR = 78;</code>
     */
    public static final int UNIT_KILOMETERS_PER_HOUR_VALUE = 78;
    /**
     * <pre>
     * Miles per hour (mi/h).
     * </pre>
     *
     * <code>UNIT_MILES_PER_HOUR = 79;</code>
     */
    public static final int UNIT_MILES_PER_HOUR_VALUE = 79;
    /**
     * <pre>
     * Millimeter.
     * </pre>
     *
     * <code>UNIT_MILLIMETER = 80;</code>
     */
    public static final int UNIT_MILLIMETER_VALUE = 80;
    /**
     * <pre>
     * Centimeter.
     * </pre>
     *
     * <code>UNIT_CENTIMETER = 81;</code>
     */
    public static final int UNIT_CENTIMETER_VALUE = 81;
    /**
     * <pre>
     * Meter.
     * </pre>
     *
     * <code>UNIT_METER = 82;</code>
     */
    public static final int UNIT_METER_VALUE = 82;
    /**
     * <pre>
     * Kilometer.
     * </pre>
     *
     * <code>UNIT_KILOMETER = 83;</code>
     */
    public static final int UNIT_KILOMETER_VALUE = 83;
    /**
     * <pre>
     * Mile.
     * </pre>
     *
     * <code>UNIT_MILE = 84;</code>
     */
    public static final int UNIT_MILE_VALUE = 84;
    /**
     * <pre>
     * Parts per million (ppm).
     * </pre>
     *
     * <code>UNIT_PPM = 85;</code>
     */
    public static final int UNIT_PPM_VALUE = 85;
    /**
     * <pre>
     * Events per second
     * </pre>
     *
     * <code>UNIT_EVENTS_PER_SECOND = 86;</code>
     */
    public static final int UNIT_EVENTS_PER_SECOND_VALUE = 86;
    /**
     * <pre>
     * Packets
     * </pre>
     *
     * <code>UNIT_PACKETS = 87;</code>
     */
    public static final int UNIT_PACKETS_VALUE = 87;
    /**
     * <pre>
     * dBm (dbm)
     * </pre>
     *
     * <code>UNIT_DBM = 88;</code>
     */
    public static final int UNIT_DBM_VALUE = 88;
    /**
     * <pre>
     * Virtual CPU cores based on CPU time (vcpu)
     * </pre>
     *
     * <code>UNIT_VIRTUAL_CPU = 89;</code>
     */
    public static final int UNIT_VIRTUAL_CPU_VALUE = 89;
    /**
     * <pre>
     * Messages per second (mps)
     * </pre>
     *
     * <code>UNIT_MESSAGES_PER_SECOND = 90;</code>
     */
    public static final int UNIT_MESSAGES_PER_SECOND_VALUE = 90;
    /**
     * <pre>
     * == UNIT_VIRTUAL_CPU
     * </pre>
     *
     * <code>UNIT_NANOCORE_CPU = 91;</code>
     */
    public static final int UNIT_NANOCORE_CPU_VALUE = 91;
    /**
     * <pre>
     * == 1000 UNIT_NANOCORE_CPU
     * </pre>
     *
     * <code>UNIT_MICROCORE_CPU = 92;</code>
     */
    public static final int UNIT_MICROCORE_CPU_VALUE = 92;
    /**
     * <pre>
     * == 1000 UNIT_MICROCORE_CPU
     * </pre>
     *
     * <code>UNIT_MILLICORE_CPU = 93;</code>
     */
    public static final int UNIT_MILLICORE_CPU_VALUE = 93;
    /**
     * <pre>
     * == 1000 UNIT_MILLICORE_CPU
     * </pre>
     *
     * <code>UNIT_CORE_CPU = 94;</code>
     */
    public static final int UNIT_CORE_CPU_VALUE = 94;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static UnitFormat valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static UnitFormat forNumber(int value) {
      switch (value) {
        case 0: return UNIT_FORMAT_UNSPECIFIED;
        case 1: return UNIT_NONE;
        case 2: return UNIT_COUNT;
        case 3: return UNIT_PERCENT;
        case 4: return UNIT_PERCENT_UNIT;
        case 5: return UNIT_NANOSECONDS;
        case 6: return UNIT_MICROSECONDS;
        case 7: return UNIT_MILLISECONDS;
        case 8: return UNIT_SECONDS;
        case 9: return UNIT_MINUTES;
        case 10: return UNIT_HOURS;
        case 11: return UNIT_DAYS;
        case 12: return UNIT_BITS_SI;
        case 13: return UNIT_BYTES_SI;
        case 14: return UNIT_KILOBYTES;
        case 15: return UNIT_MEGABYTES;
        case 16: return UNIT_GIGABYTES;
        case 17: return UNIT_TERABYTES;
        case 18: return UNIT_PETABYTES;
        case 19: return UNIT_EXABYTES;
        case 20: return UNIT_BITS_IEC;
        case 21: return UNIT_BYTES_IEC;
        case 22: return UNIT_KIBIBYTES;
        case 23: return UNIT_MEBIBYTES;
        case 24: return UNIT_GIBIBYTES;
        case 25: return UNIT_TEBIBYTES;
        case 26: return UNIT_PEBIBYTES;
        case 27: return UNIT_EXBIBYTES;
        case 28: return UNIT_REQUESTS_PER_SECOND;
        case 29: return UNIT_OPERATIONS_PER_SECOND;
        case 30: return UNIT_WRITES_PER_SECOND;
        case 31: return UNIT_READS_PER_SECOND;
        case 32: return UNIT_PACKETS_PER_SECOND;
        case 33: return UNIT_IO_OPERATIONS_PER_SECOND;
        case 34: return UNIT_COUNTS_PER_SECOND;
        case 35: return UNIT_BITS_SI_PER_SECOND;
        case 36: return UNIT_BYTES_SI_PER_SECOND;
        case 37: return UNIT_KILOBITS_PER_SECOND;
        case 38: return UNIT_KILOBYTES_PER_SECOND;
        case 39: return UNIT_MEGABITS_PER_SECOND;
        case 40: return UNIT_MEGABYTES_PER_SECOND;
        case 41: return UNIT_GIGABITS_PER_SECOND;
        case 42: return UNIT_GIGABYTES_PER_SECOND;
        case 43: return UNIT_TERABITS_PER_SECOND;
        case 44: return UNIT_TERABYTES_PER_SECOND;
        case 45: return UNIT_PETABITS_PER_SECOND;
        case 46: return UNIT_PETABYTES_PER_SECOND;
        case 47: return UNIT_BITS_IEC_PER_SECOND;
        case 48: return UNIT_BYTES_IEC_PER_SECOND;
        case 49: return UNIT_KIBIBITS_PER_SECOND;
        case 50: return UNIT_KIBIBYTES_PER_SECOND;
        case 51: return UNIT_MEBIBITS_PER_SECOND;
        case 52: return UNIT_MEBIBYTES_PER_SECOND;
        case 53: return UNIT_GIBIBITS_PER_SECOND;
        case 54: return UNIT_GIBIBYTES_PER_SECOND;
        case 55: return UNIT_TEBIBITS_PER_SECOND;
        case 56: return UNIT_TEBIBYTES_PER_SECOND;
        case 57: return UNIT_PEBIBITS_PER_SECOND;
        case 58: return UNIT_PEBIBYTES_PER_SECOND;
        case 59: return UNIT_DATETIME_UTC;
        case 60: return UNIT_DATETIME_LOCAL;
        case 61: return UNIT_HERTZ;
        case 62: return UNIT_KILOHERTZ;
        case 63: return UNIT_MEGAHERTZ;
        case 64: return UNIT_GIGAHERTZ;
        case 65: return UNIT_DOLLAR;
        case 66: return UNIT_EURO;
        case 67: return UNIT_ROUBLE;
        case 68: return UNIT_CELSIUS;
        case 69: return UNIT_FAHRENHEIT;
        case 70: return UNIT_KELVIN;
        case 71: return UNIT_FLOP_PER_SECOND;
        case 72: return UNIT_KILOFLOP_PER_SECOND;
        case 73: return UNIT_MEGAFLOP_PER_SECOND;
        case 74: return UNIT_GIGAFLOP_PER_SECOND;
        case 75: return UNIT_PETAFLOP_PER_SECOND;
        case 76: return UNIT_EXAFLOP_PER_SECOND;
        case 77: return UNIT_METERS_PER_SECOND;
        case 78: return UNIT_KILOMETERS_PER_HOUR;
        case 79: return UNIT_MILES_PER_HOUR;
        case 80: return UNIT_MILLIMETER;
        case 81: return UNIT_CENTIMETER;
        case 82: return UNIT_METER;
        case 83: return UNIT_KILOMETER;
        case 84: return UNIT_MILE;
        case 85: return UNIT_PPM;
        case 86: return UNIT_EVENTS_PER_SECOND;
        case 87: return UNIT_PACKETS;
        case 88: return UNIT_DBM;
        case 89: return UNIT_VIRTUAL_CPU;
        case 90: return UNIT_MESSAGES_PER_SECOND;
        case 91: return UNIT_NANOCORE_CPU;
        case 92: return UNIT_MICROCORE_CPU;
        case 93: return UNIT_MILLICORE_CPU;
        case 94: return UNIT_CORE_CPU;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<UnitFormat>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        UnitFormat> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<UnitFormat>() {
            public UnitFormat findValueByNumber(int number) {
              return UnitFormat.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return yandex.cloud.api.monitoring.v3.UnitFormatOuterClass.getDescriptor().getEnumTypes().get(0);
    }

    private static final UnitFormat[] VALUES = values();

    public static UnitFormat valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private UnitFormat(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:yandex.cloud.monitoring.v3.UnitFormat)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n,yandex/cloud/monitoring/v3/unit_format" +
      ".proto\022\032yandex.cloud.monitoring.v3*\372\021\n\nU" +
      "nitFormat\022\033\n\027UNIT_FORMAT_UNSPECIFIED\020\000\022\r" +
      "\n\tUNIT_NONE\020\001\022\016\n\nUNIT_COUNT\020\002\022\020\n\014UNIT_PE" +
      "RCENT\020\003\022\025\n\021UNIT_PERCENT_UNIT\020\004\022\024\n\020UNIT_N" +
      "ANOSECONDS\020\005\022\025\n\021UNIT_MICROSECONDS\020\006\022\025\n\021U" +
      "NIT_MILLISECONDS\020\007\022\020\n\014UNIT_SECONDS\020\010\022\020\n\014" +
      "UNIT_MINUTES\020\t\022\016\n\nUNIT_HOURS\020\n\022\r\n\tUNIT_D" +
      "AYS\020\013\022\020\n\014UNIT_BITS_SI\020\014\022\021\n\rUNIT_BYTES_SI" +
      "\020\r\022\022\n\016UNIT_KILOBYTES\020\016\022\022\n\016UNIT_MEGABYTES" +
      "\020\017\022\022\n\016UNIT_GIGABYTES\020\020\022\022\n\016UNIT_TERABYTES" +
      "\020\021\022\022\n\016UNIT_PETABYTES\020\022\022\021\n\rUNIT_EXABYTES\020" +
      "\023\022\021\n\rUNIT_BITS_IEC\020\024\022\022\n\016UNIT_BYTES_IEC\020\025" +
      "\022\022\n\016UNIT_KIBIBYTES\020\026\022\022\n\016UNIT_MEBIBYTES\020\027" +
      "\022\022\n\016UNIT_GIBIBYTES\020\030\022\022\n\016UNIT_TEBIBYTES\020\031" +
      "\022\022\n\016UNIT_PEBIBYTES\020\032\022\022\n\016UNIT_EXBIBYTES\020\033" +
      "\022\034\n\030UNIT_REQUESTS_PER_SECOND\020\034\022\036\n\032UNIT_O" +
      "PERATIONS_PER_SECOND\020\035\022\032\n\026UNIT_WRITES_PE" +
      "R_SECOND\020\036\022\031\n\025UNIT_READS_PER_SECOND\020\037\022\033\n" +
      "\027UNIT_PACKETS_PER_SECOND\020 \022!\n\035UNIT_IO_OP" +
      "ERATIONS_PER_SECOND\020!\022\032\n\026UNIT_COUNTS_PER" +
      "_SECOND\020\"\022\033\n\027UNIT_BITS_SI_PER_SECOND\020#\022\034" +
      "\n\030UNIT_BYTES_SI_PER_SECOND\020$\022\034\n\030UNIT_KIL" +
      "OBITS_PER_SECOND\020%\022\035\n\031UNIT_KILOBYTES_PER" +
      "_SECOND\020&\022\034\n\030UNIT_MEGABITS_PER_SECOND\020\'\022" +
      "\035\n\031UNIT_MEGABYTES_PER_SECOND\020(\022\034\n\030UNIT_G" +
      "IGABITS_PER_SECOND\020)\022\035\n\031UNIT_GIGABYTES_P" +
      "ER_SECOND\020*\022\034\n\030UNIT_TERABITS_PER_SECOND\020" +
      "+\022\035\n\031UNIT_TERABYTES_PER_SECOND\020,\022\034\n\030UNIT" +
      "_PETABITS_PER_SECOND\020-\022\035\n\031UNIT_PETABYTES" +
      "_PER_SECOND\020.\022\034\n\030UNIT_BITS_IEC_PER_SECON" +
      "D\020/\022\035\n\031UNIT_BYTES_IEC_PER_SECOND\0200\022\034\n\030UN" +
      "IT_KIBIBITS_PER_SECOND\0201\022\035\n\031UNIT_KIBIBYT" +
      "ES_PER_SECOND\0202\022\034\n\030UNIT_MEBIBITS_PER_SEC" +
      "OND\0203\022\035\n\031UNIT_MEBIBYTES_PER_SECOND\0204\022\034\n\030" +
      "UNIT_GIBIBITS_PER_SECOND\0205\022\035\n\031UNIT_GIBIB" +
      "YTES_PER_SECOND\0206\022\034\n\030UNIT_TEBIBITS_PER_S" +
      "ECOND\0207\022\035\n\031UNIT_TEBIBYTES_PER_SECOND\0208\022\034" +
      "\n\030UNIT_PEBIBITS_PER_SECOND\0209\022\035\n\031UNIT_PEB" +
      "IBYTES_PER_SECOND\020:\022\025\n\021UNIT_DATETIME_UTC" +
      "\020;\022\027\n\023UNIT_DATETIME_LOCAL\020<\022\016\n\nUNIT_HERT" +
      "Z\020=\022\022\n\016UNIT_KILOHERTZ\020>\022\022\n\016UNIT_MEGAHERT" +
      "Z\020?\022\022\n\016UNIT_GIGAHERTZ\020@\022\017\n\013UNIT_DOLLAR\020A" +
      "\022\r\n\tUNIT_EURO\020B\022\017\n\013UNIT_ROUBLE\020C\022\020\n\014UNIT" +
      "_CELSIUS\020D\022\023\n\017UNIT_FAHRENHEIT\020E\022\017\n\013UNIT_" +
      "KELVIN\020F\022\030\n\024UNIT_FLOP_PER_SECOND\020G\022\034\n\030UN" +
      "IT_KILOFLOP_PER_SECOND\020H\022\034\n\030UNIT_MEGAFLO" +
      "P_PER_SECOND\020I\022\034\n\030UNIT_GIGAFLOP_PER_SECO" +
      "ND\020J\022\034\n\030UNIT_PETAFLOP_PER_SECOND\020K\022\033\n\027UN" +
      "IT_EXAFLOP_PER_SECOND\020L\022\032\n\026UNIT_METERS_P" +
      "ER_SECOND\020M\022\034\n\030UNIT_KILOMETERS_PER_HOUR\020" +
      "N\022\027\n\023UNIT_MILES_PER_HOUR\020O\022\023\n\017UNIT_MILLI" +
      "METER\020P\022\023\n\017UNIT_CENTIMETER\020Q\022\016\n\nUNIT_MET" +
      "ER\020R\022\022\n\016UNIT_KILOMETER\020S\022\r\n\tUNIT_MILE\020T\022" +
      "\014\n\010UNIT_PPM\020U\022\032\n\026UNIT_EVENTS_PER_SECOND\020" +
      "V\022\020\n\014UNIT_PACKETS\020W\022\014\n\010UNIT_DBM\020X\022\024\n\020UNI" +
      "T_VIRTUAL_CPU\020Y\022\034\n\030UNIT_MESSAGES_PER_SEC" +
      "OND\020Z\022\025\n\021UNIT_NANOCORE_CPU\020[\022\026\n\022UNIT_MIC" +
      "ROCORE_CPU\020\\\022\026\n\022UNIT_MILLICORE_CPU\020]\022\021\n\r" +
      "UNIT_CORE_CPU\020^Bk\n\036yandex.cloud.api.moni" +
      "toring.v3ZIgithub.com/yandex-cloud/go-ge" +
      "nproto/yandex/cloud/monitoring/v3;monito" +
      "ringb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
